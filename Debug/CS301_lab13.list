
CS301_lab13.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a718  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000018b4  0800a900  0800a900  0001a900  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c1b4  0800c1b4  00020090  2**0
                  CONTENTS
  4 .ARM          00000000  0800c1b4  0800c1b4  00020090  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c1b4  0800c1b4  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c1b4  0800c1b4  0001c1b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c1b8  0800c1b8  0001c1b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  0800c1bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000d98  20000090  0800c24c  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000e28  0800c24c  00020e28  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c8bd  00000000  00000000  000200b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002373  00000000  00000000  0002c976  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000a78  00000000  00000000  0002ecf0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000950  00000000  00000000  0002f768  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001712d  00000000  00000000  000300b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a72f  00000000  00000000  000471e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007c17d  00000000  00000000  00051914  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000cda91  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d80  00000000  00000000  000cdb0c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	20000090 	.word	0x20000090
 8000204:	00000000 	.word	0x00000000
 8000208:	0800a8e8 	.word	0x0800a8e8

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	20000094 	.word	0x20000094
 8000224:	0800a8e8 	.word	0x0800a8e8

08000228 <__aeabi_drsub>:
 8000228:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800022c:	e002      	b.n	8000234 <__adddf3>
 800022e:	bf00      	nop

08000230 <__aeabi_dsub>:
 8000230:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000234 <__adddf3>:
 8000234:	b530      	push	{r4, r5, lr}
 8000236:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800023a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800023e:	ea94 0f05 	teq	r4, r5
 8000242:	bf08      	it	eq
 8000244:	ea90 0f02 	teqeq	r0, r2
 8000248:	bf1f      	itttt	ne
 800024a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800024e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000252:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000256:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800025a:	f000 80e2 	beq.w	8000422 <__adddf3+0x1ee>
 800025e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000262:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000266:	bfb8      	it	lt
 8000268:	426d      	neglt	r5, r5
 800026a:	dd0c      	ble.n	8000286 <__adddf3+0x52>
 800026c:	442c      	add	r4, r5
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	ea82 0000 	eor.w	r0, r2, r0
 800027a:	ea83 0101 	eor.w	r1, r3, r1
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	2d36      	cmp	r5, #54	; 0x36
 8000288:	bf88      	it	hi
 800028a:	bd30      	pophi	{r4, r5, pc}
 800028c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000290:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000294:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000298:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800029c:	d002      	beq.n	80002a4 <__adddf3+0x70>
 800029e:	4240      	negs	r0, r0
 80002a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002a4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002ac:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b0:	d002      	beq.n	80002b8 <__adddf3+0x84>
 80002b2:	4252      	negs	r2, r2
 80002b4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b8:	ea94 0f05 	teq	r4, r5
 80002bc:	f000 80a7 	beq.w	800040e <__adddf3+0x1da>
 80002c0:	f1a4 0401 	sub.w	r4, r4, #1
 80002c4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c8:	db0d      	blt.n	80002e6 <__adddf3+0xb2>
 80002ca:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ce:	fa22 f205 	lsr.w	r2, r2, r5
 80002d2:	1880      	adds	r0, r0, r2
 80002d4:	f141 0100 	adc.w	r1, r1, #0
 80002d8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002dc:	1880      	adds	r0, r0, r2
 80002de:	fa43 f305 	asr.w	r3, r3, r5
 80002e2:	4159      	adcs	r1, r3
 80002e4:	e00e      	b.n	8000304 <__adddf3+0xd0>
 80002e6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ea:	f10e 0e20 	add.w	lr, lr, #32
 80002ee:	2a01      	cmp	r2, #1
 80002f0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002f4:	bf28      	it	cs
 80002f6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002fa:	fa43 f305 	asr.w	r3, r3, r5
 80002fe:	18c0      	adds	r0, r0, r3
 8000300:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000304:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000308:	d507      	bpl.n	800031a <__adddf3+0xe6>
 800030a:	f04f 0e00 	mov.w	lr, #0
 800030e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000312:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000316:	eb6e 0101 	sbc.w	r1, lr, r1
 800031a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800031e:	d31b      	bcc.n	8000358 <__adddf3+0x124>
 8000320:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000324:	d30c      	bcc.n	8000340 <__adddf3+0x10c>
 8000326:	0849      	lsrs	r1, r1, #1
 8000328:	ea5f 0030 	movs.w	r0, r0, rrx
 800032c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000330:	f104 0401 	add.w	r4, r4, #1
 8000334:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000338:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800033c:	f080 809a 	bcs.w	8000474 <__adddf3+0x240>
 8000340:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000344:	bf08      	it	eq
 8000346:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800034a:	f150 0000 	adcs.w	r0, r0, #0
 800034e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000352:	ea41 0105 	orr.w	r1, r1, r5
 8000356:	bd30      	pop	{r4, r5, pc}
 8000358:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800035c:	4140      	adcs	r0, r0
 800035e:	eb41 0101 	adc.w	r1, r1, r1
 8000362:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000366:	f1a4 0401 	sub.w	r4, r4, #1
 800036a:	d1e9      	bne.n	8000340 <__adddf3+0x10c>
 800036c:	f091 0f00 	teq	r1, #0
 8000370:	bf04      	itt	eq
 8000372:	4601      	moveq	r1, r0
 8000374:	2000      	moveq	r0, #0
 8000376:	fab1 f381 	clz	r3, r1
 800037a:	bf08      	it	eq
 800037c:	3320      	addeq	r3, #32
 800037e:	f1a3 030b 	sub.w	r3, r3, #11
 8000382:	f1b3 0220 	subs.w	r2, r3, #32
 8000386:	da0c      	bge.n	80003a2 <__adddf3+0x16e>
 8000388:	320c      	adds	r2, #12
 800038a:	dd08      	ble.n	800039e <__adddf3+0x16a>
 800038c:	f102 0c14 	add.w	ip, r2, #20
 8000390:	f1c2 020c 	rsb	r2, r2, #12
 8000394:	fa01 f00c 	lsl.w	r0, r1, ip
 8000398:	fa21 f102 	lsr.w	r1, r1, r2
 800039c:	e00c      	b.n	80003b8 <__adddf3+0x184>
 800039e:	f102 0214 	add.w	r2, r2, #20
 80003a2:	bfd8      	it	le
 80003a4:	f1c2 0c20 	rsble	ip, r2, #32
 80003a8:	fa01 f102 	lsl.w	r1, r1, r2
 80003ac:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b0:	bfdc      	itt	le
 80003b2:	ea41 010c 	orrle.w	r1, r1, ip
 80003b6:	4090      	lslle	r0, r2
 80003b8:	1ae4      	subs	r4, r4, r3
 80003ba:	bfa2      	ittt	ge
 80003bc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c0:	4329      	orrge	r1, r5
 80003c2:	bd30      	popge	{r4, r5, pc}
 80003c4:	ea6f 0404 	mvn.w	r4, r4
 80003c8:	3c1f      	subs	r4, #31
 80003ca:	da1c      	bge.n	8000406 <__adddf3+0x1d2>
 80003cc:	340c      	adds	r4, #12
 80003ce:	dc0e      	bgt.n	80003ee <__adddf3+0x1ba>
 80003d0:	f104 0414 	add.w	r4, r4, #20
 80003d4:	f1c4 0220 	rsb	r2, r4, #32
 80003d8:	fa20 f004 	lsr.w	r0, r0, r4
 80003dc:	fa01 f302 	lsl.w	r3, r1, r2
 80003e0:	ea40 0003 	orr.w	r0, r0, r3
 80003e4:	fa21 f304 	lsr.w	r3, r1, r4
 80003e8:	ea45 0103 	orr.w	r1, r5, r3
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f1c4 040c 	rsb	r4, r4, #12
 80003f2:	f1c4 0220 	rsb	r2, r4, #32
 80003f6:	fa20 f002 	lsr.w	r0, r0, r2
 80003fa:	fa01 f304 	lsl.w	r3, r1, r4
 80003fe:	ea40 0003 	orr.w	r0, r0, r3
 8000402:	4629      	mov	r1, r5
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	fa21 f004 	lsr.w	r0, r1, r4
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	f094 0f00 	teq	r4, #0
 8000412:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000416:	bf06      	itte	eq
 8000418:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800041c:	3401      	addeq	r4, #1
 800041e:	3d01      	subne	r5, #1
 8000420:	e74e      	b.n	80002c0 <__adddf3+0x8c>
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf18      	it	ne
 8000428:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800042c:	d029      	beq.n	8000482 <__adddf3+0x24e>
 800042e:	ea94 0f05 	teq	r4, r5
 8000432:	bf08      	it	eq
 8000434:	ea90 0f02 	teqeq	r0, r2
 8000438:	d005      	beq.n	8000446 <__adddf3+0x212>
 800043a:	ea54 0c00 	orrs.w	ip, r4, r0
 800043e:	bf04      	itt	eq
 8000440:	4619      	moveq	r1, r3
 8000442:	4610      	moveq	r0, r2
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	ea91 0f03 	teq	r1, r3
 800044a:	bf1e      	ittt	ne
 800044c:	2100      	movne	r1, #0
 800044e:	2000      	movne	r0, #0
 8000450:	bd30      	popne	{r4, r5, pc}
 8000452:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000456:	d105      	bne.n	8000464 <__adddf3+0x230>
 8000458:	0040      	lsls	r0, r0, #1
 800045a:	4149      	adcs	r1, r1
 800045c:	bf28      	it	cs
 800045e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000462:	bd30      	pop	{r4, r5, pc}
 8000464:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000468:	bf3c      	itt	cc
 800046a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800046e:	bd30      	popcc	{r4, r5, pc}
 8000470:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000474:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000478:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800047c:	f04f 0000 	mov.w	r0, #0
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000486:	bf1a      	itte	ne
 8000488:	4619      	movne	r1, r3
 800048a:	4610      	movne	r0, r2
 800048c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000490:	bf1c      	itt	ne
 8000492:	460b      	movne	r3, r1
 8000494:	4602      	movne	r2, r0
 8000496:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800049a:	bf06      	itte	eq
 800049c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a0:	ea91 0f03 	teqeq	r1, r3
 80004a4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	bf00      	nop

080004ac <__aeabi_ui2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f04f 0500 	mov.w	r5, #0
 80004c4:	f04f 0100 	mov.w	r1, #0
 80004c8:	e750      	b.n	800036c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_i2d>:
 80004cc:	f090 0f00 	teq	r0, #0
 80004d0:	bf04      	itt	eq
 80004d2:	2100      	moveq	r1, #0
 80004d4:	4770      	bxeq	lr
 80004d6:	b530      	push	{r4, r5, lr}
 80004d8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004dc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004e4:	bf48      	it	mi
 80004e6:	4240      	negmi	r0, r0
 80004e8:	f04f 0100 	mov.w	r1, #0
 80004ec:	e73e      	b.n	800036c <__adddf3+0x138>
 80004ee:	bf00      	nop

080004f0 <__aeabi_f2d>:
 80004f0:	0042      	lsls	r2, r0, #1
 80004f2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004f6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004fa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004fe:	bf1f      	itttt	ne
 8000500:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000504:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000508:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800050c:	4770      	bxne	lr
 800050e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000512:	bf08      	it	eq
 8000514:	4770      	bxeq	lr
 8000516:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800051a:	bf04      	itt	eq
 800051c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000520:	4770      	bxeq	lr
 8000522:	b530      	push	{r4, r5, lr}
 8000524:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000530:	e71c      	b.n	800036c <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_ul2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f04f 0500 	mov.w	r5, #0
 8000542:	e00a      	b.n	800055a <__aeabi_l2d+0x16>

08000544 <__aeabi_l2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000552:	d502      	bpl.n	800055a <__aeabi_l2d+0x16>
 8000554:	4240      	negs	r0, r0
 8000556:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800055a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800055e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000562:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000566:	f43f aed8 	beq.w	800031a <__adddf3+0xe6>
 800056a:	f04f 0203 	mov.w	r2, #3
 800056e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000572:	bf18      	it	ne
 8000574:	3203      	addne	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000582:	f1c2 0320 	rsb	r3, r2, #32
 8000586:	fa00 fc03 	lsl.w	ip, r0, r3
 800058a:	fa20 f002 	lsr.w	r0, r0, r2
 800058e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000592:	ea40 000e 	orr.w	r0, r0, lr
 8000596:	fa21 f102 	lsr.w	r1, r1, r2
 800059a:	4414      	add	r4, r2
 800059c:	e6bd      	b.n	800031a <__adddf3+0xe6>
 800059e:	bf00      	nop

080005a0 <__aeabi_dmul>:
 80005a0:	b570      	push	{r4, r5, r6, lr}
 80005a2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005a6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005ae:	bf1d      	ittte	ne
 80005b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005b4:	ea94 0f0c 	teqne	r4, ip
 80005b8:	ea95 0f0c 	teqne	r5, ip
 80005bc:	f000 f8de 	bleq	800077c <__aeabi_dmul+0x1dc>
 80005c0:	442c      	add	r4, r5
 80005c2:	ea81 0603 	eor.w	r6, r1, r3
 80005c6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ca:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ce:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005d2:	bf18      	it	ne
 80005d4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e0:	d038      	beq.n	8000654 <__aeabi_dmul+0xb4>
 80005e2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ee:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005f2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005f6:	f04f 0600 	mov.w	r6, #0
 80005fa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005fe:	f09c 0f00 	teq	ip, #0
 8000602:	bf18      	it	ne
 8000604:	f04e 0e01 	orrne.w	lr, lr, #1
 8000608:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800060c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000610:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000614:	d204      	bcs.n	8000620 <__aeabi_dmul+0x80>
 8000616:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800061a:	416d      	adcs	r5, r5
 800061c:	eb46 0606 	adc.w	r6, r6, r6
 8000620:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000624:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000628:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800062c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000630:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000634:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000638:	bf88      	it	hi
 800063a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800063e:	d81e      	bhi.n	800067e <__aeabi_dmul+0xde>
 8000640:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000644:	bf08      	it	eq
 8000646:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800064a:	f150 0000 	adcs.w	r0, r0, #0
 800064e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000652:	bd70      	pop	{r4, r5, r6, pc}
 8000654:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000658:	ea46 0101 	orr.w	r1, r6, r1
 800065c:	ea40 0002 	orr.w	r0, r0, r2
 8000660:	ea81 0103 	eor.w	r1, r1, r3
 8000664:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000668:	bfc2      	ittt	gt
 800066a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800066e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000672:	bd70      	popgt	{r4, r5, r6, pc}
 8000674:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000678:	f04f 0e00 	mov.w	lr, #0
 800067c:	3c01      	subs	r4, #1
 800067e:	f300 80ab 	bgt.w	80007d8 <__aeabi_dmul+0x238>
 8000682:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000686:	bfde      	ittt	le
 8000688:	2000      	movle	r0, #0
 800068a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800068e:	bd70      	pople	{r4, r5, r6, pc}
 8000690:	f1c4 0400 	rsb	r4, r4, #0
 8000694:	3c20      	subs	r4, #32
 8000696:	da35      	bge.n	8000704 <__aeabi_dmul+0x164>
 8000698:	340c      	adds	r4, #12
 800069a:	dc1b      	bgt.n	80006d4 <__aeabi_dmul+0x134>
 800069c:	f104 0414 	add.w	r4, r4, #20
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f305 	lsl.w	r3, r0, r5
 80006a8:	fa20 f004 	lsr.w	r0, r0, r4
 80006ac:	fa01 f205 	lsl.w	r2, r1, r5
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c0:	fa21 f604 	lsr.w	r6, r1, r4
 80006c4:	eb42 0106 	adc.w	r1, r2, r6
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f1c4 040c 	rsb	r4, r4, #12
 80006d8:	f1c4 0520 	rsb	r5, r4, #32
 80006dc:	fa00 f304 	lsl.w	r3, r0, r4
 80006e0:	fa20 f005 	lsr.w	r0, r0, r5
 80006e4:	fa01 f204 	lsl.w	r2, r1, r4
 80006e8:	ea40 0002 	orr.w	r0, r0, r2
 80006ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006f4:	f141 0100 	adc.w	r1, r1, #0
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f1c4 0520 	rsb	r5, r4, #32
 8000708:	fa00 f205 	lsl.w	r2, r0, r5
 800070c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000710:	fa20 f304 	lsr.w	r3, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea43 0302 	orr.w	r3, r3, r2
 800071c:	fa21 f004 	lsr.w	r0, r1, r4
 8000720:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000724:	fa21 f204 	lsr.w	r2, r1, r4
 8000728:	ea20 0002 	bic.w	r0, r0, r2
 800072c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f094 0f00 	teq	r4, #0
 8000740:	d10f      	bne.n	8000762 <__aeabi_dmul+0x1c2>
 8000742:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000746:	0040      	lsls	r0, r0, #1
 8000748:	eb41 0101 	adc.w	r1, r1, r1
 800074c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3c01      	subeq	r4, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1a6>
 8000756:	ea41 0106 	orr.w	r1, r1, r6
 800075a:	f095 0f00 	teq	r5, #0
 800075e:	bf18      	it	ne
 8000760:	4770      	bxne	lr
 8000762:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000766:	0052      	lsls	r2, r2, #1
 8000768:	eb43 0303 	adc.w	r3, r3, r3
 800076c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000770:	bf08      	it	eq
 8000772:	3d01      	subeq	r5, #1
 8000774:	d0f7      	beq.n	8000766 <__aeabi_dmul+0x1c6>
 8000776:	ea43 0306 	orr.w	r3, r3, r6
 800077a:	4770      	bx	lr
 800077c:	ea94 0f0c 	teq	r4, ip
 8000780:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000784:	bf18      	it	ne
 8000786:	ea95 0f0c 	teqne	r5, ip
 800078a:	d00c      	beq.n	80007a6 <__aeabi_dmul+0x206>
 800078c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000790:	bf18      	it	ne
 8000792:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000796:	d1d1      	bne.n	800073c <__aeabi_dmul+0x19c>
 8000798:	ea81 0103 	eor.w	r1, r1, r3
 800079c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a0:	f04f 0000 	mov.w	r0, #0
 80007a4:	bd70      	pop	{r4, r5, r6, pc}
 80007a6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007aa:	bf06      	itte	eq
 80007ac:	4610      	moveq	r0, r2
 80007ae:	4619      	moveq	r1, r3
 80007b0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007b4:	d019      	beq.n	80007ea <__aeabi_dmul+0x24a>
 80007b6:	ea94 0f0c 	teq	r4, ip
 80007ba:	d102      	bne.n	80007c2 <__aeabi_dmul+0x222>
 80007bc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c0:	d113      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007c2:	ea95 0f0c 	teq	r5, ip
 80007c6:	d105      	bne.n	80007d4 <__aeabi_dmul+0x234>
 80007c8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007cc:	bf1c      	itt	ne
 80007ce:	4610      	movne	r0, r2
 80007d0:	4619      	movne	r1, r3
 80007d2:	d10a      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007d4:	ea81 0103 	eor.w	r1, r1, r3
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007e4:	f04f 0000 	mov.w	r0, #0
 80007e8:	bd70      	pop	{r4, r5, r6, pc}
 80007ea:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ee:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007f2:	bd70      	pop	{r4, r5, r6, pc}

080007f4 <__aeabi_ddiv>:
 80007f4:	b570      	push	{r4, r5, r6, lr}
 80007f6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007fa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007fe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000802:	bf1d      	ittte	ne
 8000804:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000808:	ea94 0f0c 	teqne	r4, ip
 800080c:	ea95 0f0c 	teqne	r5, ip
 8000810:	f000 f8a7 	bleq	8000962 <__aeabi_ddiv+0x16e>
 8000814:	eba4 0405 	sub.w	r4, r4, r5
 8000818:	ea81 0e03 	eor.w	lr, r1, r3
 800081c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000820:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000824:	f000 8088 	beq.w	8000938 <__aeabi_ddiv+0x144>
 8000828:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800082c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000830:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000834:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000838:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800083c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000840:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000844:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000848:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800084c:	429d      	cmp	r5, r3
 800084e:	bf08      	it	eq
 8000850:	4296      	cmpeq	r6, r2
 8000852:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000856:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800085a:	d202      	bcs.n	8000862 <__aeabi_ddiv+0x6e>
 800085c:	085b      	lsrs	r3, r3, #1
 800085e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000862:	1ab6      	subs	r6, r6, r2
 8000864:	eb65 0503 	sbc.w	r5, r5, r3
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000872:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 000c 	orrcs.w	r0, r0, ip
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008d4:	d018      	beq.n	8000908 <__aeabi_ddiv+0x114>
 80008d6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008da:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008de:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008e2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008e6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ea:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ee:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008f2:	d1c0      	bne.n	8000876 <__aeabi_ddiv+0x82>
 80008f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f8:	d10b      	bne.n	8000912 <__aeabi_ddiv+0x11e>
 80008fa:	ea41 0100 	orr.w	r1, r1, r0
 80008fe:	f04f 0000 	mov.w	r0, #0
 8000902:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000906:	e7b6      	b.n	8000876 <__aeabi_ddiv+0x82>
 8000908:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800090c:	bf04      	itt	eq
 800090e:	4301      	orreq	r1, r0
 8000910:	2000      	moveq	r0, #0
 8000912:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000916:	bf88      	it	hi
 8000918:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800091c:	f63f aeaf 	bhi.w	800067e <__aeabi_dmul+0xde>
 8000920:	ebb5 0c03 	subs.w	ip, r5, r3
 8000924:	bf04      	itt	eq
 8000926:	ebb6 0c02 	subseq.w	ip, r6, r2
 800092a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800092e:	f150 0000 	adcs.w	r0, r0, #0
 8000932:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000936:	bd70      	pop	{r4, r5, r6, pc}
 8000938:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800093c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000940:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000944:	bfc2      	ittt	gt
 8000946:	ebd4 050c 	rsbsgt	r5, r4, ip
 800094a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800094e:	bd70      	popgt	{r4, r5, r6, pc}
 8000950:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000954:	f04f 0e00 	mov.w	lr, #0
 8000958:	3c01      	subs	r4, #1
 800095a:	e690      	b.n	800067e <__aeabi_dmul+0xde>
 800095c:	ea45 0e06 	orr.w	lr, r5, r6
 8000960:	e68d      	b.n	800067e <__aeabi_dmul+0xde>
 8000962:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000966:	ea94 0f0c 	teq	r4, ip
 800096a:	bf08      	it	eq
 800096c:	ea95 0f0c 	teqeq	r5, ip
 8000970:	f43f af3b 	beq.w	80007ea <__aeabi_dmul+0x24a>
 8000974:	ea94 0f0c 	teq	r4, ip
 8000978:	d10a      	bne.n	8000990 <__aeabi_ddiv+0x19c>
 800097a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800097e:	f47f af34 	bne.w	80007ea <__aeabi_dmul+0x24a>
 8000982:	ea95 0f0c 	teq	r5, ip
 8000986:	f47f af25 	bne.w	80007d4 <__aeabi_dmul+0x234>
 800098a:	4610      	mov	r0, r2
 800098c:	4619      	mov	r1, r3
 800098e:	e72c      	b.n	80007ea <__aeabi_dmul+0x24a>
 8000990:	ea95 0f0c 	teq	r5, ip
 8000994:	d106      	bne.n	80009a4 <__aeabi_ddiv+0x1b0>
 8000996:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800099a:	f43f aefd 	beq.w	8000798 <__aeabi_dmul+0x1f8>
 800099e:	4610      	mov	r0, r2
 80009a0:	4619      	mov	r1, r3
 80009a2:	e722      	b.n	80007ea <__aeabi_dmul+0x24a>
 80009a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009a8:	bf18      	it	ne
 80009aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009ae:	f47f aec5 	bne.w	800073c <__aeabi_dmul+0x19c>
 80009b2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009b6:	f47f af0d 	bne.w	80007d4 <__aeabi_dmul+0x234>
 80009ba:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009be:	f47f aeeb 	bne.w	8000798 <__aeabi_dmul+0x1f8>
 80009c2:	e712      	b.n	80007ea <__aeabi_dmul+0x24a>

080009c4 <__aeabi_d2uiz>:
 80009c4:	004a      	lsls	r2, r1, #1
 80009c6:	d211      	bcs.n	80009ec <__aeabi_d2uiz+0x28>
 80009c8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009cc:	d211      	bcs.n	80009f2 <__aeabi_d2uiz+0x2e>
 80009ce:	d50d      	bpl.n	80009ec <__aeabi_d2uiz+0x28>
 80009d0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009d4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009d8:	d40e      	bmi.n	80009f8 <__aeabi_d2uiz+0x34>
 80009da:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009de:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009e2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009e6:	fa23 f002 	lsr.w	r0, r3, r2
 80009ea:	4770      	bx	lr
 80009ec:	f04f 0000 	mov.w	r0, #0
 80009f0:	4770      	bx	lr
 80009f2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009f6:	d102      	bne.n	80009fe <__aeabi_d2uiz+0x3a>
 80009f8:	f04f 30ff 	mov.w	r0, #4294967295
 80009fc:	4770      	bx	lr
 80009fe:	f04f 0000 	mov.w	r0, #0
 8000a02:	4770      	bx	lr

08000a04 <draw_my_plane>:

void draw_right_triangle(int x, int y, int width, int height);

void draw_trapezoid(int x, int y, int upper_width, int lower_width, int height);

void draw_my_plane(int x, int y){
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b084      	sub	sp, #16
 8000a08:	af02      	add	r7, sp, #8
 8000a0a:	6078      	str	r0, [r7, #4]
 8000a0c:	6039      	str	r1, [r7, #0]
	draw_rectangle(x, y, 4, 24);
 8000a0e:	2318      	movs	r3, #24
 8000a10:	2204      	movs	r2, #4
 8000a12:	6839      	ldr	r1, [r7, #0]
 8000a14:	6878      	ldr	r0, [r7, #4]
 8000a16:	f000 f987 	bl	8000d28 <draw_rectangle>
	draw_left_triangle(x, y + 16, 12, 9);
 8000a1a:	683b      	ldr	r3, [r7, #0]
 8000a1c:	f103 0110 	add.w	r1, r3, #16
 8000a20:	2309      	movs	r3, #9
 8000a22:	220c      	movs	r2, #12
 8000a24:	6878      	ldr	r0, [r7, #4]
 8000a26:	f000 f9c6 	bl	8000db6 <draw_left_triangle>
	draw_right_triangle(x + 4, y + 16, 12, 9);
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	1d18      	adds	r0, r3, #4
 8000a2e:	683b      	ldr	r3, [r7, #0]
 8000a30:	f103 0110 	add.w	r1, r3, #16
 8000a34:	2309      	movs	r3, #9
 8000a36:	220c      	movs	r2, #12
 8000a38:	f000 f9f6 	bl	8000e28 <draw_right_triangle>
	draw_trapezoid(x + 2, y + 24, 6, 14, 4);
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	1c98      	adds	r0, r3, #2
 8000a40:	683b      	ldr	r3, [r7, #0]
 8000a42:	f103 0118 	add.w	r1, r3, #24
 8000a46:	2304      	movs	r3, #4
 8000a48:	9300      	str	r3, [sp, #0]
 8000a4a:	230e      	movs	r3, #14
 8000a4c:	2206      	movs	r2, #6
 8000a4e:	f000 fa24 	bl	8000e9a <draw_trapezoid>

}
 8000a52:	bf00      	nop
 8000a54:	3708      	adds	r7, #8
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
	...

08000a5c <draw_enemy_plane>:

void draw_enemy_plane(int x ,int y){
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b082      	sub	sp, #8
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
 8000a64:	6039      	str	r1, [r7, #0]
	draw_reversed_trigon(x,y-15,big_trigon_width,big_trigon_height);
 8000a66:	683b      	ldr	r3, [r7, #0]
 8000a68:	f1a3 010f 	sub.w	r1, r3, #15
 8000a6c:	4b0a      	ldr	r3, [pc, #40]	; (8000a98 <draw_enemy_plane+0x3c>)
 8000a6e:	681a      	ldr	r2, [r3, #0]
 8000a70:	4b0a      	ldr	r3, [pc, #40]	; (8000a9c <draw_enemy_plane+0x40>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	6878      	ldr	r0, [r7, #4]
 8000a76:	f000 f913 	bl	8000ca0 <draw_reversed_trigon>
	draw_reversed_trigon(x,y-20,small_trigon_width,small_trigon_height);
 8000a7a:	683b      	ldr	r3, [r7, #0]
 8000a7c:	f1a3 0114 	sub.w	r1, r3, #20
 8000a80:	4b07      	ldr	r3, [pc, #28]	; (8000aa0 <draw_enemy_plane+0x44>)
 8000a82:	681a      	ldr	r2, [r3, #0]
 8000a84:	4b07      	ldr	r3, [pc, #28]	; (8000aa4 <draw_enemy_plane+0x48>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	6878      	ldr	r0, [r7, #4]
 8000a8a:	f000 f909 	bl	8000ca0 <draw_reversed_trigon>
}
 8000a8e:	bf00      	nop
 8000a90:	3708      	adds	r7, #8
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	20000000 	.word	0x20000000
 8000a9c:	20000004 	.word	0x20000004
 8000aa0:	20000008 	.word	0x20000008
 8000aa4:	2000000c 	.word	0x2000000c

08000aa8 <draw_boss>:

void draw_boss(int x, int y){
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b082      	sub	sp, #8
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
 8000ab0:	6039      	str	r1, [r7, #0]
	if(x != 0){
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d018      	beq.n	8000aea <draw_boss+0x42>
		if(y != 0){
 8000ab8:	683b      	ldr	r3, [r7, #0]
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d015      	beq.n	8000aea <draw_boss+0x42>
			draw_reversed_trigon(x,y-15,big_trigon_width*2,big_trigon_height);
 8000abe:	683b      	ldr	r3, [r7, #0]
 8000ac0:	f1a3 010f 	sub.w	r1, r3, #15
 8000ac4:	4b0b      	ldr	r3, [pc, #44]	; (8000af4 <draw_boss+0x4c>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	005a      	lsls	r2, r3, #1
 8000aca:	4b0b      	ldr	r3, [pc, #44]	; (8000af8 <draw_boss+0x50>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	6878      	ldr	r0, [r7, #4]
 8000ad0:	f000 f8e6 	bl	8000ca0 <draw_reversed_trigon>
			draw_reversed_trigon(x,y-20,small_trigon_width*2,small_trigon_height);
 8000ad4:	683b      	ldr	r3, [r7, #0]
 8000ad6:	f1a3 0114 	sub.w	r1, r3, #20
 8000ada:	4b08      	ldr	r3, [pc, #32]	; (8000afc <draw_boss+0x54>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	005a      	lsls	r2, r3, #1
 8000ae0:	4b07      	ldr	r3, [pc, #28]	; (8000b00 <draw_boss+0x58>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	6878      	ldr	r0, [r7, #4]
 8000ae6:	f000 f8db 	bl	8000ca0 <draw_reversed_trigon>
		}
	}
}
 8000aea:	bf00      	nop
 8000aec:	3708      	adds	r7, #8
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	20000000 	.word	0x20000000
 8000af8:	20000004 	.word	0x20000004
 8000afc:	20000008 	.word	0x20000008
 8000b00:	2000000c 	.word	0x2000000c

08000b04 <draw_my_bullet>:

void draw_my_bullet(int x, int y){
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b082      	sub	sp, #8
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
 8000b0c:	6039      	str	r1, [r7, #0]
	LCD_Fast_DrawPoint(x, y-1, BULLET_COLOR);
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	b298      	uxth	r0, r3
 8000b12:	683b      	ldr	r3, [r7, #0]
 8000b14:	b29b      	uxth	r3, r3
 8000b16:	3b01      	subs	r3, #1
 8000b18:	b29b      	uxth	r3, r3
 8000b1a:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8000b1e:	4619      	mov	r1, r3
 8000b20:	f001 fb84 	bl	800222c <LCD_Fast_DrawPoint>
	LCD_Fast_DrawPoint(x-1, y, BULLET_COLOR);
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	b29b      	uxth	r3, r3
 8000b28:	3b01      	subs	r3, #1
 8000b2a:	b29b      	uxth	r3, r3
 8000b2c:	683a      	ldr	r2, [r7, #0]
 8000b2e:	b291      	uxth	r1, r2
 8000b30:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8000b34:	4618      	mov	r0, r3
 8000b36:	f001 fb79 	bl	800222c <LCD_Fast_DrawPoint>
	LCD_Fast_DrawPoint(x, y, BULLET_COLOR);
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	b29b      	uxth	r3, r3
 8000b3e:	683a      	ldr	r2, [r7, #0]
 8000b40:	b291      	uxth	r1, r2
 8000b42:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8000b46:	4618      	mov	r0, r3
 8000b48:	f001 fb70 	bl	800222c <LCD_Fast_DrawPoint>
	LCD_Fast_DrawPoint(x+1, y, BULLET_COLOR);
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	b29b      	uxth	r3, r3
 8000b50:	3301      	adds	r3, #1
 8000b52:	b29b      	uxth	r3, r3
 8000b54:	683a      	ldr	r2, [r7, #0]
 8000b56:	b291      	uxth	r1, r2
 8000b58:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	f001 fb65 	bl	800222c <LCD_Fast_DrawPoint>
	LCD_Fast_DrawPoint(x-1, y+1, BULLET_COLOR);
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	b29b      	uxth	r3, r3
 8000b66:	3b01      	subs	r3, #1
 8000b68:	b298      	uxth	r0, r3
 8000b6a:	683b      	ldr	r3, [r7, #0]
 8000b6c:	b29b      	uxth	r3, r3
 8000b6e:	3301      	adds	r3, #1
 8000b70:	b29b      	uxth	r3, r3
 8000b72:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8000b76:	4619      	mov	r1, r3
 8000b78:	f001 fb58 	bl	800222c <LCD_Fast_DrawPoint>
	LCD_Fast_DrawPoint(x, y+1, BULLET_COLOR);
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	b298      	uxth	r0, r3
 8000b80:	683b      	ldr	r3, [r7, #0]
 8000b82:	b29b      	uxth	r3, r3
 8000b84:	3301      	adds	r3, #1
 8000b86:	b29b      	uxth	r3, r3
 8000b88:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	f001 fb4d 	bl	800222c <LCD_Fast_DrawPoint>
	LCD_Fast_DrawPoint(x+1, y+1, BULLET_COLOR);
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	b29b      	uxth	r3, r3
 8000b96:	3301      	adds	r3, #1
 8000b98:	b298      	uxth	r0, r3
 8000b9a:	683b      	ldr	r3, [r7, #0]
 8000b9c:	b29b      	uxth	r3, r3
 8000b9e:	3301      	adds	r3, #1
 8000ba0:	b29b      	uxth	r3, r3
 8000ba2:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	f001 fb40 	bl	800222c <LCD_Fast_DrawPoint>
//	LCD_DrawPoint(x+1,y);
//
//	LCD_DrawPoint(x-1,y+1);
//	LCD_DrawPoint(x,y+1);
//	LCD_DrawPoint(x+1,y+1);
}
 8000bac:	bf00      	nop
 8000bae:	3708      	adds	r7, #8
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}

08000bb4 <draw_enemy_bullet>:

void draw_enemy_bullet(int x, int y){
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b082      	sub	sp, #8
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
 8000bbc:	6039      	str	r1, [r7, #0]
	LCD_DrawPoint(x-1,y-1);
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	b29b      	uxth	r3, r3
 8000bc2:	3b01      	subs	r3, #1
 8000bc4:	b29a      	uxth	r2, r3
 8000bc6:	683b      	ldr	r3, [r7, #0]
 8000bc8:	b29b      	uxth	r3, r3
 8000bca:	3b01      	subs	r3, #1
 8000bcc:	b29b      	uxth	r3, r3
 8000bce:	4619      	mov	r1, r3
 8000bd0:	4610      	mov	r0, r2
 8000bd2:	f001 fafb 	bl	80021cc <LCD_DrawPoint>
	LCD_DrawPoint(x,y-1);
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	b29a      	uxth	r2, r3
 8000bda:	683b      	ldr	r3, [r7, #0]
 8000bdc:	b29b      	uxth	r3, r3
 8000bde:	3b01      	subs	r3, #1
 8000be0:	b29b      	uxth	r3, r3
 8000be2:	4619      	mov	r1, r3
 8000be4:	4610      	mov	r0, r2
 8000be6:	f001 faf1 	bl	80021cc <LCD_DrawPoint>
	LCD_DrawPoint(x+1,y-1);
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	b29b      	uxth	r3, r3
 8000bee:	3301      	adds	r3, #1
 8000bf0:	b29a      	uxth	r2, r3
 8000bf2:	683b      	ldr	r3, [r7, #0]
 8000bf4:	b29b      	uxth	r3, r3
 8000bf6:	3b01      	subs	r3, #1
 8000bf8:	b29b      	uxth	r3, r3
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	4610      	mov	r0, r2
 8000bfe:	f001 fae5 	bl	80021cc <LCD_DrawPoint>
	
	LCD_DrawPoint(x-1,y);
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	b29b      	uxth	r3, r3
 8000c06:	3b01      	subs	r3, #1
 8000c08:	b29b      	uxth	r3, r3
 8000c0a:	683a      	ldr	r2, [r7, #0]
 8000c0c:	b292      	uxth	r2, r2
 8000c0e:	4611      	mov	r1, r2
 8000c10:	4618      	mov	r0, r3
 8000c12:	f001 fadb 	bl	80021cc <LCD_DrawPoint>
	LCD_DrawPoint(x,y);
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	b29b      	uxth	r3, r3
 8000c1a:	683a      	ldr	r2, [r7, #0]
 8000c1c:	b292      	uxth	r2, r2
 8000c1e:	4611      	mov	r1, r2
 8000c20:	4618      	mov	r0, r3
 8000c22:	f001 fad3 	bl	80021cc <LCD_DrawPoint>
	LCD_DrawPoint(x+1,y);
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	b29b      	uxth	r3, r3
 8000c2a:	3301      	adds	r3, #1
 8000c2c:	b29b      	uxth	r3, r3
 8000c2e:	683a      	ldr	r2, [r7, #0]
 8000c30:	b292      	uxth	r2, r2
 8000c32:	4611      	mov	r1, r2
 8000c34:	4618      	mov	r0, r3
 8000c36:	f001 fac9 	bl	80021cc <LCD_DrawPoint>

	LCD_DrawPoint(x,y+1);
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	b29a      	uxth	r2, r3
 8000c3e:	683b      	ldr	r3, [r7, #0]
 8000c40:	b29b      	uxth	r3, r3
 8000c42:	3301      	adds	r3, #1
 8000c44:	b29b      	uxth	r3, r3
 8000c46:	4619      	mov	r1, r3
 8000c48:	4610      	mov	r0, r2
 8000c4a:	f001 fabf 	bl	80021cc <LCD_DrawPoint>
}
 8000c4e:	bf00      	nop
 8000c50:	3708      	adds	r7, #8
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
	...

08000c58 <draw_heart>:
void draw_cross(int x, int y){
	LCD_DrawLine(x-cross_width/2,y-cross_height/2, x+cross_width/2,y+cross_height/2);
	LCD_DrawLine(x-cross_width/2,y+cross_height/2, x+cross_width/2,y-cross_height/2);
}

void draw_heart(int x, int y){
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b084      	sub	sp, #16
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
 8000c60:	6039      	str	r1, [r7, #0]
	int i = 0;
 8000c62:	2300      	movs	r3, #0
 8000c64:	60fb      	str	r3, [r7, #12]
	for (i = heart_width/2; i > 0; i--){
 8000c66:	4b0d      	ldr	r3, [pc, #52]	; (8000c9c <draw_heart+0x44>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	0fda      	lsrs	r2, r3, #31
 8000c6c:	4413      	add	r3, r2
 8000c6e:	105b      	asrs	r3, r3, #1
 8000c70:	60fb      	str	r3, [r7, #12]
 8000c72:	e00b      	b.n	8000c8c <draw_heart+0x34>
		LCD_Draw_Circle(x, y, i);
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	b29b      	uxth	r3, r3
 8000c78:	683a      	ldr	r2, [r7, #0]
 8000c7a:	b291      	uxth	r1, r2
 8000c7c:	68fa      	ldr	r2, [r7, #12]
 8000c7e:	b2d2      	uxtb	r2, r2
 8000c80:	4618      	mov	r0, r3
 8000c82:	f005 ffb8 	bl	8006bf6 <LCD_Draw_Circle>
	for (i = heart_width/2; i > 0; i--){
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	3b01      	subs	r3, #1
 8000c8a:	60fb      	str	r3, [r7, #12]
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	dcf0      	bgt.n	8000c74 <draw_heart+0x1c>
//	LCD_DrawLine(x-heart_width/2,y-heart_height/2, x+heart_width/2,y+heart_height/2);
//	LCD_DrawLine(x-heart_width/2,y+heart_height/2, x+heart_width/2,y-heart_height/2);
//
//	LCD_DrawLine(x-heart_width/2,y, x+heart_width/2,y);
//	LCD_DrawLine(x,y+heart_height/2, x,y-heart_height/2);
}
 8000c92:	bf00      	nop
 8000c94:	3710      	adds	r7, #16
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	20000010 	.word	0x20000010

08000ca0 <draw_reversed_trigon>:
	LCD_DrawLine(x1,y1,x2,y2);
	LCD_DrawLine(x1,y1,x3,y3);
	LCD_DrawLine(x2,y2,x3,y3);
}

void draw_reversed_trigon(int x,int y,int width, int height){
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b08a      	sub	sp, #40	; 0x28
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	60f8      	str	r0, [r7, #12]
 8000ca8:	60b9      	str	r1, [r7, #8]
 8000caa:	607a      	str	r2, [r7, #4]
 8000cac:	603b      	str	r3, [r7, #0]
	int x1,y1,x2,y2,x3,y3;
	x1 = x-width/2;	y1 = y;
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	0fda      	lsrs	r2, r3, #31
 8000cb2:	4413      	add	r3, r2
 8000cb4:	105b      	asrs	r3, r3, #1
 8000cb6:	425b      	negs	r3, r3
 8000cb8:	461a      	mov	r2, r3
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	4413      	add	r3, r2
 8000cbe:	627b      	str	r3, [r7, #36]	; 0x24
 8000cc0:	68bb      	ldr	r3, [r7, #8]
 8000cc2:	623b      	str	r3, [r7, #32]
	x2 = x;	y2 = y + height;
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	61fb      	str	r3, [r7, #28]
 8000cc8:	68ba      	ldr	r2, [r7, #8]
 8000cca:	683b      	ldr	r3, [r7, #0]
 8000ccc:	4413      	add	r3, r2
 8000cce:	61bb      	str	r3, [r7, #24]
	x3 = x+width/2;	y3 = y;
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	0fda      	lsrs	r2, r3, #31
 8000cd4:	4413      	add	r3, r2
 8000cd6:	105b      	asrs	r3, r3, #1
 8000cd8:	461a      	mov	r2, r3
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	4413      	add	r3, r2
 8000cde:	617b      	str	r3, [r7, #20]
 8000ce0:	68bb      	ldr	r3, [r7, #8]
 8000ce2:	613b      	str	r3, [r7, #16]
	
	LCD_DrawLine(x1,y1,x2,y2);
 8000ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ce6:	b298      	uxth	r0, r3
 8000ce8:	6a3b      	ldr	r3, [r7, #32]
 8000cea:	b299      	uxth	r1, r3
 8000cec:	69fb      	ldr	r3, [r7, #28]
 8000cee:	b29a      	uxth	r2, r3
 8000cf0:	69bb      	ldr	r3, [r7, #24]
 8000cf2:	b29b      	uxth	r3, r3
 8000cf4:	f005 fefc 	bl	8006af0 <LCD_DrawLine>
	LCD_DrawLine(x1,y1,x3,y3);
 8000cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cfa:	b298      	uxth	r0, r3
 8000cfc:	6a3b      	ldr	r3, [r7, #32]
 8000cfe:	b299      	uxth	r1, r3
 8000d00:	697b      	ldr	r3, [r7, #20]
 8000d02:	b29a      	uxth	r2, r3
 8000d04:	693b      	ldr	r3, [r7, #16]
 8000d06:	b29b      	uxth	r3, r3
 8000d08:	f005 fef2 	bl	8006af0 <LCD_DrawLine>
	LCD_DrawLine(x2,y2,x3,y3);
 8000d0c:	69fb      	ldr	r3, [r7, #28]
 8000d0e:	b298      	uxth	r0, r3
 8000d10:	69bb      	ldr	r3, [r7, #24]
 8000d12:	b299      	uxth	r1, r3
 8000d14:	697b      	ldr	r3, [r7, #20]
 8000d16:	b29a      	uxth	r2, r3
 8000d18:	693b      	ldr	r3, [r7, #16]
 8000d1a:	b29b      	uxth	r3, r3
 8000d1c:	f005 fee8 	bl	8006af0 <LCD_DrawLine>
}
 8000d20:	bf00      	nop
 8000d22:	3728      	adds	r7, #40	; 0x28
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}

08000d28 <draw_rectangle>:

void draw_rectangle(int x, int y, int width, int height){
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b08c      	sub	sp, #48	; 0x30
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	60f8      	str	r0, [r7, #12]
 8000d30:	60b9      	str	r1, [r7, #8]
 8000d32:	607a      	str	r2, [r7, #4]
 8000d34:	603b      	str	r3, [r7, #0]
	int x1, y1, x2, y2, x3, y3, x4, y4;
	x1 = x;
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	62fb      	str	r3, [r7, #44]	; 0x2c
	y1 = y;
 8000d3a:	68bb      	ldr	r3, [r7, #8]
 8000d3c:	62bb      	str	r3, [r7, #40]	; 0x28

	x2 = x + width;
 8000d3e:	68fa      	ldr	r2, [r7, #12]
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	4413      	add	r3, r2
 8000d44:	627b      	str	r3, [r7, #36]	; 0x24
	y2 = y;
 8000d46:	68bb      	ldr	r3, [r7, #8]
 8000d48:	623b      	str	r3, [r7, #32]

	x3 = x1;
 8000d4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d4c:	61fb      	str	r3, [r7, #28]
	y3 = y + height;
 8000d4e:	68ba      	ldr	r2, [r7, #8]
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	4413      	add	r3, r2
 8000d54:	61bb      	str	r3, [r7, #24]

	x4 = x2;
 8000d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d58:	617b      	str	r3, [r7, #20]
	y4 = y3;
 8000d5a:	69bb      	ldr	r3, [r7, #24]
 8000d5c:	613b      	str	r3, [r7, #16]

	LCD_DrawLine(x1,y1,x2,y2);
 8000d5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d60:	b298      	uxth	r0, r3
 8000d62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d64:	b299      	uxth	r1, r3
 8000d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d68:	b29a      	uxth	r2, r3
 8000d6a:	6a3b      	ldr	r3, [r7, #32]
 8000d6c:	b29b      	uxth	r3, r3
 8000d6e:	f005 febf 	bl	8006af0 <LCD_DrawLine>
	LCD_DrawLine(x1,y1,x3,y3);
 8000d72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d74:	b298      	uxth	r0, r3
 8000d76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d78:	b299      	uxth	r1, r3
 8000d7a:	69fb      	ldr	r3, [r7, #28]
 8000d7c:	b29a      	uxth	r2, r3
 8000d7e:	69bb      	ldr	r3, [r7, #24]
 8000d80:	b29b      	uxth	r3, r3
 8000d82:	f005 feb5 	bl	8006af0 <LCD_DrawLine>
	LCD_DrawLine(x4,y4,x2,y2);
 8000d86:	697b      	ldr	r3, [r7, #20]
 8000d88:	b298      	uxth	r0, r3
 8000d8a:	693b      	ldr	r3, [r7, #16]
 8000d8c:	b299      	uxth	r1, r3
 8000d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d90:	b29a      	uxth	r2, r3
 8000d92:	6a3b      	ldr	r3, [r7, #32]
 8000d94:	b29b      	uxth	r3, r3
 8000d96:	f005 feab 	bl	8006af0 <LCD_DrawLine>
	LCD_DrawLine(x4,y4,x3,y3);
 8000d9a:	697b      	ldr	r3, [r7, #20]
 8000d9c:	b298      	uxth	r0, r3
 8000d9e:	693b      	ldr	r3, [r7, #16]
 8000da0:	b299      	uxth	r1, r3
 8000da2:	69fb      	ldr	r3, [r7, #28]
 8000da4:	b29a      	uxth	r2, r3
 8000da6:	69bb      	ldr	r3, [r7, #24]
 8000da8:	b29b      	uxth	r3, r3
 8000daa:	f005 fea1 	bl	8006af0 <LCD_DrawLine>
}
 8000dae:	bf00      	nop
 8000db0:	3730      	adds	r7, #48	; 0x30
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}

08000db6 <draw_left_triangle>:

void draw_left_triangle(int x, int y, int width, int height){
 8000db6:	b580      	push	{r7, lr}
 8000db8:	b08a      	sub	sp, #40	; 0x28
 8000dba:	af00      	add	r7, sp, #0
 8000dbc:	60f8      	str	r0, [r7, #12]
 8000dbe:	60b9      	str	r1, [r7, #8]
 8000dc0:	607a      	str	r2, [r7, #4]
 8000dc2:	603b      	str	r3, [r7, #0]
	int x1, y1, x2, y2, x3, y3;
	x1 = x;
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	627b      	str	r3, [r7, #36]	; 0x24
	y1 = y;
 8000dc8:	68bb      	ldr	r3, [r7, #8]
 8000dca:	623b      	str	r3, [r7, #32]

	x2 = x - width;
 8000dcc:	68fa      	ldr	r2, [r7, #12]
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	1ad3      	subs	r3, r2, r3
 8000dd2:	61fb      	str	r3, [r7, #28]
	y2 = y;
 8000dd4:	68bb      	ldr	r3, [r7, #8]
 8000dd6:	61bb      	str	r3, [r7, #24]

	x3 = x;
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	617b      	str	r3, [r7, #20]
	y3 = y - height;
 8000ddc:	68ba      	ldr	r2, [r7, #8]
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	1ad3      	subs	r3, r2, r3
 8000de2:	613b      	str	r3, [r7, #16]

	LCD_DrawLine(x1,y1,x2,y2);
 8000de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000de6:	b298      	uxth	r0, r3
 8000de8:	6a3b      	ldr	r3, [r7, #32]
 8000dea:	b299      	uxth	r1, r3
 8000dec:	69fb      	ldr	r3, [r7, #28]
 8000dee:	b29a      	uxth	r2, r3
 8000df0:	69bb      	ldr	r3, [r7, #24]
 8000df2:	b29b      	uxth	r3, r3
 8000df4:	f005 fe7c 	bl	8006af0 <LCD_DrawLine>
	LCD_DrawLine(x1,y1,x3,y3);
 8000df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dfa:	b298      	uxth	r0, r3
 8000dfc:	6a3b      	ldr	r3, [r7, #32]
 8000dfe:	b299      	uxth	r1, r3
 8000e00:	697b      	ldr	r3, [r7, #20]
 8000e02:	b29a      	uxth	r2, r3
 8000e04:	693b      	ldr	r3, [r7, #16]
 8000e06:	b29b      	uxth	r3, r3
 8000e08:	f005 fe72 	bl	8006af0 <LCD_DrawLine>
	LCD_DrawLine(x2,y2,x3,y3);
 8000e0c:	69fb      	ldr	r3, [r7, #28]
 8000e0e:	b298      	uxth	r0, r3
 8000e10:	69bb      	ldr	r3, [r7, #24]
 8000e12:	b299      	uxth	r1, r3
 8000e14:	697b      	ldr	r3, [r7, #20]
 8000e16:	b29a      	uxth	r2, r3
 8000e18:	693b      	ldr	r3, [r7, #16]
 8000e1a:	b29b      	uxth	r3, r3
 8000e1c:	f005 fe68 	bl	8006af0 <LCD_DrawLine>
}
 8000e20:	bf00      	nop
 8000e22:	3728      	adds	r7, #40	; 0x28
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}

08000e28 <draw_right_triangle>:

void draw_right_triangle(int x, int y, int width, int height){
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b08a      	sub	sp, #40	; 0x28
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	60f8      	str	r0, [r7, #12]
 8000e30:	60b9      	str	r1, [r7, #8]
 8000e32:	607a      	str	r2, [r7, #4]
 8000e34:	603b      	str	r3, [r7, #0]
	int x1, y1, x2, y2, x3, y3;
	x1 = x;
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	627b      	str	r3, [r7, #36]	; 0x24
	y1 = y;
 8000e3a:	68bb      	ldr	r3, [r7, #8]
 8000e3c:	623b      	str	r3, [r7, #32]

	x2 = x + width;
 8000e3e:	68fa      	ldr	r2, [r7, #12]
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	4413      	add	r3, r2
 8000e44:	61fb      	str	r3, [r7, #28]
	y2 = y;
 8000e46:	68bb      	ldr	r3, [r7, #8]
 8000e48:	61bb      	str	r3, [r7, #24]

	x3 = x;
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	617b      	str	r3, [r7, #20]
	y3 = y - height;
 8000e4e:	68ba      	ldr	r2, [r7, #8]
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	1ad3      	subs	r3, r2, r3
 8000e54:	613b      	str	r3, [r7, #16]

	LCD_DrawLine(x1,y1,x2,y2);
 8000e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e58:	b298      	uxth	r0, r3
 8000e5a:	6a3b      	ldr	r3, [r7, #32]
 8000e5c:	b299      	uxth	r1, r3
 8000e5e:	69fb      	ldr	r3, [r7, #28]
 8000e60:	b29a      	uxth	r2, r3
 8000e62:	69bb      	ldr	r3, [r7, #24]
 8000e64:	b29b      	uxth	r3, r3
 8000e66:	f005 fe43 	bl	8006af0 <LCD_DrawLine>
	LCD_DrawLine(x1,y1,x3,y3);
 8000e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e6c:	b298      	uxth	r0, r3
 8000e6e:	6a3b      	ldr	r3, [r7, #32]
 8000e70:	b299      	uxth	r1, r3
 8000e72:	697b      	ldr	r3, [r7, #20]
 8000e74:	b29a      	uxth	r2, r3
 8000e76:	693b      	ldr	r3, [r7, #16]
 8000e78:	b29b      	uxth	r3, r3
 8000e7a:	f005 fe39 	bl	8006af0 <LCD_DrawLine>
	LCD_DrawLine(x2,y2,x3,y3);
 8000e7e:	69fb      	ldr	r3, [r7, #28]
 8000e80:	b298      	uxth	r0, r3
 8000e82:	69bb      	ldr	r3, [r7, #24]
 8000e84:	b299      	uxth	r1, r3
 8000e86:	697b      	ldr	r3, [r7, #20]
 8000e88:	b29a      	uxth	r2, r3
 8000e8a:	693b      	ldr	r3, [r7, #16]
 8000e8c:	b29b      	uxth	r3, r3
 8000e8e:	f005 fe2f 	bl	8006af0 <LCD_DrawLine>
}
 8000e92:	bf00      	nop
 8000e94:	3728      	adds	r7, #40	; 0x28
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}

08000e9a <draw_trapezoid>:

void draw_trapezoid(int x, int y, int upper_width, int lower_width, int height){
 8000e9a:	b580      	push	{r7, lr}
 8000e9c:	b08c      	sub	sp, #48	; 0x30
 8000e9e:	af00      	add	r7, sp, #0
 8000ea0:	60f8      	str	r0, [r7, #12]
 8000ea2:	60b9      	str	r1, [r7, #8]
 8000ea4:	607a      	str	r2, [r7, #4]
 8000ea6:	603b      	str	r3, [r7, #0]
	int x1, y1, x2, y2, x3, y3, x4, y4;
	x1 = x - upper_width/2;
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	0fda      	lsrs	r2, r3, #31
 8000eac:	4413      	add	r3, r2
 8000eae:	105b      	asrs	r3, r3, #1
 8000eb0:	425b      	negs	r3, r3
 8000eb2:	461a      	mov	r2, r3
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	4413      	add	r3, r2
 8000eb8:	62fb      	str	r3, [r7, #44]	; 0x2c
	y1 = y;
 8000eba:	68bb      	ldr	r3, [r7, #8]
 8000ebc:	62bb      	str	r3, [r7, #40]	; 0x28

	x2 = x + upper_width/2;
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	0fda      	lsrs	r2, r3, #31
 8000ec2:	4413      	add	r3, r2
 8000ec4:	105b      	asrs	r3, r3, #1
 8000ec6:	461a      	mov	r2, r3
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	4413      	add	r3, r2
 8000ecc:	627b      	str	r3, [r7, #36]	; 0x24
	y2 = y;
 8000ece:	68bb      	ldr	r3, [r7, #8]
 8000ed0:	623b      	str	r3, [r7, #32]

	x3 = x - lower_width/2;
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	0fda      	lsrs	r2, r3, #31
 8000ed6:	4413      	add	r3, r2
 8000ed8:	105b      	asrs	r3, r3, #1
 8000eda:	425b      	negs	r3, r3
 8000edc:	461a      	mov	r2, r3
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	4413      	add	r3, r2
 8000ee2:	61fb      	str	r3, [r7, #28]
	y3 = y + height;
 8000ee4:	68ba      	ldr	r2, [r7, #8]
 8000ee6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000ee8:	4413      	add	r3, r2
 8000eea:	61bb      	str	r3, [r7, #24]

	x4 = x + lower_width/2;
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	0fda      	lsrs	r2, r3, #31
 8000ef0:	4413      	add	r3, r2
 8000ef2:	105b      	asrs	r3, r3, #1
 8000ef4:	461a      	mov	r2, r3
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	4413      	add	r3, r2
 8000efa:	617b      	str	r3, [r7, #20]
	y4 = y + height;
 8000efc:	68ba      	ldr	r2, [r7, #8]
 8000efe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000f00:	4413      	add	r3, r2
 8000f02:	613b      	str	r3, [r7, #16]

	LCD_DrawLine(x1,y1,x2,y2);
 8000f04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f06:	b298      	uxth	r0, r3
 8000f08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f0a:	b299      	uxth	r1, r3
 8000f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f0e:	b29a      	uxth	r2, r3
 8000f10:	6a3b      	ldr	r3, [r7, #32]
 8000f12:	b29b      	uxth	r3, r3
 8000f14:	f005 fdec 	bl	8006af0 <LCD_DrawLine>
	LCD_DrawLine(x1,y1,x3,y3);
 8000f18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f1a:	b298      	uxth	r0, r3
 8000f1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f1e:	b299      	uxth	r1, r3
 8000f20:	69fb      	ldr	r3, [r7, #28]
 8000f22:	b29a      	uxth	r2, r3
 8000f24:	69bb      	ldr	r3, [r7, #24]
 8000f26:	b29b      	uxth	r3, r3
 8000f28:	f005 fde2 	bl	8006af0 <LCD_DrawLine>
	LCD_DrawLine(x4,y4,x2,y2);
 8000f2c:	697b      	ldr	r3, [r7, #20]
 8000f2e:	b298      	uxth	r0, r3
 8000f30:	693b      	ldr	r3, [r7, #16]
 8000f32:	b299      	uxth	r1, r3
 8000f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f36:	b29a      	uxth	r2, r3
 8000f38:	6a3b      	ldr	r3, [r7, #32]
 8000f3a:	b29b      	uxth	r3, r3
 8000f3c:	f005 fdd8 	bl	8006af0 <LCD_DrawLine>
	LCD_DrawLine(x4,y4,x3,y3);
 8000f40:	697b      	ldr	r3, [r7, #20]
 8000f42:	b298      	uxth	r0, r3
 8000f44:	693b      	ldr	r3, [r7, #16]
 8000f46:	b299      	uxth	r1, r3
 8000f48:	69fb      	ldr	r3, [r7, #28]
 8000f4a:	b29a      	uxth	r2, r3
 8000f4c:	69bb      	ldr	r3, [r7, #24]
 8000f4e:	b29b      	uxth	r3, r3
 8000f50:	f005 fdce 	bl	8006af0 <LCD_DrawLine>

}
 8000f54:	bf00      	nop
 8000f56:	3730      	adds	r7, #48	; 0x30
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}

08000f5c <draw_start_page>:
#include "lcd.h"
#include "draw.h"
#include <stdio.h>

//初始化界面
void draw_start_page(void){
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af02      	add	r7, sp, #8
	LCD_ShowString(30,180,200,24,24,"Aircraft");
 8000f62:	4b12      	ldr	r3, [pc, #72]	; (8000fac <draw_start_page+0x50>)
 8000f64:	9301      	str	r3, [sp, #4]
 8000f66:	2318      	movs	r3, #24
 8000f68:	9300      	str	r3, [sp, #0]
 8000f6a:	2318      	movs	r3, #24
 8000f6c:	22c8      	movs	r2, #200	; 0xc8
 8000f6e:	21b4      	movs	r1, #180	; 0xb4
 8000f70:	201e      	movs	r0, #30
 8000f72:	f006 f841 	bl	8006ff8 <LCD_ShowString>
	LCD_ShowString(130,180,200,24,24,"Battle");
 8000f76:	4b0e      	ldr	r3, [pc, #56]	; (8000fb0 <draw_start_page+0x54>)
 8000f78:	9301      	str	r3, [sp, #4]
 8000f7a:	2318      	movs	r3, #24
 8000f7c:	9300      	str	r3, [sp, #0]
 8000f7e:	2318      	movs	r3, #24
 8000f80:	22c8      	movs	r2, #200	; 0xc8
 8000f82:	21b4      	movs	r1, #180	; 0xb4
 8000f84:	2082      	movs	r0, #130	; 0x82
 8000f86:	f006 f837 	bl	8006ff8 <LCD_ShowString>
	
	draw_my_plane(120,120);
 8000f8a:	2178      	movs	r1, #120	; 0x78
 8000f8c:	2078      	movs	r0, #120	; 0x78
 8000f8e:	f7ff fd39 	bl	8000a04 <draw_my_plane>
	
	LCD_ShowString(80,250,200,12,12,"PRESS KEY-0");
 8000f92:	4b08      	ldr	r3, [pc, #32]	; (8000fb4 <draw_start_page+0x58>)
 8000f94:	9301      	str	r3, [sp, #4]
 8000f96:	230c      	movs	r3, #12
 8000f98:	9300      	str	r3, [sp, #0]
 8000f9a:	230c      	movs	r3, #12
 8000f9c:	22c8      	movs	r2, #200	; 0xc8
 8000f9e:	21fa      	movs	r1, #250	; 0xfa
 8000fa0:	2050      	movs	r0, #80	; 0x50
 8000fa2:	f006 f829 	bl	8006ff8 <LCD_ShowString>
}
 8000fa6:	bf00      	nop
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	0800a900 	.word	0x0800a900
 8000fb0:	0800a90c 	.word	0x0800a90c
 8000fb4:	0800a914 	.word	0x0800a914

08000fb8 <init_play_interface>:

void init_play_interface(void){
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af02      	add	r7, sp, #8
	//设置基础界面
//	LCD_DrawLine(1,1,239,1);
	LCD_DrawLine(1,40,239,40);
 8000fbe:	2328      	movs	r3, #40	; 0x28
 8000fc0:	22ef      	movs	r2, #239	; 0xef
 8000fc2:	2128      	movs	r1, #40	; 0x28
 8000fc4:	2001      	movs	r0, #1
 8000fc6:	f005 fd93 	bl	8006af0 <LCD_DrawLine>
//	LCD_DrawLine(1,1,1,40);
//	LCD_DrawLine(239,1,239,40);

//	LCD_DrawLine(130,1,130,40);

	LCD_ShowString(8,7,100,24,24,"score");
 8000fca:	4b0b      	ldr	r3, [pc, #44]	; (8000ff8 <init_play_interface+0x40>)
 8000fcc:	9301      	str	r3, [sp, #4]
 8000fce:	2318      	movs	r3, #24
 8000fd0:	9300      	str	r3, [sp, #0]
 8000fd2:	2318      	movs	r3, #24
 8000fd4:	2264      	movs	r2, #100	; 0x64
 8000fd6:	2107      	movs	r1, #7
 8000fd8:	2008      	movs	r0, #8
 8000fda:	f006 f80d 	bl	8006ff8 <LCD_ShowString>
	LCD_ShowString(130,7,100,24,24,"life");
 8000fde:	4b07      	ldr	r3, [pc, #28]	; (8000ffc <init_play_interface+0x44>)
 8000fe0:	9301      	str	r3, [sp, #4]
 8000fe2:	2318      	movs	r3, #24
 8000fe4:	9300      	str	r3, [sp, #0]
 8000fe6:	2318      	movs	r3, #24
 8000fe8:	2264      	movs	r2, #100	; 0x64
 8000fea:	2107      	movs	r1, #7
 8000fec:	2082      	movs	r0, #130	; 0x82
 8000fee:	f006 f803 	bl	8006ff8 <LCD_ShowString>
}
 8000ff2:	bf00      	nop
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	0800a920 	.word	0x0800a920
 8000ffc:	0800a928 	.word	0x0800a928

08001000 <draw_new_level>:

void draw_new_level(int level){
 8001000:	b580      	push	{r7, lr}
 8001002:	b086      	sub	sp, #24
 8001004:	af02      	add	r7, sp, #8
 8001006:	6078      	str	r0, [r7, #4]
	char str[3];
	sprintf(str, "%d", level);
 8001008:	f107 030c 	add.w	r3, r7, #12
 800100c:	687a      	ldr	r2, [r7, #4]
 800100e:	490e      	ldr	r1, [pc, #56]	; (8001048 <draw_new_level+0x48>)
 8001010:	4618      	mov	r0, r3
 8001012:	f009 f84f 	bl	800a0b4 <siprintf>
	LCD_ShowString(30,180,200,24,24,"Level");
 8001016:	4b0d      	ldr	r3, [pc, #52]	; (800104c <draw_new_level+0x4c>)
 8001018:	9301      	str	r3, [sp, #4]
 800101a:	2318      	movs	r3, #24
 800101c:	9300      	str	r3, [sp, #0]
 800101e:	2318      	movs	r3, #24
 8001020:	22c8      	movs	r2, #200	; 0xc8
 8001022:	21b4      	movs	r1, #180	; 0xb4
 8001024:	201e      	movs	r0, #30
 8001026:	f005 ffe7 	bl	8006ff8 <LCD_ShowString>
	LCD_ShowString(130,180,200,24,24,str);
 800102a:	f107 030c 	add.w	r3, r7, #12
 800102e:	9301      	str	r3, [sp, #4]
 8001030:	2318      	movs	r3, #24
 8001032:	9300      	str	r3, [sp, #0]
 8001034:	2318      	movs	r3, #24
 8001036:	22c8      	movs	r2, #200	; 0xc8
 8001038:	21b4      	movs	r1, #180	; 0xb4
 800103a:	2082      	movs	r0, #130	; 0x82
 800103c:	f005 ffdc 	bl	8006ff8 <LCD_ShowString>
}
 8001040:	bf00      	nop
 8001042:	3710      	adds	r7, #16
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	0800a930 	.word	0x0800a930
 800104c:	0800a934 	.word	0x0800a934

08001050 <draw_end>:

// game over界面
void draw_end(int *score,int *score_2, int *score_3){
 8001050:	b580      	push	{r7, lr}
 8001052:	b086      	sub	sp, #24
 8001054:	af02      	add	r7, sp, #8
 8001056:	60f8      	str	r0, [r7, #12]
 8001058:	60b9      	str	r1, [r7, #8]
 800105a:	607a      	str	r2, [r7, #4]
	LCD_Clear(GRAY);
 800105c:	f248 4030 	movw	r0, #33840	; 0x8430
 8001060:	f005 fc58 	bl	8006914 <LCD_Clear>
	
	LCD_ShowString(60,30,200,24,24,"Game Over");
 8001064:	4b84      	ldr	r3, [pc, #528]	; (8001278 <draw_end+0x228>)
 8001066:	9301      	str	r3, [sp, #4]
 8001068:	2318      	movs	r3, #24
 800106a:	9300      	str	r3, [sp, #0]
 800106c:	2318      	movs	r3, #24
 800106e:	22c8      	movs	r2, #200	; 0xc8
 8001070:	211e      	movs	r1, #30
 8001072:	203c      	movs	r0, #60	; 0x3c
 8001074:	f005 ffc0 	bl	8006ff8 <LCD_ShowString>
	LCD_ShowString(30,80,200,24,24,"My SCORE");
 8001078:	4b80      	ldr	r3, [pc, #512]	; (800127c <draw_end+0x22c>)
 800107a:	9301      	str	r3, [sp, #4]
 800107c:	2318      	movs	r3, #24
 800107e:	9300      	str	r3, [sp, #0]
 8001080:	2318      	movs	r3, #24
 8001082:	22c8      	movs	r2, #200	; 0xc8
 8001084:	2150      	movs	r1, #80	; 0x50
 8001086:	201e      	movs	r0, #30
 8001088:	f005 ffb6 	bl	8006ff8 <LCD_ShowString>
	LCD_ShowxNum(130,80,*score,4,24,0);
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	461a      	mov	r2, r3
 8001092:	2300      	movs	r3, #0
 8001094:	9301      	str	r3, [sp, #4]
 8001096:	2318      	movs	r3, #24
 8001098:	9300      	str	r3, [sp, #0]
 800109a:	2304      	movs	r3, #4
 800109c:	2150      	movs	r1, #80	; 0x50
 800109e:	2082      	movs	r0, #130	; 0x82
 80010a0:	f005 ff10 	bl	8006ec4 <LCD_ShowxNum>
	if(*score_2 == 0 && *score_3 == 0){
 80010a4:	68bb      	ldr	r3, [r7, #8]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d132      	bne.n	8001112 <draw_end+0xc2>
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d12e      	bne.n	8001112 <draw_end+0xc2>
		*score_2 = *score;
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	681a      	ldr	r2, [r3, #0]
 80010b8:	68bb      	ldr	r3, [r7, #8]
 80010ba:	601a      	str	r2, [r3, #0]
		LCD_ShowString(30,140,200,24,24,"Rank1");
 80010bc:	4b70      	ldr	r3, [pc, #448]	; (8001280 <draw_end+0x230>)
 80010be:	9301      	str	r3, [sp, #4]
 80010c0:	2318      	movs	r3, #24
 80010c2:	9300      	str	r3, [sp, #0]
 80010c4:	2318      	movs	r3, #24
 80010c6:	22c8      	movs	r2, #200	; 0xc8
 80010c8:	218c      	movs	r1, #140	; 0x8c
 80010ca:	201e      	movs	r0, #30
 80010cc:	f005 ff94 	bl	8006ff8 <LCD_ShowString>
		LCD_ShowxNum(130,140,*score_2,4,24,0);
 80010d0:	68bb      	ldr	r3, [r7, #8]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	461a      	mov	r2, r3
 80010d6:	2300      	movs	r3, #0
 80010d8:	9301      	str	r3, [sp, #4]
 80010da:	2318      	movs	r3, #24
 80010dc:	9300      	str	r3, [sp, #0]
 80010de:	2304      	movs	r3, #4
 80010e0:	218c      	movs	r1, #140	; 0x8c
 80010e2:	2082      	movs	r0, #130	; 0x82
 80010e4:	f005 feee 	bl	8006ec4 <LCD_ShowxNum>
		LCD_ShowString(30,200,200,24,24,"Rank2");
 80010e8:	4b66      	ldr	r3, [pc, #408]	; (8001284 <draw_end+0x234>)
 80010ea:	9301      	str	r3, [sp, #4]
 80010ec:	2318      	movs	r3, #24
 80010ee:	9300      	str	r3, [sp, #0]
 80010f0:	2318      	movs	r3, #24
 80010f2:	22c8      	movs	r2, #200	; 0xc8
 80010f4:	21c8      	movs	r1, #200	; 0xc8
 80010f6:	201e      	movs	r0, #30
 80010f8:	f005 ff7e 	bl	8006ff8 <LCD_ShowString>
		LCD_ShowString(160,200,200,24,24,"--");
 80010fc:	4b62      	ldr	r3, [pc, #392]	; (8001288 <draw_end+0x238>)
 80010fe:	9301      	str	r3, [sp, #4]
 8001100:	2318      	movs	r3, #24
 8001102:	9300      	str	r3, [sp, #0]
 8001104:	2318      	movs	r3, #24
 8001106:	22c8      	movs	r2, #200	; 0xc8
 8001108:	21c8      	movs	r1, #200	; 0xc8
 800110a:	20a0      	movs	r0, #160	; 0xa0
 800110c:	f005 ff74 	bl	8006ff8 <LCD_ShowString>
 8001110:	e0a0      	b.n	8001254 <draw_end+0x204>
	}else if(*score_2 != 0 && *score_3 == 0){
 8001112:	68bb      	ldr	r3, [r7, #8]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	2b00      	cmp	r3, #0
 8001118:	d049      	beq.n	80011ae <draw_end+0x15e>
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d145      	bne.n	80011ae <draw_end+0x15e>
		if (*score > *score_2) {
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	681a      	ldr	r2, [r3, #0]
 8001126:	68bb      	ldr	r3, [r7, #8]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	429a      	cmp	r2, r3
 800112c:	dd08      	ble.n	8001140 <draw_end+0xf0>
			*score_3 = *score_2;
 800112e:	68bb      	ldr	r3, [r7, #8]
 8001130:	681a      	ldr	r2, [r3, #0]
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	601a      	str	r2, [r3, #0]
			*score_2 = *score;
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	681a      	ldr	r2, [r3, #0]
 800113a:	68bb      	ldr	r3, [r7, #8]
 800113c:	601a      	str	r2, [r3, #0]
 800113e:	e009      	b.n	8001154 <draw_end+0x104>
		} else if (*score < *score_2) {
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	681a      	ldr	r2, [r3, #0]
 8001144:	68bb      	ldr	r3, [r7, #8]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	429a      	cmp	r2, r3
 800114a:	da03      	bge.n	8001154 <draw_end+0x104>
			*score_3 = *score;
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	681a      	ldr	r2, [r3, #0]
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	601a      	str	r2, [r3, #0]
		}
		LCD_ShowString(30,140,200,24,24,"Rank1");
 8001154:	4b4a      	ldr	r3, [pc, #296]	; (8001280 <draw_end+0x230>)
 8001156:	9301      	str	r3, [sp, #4]
 8001158:	2318      	movs	r3, #24
 800115a:	9300      	str	r3, [sp, #0]
 800115c:	2318      	movs	r3, #24
 800115e:	22c8      	movs	r2, #200	; 0xc8
 8001160:	218c      	movs	r1, #140	; 0x8c
 8001162:	201e      	movs	r0, #30
 8001164:	f005 ff48 	bl	8006ff8 <LCD_ShowString>
		LCD_ShowxNum(130,140,*score_2,4,24,0);
 8001168:	68bb      	ldr	r3, [r7, #8]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	461a      	mov	r2, r3
 800116e:	2300      	movs	r3, #0
 8001170:	9301      	str	r3, [sp, #4]
 8001172:	2318      	movs	r3, #24
 8001174:	9300      	str	r3, [sp, #0]
 8001176:	2304      	movs	r3, #4
 8001178:	218c      	movs	r1, #140	; 0x8c
 800117a:	2082      	movs	r0, #130	; 0x82
 800117c:	f005 fea2 	bl	8006ec4 <LCD_ShowxNum>
		LCD_ShowString(30,200,200,24,24,"Rank2");
 8001180:	4b40      	ldr	r3, [pc, #256]	; (8001284 <draw_end+0x234>)
 8001182:	9301      	str	r3, [sp, #4]
 8001184:	2318      	movs	r3, #24
 8001186:	9300      	str	r3, [sp, #0]
 8001188:	2318      	movs	r3, #24
 800118a:	22c8      	movs	r2, #200	; 0xc8
 800118c:	21c8      	movs	r1, #200	; 0xc8
 800118e:	201e      	movs	r0, #30
 8001190:	f005 ff32 	bl	8006ff8 <LCD_ShowString>
		LCD_ShowxNum(130,200,*score_3,4,24,0);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	461a      	mov	r2, r3
 800119a:	2300      	movs	r3, #0
 800119c:	9301      	str	r3, [sp, #4]
 800119e:	2318      	movs	r3, #24
 80011a0:	9300      	str	r3, [sp, #0]
 80011a2:	2304      	movs	r3, #4
 80011a4:	21c8      	movs	r1, #200	; 0xc8
 80011a6:	2082      	movs	r0, #130	; 0x82
 80011a8:	f005 fe8c 	bl	8006ec4 <LCD_ShowxNum>
 80011ac:	e052      	b.n	8001254 <draw_end+0x204>
	}else if(*score_2 != 0 && *score_3 != 0){
 80011ae:	68bb      	ldr	r3, [r7, #8]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d04e      	beq.n	8001254 <draw_end+0x204>
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d04a      	beq.n	8001254 <draw_end+0x204>
		if (*score > *score_2) {
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	681a      	ldr	r2, [r3, #0]
 80011c2:	68bb      	ldr	r3, [r7, #8]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	429a      	cmp	r2, r3
 80011c8:	dd08      	ble.n	80011dc <draw_end+0x18c>
			*score_3 = *score_2;
 80011ca:	68bb      	ldr	r3, [r7, #8]
 80011cc:	681a      	ldr	r2, [r3, #0]
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	601a      	str	r2, [r3, #0]
			*score_2 = *score;
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	681a      	ldr	r2, [r3, #0]
 80011d6:	68bb      	ldr	r3, [r7, #8]
 80011d8:	601a      	str	r2, [r3, #0]
 80011da:	e00f      	b.n	80011fc <draw_end+0x1ac>
		} else if (*score < *score_2 && *score > *score_3) {
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	681a      	ldr	r2, [r3, #0]
 80011e0:	68bb      	ldr	r3, [r7, #8]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	429a      	cmp	r2, r3
 80011e6:	da09      	bge.n	80011fc <draw_end+0x1ac>
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	681a      	ldr	r2, [r3, #0]
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	429a      	cmp	r2, r3
 80011f2:	dd03      	ble.n	80011fc <draw_end+0x1ac>
			*score_3 = *score;
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	681a      	ldr	r2, [r3, #0]
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	601a      	str	r2, [r3, #0]
		}
		LCD_ShowString(30,140,200,24,24,"Rank1");
 80011fc:	4b20      	ldr	r3, [pc, #128]	; (8001280 <draw_end+0x230>)
 80011fe:	9301      	str	r3, [sp, #4]
 8001200:	2318      	movs	r3, #24
 8001202:	9300      	str	r3, [sp, #0]
 8001204:	2318      	movs	r3, #24
 8001206:	22c8      	movs	r2, #200	; 0xc8
 8001208:	218c      	movs	r1, #140	; 0x8c
 800120a:	201e      	movs	r0, #30
 800120c:	f005 fef4 	bl	8006ff8 <LCD_ShowString>
		LCD_ShowxNum(130,140,*score_2,4,24,0);
 8001210:	68bb      	ldr	r3, [r7, #8]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	461a      	mov	r2, r3
 8001216:	2300      	movs	r3, #0
 8001218:	9301      	str	r3, [sp, #4]
 800121a:	2318      	movs	r3, #24
 800121c:	9300      	str	r3, [sp, #0]
 800121e:	2304      	movs	r3, #4
 8001220:	218c      	movs	r1, #140	; 0x8c
 8001222:	2082      	movs	r0, #130	; 0x82
 8001224:	f005 fe4e 	bl	8006ec4 <LCD_ShowxNum>
		LCD_ShowString(30,200,200,24,24,"Rank2");
 8001228:	4b16      	ldr	r3, [pc, #88]	; (8001284 <draw_end+0x234>)
 800122a:	9301      	str	r3, [sp, #4]
 800122c:	2318      	movs	r3, #24
 800122e:	9300      	str	r3, [sp, #0]
 8001230:	2318      	movs	r3, #24
 8001232:	22c8      	movs	r2, #200	; 0xc8
 8001234:	21c8      	movs	r1, #200	; 0xc8
 8001236:	201e      	movs	r0, #30
 8001238:	f005 fede 	bl	8006ff8 <LCD_ShowString>
		LCD_ShowxNum(130,200,*score_3,4,24,0);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	461a      	mov	r2, r3
 8001242:	2300      	movs	r3, #0
 8001244:	9301      	str	r3, [sp, #4]
 8001246:	2318      	movs	r3, #24
 8001248:	9300      	str	r3, [sp, #0]
 800124a:	2304      	movs	r3, #4
 800124c:	21c8      	movs	r1, #200	; 0xc8
 800124e:	2082      	movs	r0, #130	; 0x82
 8001250:	f005 fe38 	bl	8006ec4 <LCD_ShowxNum>
	}

	*score = 0;
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	2200      	movs	r2, #0
 8001258:	601a      	str	r2, [r3, #0]
	
	LCD_ShowString(60,280,200,12,12,"Powered by 2019SUSTech");
 800125a:	4b0c      	ldr	r3, [pc, #48]	; (800128c <draw_end+0x23c>)
 800125c:	9301      	str	r3, [sp, #4]
 800125e:	230c      	movs	r3, #12
 8001260:	9300      	str	r3, [sp, #0]
 8001262:	230c      	movs	r3, #12
 8001264:	22c8      	movs	r2, #200	; 0xc8
 8001266:	f44f 718c 	mov.w	r1, #280	; 0x118
 800126a:	203c      	movs	r0, #60	; 0x3c
 800126c:	f005 fec4 	bl	8006ff8 <LCD_ShowString>
}
 8001270:	bf00      	nop
 8001272:	3710      	adds	r7, #16
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}
 8001278:	0800a93c 	.word	0x0800a93c
 800127c:	0800a948 	.word	0x0800a948
 8001280:	0800a954 	.word	0x0800a954
 8001284:	0800a95c 	.word	0x0800a95c
 8001288:	0800a964 	.word	0x0800a964
 800128c:	0800a968 	.word	0x0800a968

08001290 <draw_play_title>:

//其他渲染可调用 basic_draw.h
//1. 我方飞机渲染
//2. boss渲染
//3. cross渲染
void draw_play_title(int score, int life, int limit){
 8001290:	b580      	push	{r7, lr}
 8001292:	b088      	sub	sp, #32
 8001294:	af02      	add	r7, sp, #8
 8001296:	60f8      	str	r0, [r7, #12]
 8001298:	60b9      	str	r1, [r7, #8]
 800129a:	607a      	str	r2, [r7, #4]
	int i=0;
 800129c:	2300      	movs	r3, #0
 800129e:	617b      	str	r3, [r7, #20]
	int start_x = 195;
 80012a0:	23c3      	movs	r3, #195	; 0xc3
 80012a2:	613b      	str	r3, [r7, #16]
	
	//LCD_Fill(75,8,130,32,GRAY);
	LCD_ShowxNum(67,7,score,4,24,0);		//分数
 80012a4:	68fa      	ldr	r2, [r7, #12]
 80012a6:	2300      	movs	r3, #0
 80012a8:	9301      	str	r3, [sp, #4]
 80012aa:	2318      	movs	r3, #24
 80012ac:	9300      	str	r3, [sp, #0]
 80012ae:	2304      	movs	r3, #4
 80012b0:	2107      	movs	r1, #7
 80012b2:	2043      	movs	r0, #67	; 0x43
 80012b4:	f005 fe06 	bl	8006ec4 <LCD_ShowxNum>
	
	LCD_Fill(190,15,226,25,BACK_COLOR);
 80012b8:	4b17      	ldr	r3, [pc, #92]	; (8001318 <draw_play_title+0x88>)
 80012ba:	881b      	ldrh	r3, [r3, #0]
 80012bc:	9300      	str	r3, [sp, #0]
 80012be:	2319      	movs	r3, #25
 80012c0:	22e2      	movs	r2, #226	; 0xe2
 80012c2:	210f      	movs	r1, #15
 80012c4:	20be      	movs	r0, #190	; 0xbe
 80012c6:	f005 fb87 	bl	80069d8 <LCD_Fill>
	for(i=0; i<life; i++){	//生命值ֵ
 80012ca:	2300      	movs	r3, #0
 80012cc:	617b      	str	r3, [r7, #20]
 80012ce:	e00e      	b.n	80012ee <draw_play_title+0x5e>
		draw_heart(start_x+i*13, 20);
 80012d0:	697a      	ldr	r2, [r7, #20]
 80012d2:	4613      	mov	r3, r2
 80012d4:	005b      	lsls	r3, r3, #1
 80012d6:	4413      	add	r3, r2
 80012d8:	009b      	lsls	r3, r3, #2
 80012da:	441a      	add	r2, r3
 80012dc:	693b      	ldr	r3, [r7, #16]
 80012de:	4413      	add	r3, r2
 80012e0:	2114      	movs	r1, #20
 80012e2:	4618      	mov	r0, r3
 80012e4:	f7ff fcb8 	bl	8000c58 <draw_heart>
	for(i=0; i<life; i++){	//生命值ֵ
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	3301      	adds	r3, #1
 80012ec:	617b      	str	r3, [r7, #20]
 80012ee:	697a      	ldr	r2, [r7, #20]
 80012f0:	68bb      	ldr	r3, [r7, #8]
 80012f2:	429a      	cmp	r2, r3
 80012f4:	dbec      	blt.n	80012d0 <draw_play_title+0x40>
	}
	LCD_ShowxNum(180,41,(60-limit),4,24,0);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	f1c3 033c 	rsb	r3, r3, #60	; 0x3c
 80012fc:	461a      	mov	r2, r3
 80012fe:	2300      	movs	r3, #0
 8001300:	9301      	str	r3, [sp, #4]
 8001302:	2318      	movs	r3, #24
 8001304:	9300      	str	r3, [sp, #0]
 8001306:	2304      	movs	r3, #4
 8001308:	2129      	movs	r1, #41	; 0x29
 800130a:	20b4      	movs	r0, #180	; 0xb4
 800130c:	f005 fdda 	bl	8006ec4 <LCD_ShowxNum>
}
 8001310:	bf00      	nop
 8001312:	3718      	adds	r7, #24
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}
 8001318:	20000014 	.word	0x20000014

0800131c <draw_all_my_buttles>:

//#define my_buttle_max 100
//#define enemy_buttle_max 300
//#define enemy_plane_max 10
void draw_all_my_buttles(int my_buttles[100][2]){
 800131c:	b580      	push	{r7, lr}
 800131e:	b084      	sub	sp, #16
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
	int i =0;
 8001324:	2300      	movs	r3, #0
 8001326:	60fb      	str	r3, [r7, #12]
	for(i=0; i<100; i++){
 8001328:	2300      	movs	r3, #0
 800132a:	60fb      	str	r3, [r7, #12]
 800132c:	e016      	b.n	800135c <draw_all_my_buttles+0x40>
		if(my_buttles[i][0] == 0){
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	00db      	lsls	r3, r3, #3
 8001332:	687a      	ldr	r2, [r7, #4]
 8001334:	4413      	add	r3, r2
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d013      	beq.n	8001364 <draw_all_my_buttles+0x48>
			break;
		}else{
			draw_my_bullet(my_buttles[i][0],my_buttles[i][1]);
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	00db      	lsls	r3, r3, #3
 8001340:	687a      	ldr	r2, [r7, #4]
 8001342:	4413      	add	r3, r2
 8001344:	6818      	ldr	r0, [r3, #0]
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	00db      	lsls	r3, r3, #3
 800134a:	687a      	ldr	r2, [r7, #4]
 800134c:	4413      	add	r3, r2
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	4619      	mov	r1, r3
 8001352:	f7ff fbd7 	bl	8000b04 <draw_my_bullet>
	for(i=0; i<100; i++){
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	3301      	adds	r3, #1
 800135a:	60fb      	str	r3, [r7, #12]
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	2b63      	cmp	r3, #99	; 0x63
 8001360:	dde5      	ble.n	800132e <draw_all_my_buttles+0x12>
		}
	}
}
 8001362:	e000      	b.n	8001366 <draw_all_my_buttles+0x4a>
			break;
 8001364:	bf00      	nop
}
 8001366:	bf00      	nop
 8001368:	3710      	adds	r7, #16
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}

0800136e <draw_all_enemy_planes>:

void draw_all_enemy_planes(int enemy_planes[10][2]){
 800136e:	b580      	push	{r7, lr}
 8001370:	b084      	sub	sp, #16
 8001372:	af00      	add	r7, sp, #0
 8001374:	6078      	str	r0, [r7, #4]
	int i = 0;
 8001376:	2300      	movs	r3, #0
 8001378:	60fb      	str	r3, [r7, #12]
	for(i=0; i<10; i++){
 800137a:	2300      	movs	r3, #0
 800137c:	60fb      	str	r3, [r7, #12]
 800137e:	e016      	b.n	80013ae <draw_all_enemy_planes+0x40>
		if(enemy_planes[i][0] == 0){
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	00db      	lsls	r3, r3, #3
 8001384:	687a      	ldr	r2, [r7, #4]
 8001386:	4413      	add	r3, r2
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d013      	beq.n	80013b6 <draw_all_enemy_planes+0x48>
			break;
		}else{
			draw_enemy_plane(enemy_planes[i][0],enemy_planes[i][1]);
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	00db      	lsls	r3, r3, #3
 8001392:	687a      	ldr	r2, [r7, #4]
 8001394:	4413      	add	r3, r2
 8001396:	6818      	ldr	r0, [r3, #0]
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	00db      	lsls	r3, r3, #3
 800139c:	687a      	ldr	r2, [r7, #4]
 800139e:	4413      	add	r3, r2
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	4619      	mov	r1, r3
 80013a4:	f7ff fb5a 	bl	8000a5c <draw_enemy_plane>
	for(i=0; i<10; i++){
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	3301      	adds	r3, #1
 80013ac:	60fb      	str	r3, [r7, #12]
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	2b09      	cmp	r3, #9
 80013b2:	dde5      	ble.n	8001380 <draw_all_enemy_planes+0x12>
		}
	}
}
 80013b4:	e000      	b.n	80013b8 <draw_all_enemy_planes+0x4a>
			break;
 80013b6:	bf00      	nop
}
 80013b8:	bf00      	nop
 80013ba:	3710      	adds	r7, #16
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}

080013c0 <draw_all_enemy_buttles>:

void draw_all_enemy_buttles(int enemy_buttles[300][2]){
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b084      	sub	sp, #16
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
	int i =0;
 80013c8:	2300      	movs	r3, #0
 80013ca:	60fb      	str	r3, [r7, #12]
	for(i=0; i<300; i++){
 80013cc:	2300      	movs	r3, #0
 80013ce:	60fb      	str	r3, [r7, #12]
 80013d0:	e016      	b.n	8001400 <draw_all_enemy_buttles+0x40>
		if(enemy_buttles[i][0] == 0){
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	00db      	lsls	r3, r3, #3
 80013d6:	687a      	ldr	r2, [r7, #4]
 80013d8:	4413      	add	r3, r2
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d014      	beq.n	800140a <draw_all_enemy_buttles+0x4a>
			break;
		}else{
			draw_enemy_bullet(enemy_buttles[i][0],enemy_buttles[i][1]);
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	00db      	lsls	r3, r3, #3
 80013e4:	687a      	ldr	r2, [r7, #4]
 80013e6:	4413      	add	r3, r2
 80013e8:	6818      	ldr	r0, [r3, #0]
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	00db      	lsls	r3, r3, #3
 80013ee:	687a      	ldr	r2, [r7, #4]
 80013f0:	4413      	add	r3, r2
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	4619      	mov	r1, r3
 80013f6:	f7ff fbdd 	bl	8000bb4 <draw_enemy_bullet>
	for(i=0; i<300; i++){
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	3301      	adds	r3, #1
 80013fe:	60fb      	str	r3, [r7, #12]
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001406:	dbe4      	blt.n	80013d2 <draw_all_enemy_buttles+0x12>
		}
	}
}
 8001408:	e000      	b.n	800140c <draw_all_enemy_buttles+0x4c>
			break;
 800140a:	bf00      	nop
}
 800140c:	bf00      	nop
 800140e:	3710      	adds	r7, #16
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}

08001414 <draw_play_all>:

//全体渲染
void draw_play_all(int score,int life, int my_plane[2], int my_buttles[100][2], int boss[2], int enemy_planes[10][2], int enemy_buttles[300][2], int limit){
 8001414:	b580      	push	{r7, lr}
 8001416:	b084      	sub	sp, #16
 8001418:	af00      	add	r7, sp, #0
 800141a:	60f8      	str	r0, [r7, #12]
 800141c:	60b9      	str	r1, [r7, #8]
 800141e:	607a      	str	r2, [r7, #4]
 8001420:	603b      	str	r3, [r7, #0]
	draw_play_title(score,life,limit);
 8001422:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001424:	68b9      	ldr	r1, [r7, #8]
 8001426:	68f8      	ldr	r0, [r7, #12]
 8001428:	f7ff ff32 	bl	8001290 <draw_play_title>
	
	draw_my_plane(my_plane[0],my_plane[1]);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681a      	ldr	r2, [r3, #0]
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	3304      	adds	r3, #4
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4619      	mov	r1, r3
 8001438:	4610      	mov	r0, r2
 800143a:	f7ff fae3 	bl	8000a04 <draw_my_plane>
	draw_all_my_buttles(my_buttles);
 800143e:	6838      	ldr	r0, [r7, #0]
 8001440:	f7ff ff6c 	bl	800131c <draw_all_my_buttles>
	
	draw_boss(boss[0],boss[1]);
 8001444:	69bb      	ldr	r3, [r7, #24]
 8001446:	681a      	ldr	r2, [r3, #0]
 8001448:	69bb      	ldr	r3, [r7, #24]
 800144a:	3304      	adds	r3, #4
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4619      	mov	r1, r3
 8001450:	4610      	mov	r0, r2
 8001452:	f7ff fb29 	bl	8000aa8 <draw_boss>

	draw_all_enemy_planes(enemy_planes);
 8001456:	69f8      	ldr	r0, [r7, #28]
 8001458:	f7ff ff89 	bl	800136e <draw_all_enemy_planes>
	draw_all_enemy_buttles(enemy_buttles);
 800145c:	6a38      	ldr	r0, [r7, #32]
 800145e:	f7ff ffaf 	bl	80013c0 <draw_all_enemy_buttles>
}
 8001462:	bf00      	nop
 8001464:	3710      	adds	r7, #16
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
	...

0800146c <LCD_WR_REG>:
//默认为竖屏
_lcd_dev lcddev;

//写寄存器函数
//data:寄存器值
void LCD_WR_REG(uint16_t data) {
 800146c:	b480      	push	{r7}
 800146e:	b083      	sub	sp, #12
 8001470:	af00      	add	r7, sp, #0
 8001472:	4603      	mov	r3, r0
 8001474:	80fb      	strh	r3, [r7, #6]
	LCD_RS_CLR;  //写地址
 8001476:	4b0d      	ldr	r3, [pc, #52]	; (80014ac <LCD_WR_REG+0x40>)
 8001478:	f44f 7280 	mov.w	r2, #256	; 0x100
 800147c:	615a      	str	r2, [r3, #20]
	LCD_CS_CLR;
 800147e:	4b0b      	ldr	r3, [pc, #44]	; (80014ac <LCD_WR_REG+0x40>)
 8001480:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001484:	615a      	str	r2, [r3, #20]
	DATAOUT(data);
 8001486:	4a0a      	ldr	r2, [pc, #40]	; (80014b0 <LCD_WR_REG+0x44>)
 8001488:	88fb      	ldrh	r3, [r7, #6]
 800148a:	60d3      	str	r3, [r2, #12]
	LCD_WR_CLR;
 800148c:	4b07      	ldr	r3, [pc, #28]	; (80014ac <LCD_WR_REG+0x40>)
 800148e:	2280      	movs	r2, #128	; 0x80
 8001490:	615a      	str	r2, [r3, #20]
	LCD_WR_SET;
 8001492:	4b06      	ldr	r3, [pc, #24]	; (80014ac <LCD_WR_REG+0x40>)
 8001494:	2280      	movs	r2, #128	; 0x80
 8001496:	611a      	str	r2, [r3, #16]
	LCD_CS_SET;
 8001498:	4b04      	ldr	r3, [pc, #16]	; (80014ac <LCD_WR_REG+0x40>)
 800149a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800149e:	611a      	str	r2, [r3, #16]
}
 80014a0:	bf00      	nop
 80014a2:	370c      	adds	r7, #12
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bc80      	pop	{r7}
 80014a8:	4770      	bx	lr
 80014aa:	bf00      	nop
 80014ac:	40011000 	.word	0x40011000
 80014b0:	40010c00 	.word	0x40010c00

080014b4 <LCD_WR_DATAX>:
//写数据函数
//可以替代LCD_WR_DATAX宏,拿时间换空间.
//data:寄存器值
void LCD_WR_DATAX(uint16_t data) {
 80014b4:	b480      	push	{r7}
 80014b6:	b083      	sub	sp, #12
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	4603      	mov	r3, r0
 80014bc:	80fb      	strh	r3, [r7, #6]
	LCD_RS_SET;
 80014be:	4b0d      	ldr	r3, [pc, #52]	; (80014f4 <LCD_WR_DATAX+0x40>)
 80014c0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014c4:	611a      	str	r2, [r3, #16]
	LCD_CS_CLR;
 80014c6:	4b0b      	ldr	r3, [pc, #44]	; (80014f4 <LCD_WR_DATAX+0x40>)
 80014c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014cc:	615a      	str	r2, [r3, #20]
	DATAOUT(data);
 80014ce:	4a0a      	ldr	r2, [pc, #40]	; (80014f8 <LCD_WR_DATAX+0x44>)
 80014d0:	88fb      	ldrh	r3, [r7, #6]
 80014d2:	60d3      	str	r3, [r2, #12]
	LCD_WR_CLR;
 80014d4:	4b07      	ldr	r3, [pc, #28]	; (80014f4 <LCD_WR_DATAX+0x40>)
 80014d6:	2280      	movs	r2, #128	; 0x80
 80014d8:	615a      	str	r2, [r3, #20]
	LCD_WR_SET;
 80014da:	4b06      	ldr	r3, [pc, #24]	; (80014f4 <LCD_WR_DATAX+0x40>)
 80014dc:	2280      	movs	r2, #128	; 0x80
 80014de:	611a      	str	r2, [r3, #16]
	LCD_CS_SET;
 80014e0:	4b04      	ldr	r3, [pc, #16]	; (80014f4 <LCD_WR_DATAX+0x40>)
 80014e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014e6:	611a      	str	r2, [r3, #16]
}
 80014e8:	bf00      	nop
 80014ea:	370c      	adds	r7, #12
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bc80      	pop	{r7}
 80014f0:	4770      	bx	lr
 80014f2:	bf00      	nop
 80014f4:	40011000 	.word	0x40011000
 80014f8:	40010c00 	.word	0x40010c00

080014fc <LCD_RD_DATA>:
//读LCD数据
//返回值:读到的值
uint16_t LCD_RD_DATA(void) {
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b082      	sub	sp, #8
 8001500:	af00      	add	r7, sp, #0
	uint16_t t;
	GPIOB->CRL = 0X88888888; //PB0-7  上拉输入
 8001502:	4b1d      	ldr	r3, [pc, #116]	; (8001578 <LCD_RD_DATA+0x7c>)
 8001504:	f04f 3288 	mov.w	r2, #2290649224	; 0x88888888
 8001508:	601a      	str	r2, [r3, #0]
	GPIOB->CRH = 0X88888888; //PB8-15 上拉输入
 800150a:	4b1b      	ldr	r3, [pc, #108]	; (8001578 <LCD_RD_DATA+0x7c>)
 800150c:	f04f 3288 	mov.w	r2, #2290649224	; 0x88888888
 8001510:	605a      	str	r2, [r3, #4]
	GPIOB->ODR = 0X0000;     //全部输出0
 8001512:	4b19      	ldr	r3, [pc, #100]	; (8001578 <LCD_RD_DATA+0x7c>)
 8001514:	2200      	movs	r2, #0
 8001516:	60da      	str	r2, [r3, #12]

	LCD_RS_SET;
 8001518:	4b18      	ldr	r3, [pc, #96]	; (800157c <LCD_RD_DATA+0x80>)
 800151a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800151e:	611a      	str	r2, [r3, #16]
	LCD_CS_CLR;
 8001520:	4b16      	ldr	r3, [pc, #88]	; (800157c <LCD_RD_DATA+0x80>)
 8001522:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001526:	615a      	str	r2, [r3, #20]
	//读取数据(读寄存器时,并不需要读2次)
	LCD_RD_CLR;
 8001528:	4b14      	ldr	r3, [pc, #80]	; (800157c <LCD_RD_DATA+0x80>)
 800152a:	2240      	movs	r2, #64	; 0x40
 800152c:	615a      	str	r2, [r3, #20]
	if (lcddev.id == 0X8989)
 800152e:	4b14      	ldr	r3, [pc, #80]	; (8001580 <LCD_RD_DATA+0x84>)
 8001530:	889b      	ldrh	r3, [r3, #4]
 8001532:	f648 1289 	movw	r2, #35209	; 0x8989
 8001536:	4293      	cmp	r3, r2
 8001538:	d102      	bne.n	8001540 <LCD_RD_DATA+0x44>
		HAL_Delay(1); // delay_us(2);//FOR 8989,延时2us
 800153a:	2001      	movs	r0, #1
 800153c:	f006 ffd4 	bl	80084e8 <HAL_Delay>
	t = DATAIN
 8001540:	4b0d      	ldr	r3, [pc, #52]	; (8001578 <LCD_RD_DATA+0x7c>)
 8001542:	689b      	ldr	r3, [r3, #8]
 8001544:	80fb      	strh	r3, [r7, #6]
	;
	LCD_RD_SET;
 8001546:	4b0d      	ldr	r3, [pc, #52]	; (800157c <LCD_RD_DATA+0x80>)
 8001548:	2240      	movs	r2, #64	; 0x40
 800154a:	611a      	str	r2, [r3, #16]
	LCD_CS_SET;
 800154c:	4b0b      	ldr	r3, [pc, #44]	; (800157c <LCD_RD_DATA+0x80>)
 800154e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001552:	611a      	str	r2, [r3, #16]

	GPIOB->CRL = 0X33333333; //PB0-7  上拉输出
 8001554:	4b08      	ldr	r3, [pc, #32]	; (8001578 <LCD_RD_DATA+0x7c>)
 8001556:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 800155a:	601a      	str	r2, [r3, #0]
	GPIOB->CRH = 0X33333333; //PB8-15 上拉输出
 800155c:	4b06      	ldr	r3, [pc, #24]	; (8001578 <LCD_RD_DATA+0x7c>)
 800155e:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8001562:	605a      	str	r2, [r3, #4]
	GPIOB->ODR = 0XFFFF;    //全部输出高
 8001564:	4b04      	ldr	r3, [pc, #16]	; (8001578 <LCD_RD_DATA+0x7c>)
 8001566:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800156a:	60da      	str	r2, [r3, #12]
	return t;
 800156c:	88fb      	ldrh	r3, [r7, #6]
}
 800156e:	4618      	mov	r0, r3
 8001570:	3708      	adds	r7, #8
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	40010c00 	.word	0x40010c00
 800157c:	40011000 	.word	0x40011000
 8001580:	200000bc 	.word	0x200000bc

08001584 <LCD_WriteReg>:
//写寄存器
//LCD_Reg:寄存器编号
//LCD_RegValue:要写入的值
void LCD_WriteReg(uint16_t LCD_Reg, uint16_t LCD_RegValue) {
 8001584:	b580      	push	{r7, lr}
 8001586:	b082      	sub	sp, #8
 8001588:	af00      	add	r7, sp, #0
 800158a:	4603      	mov	r3, r0
 800158c:	460a      	mov	r2, r1
 800158e:	80fb      	strh	r3, [r7, #6]
 8001590:	4613      	mov	r3, r2
 8001592:	80bb      	strh	r3, [r7, #4]
	LCD_WR_REG(LCD_Reg);
 8001594:	88fb      	ldrh	r3, [r7, #6]
 8001596:	4618      	mov	r0, r3
 8001598:	f7ff ff68 	bl	800146c <LCD_WR_REG>
	LCD_WR_DATA(LCD_RegValue);
 800159c:	4b0c      	ldr	r3, [pc, #48]	; (80015d0 <LCD_WriteReg+0x4c>)
 800159e:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015a2:	611a      	str	r2, [r3, #16]
 80015a4:	4b0a      	ldr	r3, [pc, #40]	; (80015d0 <LCD_WriteReg+0x4c>)
 80015a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015aa:	615a      	str	r2, [r3, #20]
 80015ac:	4a09      	ldr	r2, [pc, #36]	; (80015d4 <LCD_WriteReg+0x50>)
 80015ae:	88bb      	ldrh	r3, [r7, #4]
 80015b0:	60d3      	str	r3, [r2, #12]
 80015b2:	4b07      	ldr	r3, [pc, #28]	; (80015d0 <LCD_WriteReg+0x4c>)
 80015b4:	2280      	movs	r2, #128	; 0x80
 80015b6:	615a      	str	r2, [r3, #20]
 80015b8:	4b05      	ldr	r3, [pc, #20]	; (80015d0 <LCD_WriteReg+0x4c>)
 80015ba:	2280      	movs	r2, #128	; 0x80
 80015bc:	611a      	str	r2, [r3, #16]
 80015be:	4b04      	ldr	r3, [pc, #16]	; (80015d0 <LCD_WriteReg+0x4c>)
 80015c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015c4:	611a      	str	r2, [r3, #16]
}
 80015c6:	bf00      	nop
 80015c8:	3708      	adds	r7, #8
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	40011000 	.word	0x40011000
 80015d4:	40010c00 	.word	0x40010c00

080015d8 <LCD_ReadReg>:
//读寄存器
//LCD_Reg:寄存器编号
//返回值:读到的值
uint16_t LCD_ReadReg(uint16_t LCD_Reg) {
 80015d8:	b580      	push	{r7, lr}
 80015da:	b082      	sub	sp, #8
 80015dc:	af00      	add	r7, sp, #0
 80015de:	4603      	mov	r3, r0
 80015e0:	80fb      	strh	r3, [r7, #6]
	LCD_WR_REG(LCD_Reg);  //写入要读的寄存器号
 80015e2:	88fb      	ldrh	r3, [r7, #6]
 80015e4:	4618      	mov	r0, r3
 80015e6:	f7ff ff41 	bl	800146c <LCD_WR_REG>
	return LCD_RD_DATA();
 80015ea:	f7ff ff87 	bl	80014fc <LCD_RD_DATA>
 80015ee:	4603      	mov	r3, r0
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	3708      	adds	r7, #8
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}

080015f8 <LCD_WriteRAM_Prepare>:
//开始写GRAM
void LCD_WriteRAM_Prepare(void) {
 80015f8:	b580      	push	{r7, lr}
 80015fa:	af00      	add	r7, sp, #0
	LCD_WR_REG(lcddev.wramcmd);
 80015fc:	4b03      	ldr	r3, [pc, #12]	; (800160c <LCD_WriteRAM_Prepare+0x14>)
 80015fe:	891b      	ldrh	r3, [r3, #8]
 8001600:	4618      	mov	r0, r3
 8001602:	f7ff ff33 	bl	800146c <LCD_WR_REG>
}
 8001606:	bf00      	nop
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	200000bc 	.word	0x200000bc

08001610 <LCD_SetCursor>:
		LCD_WriteReg(0X07, 0x0);	//关闭显示
}
//设置光标位置
//Xpos:横坐标
//Ypos:纵坐标
void LCD_SetCursor(uint16_t Xpos, uint16_t Ypos) {
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
 8001616:	4603      	mov	r3, r0
 8001618:	460a      	mov	r2, r1
 800161a:	80fb      	strh	r3, [r7, #6]
 800161c:	4613      	mov	r3, r2
 800161e:	80bb      	strh	r3, [r7, #4]
	if (lcddev.id == 0X9341 || lcddev.id == 0X5310) {
 8001620:	4b73      	ldr	r3, [pc, #460]	; (80017f0 <LCD_SetCursor+0x1e0>)
 8001622:	889b      	ldrh	r3, [r3, #4]
 8001624:	f249 3241 	movw	r2, #37697	; 0x9341
 8001628:	4293      	cmp	r3, r2
 800162a:	d005      	beq.n	8001638 <LCD_SetCursor+0x28>
 800162c:	4b70      	ldr	r3, [pc, #448]	; (80017f0 <LCD_SetCursor+0x1e0>)
 800162e:	889b      	ldrh	r3, [r3, #4]
 8001630:	f245 3210 	movw	r2, #21264	; 0x5310
 8001634:	4293      	cmp	r3, r2
 8001636:	d164      	bne.n	8001702 <LCD_SetCursor+0xf2>
		LCD_WR_REG(lcddev.setxcmd);
 8001638:	4b6d      	ldr	r3, [pc, #436]	; (80017f0 <LCD_SetCursor+0x1e0>)
 800163a:	895b      	ldrh	r3, [r3, #10]
 800163c:	4618      	mov	r0, r3
 800163e:	f7ff ff15 	bl	800146c <LCD_WR_REG>
		LCD_WR_DATA(Xpos >> 8);
 8001642:	4b6c      	ldr	r3, [pc, #432]	; (80017f4 <LCD_SetCursor+0x1e4>)
 8001644:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001648:	611a      	str	r2, [r3, #16]
 800164a:	4b6a      	ldr	r3, [pc, #424]	; (80017f4 <LCD_SetCursor+0x1e4>)
 800164c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001650:	615a      	str	r2, [r3, #20]
 8001652:	88fb      	ldrh	r3, [r7, #6]
 8001654:	0a1b      	lsrs	r3, r3, #8
 8001656:	b29a      	uxth	r2, r3
 8001658:	4b67      	ldr	r3, [pc, #412]	; (80017f8 <LCD_SetCursor+0x1e8>)
 800165a:	60da      	str	r2, [r3, #12]
 800165c:	4b65      	ldr	r3, [pc, #404]	; (80017f4 <LCD_SetCursor+0x1e4>)
 800165e:	2280      	movs	r2, #128	; 0x80
 8001660:	615a      	str	r2, [r3, #20]
 8001662:	4b64      	ldr	r3, [pc, #400]	; (80017f4 <LCD_SetCursor+0x1e4>)
 8001664:	2280      	movs	r2, #128	; 0x80
 8001666:	611a      	str	r2, [r3, #16]
 8001668:	4b62      	ldr	r3, [pc, #392]	; (80017f4 <LCD_SetCursor+0x1e4>)
 800166a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800166e:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(Xpos & 0XFF);
 8001670:	4b60      	ldr	r3, [pc, #384]	; (80017f4 <LCD_SetCursor+0x1e4>)
 8001672:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001676:	611a      	str	r2, [r3, #16]
 8001678:	4b5e      	ldr	r3, [pc, #376]	; (80017f4 <LCD_SetCursor+0x1e4>)
 800167a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800167e:	615a      	str	r2, [r3, #20]
 8001680:	88fb      	ldrh	r3, [r7, #6]
 8001682:	4a5d      	ldr	r2, [pc, #372]	; (80017f8 <LCD_SetCursor+0x1e8>)
 8001684:	b2db      	uxtb	r3, r3
 8001686:	60d3      	str	r3, [r2, #12]
 8001688:	4b5a      	ldr	r3, [pc, #360]	; (80017f4 <LCD_SetCursor+0x1e4>)
 800168a:	2280      	movs	r2, #128	; 0x80
 800168c:	615a      	str	r2, [r3, #20]
 800168e:	4b59      	ldr	r3, [pc, #356]	; (80017f4 <LCD_SetCursor+0x1e4>)
 8001690:	2280      	movs	r2, #128	; 0x80
 8001692:	611a      	str	r2, [r3, #16]
 8001694:	4b57      	ldr	r3, [pc, #348]	; (80017f4 <LCD_SetCursor+0x1e4>)
 8001696:	f44f 7200 	mov.w	r2, #512	; 0x200
 800169a:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 800169c:	4b54      	ldr	r3, [pc, #336]	; (80017f0 <LCD_SetCursor+0x1e0>)
 800169e:	899b      	ldrh	r3, [r3, #12]
 80016a0:	4618      	mov	r0, r3
 80016a2:	f7ff fee3 	bl	800146c <LCD_WR_REG>
		LCD_WR_DATA(Ypos >> 8);
 80016a6:	4b53      	ldr	r3, [pc, #332]	; (80017f4 <LCD_SetCursor+0x1e4>)
 80016a8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016ac:	611a      	str	r2, [r3, #16]
 80016ae:	4b51      	ldr	r3, [pc, #324]	; (80017f4 <LCD_SetCursor+0x1e4>)
 80016b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016b4:	615a      	str	r2, [r3, #20]
 80016b6:	88bb      	ldrh	r3, [r7, #4]
 80016b8:	0a1b      	lsrs	r3, r3, #8
 80016ba:	b29a      	uxth	r2, r3
 80016bc:	4b4e      	ldr	r3, [pc, #312]	; (80017f8 <LCD_SetCursor+0x1e8>)
 80016be:	60da      	str	r2, [r3, #12]
 80016c0:	4b4c      	ldr	r3, [pc, #304]	; (80017f4 <LCD_SetCursor+0x1e4>)
 80016c2:	2280      	movs	r2, #128	; 0x80
 80016c4:	615a      	str	r2, [r3, #20]
 80016c6:	4b4b      	ldr	r3, [pc, #300]	; (80017f4 <LCD_SetCursor+0x1e4>)
 80016c8:	2280      	movs	r2, #128	; 0x80
 80016ca:	611a      	str	r2, [r3, #16]
 80016cc:	4b49      	ldr	r3, [pc, #292]	; (80017f4 <LCD_SetCursor+0x1e4>)
 80016ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016d2:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(Ypos & 0XFF);
 80016d4:	4b47      	ldr	r3, [pc, #284]	; (80017f4 <LCD_SetCursor+0x1e4>)
 80016d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016da:	611a      	str	r2, [r3, #16]
 80016dc:	4b45      	ldr	r3, [pc, #276]	; (80017f4 <LCD_SetCursor+0x1e4>)
 80016de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016e2:	615a      	str	r2, [r3, #20]
 80016e4:	88bb      	ldrh	r3, [r7, #4]
 80016e6:	4a44      	ldr	r2, [pc, #272]	; (80017f8 <LCD_SetCursor+0x1e8>)
 80016e8:	b2db      	uxtb	r3, r3
 80016ea:	60d3      	str	r3, [r2, #12]
 80016ec:	4b41      	ldr	r3, [pc, #260]	; (80017f4 <LCD_SetCursor+0x1e4>)
 80016ee:	2280      	movs	r2, #128	; 0x80
 80016f0:	615a      	str	r2, [r3, #20]
 80016f2:	4b40      	ldr	r3, [pc, #256]	; (80017f4 <LCD_SetCursor+0x1e4>)
 80016f4:	2280      	movs	r2, #128	; 0x80
 80016f6:	611a      	str	r2, [r3, #16]
 80016f8:	4b3e      	ldr	r3, [pc, #248]	; (80017f4 <LCD_SetCursor+0x1e4>)
 80016fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016fe:	611a      	str	r2, [r3, #16]
		if (lcddev.dir == 1)
			Xpos = lcddev.width - 1 - Xpos;	//横屏其实就是调转x,y坐标
		LCD_WriteReg(lcddev.setxcmd, Xpos);
		LCD_WriteReg(lcddev.setycmd, Ypos);
	}
}
 8001700:	e248      	b.n	8001b94 <LCD_SetCursor+0x584>
	} else if (lcddev.id == 0X6804) {
 8001702:	4b3b      	ldr	r3, [pc, #236]	; (80017f0 <LCD_SetCursor+0x1e0>)
 8001704:	889b      	ldrh	r3, [r3, #4]
 8001706:	f646 0204 	movw	r2, #26628	; 0x6804
 800170a:	4293      	cmp	r3, r2
 800170c:	d176      	bne.n	80017fc <LCD_SetCursor+0x1ec>
		if (lcddev.dir == 1)
 800170e:	4b38      	ldr	r3, [pc, #224]	; (80017f0 <LCD_SetCursor+0x1e0>)
 8001710:	799b      	ldrb	r3, [r3, #6]
 8001712:	2b01      	cmp	r3, #1
 8001714:	d106      	bne.n	8001724 <LCD_SetCursor+0x114>
			Xpos = lcddev.width - 1 - Xpos;	//横屏时处理
 8001716:	4b36      	ldr	r3, [pc, #216]	; (80017f0 <LCD_SetCursor+0x1e0>)
 8001718:	881a      	ldrh	r2, [r3, #0]
 800171a:	88fb      	ldrh	r3, [r7, #6]
 800171c:	1ad3      	subs	r3, r2, r3
 800171e:	b29b      	uxth	r3, r3
 8001720:	3b01      	subs	r3, #1
 8001722:	80fb      	strh	r3, [r7, #6]
		LCD_WR_REG(lcddev.setxcmd);
 8001724:	4b32      	ldr	r3, [pc, #200]	; (80017f0 <LCD_SetCursor+0x1e0>)
 8001726:	895b      	ldrh	r3, [r3, #10]
 8001728:	4618      	mov	r0, r3
 800172a:	f7ff fe9f 	bl	800146c <LCD_WR_REG>
		LCD_WR_DATA(Xpos >> 8);
 800172e:	4b31      	ldr	r3, [pc, #196]	; (80017f4 <LCD_SetCursor+0x1e4>)
 8001730:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001734:	611a      	str	r2, [r3, #16]
 8001736:	4b2f      	ldr	r3, [pc, #188]	; (80017f4 <LCD_SetCursor+0x1e4>)
 8001738:	f44f 7200 	mov.w	r2, #512	; 0x200
 800173c:	615a      	str	r2, [r3, #20]
 800173e:	88fb      	ldrh	r3, [r7, #6]
 8001740:	0a1b      	lsrs	r3, r3, #8
 8001742:	b29a      	uxth	r2, r3
 8001744:	4b2c      	ldr	r3, [pc, #176]	; (80017f8 <LCD_SetCursor+0x1e8>)
 8001746:	60da      	str	r2, [r3, #12]
 8001748:	4b2a      	ldr	r3, [pc, #168]	; (80017f4 <LCD_SetCursor+0x1e4>)
 800174a:	2280      	movs	r2, #128	; 0x80
 800174c:	615a      	str	r2, [r3, #20]
 800174e:	4b29      	ldr	r3, [pc, #164]	; (80017f4 <LCD_SetCursor+0x1e4>)
 8001750:	2280      	movs	r2, #128	; 0x80
 8001752:	611a      	str	r2, [r3, #16]
 8001754:	4b27      	ldr	r3, [pc, #156]	; (80017f4 <LCD_SetCursor+0x1e4>)
 8001756:	f44f 7200 	mov.w	r2, #512	; 0x200
 800175a:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(Xpos & 0XFF);
 800175c:	4b25      	ldr	r3, [pc, #148]	; (80017f4 <LCD_SetCursor+0x1e4>)
 800175e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001762:	611a      	str	r2, [r3, #16]
 8001764:	4b23      	ldr	r3, [pc, #140]	; (80017f4 <LCD_SetCursor+0x1e4>)
 8001766:	f44f 7200 	mov.w	r2, #512	; 0x200
 800176a:	615a      	str	r2, [r3, #20]
 800176c:	88fb      	ldrh	r3, [r7, #6]
 800176e:	4a22      	ldr	r2, [pc, #136]	; (80017f8 <LCD_SetCursor+0x1e8>)
 8001770:	b2db      	uxtb	r3, r3
 8001772:	60d3      	str	r3, [r2, #12]
 8001774:	4b1f      	ldr	r3, [pc, #124]	; (80017f4 <LCD_SetCursor+0x1e4>)
 8001776:	2280      	movs	r2, #128	; 0x80
 8001778:	615a      	str	r2, [r3, #20]
 800177a:	4b1e      	ldr	r3, [pc, #120]	; (80017f4 <LCD_SetCursor+0x1e4>)
 800177c:	2280      	movs	r2, #128	; 0x80
 800177e:	611a      	str	r2, [r3, #16]
 8001780:	4b1c      	ldr	r3, [pc, #112]	; (80017f4 <LCD_SetCursor+0x1e4>)
 8001782:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001786:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 8001788:	4b19      	ldr	r3, [pc, #100]	; (80017f0 <LCD_SetCursor+0x1e0>)
 800178a:	899b      	ldrh	r3, [r3, #12]
 800178c:	4618      	mov	r0, r3
 800178e:	f7ff fe6d 	bl	800146c <LCD_WR_REG>
		LCD_WR_DATA(Ypos >> 8);
 8001792:	4b18      	ldr	r3, [pc, #96]	; (80017f4 <LCD_SetCursor+0x1e4>)
 8001794:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001798:	611a      	str	r2, [r3, #16]
 800179a:	4b16      	ldr	r3, [pc, #88]	; (80017f4 <LCD_SetCursor+0x1e4>)
 800179c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017a0:	615a      	str	r2, [r3, #20]
 80017a2:	88bb      	ldrh	r3, [r7, #4]
 80017a4:	0a1b      	lsrs	r3, r3, #8
 80017a6:	b29a      	uxth	r2, r3
 80017a8:	4b13      	ldr	r3, [pc, #76]	; (80017f8 <LCD_SetCursor+0x1e8>)
 80017aa:	60da      	str	r2, [r3, #12]
 80017ac:	4b11      	ldr	r3, [pc, #68]	; (80017f4 <LCD_SetCursor+0x1e4>)
 80017ae:	2280      	movs	r2, #128	; 0x80
 80017b0:	615a      	str	r2, [r3, #20]
 80017b2:	4b10      	ldr	r3, [pc, #64]	; (80017f4 <LCD_SetCursor+0x1e4>)
 80017b4:	2280      	movs	r2, #128	; 0x80
 80017b6:	611a      	str	r2, [r3, #16]
 80017b8:	4b0e      	ldr	r3, [pc, #56]	; (80017f4 <LCD_SetCursor+0x1e4>)
 80017ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017be:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(Ypos & 0XFF);
 80017c0:	4b0c      	ldr	r3, [pc, #48]	; (80017f4 <LCD_SetCursor+0x1e4>)
 80017c2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017c6:	611a      	str	r2, [r3, #16]
 80017c8:	4b0a      	ldr	r3, [pc, #40]	; (80017f4 <LCD_SetCursor+0x1e4>)
 80017ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017ce:	615a      	str	r2, [r3, #20]
 80017d0:	88bb      	ldrh	r3, [r7, #4]
 80017d2:	4a09      	ldr	r2, [pc, #36]	; (80017f8 <LCD_SetCursor+0x1e8>)
 80017d4:	b2db      	uxtb	r3, r3
 80017d6:	60d3      	str	r3, [r2, #12]
 80017d8:	4b06      	ldr	r3, [pc, #24]	; (80017f4 <LCD_SetCursor+0x1e4>)
 80017da:	2280      	movs	r2, #128	; 0x80
 80017dc:	615a      	str	r2, [r3, #20]
 80017de:	4b05      	ldr	r3, [pc, #20]	; (80017f4 <LCD_SetCursor+0x1e4>)
 80017e0:	2280      	movs	r2, #128	; 0x80
 80017e2:	611a      	str	r2, [r3, #16]
 80017e4:	4b03      	ldr	r3, [pc, #12]	; (80017f4 <LCD_SetCursor+0x1e4>)
 80017e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017ea:	611a      	str	r2, [r3, #16]
}
 80017ec:	e1d2      	b.n	8001b94 <LCD_SetCursor+0x584>
 80017ee:	bf00      	nop
 80017f0:	200000bc 	.word	0x200000bc
 80017f4:	40011000 	.word	0x40011000
 80017f8:	40010c00 	.word	0x40010c00
	} else if (lcddev.id == 0X1963) {
 80017fc:	4b99      	ldr	r3, [pc, #612]	; (8001a64 <LCD_SetCursor+0x454>)
 80017fe:	889b      	ldrh	r3, [r3, #4]
 8001800:	f641 1263 	movw	r2, #6499	; 0x1963
 8001804:	4293      	cmp	r3, r2
 8001806:	f040 8133 	bne.w	8001a70 <LCD_SetCursor+0x460>
		if (lcddev.dir == 0)	//x坐标需要变换
 800180a:	4b96      	ldr	r3, [pc, #600]	; (8001a64 <LCD_SetCursor+0x454>)
 800180c:	799b      	ldrb	r3, [r3, #6]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d163      	bne.n	80018da <LCD_SetCursor+0x2ca>
			Xpos = lcddev.width - 1 - Xpos;
 8001812:	4b94      	ldr	r3, [pc, #592]	; (8001a64 <LCD_SetCursor+0x454>)
 8001814:	881a      	ldrh	r2, [r3, #0]
 8001816:	88fb      	ldrh	r3, [r7, #6]
 8001818:	1ad3      	subs	r3, r2, r3
 800181a:	b29b      	uxth	r3, r3
 800181c:	3b01      	subs	r3, #1
 800181e:	80fb      	strh	r3, [r7, #6]
			LCD_WR_REG(lcddev.setxcmd);
 8001820:	4b90      	ldr	r3, [pc, #576]	; (8001a64 <LCD_SetCursor+0x454>)
 8001822:	895b      	ldrh	r3, [r3, #10]
 8001824:	4618      	mov	r0, r3
 8001826:	f7ff fe21 	bl	800146c <LCD_WR_REG>
			LCD_WR_DATA(0);
 800182a:	4b8f      	ldr	r3, [pc, #572]	; (8001a68 <LCD_SetCursor+0x458>)
 800182c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001830:	611a      	str	r2, [r3, #16]
 8001832:	4b8d      	ldr	r3, [pc, #564]	; (8001a68 <LCD_SetCursor+0x458>)
 8001834:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001838:	615a      	str	r2, [r3, #20]
 800183a:	4b8c      	ldr	r3, [pc, #560]	; (8001a6c <LCD_SetCursor+0x45c>)
 800183c:	2200      	movs	r2, #0
 800183e:	60da      	str	r2, [r3, #12]
 8001840:	4b89      	ldr	r3, [pc, #548]	; (8001a68 <LCD_SetCursor+0x458>)
 8001842:	2280      	movs	r2, #128	; 0x80
 8001844:	615a      	str	r2, [r3, #20]
 8001846:	4b88      	ldr	r3, [pc, #544]	; (8001a68 <LCD_SetCursor+0x458>)
 8001848:	2280      	movs	r2, #128	; 0x80
 800184a:	611a      	str	r2, [r3, #16]
 800184c:	4b86      	ldr	r3, [pc, #536]	; (8001a68 <LCD_SetCursor+0x458>)
 800184e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001852:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(0);
 8001854:	4b84      	ldr	r3, [pc, #528]	; (8001a68 <LCD_SetCursor+0x458>)
 8001856:	f44f 7280 	mov.w	r2, #256	; 0x100
 800185a:	611a      	str	r2, [r3, #16]
 800185c:	4b82      	ldr	r3, [pc, #520]	; (8001a68 <LCD_SetCursor+0x458>)
 800185e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001862:	615a      	str	r2, [r3, #20]
 8001864:	4b81      	ldr	r3, [pc, #516]	; (8001a6c <LCD_SetCursor+0x45c>)
 8001866:	2200      	movs	r2, #0
 8001868:	60da      	str	r2, [r3, #12]
 800186a:	4b7f      	ldr	r3, [pc, #508]	; (8001a68 <LCD_SetCursor+0x458>)
 800186c:	2280      	movs	r2, #128	; 0x80
 800186e:	615a      	str	r2, [r3, #20]
 8001870:	4b7d      	ldr	r3, [pc, #500]	; (8001a68 <LCD_SetCursor+0x458>)
 8001872:	2280      	movs	r2, #128	; 0x80
 8001874:	611a      	str	r2, [r3, #16]
 8001876:	4b7c      	ldr	r3, [pc, #496]	; (8001a68 <LCD_SetCursor+0x458>)
 8001878:	f44f 7200 	mov.w	r2, #512	; 0x200
 800187c:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(Xpos >> 8);
 800187e:	4b7a      	ldr	r3, [pc, #488]	; (8001a68 <LCD_SetCursor+0x458>)
 8001880:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001884:	611a      	str	r2, [r3, #16]
 8001886:	4b78      	ldr	r3, [pc, #480]	; (8001a68 <LCD_SetCursor+0x458>)
 8001888:	f44f 7200 	mov.w	r2, #512	; 0x200
 800188c:	615a      	str	r2, [r3, #20]
 800188e:	88fb      	ldrh	r3, [r7, #6]
 8001890:	0a1b      	lsrs	r3, r3, #8
 8001892:	b29a      	uxth	r2, r3
 8001894:	4b75      	ldr	r3, [pc, #468]	; (8001a6c <LCD_SetCursor+0x45c>)
 8001896:	60da      	str	r2, [r3, #12]
 8001898:	4b73      	ldr	r3, [pc, #460]	; (8001a68 <LCD_SetCursor+0x458>)
 800189a:	2280      	movs	r2, #128	; 0x80
 800189c:	615a      	str	r2, [r3, #20]
 800189e:	4b72      	ldr	r3, [pc, #456]	; (8001a68 <LCD_SetCursor+0x458>)
 80018a0:	2280      	movs	r2, #128	; 0x80
 80018a2:	611a      	str	r2, [r3, #16]
 80018a4:	4b70      	ldr	r3, [pc, #448]	; (8001a68 <LCD_SetCursor+0x458>)
 80018a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018aa:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(Xpos & 0XFF);
 80018ac:	4b6e      	ldr	r3, [pc, #440]	; (8001a68 <LCD_SetCursor+0x458>)
 80018ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018b2:	611a      	str	r2, [r3, #16]
 80018b4:	4b6c      	ldr	r3, [pc, #432]	; (8001a68 <LCD_SetCursor+0x458>)
 80018b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018ba:	615a      	str	r2, [r3, #20]
 80018bc:	88fb      	ldrh	r3, [r7, #6]
 80018be:	4a6b      	ldr	r2, [pc, #428]	; (8001a6c <LCD_SetCursor+0x45c>)
 80018c0:	b2db      	uxtb	r3, r3
 80018c2:	60d3      	str	r3, [r2, #12]
 80018c4:	4b68      	ldr	r3, [pc, #416]	; (8001a68 <LCD_SetCursor+0x458>)
 80018c6:	2280      	movs	r2, #128	; 0x80
 80018c8:	615a      	str	r2, [r3, #20]
 80018ca:	4b67      	ldr	r3, [pc, #412]	; (8001a68 <LCD_SetCursor+0x458>)
 80018cc:	2280      	movs	r2, #128	; 0x80
 80018ce:	611a      	str	r2, [r3, #16]
 80018d0:	4b65      	ldr	r3, [pc, #404]	; (8001a68 <LCD_SetCursor+0x458>)
 80018d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018d6:	611a      	str	r2, [r3, #16]
 80018d8:	e061      	b.n	800199e <LCD_SetCursor+0x38e>
			LCD_WR_REG(lcddev.setxcmd);
 80018da:	4b62      	ldr	r3, [pc, #392]	; (8001a64 <LCD_SetCursor+0x454>)
 80018dc:	895b      	ldrh	r3, [r3, #10]
 80018de:	4618      	mov	r0, r3
 80018e0:	f7ff fdc4 	bl	800146c <LCD_WR_REG>
			LCD_WR_DATA(Xpos >> 8);
 80018e4:	4b60      	ldr	r3, [pc, #384]	; (8001a68 <LCD_SetCursor+0x458>)
 80018e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018ea:	611a      	str	r2, [r3, #16]
 80018ec:	4b5e      	ldr	r3, [pc, #376]	; (8001a68 <LCD_SetCursor+0x458>)
 80018ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018f2:	615a      	str	r2, [r3, #20]
 80018f4:	88fb      	ldrh	r3, [r7, #6]
 80018f6:	0a1b      	lsrs	r3, r3, #8
 80018f8:	b29a      	uxth	r2, r3
 80018fa:	4b5c      	ldr	r3, [pc, #368]	; (8001a6c <LCD_SetCursor+0x45c>)
 80018fc:	60da      	str	r2, [r3, #12]
 80018fe:	4b5a      	ldr	r3, [pc, #360]	; (8001a68 <LCD_SetCursor+0x458>)
 8001900:	2280      	movs	r2, #128	; 0x80
 8001902:	615a      	str	r2, [r3, #20]
 8001904:	4b58      	ldr	r3, [pc, #352]	; (8001a68 <LCD_SetCursor+0x458>)
 8001906:	2280      	movs	r2, #128	; 0x80
 8001908:	611a      	str	r2, [r3, #16]
 800190a:	4b57      	ldr	r3, [pc, #348]	; (8001a68 <LCD_SetCursor+0x458>)
 800190c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001910:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(Xpos & 0XFF);
 8001912:	4b55      	ldr	r3, [pc, #340]	; (8001a68 <LCD_SetCursor+0x458>)
 8001914:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001918:	611a      	str	r2, [r3, #16]
 800191a:	4b53      	ldr	r3, [pc, #332]	; (8001a68 <LCD_SetCursor+0x458>)
 800191c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001920:	615a      	str	r2, [r3, #20]
 8001922:	88fb      	ldrh	r3, [r7, #6]
 8001924:	4a51      	ldr	r2, [pc, #324]	; (8001a6c <LCD_SetCursor+0x45c>)
 8001926:	b2db      	uxtb	r3, r3
 8001928:	60d3      	str	r3, [r2, #12]
 800192a:	4b4f      	ldr	r3, [pc, #316]	; (8001a68 <LCD_SetCursor+0x458>)
 800192c:	2280      	movs	r2, #128	; 0x80
 800192e:	615a      	str	r2, [r3, #20]
 8001930:	4b4d      	ldr	r3, [pc, #308]	; (8001a68 <LCD_SetCursor+0x458>)
 8001932:	2280      	movs	r2, #128	; 0x80
 8001934:	611a      	str	r2, [r3, #16]
 8001936:	4b4c      	ldr	r3, [pc, #304]	; (8001a68 <LCD_SetCursor+0x458>)
 8001938:	f44f 7200 	mov.w	r2, #512	; 0x200
 800193c:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.width - 1) >> 8);
 800193e:	4b4a      	ldr	r3, [pc, #296]	; (8001a68 <LCD_SetCursor+0x458>)
 8001940:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001944:	611a      	str	r2, [r3, #16]
 8001946:	4b48      	ldr	r3, [pc, #288]	; (8001a68 <LCD_SetCursor+0x458>)
 8001948:	f44f 7200 	mov.w	r2, #512	; 0x200
 800194c:	615a      	str	r2, [r3, #20]
 800194e:	4b45      	ldr	r3, [pc, #276]	; (8001a64 <LCD_SetCursor+0x454>)
 8001950:	881b      	ldrh	r3, [r3, #0]
 8001952:	3b01      	subs	r3, #1
 8001954:	121a      	asrs	r2, r3, #8
 8001956:	4b45      	ldr	r3, [pc, #276]	; (8001a6c <LCD_SetCursor+0x45c>)
 8001958:	60da      	str	r2, [r3, #12]
 800195a:	4b43      	ldr	r3, [pc, #268]	; (8001a68 <LCD_SetCursor+0x458>)
 800195c:	2280      	movs	r2, #128	; 0x80
 800195e:	615a      	str	r2, [r3, #20]
 8001960:	4b41      	ldr	r3, [pc, #260]	; (8001a68 <LCD_SetCursor+0x458>)
 8001962:	2280      	movs	r2, #128	; 0x80
 8001964:	611a      	str	r2, [r3, #16]
 8001966:	4b40      	ldr	r3, [pc, #256]	; (8001a68 <LCD_SetCursor+0x458>)
 8001968:	f44f 7200 	mov.w	r2, #512	; 0x200
 800196c:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.width - 1) & 0XFF);
 800196e:	4b3e      	ldr	r3, [pc, #248]	; (8001a68 <LCD_SetCursor+0x458>)
 8001970:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001974:	611a      	str	r2, [r3, #16]
 8001976:	4b3c      	ldr	r3, [pc, #240]	; (8001a68 <LCD_SetCursor+0x458>)
 8001978:	f44f 7200 	mov.w	r2, #512	; 0x200
 800197c:	615a      	str	r2, [r3, #20]
 800197e:	4b39      	ldr	r3, [pc, #228]	; (8001a64 <LCD_SetCursor+0x454>)
 8001980:	881b      	ldrh	r3, [r3, #0]
 8001982:	3b01      	subs	r3, #1
 8001984:	4a39      	ldr	r2, [pc, #228]	; (8001a6c <LCD_SetCursor+0x45c>)
 8001986:	b2db      	uxtb	r3, r3
 8001988:	60d3      	str	r3, [r2, #12]
 800198a:	4b37      	ldr	r3, [pc, #220]	; (8001a68 <LCD_SetCursor+0x458>)
 800198c:	2280      	movs	r2, #128	; 0x80
 800198e:	615a      	str	r2, [r3, #20]
 8001990:	4b35      	ldr	r3, [pc, #212]	; (8001a68 <LCD_SetCursor+0x458>)
 8001992:	2280      	movs	r2, #128	; 0x80
 8001994:	611a      	str	r2, [r3, #16]
 8001996:	4b34      	ldr	r3, [pc, #208]	; (8001a68 <LCD_SetCursor+0x458>)
 8001998:	f44f 7200 	mov.w	r2, #512	; 0x200
 800199c:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 800199e:	4b31      	ldr	r3, [pc, #196]	; (8001a64 <LCD_SetCursor+0x454>)
 80019a0:	899b      	ldrh	r3, [r3, #12]
 80019a2:	4618      	mov	r0, r3
 80019a4:	f7ff fd62 	bl	800146c <LCD_WR_REG>
		LCD_WR_DATA(Ypos >> 8);
 80019a8:	4b2f      	ldr	r3, [pc, #188]	; (8001a68 <LCD_SetCursor+0x458>)
 80019aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80019ae:	611a      	str	r2, [r3, #16]
 80019b0:	4b2d      	ldr	r3, [pc, #180]	; (8001a68 <LCD_SetCursor+0x458>)
 80019b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019b6:	615a      	str	r2, [r3, #20]
 80019b8:	88bb      	ldrh	r3, [r7, #4]
 80019ba:	0a1b      	lsrs	r3, r3, #8
 80019bc:	b29a      	uxth	r2, r3
 80019be:	4b2b      	ldr	r3, [pc, #172]	; (8001a6c <LCD_SetCursor+0x45c>)
 80019c0:	60da      	str	r2, [r3, #12]
 80019c2:	4b29      	ldr	r3, [pc, #164]	; (8001a68 <LCD_SetCursor+0x458>)
 80019c4:	2280      	movs	r2, #128	; 0x80
 80019c6:	615a      	str	r2, [r3, #20]
 80019c8:	4b27      	ldr	r3, [pc, #156]	; (8001a68 <LCD_SetCursor+0x458>)
 80019ca:	2280      	movs	r2, #128	; 0x80
 80019cc:	611a      	str	r2, [r3, #16]
 80019ce:	4b26      	ldr	r3, [pc, #152]	; (8001a68 <LCD_SetCursor+0x458>)
 80019d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019d4:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(Ypos & 0XFF);
 80019d6:	4b24      	ldr	r3, [pc, #144]	; (8001a68 <LCD_SetCursor+0x458>)
 80019d8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80019dc:	611a      	str	r2, [r3, #16]
 80019de:	4b22      	ldr	r3, [pc, #136]	; (8001a68 <LCD_SetCursor+0x458>)
 80019e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019e4:	615a      	str	r2, [r3, #20]
 80019e6:	88bb      	ldrh	r3, [r7, #4]
 80019e8:	4a20      	ldr	r2, [pc, #128]	; (8001a6c <LCD_SetCursor+0x45c>)
 80019ea:	b2db      	uxtb	r3, r3
 80019ec:	60d3      	str	r3, [r2, #12]
 80019ee:	4b1e      	ldr	r3, [pc, #120]	; (8001a68 <LCD_SetCursor+0x458>)
 80019f0:	2280      	movs	r2, #128	; 0x80
 80019f2:	615a      	str	r2, [r3, #20]
 80019f4:	4b1c      	ldr	r3, [pc, #112]	; (8001a68 <LCD_SetCursor+0x458>)
 80019f6:	2280      	movs	r2, #128	; 0x80
 80019f8:	611a      	str	r2, [r3, #16]
 80019fa:	4b1b      	ldr	r3, [pc, #108]	; (8001a68 <LCD_SetCursor+0x458>)
 80019fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a00:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA((lcddev.height - 1) >> 8);
 8001a02:	4b19      	ldr	r3, [pc, #100]	; (8001a68 <LCD_SetCursor+0x458>)
 8001a04:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a08:	611a      	str	r2, [r3, #16]
 8001a0a:	4b17      	ldr	r3, [pc, #92]	; (8001a68 <LCD_SetCursor+0x458>)
 8001a0c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a10:	615a      	str	r2, [r3, #20]
 8001a12:	4b14      	ldr	r3, [pc, #80]	; (8001a64 <LCD_SetCursor+0x454>)
 8001a14:	885b      	ldrh	r3, [r3, #2]
 8001a16:	3b01      	subs	r3, #1
 8001a18:	121a      	asrs	r2, r3, #8
 8001a1a:	4b14      	ldr	r3, [pc, #80]	; (8001a6c <LCD_SetCursor+0x45c>)
 8001a1c:	60da      	str	r2, [r3, #12]
 8001a1e:	4b12      	ldr	r3, [pc, #72]	; (8001a68 <LCD_SetCursor+0x458>)
 8001a20:	2280      	movs	r2, #128	; 0x80
 8001a22:	615a      	str	r2, [r3, #20]
 8001a24:	4b10      	ldr	r3, [pc, #64]	; (8001a68 <LCD_SetCursor+0x458>)
 8001a26:	2280      	movs	r2, #128	; 0x80
 8001a28:	611a      	str	r2, [r3, #16]
 8001a2a:	4b0f      	ldr	r3, [pc, #60]	; (8001a68 <LCD_SetCursor+0x458>)
 8001a2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a30:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA((lcddev.height - 1) & 0XFF);
 8001a32:	4b0d      	ldr	r3, [pc, #52]	; (8001a68 <LCD_SetCursor+0x458>)
 8001a34:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a38:	611a      	str	r2, [r3, #16]
 8001a3a:	4b0b      	ldr	r3, [pc, #44]	; (8001a68 <LCD_SetCursor+0x458>)
 8001a3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a40:	615a      	str	r2, [r3, #20]
 8001a42:	4b08      	ldr	r3, [pc, #32]	; (8001a64 <LCD_SetCursor+0x454>)
 8001a44:	885b      	ldrh	r3, [r3, #2]
 8001a46:	3b01      	subs	r3, #1
 8001a48:	4a08      	ldr	r2, [pc, #32]	; (8001a6c <LCD_SetCursor+0x45c>)
 8001a4a:	b2db      	uxtb	r3, r3
 8001a4c:	60d3      	str	r3, [r2, #12]
 8001a4e:	4b06      	ldr	r3, [pc, #24]	; (8001a68 <LCD_SetCursor+0x458>)
 8001a50:	2280      	movs	r2, #128	; 0x80
 8001a52:	615a      	str	r2, [r3, #20]
 8001a54:	4b04      	ldr	r3, [pc, #16]	; (8001a68 <LCD_SetCursor+0x458>)
 8001a56:	2280      	movs	r2, #128	; 0x80
 8001a58:	611a      	str	r2, [r3, #16]
 8001a5a:	4b03      	ldr	r3, [pc, #12]	; (8001a68 <LCD_SetCursor+0x458>)
 8001a5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a60:	611a      	str	r2, [r3, #16]
}
 8001a62:	e097      	b.n	8001b94 <LCD_SetCursor+0x584>
 8001a64:	200000bc 	.word	0x200000bc
 8001a68:	40011000 	.word	0x40011000
 8001a6c:	40010c00 	.word	0x40010c00
	} else if (lcddev.id == 0X5510) {
 8001a70:	4b4a      	ldr	r3, [pc, #296]	; (8001b9c <LCD_SetCursor+0x58c>)
 8001a72:	889b      	ldrh	r3, [r3, #4]
 8001a74:	f245 5210 	movw	r2, #21776	; 0x5510
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	d172      	bne.n	8001b62 <LCD_SetCursor+0x552>
		LCD_WR_REG(lcddev.setxcmd);
 8001a7c:	4b47      	ldr	r3, [pc, #284]	; (8001b9c <LCD_SetCursor+0x58c>)
 8001a7e:	895b      	ldrh	r3, [r3, #10]
 8001a80:	4618      	mov	r0, r3
 8001a82:	f7ff fcf3 	bl	800146c <LCD_WR_REG>
		LCD_WR_DATA(Xpos >> 8);
 8001a86:	4b46      	ldr	r3, [pc, #280]	; (8001ba0 <LCD_SetCursor+0x590>)
 8001a88:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a8c:	611a      	str	r2, [r3, #16]
 8001a8e:	4b44      	ldr	r3, [pc, #272]	; (8001ba0 <LCD_SetCursor+0x590>)
 8001a90:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a94:	615a      	str	r2, [r3, #20]
 8001a96:	88fb      	ldrh	r3, [r7, #6]
 8001a98:	0a1b      	lsrs	r3, r3, #8
 8001a9a:	b29a      	uxth	r2, r3
 8001a9c:	4b41      	ldr	r3, [pc, #260]	; (8001ba4 <LCD_SetCursor+0x594>)
 8001a9e:	60da      	str	r2, [r3, #12]
 8001aa0:	4b3f      	ldr	r3, [pc, #252]	; (8001ba0 <LCD_SetCursor+0x590>)
 8001aa2:	2280      	movs	r2, #128	; 0x80
 8001aa4:	615a      	str	r2, [r3, #20]
 8001aa6:	4b3e      	ldr	r3, [pc, #248]	; (8001ba0 <LCD_SetCursor+0x590>)
 8001aa8:	2280      	movs	r2, #128	; 0x80
 8001aaa:	611a      	str	r2, [r3, #16]
 8001aac:	4b3c      	ldr	r3, [pc, #240]	; (8001ba0 <LCD_SetCursor+0x590>)
 8001aae:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ab2:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setxcmd + 1);
 8001ab4:	4b39      	ldr	r3, [pc, #228]	; (8001b9c <LCD_SetCursor+0x58c>)
 8001ab6:	895b      	ldrh	r3, [r3, #10]
 8001ab8:	3301      	adds	r3, #1
 8001aba:	b29b      	uxth	r3, r3
 8001abc:	4618      	mov	r0, r3
 8001abe:	f7ff fcd5 	bl	800146c <LCD_WR_REG>
		LCD_WR_DATA(Xpos & 0XFF);
 8001ac2:	4b37      	ldr	r3, [pc, #220]	; (8001ba0 <LCD_SetCursor+0x590>)
 8001ac4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ac8:	611a      	str	r2, [r3, #16]
 8001aca:	4b35      	ldr	r3, [pc, #212]	; (8001ba0 <LCD_SetCursor+0x590>)
 8001acc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ad0:	615a      	str	r2, [r3, #20]
 8001ad2:	88fb      	ldrh	r3, [r7, #6]
 8001ad4:	4a33      	ldr	r2, [pc, #204]	; (8001ba4 <LCD_SetCursor+0x594>)
 8001ad6:	b2db      	uxtb	r3, r3
 8001ad8:	60d3      	str	r3, [r2, #12]
 8001ada:	4b31      	ldr	r3, [pc, #196]	; (8001ba0 <LCD_SetCursor+0x590>)
 8001adc:	2280      	movs	r2, #128	; 0x80
 8001ade:	615a      	str	r2, [r3, #20]
 8001ae0:	4b2f      	ldr	r3, [pc, #188]	; (8001ba0 <LCD_SetCursor+0x590>)
 8001ae2:	2280      	movs	r2, #128	; 0x80
 8001ae4:	611a      	str	r2, [r3, #16]
 8001ae6:	4b2e      	ldr	r3, [pc, #184]	; (8001ba0 <LCD_SetCursor+0x590>)
 8001ae8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001aec:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 8001aee:	4b2b      	ldr	r3, [pc, #172]	; (8001b9c <LCD_SetCursor+0x58c>)
 8001af0:	899b      	ldrh	r3, [r3, #12]
 8001af2:	4618      	mov	r0, r3
 8001af4:	f7ff fcba 	bl	800146c <LCD_WR_REG>
		LCD_WR_DATA(Ypos >> 8);
 8001af8:	4b29      	ldr	r3, [pc, #164]	; (8001ba0 <LCD_SetCursor+0x590>)
 8001afa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001afe:	611a      	str	r2, [r3, #16]
 8001b00:	4b27      	ldr	r3, [pc, #156]	; (8001ba0 <LCD_SetCursor+0x590>)
 8001b02:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b06:	615a      	str	r2, [r3, #20]
 8001b08:	88bb      	ldrh	r3, [r7, #4]
 8001b0a:	0a1b      	lsrs	r3, r3, #8
 8001b0c:	b29a      	uxth	r2, r3
 8001b0e:	4b25      	ldr	r3, [pc, #148]	; (8001ba4 <LCD_SetCursor+0x594>)
 8001b10:	60da      	str	r2, [r3, #12]
 8001b12:	4b23      	ldr	r3, [pc, #140]	; (8001ba0 <LCD_SetCursor+0x590>)
 8001b14:	2280      	movs	r2, #128	; 0x80
 8001b16:	615a      	str	r2, [r3, #20]
 8001b18:	4b21      	ldr	r3, [pc, #132]	; (8001ba0 <LCD_SetCursor+0x590>)
 8001b1a:	2280      	movs	r2, #128	; 0x80
 8001b1c:	611a      	str	r2, [r3, #16]
 8001b1e:	4b20      	ldr	r3, [pc, #128]	; (8001ba0 <LCD_SetCursor+0x590>)
 8001b20:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b24:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd + 1);
 8001b26:	4b1d      	ldr	r3, [pc, #116]	; (8001b9c <LCD_SetCursor+0x58c>)
 8001b28:	899b      	ldrh	r3, [r3, #12]
 8001b2a:	3301      	adds	r3, #1
 8001b2c:	b29b      	uxth	r3, r3
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f7ff fc9c 	bl	800146c <LCD_WR_REG>
		LCD_WR_DATA(Ypos & 0XFF);
 8001b34:	4b1a      	ldr	r3, [pc, #104]	; (8001ba0 <LCD_SetCursor+0x590>)
 8001b36:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b3a:	611a      	str	r2, [r3, #16]
 8001b3c:	4b18      	ldr	r3, [pc, #96]	; (8001ba0 <LCD_SetCursor+0x590>)
 8001b3e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b42:	615a      	str	r2, [r3, #20]
 8001b44:	88bb      	ldrh	r3, [r7, #4]
 8001b46:	4a17      	ldr	r2, [pc, #92]	; (8001ba4 <LCD_SetCursor+0x594>)
 8001b48:	b2db      	uxtb	r3, r3
 8001b4a:	60d3      	str	r3, [r2, #12]
 8001b4c:	4b14      	ldr	r3, [pc, #80]	; (8001ba0 <LCD_SetCursor+0x590>)
 8001b4e:	2280      	movs	r2, #128	; 0x80
 8001b50:	615a      	str	r2, [r3, #20]
 8001b52:	4b13      	ldr	r3, [pc, #76]	; (8001ba0 <LCD_SetCursor+0x590>)
 8001b54:	2280      	movs	r2, #128	; 0x80
 8001b56:	611a      	str	r2, [r3, #16]
 8001b58:	4b11      	ldr	r3, [pc, #68]	; (8001ba0 <LCD_SetCursor+0x590>)
 8001b5a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b5e:	611a      	str	r2, [r3, #16]
}
 8001b60:	e018      	b.n	8001b94 <LCD_SetCursor+0x584>
		if (lcddev.dir == 1)
 8001b62:	4b0e      	ldr	r3, [pc, #56]	; (8001b9c <LCD_SetCursor+0x58c>)
 8001b64:	799b      	ldrb	r3, [r3, #6]
 8001b66:	2b01      	cmp	r3, #1
 8001b68:	d106      	bne.n	8001b78 <LCD_SetCursor+0x568>
			Xpos = lcddev.width - 1 - Xpos;	//横屏其实就是调转x,y坐标
 8001b6a:	4b0c      	ldr	r3, [pc, #48]	; (8001b9c <LCD_SetCursor+0x58c>)
 8001b6c:	881a      	ldrh	r2, [r3, #0]
 8001b6e:	88fb      	ldrh	r3, [r7, #6]
 8001b70:	1ad3      	subs	r3, r2, r3
 8001b72:	b29b      	uxth	r3, r3
 8001b74:	3b01      	subs	r3, #1
 8001b76:	80fb      	strh	r3, [r7, #6]
		LCD_WriteReg(lcddev.setxcmd, Xpos);
 8001b78:	4b08      	ldr	r3, [pc, #32]	; (8001b9c <LCD_SetCursor+0x58c>)
 8001b7a:	895b      	ldrh	r3, [r3, #10]
 8001b7c:	88fa      	ldrh	r2, [r7, #6]
 8001b7e:	4611      	mov	r1, r2
 8001b80:	4618      	mov	r0, r3
 8001b82:	f7ff fcff 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(lcddev.setycmd, Ypos);
 8001b86:	4b05      	ldr	r3, [pc, #20]	; (8001b9c <LCD_SetCursor+0x58c>)
 8001b88:	899b      	ldrh	r3, [r3, #12]
 8001b8a:	88ba      	ldrh	r2, [r7, #4]
 8001b8c:	4611      	mov	r1, r2
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f7ff fcf8 	bl	8001584 <LCD_WriteReg>
}
 8001b94:	bf00      	nop
 8001b96:	3708      	adds	r7, #8
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	200000bc 	.word	0x200000bc
 8001ba0:	40011000 	.word	0x40011000
 8001ba4:	40010c00 	.word	0x40010c00

08001ba8 <LCD_Scan_Dir>:
//设置LCD的自动扫描方向
//注意:其他函数可能会受到此函数设置的影响(尤其是9341/6804这两个奇葩),
//所以,一般设置为L2R_U2D即可,如果设置为其他扫描方式,可能导致显示不正常.
//dir:0~7,代表8个方向(具体定义见lcd.h)
//9320/9325/9328/4531/4535/1505/b505/5408/9341/5310/5510/1963等IC已经实际测试	   	   
void LCD_Scan_Dir(uint8_t dir) {
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b084      	sub	sp, #16
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	4603      	mov	r3, r0
 8001bb0:	71fb      	strb	r3, [r7, #7]
	uint16_t regval = 0;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	81fb      	strh	r3, [r7, #14]
	uint16_t dirreg = 0;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	81bb      	strh	r3, [r7, #12]
	uint16_t temp;
	if ((lcddev.dir == 1 && lcddev.id != 0X6804 && lcddev.id != 0X1963)
 8001bba:	4b78      	ldr	r3, [pc, #480]	; (8001d9c <LCD_Scan_Dir+0x1f4>)
 8001bbc:	799b      	ldrb	r3, [r3, #6]
 8001bbe:	2b01      	cmp	r3, #1
 8001bc0:	d10b      	bne.n	8001bda <LCD_Scan_Dir+0x32>
 8001bc2:	4b76      	ldr	r3, [pc, #472]	; (8001d9c <LCD_Scan_Dir+0x1f4>)
 8001bc4:	889b      	ldrh	r3, [r3, #4]
 8001bc6:	f646 0204 	movw	r2, #26628	; 0x6804
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d005      	beq.n	8001bda <LCD_Scan_Dir+0x32>
 8001bce:	4b73      	ldr	r3, [pc, #460]	; (8001d9c <LCD_Scan_Dir+0x1f4>)
 8001bd0:	889b      	ldrh	r3, [r3, #4]
 8001bd2:	f641 1263 	movw	r2, #6499	; 0x1963
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d109      	bne.n	8001bee <LCD_Scan_Dir+0x46>
			|| (lcddev.dir == 0 && lcddev.id == 0X1963))//横屏时，对6804和1963不改变扫描方向！竖屏时1963改变方向
 8001bda:	4b70      	ldr	r3, [pc, #448]	; (8001d9c <LCD_Scan_Dir+0x1f4>)
 8001bdc:	799b      	ldrb	r3, [r3, #6]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d134      	bne.n	8001c4c <LCD_Scan_Dir+0xa4>
 8001be2:	4b6e      	ldr	r3, [pc, #440]	; (8001d9c <LCD_Scan_Dir+0x1f4>)
 8001be4:	889b      	ldrh	r3, [r3, #4]
 8001be6:	f641 1263 	movw	r2, #6499	; 0x1963
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d12e      	bne.n	8001c4c <LCD_Scan_Dir+0xa4>
			{
		switch (dir)	//方向转换
 8001bee:	79fb      	ldrb	r3, [r7, #7]
 8001bf0:	2b07      	cmp	r3, #7
 8001bf2:	d82b      	bhi.n	8001c4c <LCD_Scan_Dir+0xa4>
 8001bf4:	a201      	add	r2, pc, #4	; (adr r2, 8001bfc <LCD_Scan_Dir+0x54>)
 8001bf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bfa:	bf00      	nop
 8001bfc:	08001c1d 	.word	0x08001c1d
 8001c00:	08001c23 	.word	0x08001c23
 8001c04:	08001c29 	.word	0x08001c29
 8001c08:	08001c2f 	.word	0x08001c2f
 8001c0c:	08001c35 	.word	0x08001c35
 8001c10:	08001c3b 	.word	0x08001c3b
 8001c14:	08001c41 	.word	0x08001c41
 8001c18:	08001c47 	.word	0x08001c47
		{
		case 0:
			dir = 6;
 8001c1c:	2306      	movs	r3, #6
 8001c1e:	71fb      	strb	r3, [r7, #7]
			break;
 8001c20:	e014      	b.n	8001c4c <LCD_Scan_Dir+0xa4>
		case 1:
			dir = 7;
 8001c22:	2307      	movs	r3, #7
 8001c24:	71fb      	strb	r3, [r7, #7]
			break;
 8001c26:	e011      	b.n	8001c4c <LCD_Scan_Dir+0xa4>
		case 2:
			dir = 4;
 8001c28:	2304      	movs	r3, #4
 8001c2a:	71fb      	strb	r3, [r7, #7]
			break;
 8001c2c:	e00e      	b.n	8001c4c <LCD_Scan_Dir+0xa4>
		case 3:
			dir = 5;
 8001c2e:	2305      	movs	r3, #5
 8001c30:	71fb      	strb	r3, [r7, #7]
			break;
 8001c32:	e00b      	b.n	8001c4c <LCD_Scan_Dir+0xa4>
		case 4:
			dir = 1;
 8001c34:	2301      	movs	r3, #1
 8001c36:	71fb      	strb	r3, [r7, #7]
			break;
 8001c38:	e008      	b.n	8001c4c <LCD_Scan_Dir+0xa4>
		case 5:
			dir = 0;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	71fb      	strb	r3, [r7, #7]
			break;
 8001c3e:	e005      	b.n	8001c4c <LCD_Scan_Dir+0xa4>
		case 6:
			dir = 3;
 8001c40:	2303      	movs	r3, #3
 8001c42:	71fb      	strb	r3, [r7, #7]
			break;
 8001c44:	e002      	b.n	8001c4c <LCD_Scan_Dir+0xa4>
		case 7:
			dir = 2;
 8001c46:	2302      	movs	r3, #2
 8001c48:	71fb      	strb	r3, [r7, #7]
			break;
 8001c4a:	bf00      	nop
		}
	}
	if (lcddev.id == 0x9341 || lcddev.id == 0X6804 || lcddev.id == 0X5310
 8001c4c:	4b53      	ldr	r3, [pc, #332]	; (8001d9c <LCD_Scan_Dir+0x1f4>)
 8001c4e:	889b      	ldrh	r3, [r3, #4]
 8001c50:	f249 3241 	movw	r2, #37697	; 0x9341
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d018      	beq.n	8001c8a <LCD_Scan_Dir+0xe2>
 8001c58:	4b50      	ldr	r3, [pc, #320]	; (8001d9c <LCD_Scan_Dir+0x1f4>)
 8001c5a:	889b      	ldrh	r3, [r3, #4]
 8001c5c:	f646 0204 	movw	r2, #26628	; 0x6804
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d012      	beq.n	8001c8a <LCD_Scan_Dir+0xe2>
 8001c64:	4b4d      	ldr	r3, [pc, #308]	; (8001d9c <LCD_Scan_Dir+0x1f4>)
 8001c66:	889b      	ldrh	r3, [r3, #4]
 8001c68:	f245 3210 	movw	r2, #21264	; 0x5310
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d00c      	beq.n	8001c8a <LCD_Scan_Dir+0xe2>
			|| lcddev.id == 0X5510 || lcddev.id == 0X1963)//9341/6804/5310/5510/1963,特殊处理
 8001c70:	4b4a      	ldr	r3, [pc, #296]	; (8001d9c <LCD_Scan_Dir+0x1f4>)
 8001c72:	889b      	ldrh	r3, [r3, #4]
 8001c74:	f245 5210 	movw	r2, #21776	; 0x5510
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	d006      	beq.n	8001c8a <LCD_Scan_Dir+0xe2>
 8001c7c:	4b47      	ldr	r3, [pc, #284]	; (8001d9c <LCD_Scan_Dir+0x1f4>)
 8001c7e:	889b      	ldrh	r3, [r3, #4]
 8001c80:	f641 1263 	movw	r2, #6499	; 0x1963
 8001c84:	4293      	cmp	r3, r2
 8001c86:	f040 8250 	bne.w	800212a <LCD_Scan_Dir+0x582>
					{
		switch (dir) {
 8001c8a:	79fb      	ldrb	r3, [r7, #7]
 8001c8c:	2b07      	cmp	r3, #7
 8001c8e:	d836      	bhi.n	8001cfe <LCD_Scan_Dir+0x156>
 8001c90:	a201      	add	r2, pc, #4	; (adr r2, 8001c98 <LCD_Scan_Dir+0xf0>)
 8001c92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c96:	bf00      	nop
 8001c98:	08001cff 	.word	0x08001cff
 8001c9c:	08001cb9 	.word	0x08001cb9
 8001ca0:	08001cc3 	.word	0x08001cc3
 8001ca4:	08001ccd 	.word	0x08001ccd
 8001ca8:	08001cd7 	.word	0x08001cd7
 8001cac:	08001ce1 	.word	0x08001ce1
 8001cb0:	08001ceb 	.word	0x08001ceb
 8001cb4:	08001cf5 	.word	0x08001cf5
		case L2R_U2D:	//从左到右,从上到下
			regval |= (0 << 7) | (0 << 6) | (0 << 5);
			break;
		case L2R_D2U:	//从左到右,从下到上
			regval |= (1 << 7) | (0 << 6) | (0 << 5);
 8001cb8:	89fb      	ldrh	r3, [r7, #14]
 8001cba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001cbe:	81fb      	strh	r3, [r7, #14]
			break;
 8001cc0:	e01d      	b.n	8001cfe <LCD_Scan_Dir+0x156>
		case R2L_U2D:	//从右到左,从上到下
			regval |= (0 << 7) | (1 << 6) | (0 << 5);
 8001cc2:	89fb      	ldrh	r3, [r7, #14]
 8001cc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001cc8:	81fb      	strh	r3, [r7, #14]
			break;
 8001cca:	e018      	b.n	8001cfe <LCD_Scan_Dir+0x156>
		case R2L_D2U:	//从右到左,从下到上
			regval |= (1 << 7) | (1 << 6) | (0 << 5);
 8001ccc:	89fb      	ldrh	r3, [r7, #14]
 8001cce:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001cd2:	81fb      	strh	r3, [r7, #14]
			break;
 8001cd4:	e013      	b.n	8001cfe <LCD_Scan_Dir+0x156>
		case U2D_L2R:	//从上到下,从左到右
			regval |= (0 << 7) | (0 << 6) | (1 << 5);
 8001cd6:	89fb      	ldrh	r3, [r7, #14]
 8001cd8:	f043 0320 	orr.w	r3, r3, #32
 8001cdc:	81fb      	strh	r3, [r7, #14]
			break;
 8001cde:	e00e      	b.n	8001cfe <LCD_Scan_Dir+0x156>
		case U2D_R2L:	//从上到下,从右到左
			regval |= (0 << 7) | (1 << 6) | (1 << 5);
 8001ce0:	89fb      	ldrh	r3, [r7, #14]
 8001ce2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001ce6:	81fb      	strh	r3, [r7, #14]
			break;
 8001ce8:	e009      	b.n	8001cfe <LCD_Scan_Dir+0x156>
		case D2U_L2R:	//从下到上,从左到右
			regval |= (1 << 7) | (0 << 6) | (1 << 5);
 8001cea:	89fb      	ldrh	r3, [r7, #14]
 8001cec:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8001cf0:	81fb      	strh	r3, [r7, #14]
			break;
 8001cf2:	e004      	b.n	8001cfe <LCD_Scan_Dir+0x156>
		case D2U_R2L:	//从下到上,从右到左
			regval |= (1 << 7) | (1 << 6) | (1 << 5);
 8001cf4:	89fb      	ldrh	r3, [r7, #14]
 8001cf6:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8001cfa:	81fb      	strh	r3, [r7, #14]
			break;
 8001cfc:	bf00      	nop
		}
		if (lcddev.id == 0X5510)
 8001cfe:	4b27      	ldr	r3, [pc, #156]	; (8001d9c <LCD_Scan_Dir+0x1f4>)
 8001d00:	889b      	ldrh	r3, [r3, #4]
 8001d02:	f245 5210 	movw	r2, #21776	; 0x5510
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d103      	bne.n	8001d12 <LCD_Scan_Dir+0x16a>
			dirreg = 0X3600;
 8001d0a:	f44f 5358 	mov.w	r3, #13824	; 0x3600
 8001d0e:	81bb      	strh	r3, [r7, #12]
 8001d10:	e001      	b.n	8001d16 <LCD_Scan_Dir+0x16e>
		else
			dirreg = 0X36;
 8001d12:	2336      	movs	r3, #54	; 0x36
 8001d14:	81bb      	strh	r3, [r7, #12]
		if ((lcddev.id != 0X5310) && (lcddev.id != 0X5510) && (lcddev.id != 0X1963))
 8001d16:	4b21      	ldr	r3, [pc, #132]	; (8001d9c <LCD_Scan_Dir+0x1f4>)
 8001d18:	889b      	ldrh	r3, [r3, #4]
 8001d1a:	f245 3210 	movw	r2, #21264	; 0x5310
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d00f      	beq.n	8001d42 <LCD_Scan_Dir+0x19a>
 8001d22:	4b1e      	ldr	r3, [pc, #120]	; (8001d9c <LCD_Scan_Dir+0x1f4>)
 8001d24:	889b      	ldrh	r3, [r3, #4]
 8001d26:	f245 5210 	movw	r2, #21776	; 0x5510
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d009      	beq.n	8001d42 <LCD_Scan_Dir+0x19a>
 8001d2e:	4b1b      	ldr	r3, [pc, #108]	; (8001d9c <LCD_Scan_Dir+0x1f4>)
 8001d30:	889b      	ldrh	r3, [r3, #4]
 8001d32:	f641 1263 	movw	r2, #6499	; 0x1963
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d003      	beq.n	8001d42 <LCD_Scan_Dir+0x19a>
			regval |= 0X08;	//5310/5510/1963不需要BGR
 8001d3a:	89fb      	ldrh	r3, [r7, #14]
 8001d3c:	f043 0308 	orr.w	r3, r3, #8
 8001d40:	81fb      	strh	r3, [r7, #14]
		if (lcddev.id == 0X6804)
 8001d42:	4b16      	ldr	r3, [pc, #88]	; (8001d9c <LCD_Scan_Dir+0x1f4>)
 8001d44:	889b      	ldrh	r3, [r3, #4]
 8001d46:	f646 0204 	movw	r2, #26628	; 0x6804
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d103      	bne.n	8001d56 <LCD_Scan_Dir+0x1ae>
			regval |= 0x02;	//6804的BIT6和9341的反了
 8001d4e:	89fb      	ldrh	r3, [r7, #14]
 8001d50:	f043 0302 	orr.w	r3, r3, #2
 8001d54:	81fb      	strh	r3, [r7, #14]
		LCD_WriteReg(dirreg, regval);
 8001d56:	89fa      	ldrh	r2, [r7, #14]
 8001d58:	89bb      	ldrh	r3, [r7, #12]
 8001d5a:	4611      	mov	r1, r2
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f7ff fc11 	bl	8001584 <LCD_WriteReg>
		if (lcddev.id != 0X1963)	//1963不做坐标处理
 8001d62:	4b0e      	ldr	r3, [pc, #56]	; (8001d9c <LCD_Scan_Dir+0x1f4>)
 8001d64:	889b      	ldrh	r3, [r3, #4]
 8001d66:	f641 1263 	movw	r2, #6499	; 0x1963
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d028      	beq.n	8001dc0 <LCD_Scan_Dir+0x218>
				{
			if (regval & 0X20) {
 8001d6e:	89fb      	ldrh	r3, [r7, #14]
 8001d70:	f003 0320 	and.w	r3, r3, #32
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d013      	beq.n	8001da0 <LCD_Scan_Dir+0x1f8>
				if (lcddev.width < lcddev.height)	//交换X,Y
 8001d78:	4b08      	ldr	r3, [pc, #32]	; (8001d9c <LCD_Scan_Dir+0x1f4>)
 8001d7a:	881a      	ldrh	r2, [r3, #0]
 8001d7c:	4b07      	ldr	r3, [pc, #28]	; (8001d9c <LCD_Scan_Dir+0x1f4>)
 8001d7e:	885b      	ldrh	r3, [r3, #2]
 8001d80:	429a      	cmp	r2, r3
 8001d82:	d21d      	bcs.n	8001dc0 <LCD_Scan_Dir+0x218>
						{
					temp = lcddev.width;
 8001d84:	4b05      	ldr	r3, [pc, #20]	; (8001d9c <LCD_Scan_Dir+0x1f4>)
 8001d86:	881b      	ldrh	r3, [r3, #0]
 8001d88:	817b      	strh	r3, [r7, #10]
					lcddev.width = lcddev.height;
 8001d8a:	4b04      	ldr	r3, [pc, #16]	; (8001d9c <LCD_Scan_Dir+0x1f4>)
 8001d8c:	885a      	ldrh	r2, [r3, #2]
 8001d8e:	4b03      	ldr	r3, [pc, #12]	; (8001d9c <LCD_Scan_Dir+0x1f4>)
 8001d90:	801a      	strh	r2, [r3, #0]
					lcddev.height = temp;
 8001d92:	4a02      	ldr	r2, [pc, #8]	; (8001d9c <LCD_Scan_Dir+0x1f4>)
 8001d94:	897b      	ldrh	r3, [r7, #10]
 8001d96:	8053      	strh	r3, [r2, #2]
 8001d98:	e012      	b.n	8001dc0 <LCD_Scan_Dir+0x218>
 8001d9a:	bf00      	nop
 8001d9c:	200000bc 	.word	0x200000bc
				}
			} else {
				if (lcddev.width > lcddev.height)	//交换X,Y
 8001da0:	4b7f      	ldr	r3, [pc, #508]	; (8001fa0 <LCD_Scan_Dir+0x3f8>)
 8001da2:	881a      	ldrh	r2, [r3, #0]
 8001da4:	4b7e      	ldr	r3, [pc, #504]	; (8001fa0 <LCD_Scan_Dir+0x3f8>)
 8001da6:	885b      	ldrh	r3, [r3, #2]
 8001da8:	429a      	cmp	r2, r3
 8001daa:	d909      	bls.n	8001dc0 <LCD_Scan_Dir+0x218>
						{
					temp = lcddev.width;
 8001dac:	4b7c      	ldr	r3, [pc, #496]	; (8001fa0 <LCD_Scan_Dir+0x3f8>)
 8001dae:	881b      	ldrh	r3, [r3, #0]
 8001db0:	817b      	strh	r3, [r7, #10]
					lcddev.width = lcddev.height;
 8001db2:	4b7b      	ldr	r3, [pc, #492]	; (8001fa0 <LCD_Scan_Dir+0x3f8>)
 8001db4:	885a      	ldrh	r2, [r3, #2]
 8001db6:	4b7a      	ldr	r3, [pc, #488]	; (8001fa0 <LCD_Scan_Dir+0x3f8>)
 8001db8:	801a      	strh	r2, [r3, #0]
					lcddev.height = temp;
 8001dba:	4a79      	ldr	r2, [pc, #484]	; (8001fa0 <LCD_Scan_Dir+0x3f8>)
 8001dbc:	897b      	ldrh	r3, [r7, #10]
 8001dbe:	8053      	strh	r3, [r2, #2]
				}
			}
		}
		if (lcddev.id == 0X5510) {
 8001dc0:	4b77      	ldr	r3, [pc, #476]	; (8001fa0 <LCD_Scan_Dir+0x3f8>)
 8001dc2:	889b      	ldrh	r3, [r3, #4]
 8001dc4:	f245 5210 	movw	r2, #21776	; 0x5510
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	f040 80ef 	bne.w	8001fac <LCD_Scan_Dir+0x404>
			LCD_WR_REG(lcddev.setxcmd);
 8001dce:	4b74      	ldr	r3, [pc, #464]	; (8001fa0 <LCD_Scan_Dir+0x3f8>)
 8001dd0:	895b      	ldrh	r3, [r3, #10]
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f7ff fb4a 	bl	800146c <LCD_WR_REG>
			LCD_WR_DATA(0);
 8001dd8:	4b72      	ldr	r3, [pc, #456]	; (8001fa4 <LCD_Scan_Dir+0x3fc>)
 8001dda:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001dde:	611a      	str	r2, [r3, #16]
 8001de0:	4b70      	ldr	r3, [pc, #448]	; (8001fa4 <LCD_Scan_Dir+0x3fc>)
 8001de2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001de6:	615a      	str	r2, [r3, #20]
 8001de8:	4b6f      	ldr	r3, [pc, #444]	; (8001fa8 <LCD_Scan_Dir+0x400>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	60da      	str	r2, [r3, #12]
 8001dee:	4b6d      	ldr	r3, [pc, #436]	; (8001fa4 <LCD_Scan_Dir+0x3fc>)
 8001df0:	2280      	movs	r2, #128	; 0x80
 8001df2:	615a      	str	r2, [r3, #20]
 8001df4:	4b6b      	ldr	r3, [pc, #428]	; (8001fa4 <LCD_Scan_Dir+0x3fc>)
 8001df6:	2280      	movs	r2, #128	; 0x80
 8001df8:	611a      	str	r2, [r3, #16]
 8001dfa:	4b6a      	ldr	r3, [pc, #424]	; (8001fa4 <LCD_Scan_Dir+0x3fc>)
 8001dfc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e00:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setxcmd + 1);
 8001e02:	4b67      	ldr	r3, [pc, #412]	; (8001fa0 <LCD_Scan_Dir+0x3f8>)
 8001e04:	895b      	ldrh	r3, [r3, #10]
 8001e06:	3301      	adds	r3, #1
 8001e08:	b29b      	uxth	r3, r3
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f7ff fb2e 	bl	800146c <LCD_WR_REG>
			LCD_WR_DATA(0);
 8001e10:	4b64      	ldr	r3, [pc, #400]	; (8001fa4 <LCD_Scan_Dir+0x3fc>)
 8001e12:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e16:	611a      	str	r2, [r3, #16]
 8001e18:	4b62      	ldr	r3, [pc, #392]	; (8001fa4 <LCD_Scan_Dir+0x3fc>)
 8001e1a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e1e:	615a      	str	r2, [r3, #20]
 8001e20:	4b61      	ldr	r3, [pc, #388]	; (8001fa8 <LCD_Scan_Dir+0x400>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	60da      	str	r2, [r3, #12]
 8001e26:	4b5f      	ldr	r3, [pc, #380]	; (8001fa4 <LCD_Scan_Dir+0x3fc>)
 8001e28:	2280      	movs	r2, #128	; 0x80
 8001e2a:	615a      	str	r2, [r3, #20]
 8001e2c:	4b5d      	ldr	r3, [pc, #372]	; (8001fa4 <LCD_Scan_Dir+0x3fc>)
 8001e2e:	2280      	movs	r2, #128	; 0x80
 8001e30:	611a      	str	r2, [r3, #16]
 8001e32:	4b5c      	ldr	r3, [pc, #368]	; (8001fa4 <LCD_Scan_Dir+0x3fc>)
 8001e34:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e38:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setxcmd + 2);
 8001e3a:	4b59      	ldr	r3, [pc, #356]	; (8001fa0 <LCD_Scan_Dir+0x3f8>)
 8001e3c:	895b      	ldrh	r3, [r3, #10]
 8001e3e:	3302      	adds	r3, #2
 8001e40:	b29b      	uxth	r3, r3
 8001e42:	4618      	mov	r0, r3
 8001e44:	f7ff fb12 	bl	800146c <LCD_WR_REG>
			LCD_WR_DATA((lcddev.width - 1) >> 8);
 8001e48:	4b56      	ldr	r3, [pc, #344]	; (8001fa4 <LCD_Scan_Dir+0x3fc>)
 8001e4a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e4e:	611a      	str	r2, [r3, #16]
 8001e50:	4b54      	ldr	r3, [pc, #336]	; (8001fa4 <LCD_Scan_Dir+0x3fc>)
 8001e52:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e56:	615a      	str	r2, [r3, #20]
 8001e58:	4b51      	ldr	r3, [pc, #324]	; (8001fa0 <LCD_Scan_Dir+0x3f8>)
 8001e5a:	881b      	ldrh	r3, [r3, #0]
 8001e5c:	3b01      	subs	r3, #1
 8001e5e:	121a      	asrs	r2, r3, #8
 8001e60:	4b51      	ldr	r3, [pc, #324]	; (8001fa8 <LCD_Scan_Dir+0x400>)
 8001e62:	60da      	str	r2, [r3, #12]
 8001e64:	4b4f      	ldr	r3, [pc, #316]	; (8001fa4 <LCD_Scan_Dir+0x3fc>)
 8001e66:	2280      	movs	r2, #128	; 0x80
 8001e68:	615a      	str	r2, [r3, #20]
 8001e6a:	4b4e      	ldr	r3, [pc, #312]	; (8001fa4 <LCD_Scan_Dir+0x3fc>)
 8001e6c:	2280      	movs	r2, #128	; 0x80
 8001e6e:	611a      	str	r2, [r3, #16]
 8001e70:	4b4c      	ldr	r3, [pc, #304]	; (8001fa4 <LCD_Scan_Dir+0x3fc>)
 8001e72:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e76:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setxcmd + 3);
 8001e78:	4b49      	ldr	r3, [pc, #292]	; (8001fa0 <LCD_Scan_Dir+0x3f8>)
 8001e7a:	895b      	ldrh	r3, [r3, #10]
 8001e7c:	3303      	adds	r3, #3
 8001e7e:	b29b      	uxth	r3, r3
 8001e80:	4618      	mov	r0, r3
 8001e82:	f7ff faf3 	bl	800146c <LCD_WR_REG>
			LCD_WR_DATA((lcddev.width - 1) & 0XFF);
 8001e86:	4b47      	ldr	r3, [pc, #284]	; (8001fa4 <LCD_Scan_Dir+0x3fc>)
 8001e88:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e8c:	611a      	str	r2, [r3, #16]
 8001e8e:	4b45      	ldr	r3, [pc, #276]	; (8001fa4 <LCD_Scan_Dir+0x3fc>)
 8001e90:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e94:	615a      	str	r2, [r3, #20]
 8001e96:	4b42      	ldr	r3, [pc, #264]	; (8001fa0 <LCD_Scan_Dir+0x3f8>)
 8001e98:	881b      	ldrh	r3, [r3, #0]
 8001e9a:	3b01      	subs	r3, #1
 8001e9c:	4a42      	ldr	r2, [pc, #264]	; (8001fa8 <LCD_Scan_Dir+0x400>)
 8001e9e:	b2db      	uxtb	r3, r3
 8001ea0:	60d3      	str	r3, [r2, #12]
 8001ea2:	4b40      	ldr	r3, [pc, #256]	; (8001fa4 <LCD_Scan_Dir+0x3fc>)
 8001ea4:	2280      	movs	r2, #128	; 0x80
 8001ea6:	615a      	str	r2, [r3, #20]
 8001ea8:	4b3e      	ldr	r3, [pc, #248]	; (8001fa4 <LCD_Scan_Dir+0x3fc>)
 8001eaa:	2280      	movs	r2, #128	; 0x80
 8001eac:	611a      	str	r2, [r3, #16]
 8001eae:	4b3d      	ldr	r3, [pc, #244]	; (8001fa4 <LCD_Scan_Dir+0x3fc>)
 8001eb0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001eb4:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd);
 8001eb6:	4b3a      	ldr	r3, [pc, #232]	; (8001fa0 <LCD_Scan_Dir+0x3f8>)
 8001eb8:	899b      	ldrh	r3, [r3, #12]
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f7ff fad6 	bl	800146c <LCD_WR_REG>
			LCD_WR_DATA(0);
 8001ec0:	4b38      	ldr	r3, [pc, #224]	; (8001fa4 <LCD_Scan_Dir+0x3fc>)
 8001ec2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ec6:	611a      	str	r2, [r3, #16]
 8001ec8:	4b36      	ldr	r3, [pc, #216]	; (8001fa4 <LCD_Scan_Dir+0x3fc>)
 8001eca:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ece:	615a      	str	r2, [r3, #20]
 8001ed0:	4b35      	ldr	r3, [pc, #212]	; (8001fa8 <LCD_Scan_Dir+0x400>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	60da      	str	r2, [r3, #12]
 8001ed6:	4b33      	ldr	r3, [pc, #204]	; (8001fa4 <LCD_Scan_Dir+0x3fc>)
 8001ed8:	2280      	movs	r2, #128	; 0x80
 8001eda:	615a      	str	r2, [r3, #20]
 8001edc:	4b31      	ldr	r3, [pc, #196]	; (8001fa4 <LCD_Scan_Dir+0x3fc>)
 8001ede:	2280      	movs	r2, #128	; 0x80
 8001ee0:	611a      	str	r2, [r3, #16]
 8001ee2:	4b30      	ldr	r3, [pc, #192]	; (8001fa4 <LCD_Scan_Dir+0x3fc>)
 8001ee4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ee8:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd + 1);
 8001eea:	4b2d      	ldr	r3, [pc, #180]	; (8001fa0 <LCD_Scan_Dir+0x3f8>)
 8001eec:	899b      	ldrh	r3, [r3, #12]
 8001eee:	3301      	adds	r3, #1
 8001ef0:	b29b      	uxth	r3, r3
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f7ff faba 	bl	800146c <LCD_WR_REG>
			LCD_WR_DATA(0);
 8001ef8:	4b2a      	ldr	r3, [pc, #168]	; (8001fa4 <LCD_Scan_Dir+0x3fc>)
 8001efa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001efe:	611a      	str	r2, [r3, #16]
 8001f00:	4b28      	ldr	r3, [pc, #160]	; (8001fa4 <LCD_Scan_Dir+0x3fc>)
 8001f02:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f06:	615a      	str	r2, [r3, #20]
 8001f08:	4b27      	ldr	r3, [pc, #156]	; (8001fa8 <LCD_Scan_Dir+0x400>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	60da      	str	r2, [r3, #12]
 8001f0e:	4b25      	ldr	r3, [pc, #148]	; (8001fa4 <LCD_Scan_Dir+0x3fc>)
 8001f10:	2280      	movs	r2, #128	; 0x80
 8001f12:	615a      	str	r2, [r3, #20]
 8001f14:	4b23      	ldr	r3, [pc, #140]	; (8001fa4 <LCD_Scan_Dir+0x3fc>)
 8001f16:	2280      	movs	r2, #128	; 0x80
 8001f18:	611a      	str	r2, [r3, #16]
 8001f1a:	4b22      	ldr	r3, [pc, #136]	; (8001fa4 <LCD_Scan_Dir+0x3fc>)
 8001f1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f20:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd + 2);
 8001f22:	4b1f      	ldr	r3, [pc, #124]	; (8001fa0 <LCD_Scan_Dir+0x3f8>)
 8001f24:	899b      	ldrh	r3, [r3, #12]
 8001f26:	3302      	adds	r3, #2
 8001f28:	b29b      	uxth	r3, r3
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f7ff fa9e 	bl	800146c <LCD_WR_REG>
			LCD_WR_DATA((lcddev.height - 1) >> 8);
 8001f30:	4b1c      	ldr	r3, [pc, #112]	; (8001fa4 <LCD_Scan_Dir+0x3fc>)
 8001f32:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f36:	611a      	str	r2, [r3, #16]
 8001f38:	4b1a      	ldr	r3, [pc, #104]	; (8001fa4 <LCD_Scan_Dir+0x3fc>)
 8001f3a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f3e:	615a      	str	r2, [r3, #20]
 8001f40:	4b17      	ldr	r3, [pc, #92]	; (8001fa0 <LCD_Scan_Dir+0x3f8>)
 8001f42:	885b      	ldrh	r3, [r3, #2]
 8001f44:	3b01      	subs	r3, #1
 8001f46:	121a      	asrs	r2, r3, #8
 8001f48:	4b17      	ldr	r3, [pc, #92]	; (8001fa8 <LCD_Scan_Dir+0x400>)
 8001f4a:	60da      	str	r2, [r3, #12]
 8001f4c:	4b15      	ldr	r3, [pc, #84]	; (8001fa4 <LCD_Scan_Dir+0x3fc>)
 8001f4e:	2280      	movs	r2, #128	; 0x80
 8001f50:	615a      	str	r2, [r3, #20]
 8001f52:	4b14      	ldr	r3, [pc, #80]	; (8001fa4 <LCD_Scan_Dir+0x3fc>)
 8001f54:	2280      	movs	r2, #128	; 0x80
 8001f56:	611a      	str	r2, [r3, #16]
 8001f58:	4b12      	ldr	r3, [pc, #72]	; (8001fa4 <LCD_Scan_Dir+0x3fc>)
 8001f5a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f5e:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd + 3);
 8001f60:	4b0f      	ldr	r3, [pc, #60]	; (8001fa0 <LCD_Scan_Dir+0x3f8>)
 8001f62:	899b      	ldrh	r3, [r3, #12]
 8001f64:	3303      	adds	r3, #3
 8001f66:	b29b      	uxth	r3, r3
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f7ff fa7f 	bl	800146c <LCD_WR_REG>
			LCD_WR_DATA((lcddev.height - 1) & 0XFF);
 8001f6e:	4b0d      	ldr	r3, [pc, #52]	; (8001fa4 <LCD_Scan_Dir+0x3fc>)
 8001f70:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f74:	611a      	str	r2, [r3, #16]
 8001f76:	4b0b      	ldr	r3, [pc, #44]	; (8001fa4 <LCD_Scan_Dir+0x3fc>)
 8001f78:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f7c:	615a      	str	r2, [r3, #20]
 8001f7e:	4b08      	ldr	r3, [pc, #32]	; (8001fa0 <LCD_Scan_Dir+0x3f8>)
 8001f80:	885b      	ldrh	r3, [r3, #2]
 8001f82:	3b01      	subs	r3, #1
 8001f84:	4a08      	ldr	r2, [pc, #32]	; (8001fa8 <LCD_Scan_Dir+0x400>)
 8001f86:	b2db      	uxtb	r3, r3
 8001f88:	60d3      	str	r3, [r2, #12]
 8001f8a:	4b06      	ldr	r3, [pc, #24]	; (8001fa4 <LCD_Scan_Dir+0x3fc>)
 8001f8c:	2280      	movs	r2, #128	; 0x80
 8001f8e:	615a      	str	r2, [r3, #20]
 8001f90:	4b04      	ldr	r3, [pc, #16]	; (8001fa4 <LCD_Scan_Dir+0x3fc>)
 8001f92:	2280      	movs	r2, #128	; 0x80
 8001f94:	611a      	str	r2, [r3, #16]
 8001f96:	4b03      	ldr	r3, [pc, #12]	; (8001fa4 <LCD_Scan_Dir+0x3fc>)
 8001f98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f9c:	611a      	str	r2, [r3, #16]
		if (lcddev.id == 0X5510) {
 8001f9e:	e10a      	b.n	80021b6 <LCD_Scan_Dir+0x60e>
 8001fa0:	200000bc 	.word	0x200000bc
 8001fa4:	40011000 	.word	0x40011000
 8001fa8:	40010c00 	.word	0x40010c00
		} else {
			LCD_WR_REG(lcddev.setxcmd);
 8001fac:	4b84      	ldr	r3, [pc, #528]	; (80021c0 <LCD_Scan_Dir+0x618>)
 8001fae:	895b      	ldrh	r3, [r3, #10]
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f7ff fa5b 	bl	800146c <LCD_WR_REG>
			LCD_WR_DATA(0);
 8001fb6:	4b83      	ldr	r3, [pc, #524]	; (80021c4 <LCD_Scan_Dir+0x61c>)
 8001fb8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001fbc:	611a      	str	r2, [r3, #16]
 8001fbe:	4b81      	ldr	r3, [pc, #516]	; (80021c4 <LCD_Scan_Dir+0x61c>)
 8001fc0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001fc4:	615a      	str	r2, [r3, #20]
 8001fc6:	4b80      	ldr	r3, [pc, #512]	; (80021c8 <LCD_Scan_Dir+0x620>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	60da      	str	r2, [r3, #12]
 8001fcc:	4b7d      	ldr	r3, [pc, #500]	; (80021c4 <LCD_Scan_Dir+0x61c>)
 8001fce:	2280      	movs	r2, #128	; 0x80
 8001fd0:	615a      	str	r2, [r3, #20]
 8001fd2:	4b7c      	ldr	r3, [pc, #496]	; (80021c4 <LCD_Scan_Dir+0x61c>)
 8001fd4:	2280      	movs	r2, #128	; 0x80
 8001fd6:	611a      	str	r2, [r3, #16]
 8001fd8:	4b7a      	ldr	r3, [pc, #488]	; (80021c4 <LCD_Scan_Dir+0x61c>)
 8001fda:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001fde:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(0);
 8001fe0:	4b78      	ldr	r3, [pc, #480]	; (80021c4 <LCD_Scan_Dir+0x61c>)
 8001fe2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001fe6:	611a      	str	r2, [r3, #16]
 8001fe8:	4b76      	ldr	r3, [pc, #472]	; (80021c4 <LCD_Scan_Dir+0x61c>)
 8001fea:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001fee:	615a      	str	r2, [r3, #20]
 8001ff0:	4b75      	ldr	r3, [pc, #468]	; (80021c8 <LCD_Scan_Dir+0x620>)
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	60da      	str	r2, [r3, #12]
 8001ff6:	4b73      	ldr	r3, [pc, #460]	; (80021c4 <LCD_Scan_Dir+0x61c>)
 8001ff8:	2280      	movs	r2, #128	; 0x80
 8001ffa:	615a      	str	r2, [r3, #20]
 8001ffc:	4b71      	ldr	r3, [pc, #452]	; (80021c4 <LCD_Scan_Dir+0x61c>)
 8001ffe:	2280      	movs	r2, #128	; 0x80
 8002000:	611a      	str	r2, [r3, #16]
 8002002:	4b70      	ldr	r3, [pc, #448]	; (80021c4 <LCD_Scan_Dir+0x61c>)
 8002004:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002008:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.width - 1) >> 8);
 800200a:	4b6e      	ldr	r3, [pc, #440]	; (80021c4 <LCD_Scan_Dir+0x61c>)
 800200c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002010:	611a      	str	r2, [r3, #16]
 8002012:	4b6c      	ldr	r3, [pc, #432]	; (80021c4 <LCD_Scan_Dir+0x61c>)
 8002014:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002018:	615a      	str	r2, [r3, #20]
 800201a:	4b69      	ldr	r3, [pc, #420]	; (80021c0 <LCD_Scan_Dir+0x618>)
 800201c:	881b      	ldrh	r3, [r3, #0]
 800201e:	3b01      	subs	r3, #1
 8002020:	121a      	asrs	r2, r3, #8
 8002022:	4b69      	ldr	r3, [pc, #420]	; (80021c8 <LCD_Scan_Dir+0x620>)
 8002024:	60da      	str	r2, [r3, #12]
 8002026:	4b67      	ldr	r3, [pc, #412]	; (80021c4 <LCD_Scan_Dir+0x61c>)
 8002028:	2280      	movs	r2, #128	; 0x80
 800202a:	615a      	str	r2, [r3, #20]
 800202c:	4b65      	ldr	r3, [pc, #404]	; (80021c4 <LCD_Scan_Dir+0x61c>)
 800202e:	2280      	movs	r2, #128	; 0x80
 8002030:	611a      	str	r2, [r3, #16]
 8002032:	4b64      	ldr	r3, [pc, #400]	; (80021c4 <LCD_Scan_Dir+0x61c>)
 8002034:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002038:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.width - 1) & 0XFF);
 800203a:	4b62      	ldr	r3, [pc, #392]	; (80021c4 <LCD_Scan_Dir+0x61c>)
 800203c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002040:	611a      	str	r2, [r3, #16]
 8002042:	4b60      	ldr	r3, [pc, #384]	; (80021c4 <LCD_Scan_Dir+0x61c>)
 8002044:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002048:	615a      	str	r2, [r3, #20]
 800204a:	4b5d      	ldr	r3, [pc, #372]	; (80021c0 <LCD_Scan_Dir+0x618>)
 800204c:	881b      	ldrh	r3, [r3, #0]
 800204e:	3b01      	subs	r3, #1
 8002050:	4a5d      	ldr	r2, [pc, #372]	; (80021c8 <LCD_Scan_Dir+0x620>)
 8002052:	b2db      	uxtb	r3, r3
 8002054:	60d3      	str	r3, [r2, #12]
 8002056:	4b5b      	ldr	r3, [pc, #364]	; (80021c4 <LCD_Scan_Dir+0x61c>)
 8002058:	2280      	movs	r2, #128	; 0x80
 800205a:	615a      	str	r2, [r3, #20]
 800205c:	4b59      	ldr	r3, [pc, #356]	; (80021c4 <LCD_Scan_Dir+0x61c>)
 800205e:	2280      	movs	r2, #128	; 0x80
 8002060:	611a      	str	r2, [r3, #16]
 8002062:	4b58      	ldr	r3, [pc, #352]	; (80021c4 <LCD_Scan_Dir+0x61c>)
 8002064:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002068:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd);
 800206a:	4b55      	ldr	r3, [pc, #340]	; (80021c0 <LCD_Scan_Dir+0x618>)
 800206c:	899b      	ldrh	r3, [r3, #12]
 800206e:	4618      	mov	r0, r3
 8002070:	f7ff f9fc 	bl	800146c <LCD_WR_REG>
			LCD_WR_DATA(0);
 8002074:	4b53      	ldr	r3, [pc, #332]	; (80021c4 <LCD_Scan_Dir+0x61c>)
 8002076:	f44f 7280 	mov.w	r2, #256	; 0x100
 800207a:	611a      	str	r2, [r3, #16]
 800207c:	4b51      	ldr	r3, [pc, #324]	; (80021c4 <LCD_Scan_Dir+0x61c>)
 800207e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002082:	615a      	str	r2, [r3, #20]
 8002084:	4b50      	ldr	r3, [pc, #320]	; (80021c8 <LCD_Scan_Dir+0x620>)
 8002086:	2200      	movs	r2, #0
 8002088:	60da      	str	r2, [r3, #12]
 800208a:	4b4e      	ldr	r3, [pc, #312]	; (80021c4 <LCD_Scan_Dir+0x61c>)
 800208c:	2280      	movs	r2, #128	; 0x80
 800208e:	615a      	str	r2, [r3, #20]
 8002090:	4b4c      	ldr	r3, [pc, #304]	; (80021c4 <LCD_Scan_Dir+0x61c>)
 8002092:	2280      	movs	r2, #128	; 0x80
 8002094:	611a      	str	r2, [r3, #16]
 8002096:	4b4b      	ldr	r3, [pc, #300]	; (80021c4 <LCD_Scan_Dir+0x61c>)
 8002098:	f44f 7200 	mov.w	r2, #512	; 0x200
 800209c:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(0);
 800209e:	4b49      	ldr	r3, [pc, #292]	; (80021c4 <LCD_Scan_Dir+0x61c>)
 80020a0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80020a4:	611a      	str	r2, [r3, #16]
 80020a6:	4b47      	ldr	r3, [pc, #284]	; (80021c4 <LCD_Scan_Dir+0x61c>)
 80020a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80020ac:	615a      	str	r2, [r3, #20]
 80020ae:	4b46      	ldr	r3, [pc, #280]	; (80021c8 <LCD_Scan_Dir+0x620>)
 80020b0:	2200      	movs	r2, #0
 80020b2:	60da      	str	r2, [r3, #12]
 80020b4:	4b43      	ldr	r3, [pc, #268]	; (80021c4 <LCD_Scan_Dir+0x61c>)
 80020b6:	2280      	movs	r2, #128	; 0x80
 80020b8:	615a      	str	r2, [r3, #20]
 80020ba:	4b42      	ldr	r3, [pc, #264]	; (80021c4 <LCD_Scan_Dir+0x61c>)
 80020bc:	2280      	movs	r2, #128	; 0x80
 80020be:	611a      	str	r2, [r3, #16]
 80020c0:	4b40      	ldr	r3, [pc, #256]	; (80021c4 <LCD_Scan_Dir+0x61c>)
 80020c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80020c6:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.height - 1) >> 8);
 80020c8:	4b3e      	ldr	r3, [pc, #248]	; (80021c4 <LCD_Scan_Dir+0x61c>)
 80020ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 80020ce:	611a      	str	r2, [r3, #16]
 80020d0:	4b3c      	ldr	r3, [pc, #240]	; (80021c4 <LCD_Scan_Dir+0x61c>)
 80020d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80020d6:	615a      	str	r2, [r3, #20]
 80020d8:	4b39      	ldr	r3, [pc, #228]	; (80021c0 <LCD_Scan_Dir+0x618>)
 80020da:	885b      	ldrh	r3, [r3, #2]
 80020dc:	3b01      	subs	r3, #1
 80020de:	121a      	asrs	r2, r3, #8
 80020e0:	4b39      	ldr	r3, [pc, #228]	; (80021c8 <LCD_Scan_Dir+0x620>)
 80020e2:	60da      	str	r2, [r3, #12]
 80020e4:	4b37      	ldr	r3, [pc, #220]	; (80021c4 <LCD_Scan_Dir+0x61c>)
 80020e6:	2280      	movs	r2, #128	; 0x80
 80020e8:	615a      	str	r2, [r3, #20]
 80020ea:	4b36      	ldr	r3, [pc, #216]	; (80021c4 <LCD_Scan_Dir+0x61c>)
 80020ec:	2280      	movs	r2, #128	; 0x80
 80020ee:	611a      	str	r2, [r3, #16]
 80020f0:	4b34      	ldr	r3, [pc, #208]	; (80021c4 <LCD_Scan_Dir+0x61c>)
 80020f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80020f6:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.height - 1) & 0XFF);
 80020f8:	4b32      	ldr	r3, [pc, #200]	; (80021c4 <LCD_Scan_Dir+0x61c>)
 80020fa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80020fe:	611a      	str	r2, [r3, #16]
 8002100:	4b30      	ldr	r3, [pc, #192]	; (80021c4 <LCD_Scan_Dir+0x61c>)
 8002102:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002106:	615a      	str	r2, [r3, #20]
 8002108:	4b2d      	ldr	r3, [pc, #180]	; (80021c0 <LCD_Scan_Dir+0x618>)
 800210a:	885b      	ldrh	r3, [r3, #2]
 800210c:	3b01      	subs	r3, #1
 800210e:	4a2e      	ldr	r2, [pc, #184]	; (80021c8 <LCD_Scan_Dir+0x620>)
 8002110:	b2db      	uxtb	r3, r3
 8002112:	60d3      	str	r3, [r2, #12]
 8002114:	4b2b      	ldr	r3, [pc, #172]	; (80021c4 <LCD_Scan_Dir+0x61c>)
 8002116:	2280      	movs	r2, #128	; 0x80
 8002118:	615a      	str	r2, [r3, #20]
 800211a:	4b2a      	ldr	r3, [pc, #168]	; (80021c4 <LCD_Scan_Dir+0x61c>)
 800211c:	2280      	movs	r2, #128	; 0x80
 800211e:	611a      	str	r2, [r3, #16]
 8002120:	4b28      	ldr	r3, [pc, #160]	; (80021c4 <LCD_Scan_Dir+0x61c>)
 8002122:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002126:	611a      	str	r2, [r3, #16]
		if (lcddev.id == 0X5510) {
 8002128:	e045      	b.n	80021b6 <LCD_Scan_Dir+0x60e>
		}
	} else {
		switch (dir) {
 800212a:	79fb      	ldrb	r3, [r7, #7]
 800212c:	2b07      	cmp	r3, #7
 800212e:	d836      	bhi.n	800219e <LCD_Scan_Dir+0x5f6>
 8002130:	a201      	add	r2, pc, #4	; (adr r2, 8002138 <LCD_Scan_Dir+0x590>)
 8002132:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002136:	bf00      	nop
 8002138:	08002159 	.word	0x08002159
 800213c:	08002163 	.word	0x08002163
 8002140:	0800216d 	.word	0x0800216d
 8002144:	0800219f 	.word	0x0800219f
 8002148:	08002177 	.word	0x08002177
 800214c:	08002181 	.word	0x08002181
 8002150:	0800218b 	.word	0x0800218b
 8002154:	08002195 	.word	0x08002195
		case L2R_U2D:	//从左到右,从上到下
			regval |= (1 << 5) | (1 << 4) | (0 << 3);
 8002158:	89fb      	ldrh	r3, [r7, #14]
 800215a:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800215e:	81fb      	strh	r3, [r7, #14]
			break;
 8002160:	e01d      	b.n	800219e <LCD_Scan_Dir+0x5f6>
		case L2R_D2U:	//从左到右,从下到上
			regval |= (0 << 5) | (1 << 4) | (0 << 3);
 8002162:	89fb      	ldrh	r3, [r7, #14]
 8002164:	f043 0310 	orr.w	r3, r3, #16
 8002168:	81fb      	strh	r3, [r7, #14]
			break;
 800216a:	e018      	b.n	800219e <LCD_Scan_Dir+0x5f6>
		case R2L_U2D:	//从右到左,从上到下
			regval |= (1 << 5) | (0 << 4) | (0 << 3);
 800216c:	89fb      	ldrh	r3, [r7, #14]
 800216e:	f043 0320 	orr.w	r3, r3, #32
 8002172:	81fb      	strh	r3, [r7, #14]
			break;
 8002174:	e013      	b.n	800219e <LCD_Scan_Dir+0x5f6>
		case R2L_D2U:	//从右到左,从下到上
			regval |= (0 << 5) | (0 << 4) | (0 << 3);
			break;
		case U2D_L2R:	//从上到下,从左到右
			regval |= (1 << 5) | (1 << 4) | (1 << 3);
 8002176:	89fb      	ldrh	r3, [r7, #14]
 8002178:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 800217c:	81fb      	strh	r3, [r7, #14]
			break;
 800217e:	e00e      	b.n	800219e <LCD_Scan_Dir+0x5f6>
		case U2D_R2L:	//从上到下,从右到左
			regval |= (1 << 5) | (0 << 4) | (1 << 3);
 8002180:	89fb      	ldrh	r3, [r7, #14]
 8002182:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8002186:	81fb      	strh	r3, [r7, #14]
			break;
 8002188:	e009      	b.n	800219e <LCD_Scan_Dir+0x5f6>
		case D2U_L2R:	//从下到上,从左到右
			regval |= (0 << 5) | (1 << 4) | (1 << 3);
 800218a:	89fb      	ldrh	r3, [r7, #14]
 800218c:	f043 0318 	orr.w	r3, r3, #24
 8002190:	81fb      	strh	r3, [r7, #14]
			break;
 8002192:	e004      	b.n	800219e <LCD_Scan_Dir+0x5f6>
		case D2U_R2L:	//从下到上,从右到左
			regval |= (0 << 5) | (0 << 4) | (1 << 3);
 8002194:	89fb      	ldrh	r3, [r7, #14]
 8002196:	f043 0308 	orr.w	r3, r3, #8
 800219a:	81fb      	strh	r3, [r7, #14]
			break;
 800219c:	bf00      	nop
		}
		dirreg = 0X03;
 800219e:	2303      	movs	r3, #3
 80021a0:	81bb      	strh	r3, [r7, #12]
		regval |= 1 << 12;
 80021a2:	89fb      	ldrh	r3, [r7, #14]
 80021a4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80021a8:	81fb      	strh	r3, [r7, #14]
		LCD_WriteReg(dirreg, regval);
 80021aa:	89fa      	ldrh	r2, [r7, #14]
 80021ac:	89bb      	ldrh	r3, [r7, #12]
 80021ae:	4611      	mov	r1, r2
 80021b0:	4618      	mov	r0, r3
 80021b2:	f7ff f9e7 	bl	8001584 <LCD_WriteReg>
	}
}
 80021b6:	bf00      	nop
 80021b8:	3710      	adds	r7, #16
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	200000bc 	.word	0x200000bc
 80021c4:	40011000 	.word	0x40011000
 80021c8:	40010c00 	.word	0x40010c00

080021cc <LCD_DrawPoint>:
//Draw a point with color
//x,y: coordinate

void LCD_DrawPoint(uint16_t x, uint16_t y) {
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b082      	sub	sp, #8
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	4603      	mov	r3, r0
 80021d4:	460a      	mov	r2, r1
 80021d6:	80fb      	strh	r3, [r7, #6]
 80021d8:	4613      	mov	r3, r2
 80021da:	80bb      	strh	r3, [r7, #4]
	LCD_SetCursor(x, y);
 80021dc:	88ba      	ldrh	r2, [r7, #4]
 80021de:	88fb      	ldrh	r3, [r7, #6]
 80021e0:	4611      	mov	r1, r2
 80021e2:	4618      	mov	r0, r3
 80021e4:	f7ff fa14 	bl	8001610 <LCD_SetCursor>
	LCD_WriteRAM_Prepare();
 80021e8:	f7ff fa06 	bl	80015f8 <LCD_WriteRAM_Prepare>
	LCD_WR_DATA(POINT_COLOR); //POINT_COLOR: Color of this point
 80021ec:	4b0c      	ldr	r3, [pc, #48]	; (8002220 <LCD_DrawPoint+0x54>)
 80021ee:	f44f 7280 	mov.w	r2, #256	; 0x100
 80021f2:	611a      	str	r2, [r3, #16]
 80021f4:	4b0a      	ldr	r3, [pc, #40]	; (8002220 <LCD_DrawPoint+0x54>)
 80021f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80021fa:	615a      	str	r2, [r3, #20]
 80021fc:	4b09      	ldr	r3, [pc, #36]	; (8002224 <LCD_DrawPoint+0x58>)
 80021fe:	881a      	ldrh	r2, [r3, #0]
 8002200:	4b09      	ldr	r3, [pc, #36]	; (8002228 <LCD_DrawPoint+0x5c>)
 8002202:	60da      	str	r2, [r3, #12]
 8002204:	4b06      	ldr	r3, [pc, #24]	; (8002220 <LCD_DrawPoint+0x54>)
 8002206:	2280      	movs	r2, #128	; 0x80
 8002208:	615a      	str	r2, [r3, #20]
 800220a:	4b05      	ldr	r3, [pc, #20]	; (8002220 <LCD_DrawPoint+0x54>)
 800220c:	2280      	movs	r2, #128	; 0x80
 800220e:	611a      	str	r2, [r3, #16]
 8002210:	4b03      	ldr	r3, [pc, #12]	; (8002220 <LCD_DrawPoint+0x54>)
 8002212:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002216:	611a      	str	r2, [r3, #16]
}
 8002218:	bf00      	nop
 800221a:	3708      	adds	r7, #8
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}
 8002220:	40011000 	.word	0x40011000
 8002224:	200000ac 	.word	0x200000ac
 8002228:	40010c00 	.word	0x40010c00

0800222c <LCD_Fast_DrawPoint>:
//Draw a point with color(quicker)
//x,y: coordinate
void LCD_Fast_DrawPoint(uint16_t x, uint16_t y, uint16_t color) {
 800222c:	b580      	push	{r7, lr}
 800222e:	b082      	sub	sp, #8
 8002230:	af00      	add	r7, sp, #0
 8002232:	4603      	mov	r3, r0
 8002234:	80fb      	strh	r3, [r7, #6]
 8002236:	460b      	mov	r3, r1
 8002238:	80bb      	strh	r3, [r7, #4]
 800223a:	4613      	mov	r3, r2
 800223c:	807b      	strh	r3, [r7, #2]
	if (lcddev.id == 0X9341 || lcddev.id == 0X5310) {
 800223e:	4b75      	ldr	r3, [pc, #468]	; (8002414 <LCD_Fast_DrawPoint+0x1e8>)
 8002240:	889b      	ldrh	r3, [r3, #4]
 8002242:	f249 3241 	movw	r2, #37697	; 0x9341
 8002246:	4293      	cmp	r3, r2
 8002248:	d005      	beq.n	8002256 <LCD_Fast_DrawPoint+0x2a>
 800224a:	4b72      	ldr	r3, [pc, #456]	; (8002414 <LCD_Fast_DrawPoint+0x1e8>)
 800224c:	889b      	ldrh	r3, [r3, #4]
 800224e:	f245 3210 	movw	r2, #21264	; 0x5310
 8002252:	4293      	cmp	r3, r2
 8002254:	d164      	bne.n	8002320 <LCD_Fast_DrawPoint+0xf4>
		LCD_WR_REG(lcddev.setxcmd);
 8002256:	4b6f      	ldr	r3, [pc, #444]	; (8002414 <LCD_Fast_DrawPoint+0x1e8>)
 8002258:	895b      	ldrh	r3, [r3, #10]
 800225a:	4618      	mov	r0, r3
 800225c:	f7ff f906 	bl	800146c <LCD_WR_REG>
		LCD_WR_DATA(x >> 8);
 8002260:	4b6d      	ldr	r3, [pc, #436]	; (8002418 <LCD_Fast_DrawPoint+0x1ec>)
 8002262:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002266:	611a      	str	r2, [r3, #16]
 8002268:	4b6b      	ldr	r3, [pc, #428]	; (8002418 <LCD_Fast_DrawPoint+0x1ec>)
 800226a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800226e:	615a      	str	r2, [r3, #20]
 8002270:	88fb      	ldrh	r3, [r7, #6]
 8002272:	0a1b      	lsrs	r3, r3, #8
 8002274:	b29a      	uxth	r2, r3
 8002276:	4b69      	ldr	r3, [pc, #420]	; (800241c <LCD_Fast_DrawPoint+0x1f0>)
 8002278:	60da      	str	r2, [r3, #12]
 800227a:	4b67      	ldr	r3, [pc, #412]	; (8002418 <LCD_Fast_DrawPoint+0x1ec>)
 800227c:	2280      	movs	r2, #128	; 0x80
 800227e:	615a      	str	r2, [r3, #20]
 8002280:	4b65      	ldr	r3, [pc, #404]	; (8002418 <LCD_Fast_DrawPoint+0x1ec>)
 8002282:	2280      	movs	r2, #128	; 0x80
 8002284:	611a      	str	r2, [r3, #16]
 8002286:	4b64      	ldr	r3, [pc, #400]	; (8002418 <LCD_Fast_DrawPoint+0x1ec>)
 8002288:	f44f 7200 	mov.w	r2, #512	; 0x200
 800228c:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(x & 0XFF);
 800228e:	4b62      	ldr	r3, [pc, #392]	; (8002418 <LCD_Fast_DrawPoint+0x1ec>)
 8002290:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002294:	611a      	str	r2, [r3, #16]
 8002296:	4b60      	ldr	r3, [pc, #384]	; (8002418 <LCD_Fast_DrawPoint+0x1ec>)
 8002298:	f44f 7200 	mov.w	r2, #512	; 0x200
 800229c:	615a      	str	r2, [r3, #20]
 800229e:	88fb      	ldrh	r3, [r7, #6]
 80022a0:	4a5e      	ldr	r2, [pc, #376]	; (800241c <LCD_Fast_DrawPoint+0x1f0>)
 80022a2:	b2db      	uxtb	r3, r3
 80022a4:	60d3      	str	r3, [r2, #12]
 80022a6:	4b5c      	ldr	r3, [pc, #368]	; (8002418 <LCD_Fast_DrawPoint+0x1ec>)
 80022a8:	2280      	movs	r2, #128	; 0x80
 80022aa:	615a      	str	r2, [r3, #20]
 80022ac:	4b5a      	ldr	r3, [pc, #360]	; (8002418 <LCD_Fast_DrawPoint+0x1ec>)
 80022ae:	2280      	movs	r2, #128	; 0x80
 80022b0:	611a      	str	r2, [r3, #16]
 80022b2:	4b59      	ldr	r3, [pc, #356]	; (8002418 <LCD_Fast_DrawPoint+0x1ec>)
 80022b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80022b8:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 80022ba:	4b56      	ldr	r3, [pc, #344]	; (8002414 <LCD_Fast_DrawPoint+0x1e8>)
 80022bc:	899b      	ldrh	r3, [r3, #12]
 80022be:	4618      	mov	r0, r3
 80022c0:	f7ff f8d4 	bl	800146c <LCD_WR_REG>
		LCD_WR_DATA(y >> 8);
 80022c4:	4b54      	ldr	r3, [pc, #336]	; (8002418 <LCD_Fast_DrawPoint+0x1ec>)
 80022c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80022ca:	611a      	str	r2, [r3, #16]
 80022cc:	4b52      	ldr	r3, [pc, #328]	; (8002418 <LCD_Fast_DrawPoint+0x1ec>)
 80022ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80022d2:	615a      	str	r2, [r3, #20]
 80022d4:	88bb      	ldrh	r3, [r7, #4]
 80022d6:	0a1b      	lsrs	r3, r3, #8
 80022d8:	b29a      	uxth	r2, r3
 80022da:	4b50      	ldr	r3, [pc, #320]	; (800241c <LCD_Fast_DrawPoint+0x1f0>)
 80022dc:	60da      	str	r2, [r3, #12]
 80022de:	4b4e      	ldr	r3, [pc, #312]	; (8002418 <LCD_Fast_DrawPoint+0x1ec>)
 80022e0:	2280      	movs	r2, #128	; 0x80
 80022e2:	615a      	str	r2, [r3, #20]
 80022e4:	4b4c      	ldr	r3, [pc, #304]	; (8002418 <LCD_Fast_DrawPoint+0x1ec>)
 80022e6:	2280      	movs	r2, #128	; 0x80
 80022e8:	611a      	str	r2, [r3, #16]
 80022ea:	4b4b      	ldr	r3, [pc, #300]	; (8002418 <LCD_Fast_DrawPoint+0x1ec>)
 80022ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80022f0:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(y & 0XFF);
 80022f2:	4b49      	ldr	r3, [pc, #292]	; (8002418 <LCD_Fast_DrawPoint+0x1ec>)
 80022f4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80022f8:	611a      	str	r2, [r3, #16]
 80022fa:	4b47      	ldr	r3, [pc, #284]	; (8002418 <LCD_Fast_DrawPoint+0x1ec>)
 80022fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002300:	615a      	str	r2, [r3, #20]
 8002302:	88bb      	ldrh	r3, [r7, #4]
 8002304:	4a45      	ldr	r2, [pc, #276]	; (800241c <LCD_Fast_DrawPoint+0x1f0>)
 8002306:	b2db      	uxtb	r3, r3
 8002308:	60d3      	str	r3, [r2, #12]
 800230a:	4b43      	ldr	r3, [pc, #268]	; (8002418 <LCD_Fast_DrawPoint+0x1ec>)
 800230c:	2280      	movs	r2, #128	; 0x80
 800230e:	615a      	str	r2, [r3, #20]
 8002310:	4b41      	ldr	r3, [pc, #260]	; (8002418 <LCD_Fast_DrawPoint+0x1ec>)
 8002312:	2280      	movs	r2, #128	; 0x80
 8002314:	611a      	str	r2, [r3, #16]
 8002316:	4b40      	ldr	r3, [pc, #256]	; (8002418 <LCD_Fast_DrawPoint+0x1ec>)
 8002318:	f44f 7200 	mov.w	r2, #512	; 0x200
 800231c:	611a      	str	r2, [r3, #16]
 800231e:	e1e6      	b.n	80026ee <LCD_Fast_DrawPoint+0x4c2>
	} else if (lcddev.id == 0X5510) {
 8002320:	4b3c      	ldr	r3, [pc, #240]	; (8002414 <LCD_Fast_DrawPoint+0x1e8>)
 8002322:	889b      	ldrh	r3, [r3, #4]
 8002324:	f245 5210 	movw	r2, #21776	; 0x5510
 8002328:	4293      	cmp	r3, r2
 800232a:	d179      	bne.n	8002420 <LCD_Fast_DrawPoint+0x1f4>
		LCD_WR_REG(lcddev.setxcmd);
 800232c:	4b39      	ldr	r3, [pc, #228]	; (8002414 <LCD_Fast_DrawPoint+0x1e8>)
 800232e:	895b      	ldrh	r3, [r3, #10]
 8002330:	4618      	mov	r0, r3
 8002332:	f7ff f89b 	bl	800146c <LCD_WR_REG>
		LCD_WR_DATA(x >> 8);
 8002336:	4b38      	ldr	r3, [pc, #224]	; (8002418 <LCD_Fast_DrawPoint+0x1ec>)
 8002338:	f44f 7280 	mov.w	r2, #256	; 0x100
 800233c:	611a      	str	r2, [r3, #16]
 800233e:	4b36      	ldr	r3, [pc, #216]	; (8002418 <LCD_Fast_DrawPoint+0x1ec>)
 8002340:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002344:	615a      	str	r2, [r3, #20]
 8002346:	88fb      	ldrh	r3, [r7, #6]
 8002348:	0a1b      	lsrs	r3, r3, #8
 800234a:	b29a      	uxth	r2, r3
 800234c:	4b33      	ldr	r3, [pc, #204]	; (800241c <LCD_Fast_DrawPoint+0x1f0>)
 800234e:	60da      	str	r2, [r3, #12]
 8002350:	4b31      	ldr	r3, [pc, #196]	; (8002418 <LCD_Fast_DrawPoint+0x1ec>)
 8002352:	2280      	movs	r2, #128	; 0x80
 8002354:	615a      	str	r2, [r3, #20]
 8002356:	4b30      	ldr	r3, [pc, #192]	; (8002418 <LCD_Fast_DrawPoint+0x1ec>)
 8002358:	2280      	movs	r2, #128	; 0x80
 800235a:	611a      	str	r2, [r3, #16]
 800235c:	4b2e      	ldr	r3, [pc, #184]	; (8002418 <LCD_Fast_DrawPoint+0x1ec>)
 800235e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002362:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setxcmd + 1);
 8002364:	4b2b      	ldr	r3, [pc, #172]	; (8002414 <LCD_Fast_DrawPoint+0x1e8>)
 8002366:	895b      	ldrh	r3, [r3, #10]
 8002368:	3301      	adds	r3, #1
 800236a:	b29b      	uxth	r3, r3
 800236c:	4618      	mov	r0, r3
 800236e:	f7ff f87d 	bl	800146c <LCD_WR_REG>
		LCD_WR_DATA(x & 0XFF);
 8002372:	4b29      	ldr	r3, [pc, #164]	; (8002418 <LCD_Fast_DrawPoint+0x1ec>)
 8002374:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002378:	611a      	str	r2, [r3, #16]
 800237a:	4b27      	ldr	r3, [pc, #156]	; (8002418 <LCD_Fast_DrawPoint+0x1ec>)
 800237c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002380:	615a      	str	r2, [r3, #20]
 8002382:	88fb      	ldrh	r3, [r7, #6]
 8002384:	4a25      	ldr	r2, [pc, #148]	; (800241c <LCD_Fast_DrawPoint+0x1f0>)
 8002386:	b2db      	uxtb	r3, r3
 8002388:	60d3      	str	r3, [r2, #12]
 800238a:	4b23      	ldr	r3, [pc, #140]	; (8002418 <LCD_Fast_DrawPoint+0x1ec>)
 800238c:	2280      	movs	r2, #128	; 0x80
 800238e:	615a      	str	r2, [r3, #20]
 8002390:	4b21      	ldr	r3, [pc, #132]	; (8002418 <LCD_Fast_DrawPoint+0x1ec>)
 8002392:	2280      	movs	r2, #128	; 0x80
 8002394:	611a      	str	r2, [r3, #16]
 8002396:	4b20      	ldr	r3, [pc, #128]	; (8002418 <LCD_Fast_DrawPoint+0x1ec>)
 8002398:	f44f 7200 	mov.w	r2, #512	; 0x200
 800239c:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 800239e:	4b1d      	ldr	r3, [pc, #116]	; (8002414 <LCD_Fast_DrawPoint+0x1e8>)
 80023a0:	899b      	ldrh	r3, [r3, #12]
 80023a2:	4618      	mov	r0, r3
 80023a4:	f7ff f862 	bl	800146c <LCD_WR_REG>
		LCD_WR_DATA(y >> 8);
 80023a8:	4b1b      	ldr	r3, [pc, #108]	; (8002418 <LCD_Fast_DrawPoint+0x1ec>)
 80023aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80023ae:	611a      	str	r2, [r3, #16]
 80023b0:	4b19      	ldr	r3, [pc, #100]	; (8002418 <LCD_Fast_DrawPoint+0x1ec>)
 80023b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80023b6:	615a      	str	r2, [r3, #20]
 80023b8:	88bb      	ldrh	r3, [r7, #4]
 80023ba:	0a1b      	lsrs	r3, r3, #8
 80023bc:	b29a      	uxth	r2, r3
 80023be:	4b17      	ldr	r3, [pc, #92]	; (800241c <LCD_Fast_DrawPoint+0x1f0>)
 80023c0:	60da      	str	r2, [r3, #12]
 80023c2:	4b15      	ldr	r3, [pc, #84]	; (8002418 <LCD_Fast_DrawPoint+0x1ec>)
 80023c4:	2280      	movs	r2, #128	; 0x80
 80023c6:	615a      	str	r2, [r3, #20]
 80023c8:	4b13      	ldr	r3, [pc, #76]	; (8002418 <LCD_Fast_DrawPoint+0x1ec>)
 80023ca:	2280      	movs	r2, #128	; 0x80
 80023cc:	611a      	str	r2, [r3, #16]
 80023ce:	4b12      	ldr	r3, [pc, #72]	; (8002418 <LCD_Fast_DrawPoint+0x1ec>)
 80023d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80023d4:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd + 1);
 80023d6:	4b0f      	ldr	r3, [pc, #60]	; (8002414 <LCD_Fast_DrawPoint+0x1e8>)
 80023d8:	899b      	ldrh	r3, [r3, #12]
 80023da:	3301      	adds	r3, #1
 80023dc:	b29b      	uxth	r3, r3
 80023de:	4618      	mov	r0, r3
 80023e0:	f7ff f844 	bl	800146c <LCD_WR_REG>
		LCD_WR_DATA(y & 0XFF);
 80023e4:	4b0c      	ldr	r3, [pc, #48]	; (8002418 <LCD_Fast_DrawPoint+0x1ec>)
 80023e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80023ea:	611a      	str	r2, [r3, #16]
 80023ec:	4b0a      	ldr	r3, [pc, #40]	; (8002418 <LCD_Fast_DrawPoint+0x1ec>)
 80023ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80023f2:	615a      	str	r2, [r3, #20]
 80023f4:	88bb      	ldrh	r3, [r7, #4]
 80023f6:	4a09      	ldr	r2, [pc, #36]	; (800241c <LCD_Fast_DrawPoint+0x1f0>)
 80023f8:	b2db      	uxtb	r3, r3
 80023fa:	60d3      	str	r3, [r2, #12]
 80023fc:	4b06      	ldr	r3, [pc, #24]	; (8002418 <LCD_Fast_DrawPoint+0x1ec>)
 80023fe:	2280      	movs	r2, #128	; 0x80
 8002400:	615a      	str	r2, [r3, #20]
 8002402:	4b05      	ldr	r3, [pc, #20]	; (8002418 <LCD_Fast_DrawPoint+0x1ec>)
 8002404:	2280      	movs	r2, #128	; 0x80
 8002406:	611a      	str	r2, [r3, #16]
 8002408:	4b03      	ldr	r3, [pc, #12]	; (8002418 <LCD_Fast_DrawPoint+0x1ec>)
 800240a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800240e:	611a      	str	r2, [r3, #16]
 8002410:	e16d      	b.n	80026ee <LCD_Fast_DrawPoint+0x4c2>
 8002412:	bf00      	nop
 8002414:	200000bc 	.word	0x200000bc
 8002418:	40011000 	.word	0x40011000
 800241c:	40010c00 	.word	0x40010c00
	} else if (lcddev.id == 0X1963) {
 8002420:	4b68      	ldr	r3, [pc, #416]	; (80025c4 <LCD_Fast_DrawPoint+0x398>)
 8002422:	889b      	ldrh	r3, [r3, #4]
 8002424:	f641 1263 	movw	r2, #6499	; 0x1963
 8002428:	4293      	cmp	r3, r2
 800242a:	f040 80d1 	bne.w	80025d0 <LCD_Fast_DrawPoint+0x3a4>
		if (lcddev.dir == 0)
 800242e:	4b65      	ldr	r3, [pc, #404]	; (80025c4 <LCD_Fast_DrawPoint+0x398>)
 8002430:	799b      	ldrb	r3, [r3, #6]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d106      	bne.n	8002444 <LCD_Fast_DrawPoint+0x218>
			x = lcddev.width - 1 - x;
 8002436:	4b63      	ldr	r3, [pc, #396]	; (80025c4 <LCD_Fast_DrawPoint+0x398>)
 8002438:	881a      	ldrh	r2, [r3, #0]
 800243a:	88fb      	ldrh	r3, [r7, #6]
 800243c:	1ad3      	subs	r3, r2, r3
 800243e:	b29b      	uxth	r3, r3
 8002440:	3b01      	subs	r3, #1
 8002442:	80fb      	strh	r3, [r7, #6]
		LCD_WR_REG(lcddev.setxcmd);
 8002444:	4b5f      	ldr	r3, [pc, #380]	; (80025c4 <LCD_Fast_DrawPoint+0x398>)
 8002446:	895b      	ldrh	r3, [r3, #10]
 8002448:	4618      	mov	r0, r3
 800244a:	f7ff f80f 	bl	800146c <LCD_WR_REG>
		LCD_WR_DATA(x >> 8);
 800244e:	4b5e      	ldr	r3, [pc, #376]	; (80025c8 <LCD_Fast_DrawPoint+0x39c>)
 8002450:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002454:	611a      	str	r2, [r3, #16]
 8002456:	4b5c      	ldr	r3, [pc, #368]	; (80025c8 <LCD_Fast_DrawPoint+0x39c>)
 8002458:	f44f 7200 	mov.w	r2, #512	; 0x200
 800245c:	615a      	str	r2, [r3, #20]
 800245e:	88fb      	ldrh	r3, [r7, #6]
 8002460:	0a1b      	lsrs	r3, r3, #8
 8002462:	b29a      	uxth	r2, r3
 8002464:	4b59      	ldr	r3, [pc, #356]	; (80025cc <LCD_Fast_DrawPoint+0x3a0>)
 8002466:	60da      	str	r2, [r3, #12]
 8002468:	4b57      	ldr	r3, [pc, #348]	; (80025c8 <LCD_Fast_DrawPoint+0x39c>)
 800246a:	2280      	movs	r2, #128	; 0x80
 800246c:	615a      	str	r2, [r3, #20]
 800246e:	4b56      	ldr	r3, [pc, #344]	; (80025c8 <LCD_Fast_DrawPoint+0x39c>)
 8002470:	2280      	movs	r2, #128	; 0x80
 8002472:	611a      	str	r2, [r3, #16]
 8002474:	4b54      	ldr	r3, [pc, #336]	; (80025c8 <LCD_Fast_DrawPoint+0x39c>)
 8002476:	f44f 7200 	mov.w	r2, #512	; 0x200
 800247a:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(x & 0XFF);
 800247c:	4b52      	ldr	r3, [pc, #328]	; (80025c8 <LCD_Fast_DrawPoint+0x39c>)
 800247e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002482:	611a      	str	r2, [r3, #16]
 8002484:	4b50      	ldr	r3, [pc, #320]	; (80025c8 <LCD_Fast_DrawPoint+0x39c>)
 8002486:	f44f 7200 	mov.w	r2, #512	; 0x200
 800248a:	615a      	str	r2, [r3, #20]
 800248c:	88fb      	ldrh	r3, [r7, #6]
 800248e:	4a4f      	ldr	r2, [pc, #316]	; (80025cc <LCD_Fast_DrawPoint+0x3a0>)
 8002490:	b2db      	uxtb	r3, r3
 8002492:	60d3      	str	r3, [r2, #12]
 8002494:	4b4c      	ldr	r3, [pc, #304]	; (80025c8 <LCD_Fast_DrawPoint+0x39c>)
 8002496:	2280      	movs	r2, #128	; 0x80
 8002498:	615a      	str	r2, [r3, #20]
 800249a:	4b4b      	ldr	r3, [pc, #300]	; (80025c8 <LCD_Fast_DrawPoint+0x39c>)
 800249c:	2280      	movs	r2, #128	; 0x80
 800249e:	611a      	str	r2, [r3, #16]
 80024a0:	4b49      	ldr	r3, [pc, #292]	; (80025c8 <LCD_Fast_DrawPoint+0x39c>)
 80024a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80024a6:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(x >> 8);
 80024a8:	4b47      	ldr	r3, [pc, #284]	; (80025c8 <LCD_Fast_DrawPoint+0x39c>)
 80024aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80024ae:	611a      	str	r2, [r3, #16]
 80024b0:	4b45      	ldr	r3, [pc, #276]	; (80025c8 <LCD_Fast_DrawPoint+0x39c>)
 80024b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80024b6:	615a      	str	r2, [r3, #20]
 80024b8:	88fb      	ldrh	r3, [r7, #6]
 80024ba:	0a1b      	lsrs	r3, r3, #8
 80024bc:	b29a      	uxth	r2, r3
 80024be:	4b43      	ldr	r3, [pc, #268]	; (80025cc <LCD_Fast_DrawPoint+0x3a0>)
 80024c0:	60da      	str	r2, [r3, #12]
 80024c2:	4b41      	ldr	r3, [pc, #260]	; (80025c8 <LCD_Fast_DrawPoint+0x39c>)
 80024c4:	2280      	movs	r2, #128	; 0x80
 80024c6:	615a      	str	r2, [r3, #20]
 80024c8:	4b3f      	ldr	r3, [pc, #252]	; (80025c8 <LCD_Fast_DrawPoint+0x39c>)
 80024ca:	2280      	movs	r2, #128	; 0x80
 80024cc:	611a      	str	r2, [r3, #16]
 80024ce:	4b3e      	ldr	r3, [pc, #248]	; (80025c8 <LCD_Fast_DrawPoint+0x39c>)
 80024d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80024d4:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(x & 0XFF);
 80024d6:	4b3c      	ldr	r3, [pc, #240]	; (80025c8 <LCD_Fast_DrawPoint+0x39c>)
 80024d8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80024dc:	611a      	str	r2, [r3, #16]
 80024de:	4b3a      	ldr	r3, [pc, #232]	; (80025c8 <LCD_Fast_DrawPoint+0x39c>)
 80024e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80024e4:	615a      	str	r2, [r3, #20]
 80024e6:	88fb      	ldrh	r3, [r7, #6]
 80024e8:	4a38      	ldr	r2, [pc, #224]	; (80025cc <LCD_Fast_DrawPoint+0x3a0>)
 80024ea:	b2db      	uxtb	r3, r3
 80024ec:	60d3      	str	r3, [r2, #12]
 80024ee:	4b36      	ldr	r3, [pc, #216]	; (80025c8 <LCD_Fast_DrawPoint+0x39c>)
 80024f0:	2280      	movs	r2, #128	; 0x80
 80024f2:	615a      	str	r2, [r3, #20]
 80024f4:	4b34      	ldr	r3, [pc, #208]	; (80025c8 <LCD_Fast_DrawPoint+0x39c>)
 80024f6:	2280      	movs	r2, #128	; 0x80
 80024f8:	611a      	str	r2, [r3, #16]
 80024fa:	4b33      	ldr	r3, [pc, #204]	; (80025c8 <LCD_Fast_DrawPoint+0x39c>)
 80024fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002500:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 8002502:	4b30      	ldr	r3, [pc, #192]	; (80025c4 <LCD_Fast_DrawPoint+0x398>)
 8002504:	899b      	ldrh	r3, [r3, #12]
 8002506:	4618      	mov	r0, r3
 8002508:	f7fe ffb0 	bl	800146c <LCD_WR_REG>
		LCD_WR_DATA(y >> 8);
 800250c:	4b2e      	ldr	r3, [pc, #184]	; (80025c8 <LCD_Fast_DrawPoint+0x39c>)
 800250e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002512:	611a      	str	r2, [r3, #16]
 8002514:	4b2c      	ldr	r3, [pc, #176]	; (80025c8 <LCD_Fast_DrawPoint+0x39c>)
 8002516:	f44f 7200 	mov.w	r2, #512	; 0x200
 800251a:	615a      	str	r2, [r3, #20]
 800251c:	88bb      	ldrh	r3, [r7, #4]
 800251e:	0a1b      	lsrs	r3, r3, #8
 8002520:	b29a      	uxth	r2, r3
 8002522:	4b2a      	ldr	r3, [pc, #168]	; (80025cc <LCD_Fast_DrawPoint+0x3a0>)
 8002524:	60da      	str	r2, [r3, #12]
 8002526:	4b28      	ldr	r3, [pc, #160]	; (80025c8 <LCD_Fast_DrawPoint+0x39c>)
 8002528:	2280      	movs	r2, #128	; 0x80
 800252a:	615a      	str	r2, [r3, #20]
 800252c:	4b26      	ldr	r3, [pc, #152]	; (80025c8 <LCD_Fast_DrawPoint+0x39c>)
 800252e:	2280      	movs	r2, #128	; 0x80
 8002530:	611a      	str	r2, [r3, #16]
 8002532:	4b25      	ldr	r3, [pc, #148]	; (80025c8 <LCD_Fast_DrawPoint+0x39c>)
 8002534:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002538:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(y & 0XFF);
 800253a:	4b23      	ldr	r3, [pc, #140]	; (80025c8 <LCD_Fast_DrawPoint+0x39c>)
 800253c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002540:	611a      	str	r2, [r3, #16]
 8002542:	4b21      	ldr	r3, [pc, #132]	; (80025c8 <LCD_Fast_DrawPoint+0x39c>)
 8002544:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002548:	615a      	str	r2, [r3, #20]
 800254a:	88bb      	ldrh	r3, [r7, #4]
 800254c:	4a1f      	ldr	r2, [pc, #124]	; (80025cc <LCD_Fast_DrawPoint+0x3a0>)
 800254e:	b2db      	uxtb	r3, r3
 8002550:	60d3      	str	r3, [r2, #12]
 8002552:	4b1d      	ldr	r3, [pc, #116]	; (80025c8 <LCD_Fast_DrawPoint+0x39c>)
 8002554:	2280      	movs	r2, #128	; 0x80
 8002556:	615a      	str	r2, [r3, #20]
 8002558:	4b1b      	ldr	r3, [pc, #108]	; (80025c8 <LCD_Fast_DrawPoint+0x39c>)
 800255a:	2280      	movs	r2, #128	; 0x80
 800255c:	611a      	str	r2, [r3, #16]
 800255e:	4b1a      	ldr	r3, [pc, #104]	; (80025c8 <LCD_Fast_DrawPoint+0x39c>)
 8002560:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002564:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(y >> 8);
 8002566:	4b18      	ldr	r3, [pc, #96]	; (80025c8 <LCD_Fast_DrawPoint+0x39c>)
 8002568:	f44f 7280 	mov.w	r2, #256	; 0x100
 800256c:	611a      	str	r2, [r3, #16]
 800256e:	4b16      	ldr	r3, [pc, #88]	; (80025c8 <LCD_Fast_DrawPoint+0x39c>)
 8002570:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002574:	615a      	str	r2, [r3, #20]
 8002576:	88bb      	ldrh	r3, [r7, #4]
 8002578:	0a1b      	lsrs	r3, r3, #8
 800257a:	b29a      	uxth	r2, r3
 800257c:	4b13      	ldr	r3, [pc, #76]	; (80025cc <LCD_Fast_DrawPoint+0x3a0>)
 800257e:	60da      	str	r2, [r3, #12]
 8002580:	4b11      	ldr	r3, [pc, #68]	; (80025c8 <LCD_Fast_DrawPoint+0x39c>)
 8002582:	2280      	movs	r2, #128	; 0x80
 8002584:	615a      	str	r2, [r3, #20]
 8002586:	4b10      	ldr	r3, [pc, #64]	; (80025c8 <LCD_Fast_DrawPoint+0x39c>)
 8002588:	2280      	movs	r2, #128	; 0x80
 800258a:	611a      	str	r2, [r3, #16]
 800258c:	4b0e      	ldr	r3, [pc, #56]	; (80025c8 <LCD_Fast_DrawPoint+0x39c>)
 800258e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002592:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(y & 0XFF);
 8002594:	4b0c      	ldr	r3, [pc, #48]	; (80025c8 <LCD_Fast_DrawPoint+0x39c>)
 8002596:	f44f 7280 	mov.w	r2, #256	; 0x100
 800259a:	611a      	str	r2, [r3, #16]
 800259c:	4b0a      	ldr	r3, [pc, #40]	; (80025c8 <LCD_Fast_DrawPoint+0x39c>)
 800259e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025a2:	615a      	str	r2, [r3, #20]
 80025a4:	88bb      	ldrh	r3, [r7, #4]
 80025a6:	4a09      	ldr	r2, [pc, #36]	; (80025cc <LCD_Fast_DrawPoint+0x3a0>)
 80025a8:	b2db      	uxtb	r3, r3
 80025aa:	60d3      	str	r3, [r2, #12]
 80025ac:	4b06      	ldr	r3, [pc, #24]	; (80025c8 <LCD_Fast_DrawPoint+0x39c>)
 80025ae:	2280      	movs	r2, #128	; 0x80
 80025b0:	615a      	str	r2, [r3, #20]
 80025b2:	4b05      	ldr	r3, [pc, #20]	; (80025c8 <LCD_Fast_DrawPoint+0x39c>)
 80025b4:	2280      	movs	r2, #128	; 0x80
 80025b6:	611a      	str	r2, [r3, #16]
 80025b8:	4b03      	ldr	r3, [pc, #12]	; (80025c8 <LCD_Fast_DrawPoint+0x39c>)
 80025ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025be:	611a      	str	r2, [r3, #16]
 80025c0:	e095      	b.n	80026ee <LCD_Fast_DrawPoint+0x4c2>
 80025c2:	bf00      	nop
 80025c4:	200000bc 	.word	0x200000bc
 80025c8:	40011000 	.word	0x40011000
 80025cc:	40010c00 	.word	0x40010c00
	} else if (lcddev.id == 0X6804) {
 80025d0:	4b5e      	ldr	r3, [pc, #376]	; (800274c <LCD_Fast_DrawPoint+0x520>)
 80025d2:	889b      	ldrh	r3, [r3, #4]
 80025d4:	f646 0204 	movw	r2, #26628	; 0x6804
 80025d8:	4293      	cmp	r3, r2
 80025da:	d16f      	bne.n	80026bc <LCD_Fast_DrawPoint+0x490>
		if (lcddev.dir == 1)
 80025dc:	4b5b      	ldr	r3, [pc, #364]	; (800274c <LCD_Fast_DrawPoint+0x520>)
 80025de:	799b      	ldrb	r3, [r3, #6]
 80025e0:	2b01      	cmp	r3, #1
 80025e2:	d106      	bne.n	80025f2 <LCD_Fast_DrawPoint+0x3c6>
			x = lcddev.width - 1 - x;	//横屏时处理
 80025e4:	4b59      	ldr	r3, [pc, #356]	; (800274c <LCD_Fast_DrawPoint+0x520>)
 80025e6:	881a      	ldrh	r2, [r3, #0]
 80025e8:	88fb      	ldrh	r3, [r7, #6]
 80025ea:	1ad3      	subs	r3, r2, r3
 80025ec:	b29b      	uxth	r3, r3
 80025ee:	3b01      	subs	r3, #1
 80025f0:	80fb      	strh	r3, [r7, #6]
		LCD_WR_REG(lcddev.setxcmd);
 80025f2:	4b56      	ldr	r3, [pc, #344]	; (800274c <LCD_Fast_DrawPoint+0x520>)
 80025f4:	895b      	ldrh	r3, [r3, #10]
 80025f6:	4618      	mov	r0, r3
 80025f8:	f7fe ff38 	bl	800146c <LCD_WR_REG>
		LCD_WR_DATA(x >> 8);
 80025fc:	4b54      	ldr	r3, [pc, #336]	; (8002750 <LCD_Fast_DrawPoint+0x524>)
 80025fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002602:	611a      	str	r2, [r3, #16]
 8002604:	4b52      	ldr	r3, [pc, #328]	; (8002750 <LCD_Fast_DrawPoint+0x524>)
 8002606:	f44f 7200 	mov.w	r2, #512	; 0x200
 800260a:	615a      	str	r2, [r3, #20]
 800260c:	88fb      	ldrh	r3, [r7, #6]
 800260e:	0a1b      	lsrs	r3, r3, #8
 8002610:	b29a      	uxth	r2, r3
 8002612:	4b50      	ldr	r3, [pc, #320]	; (8002754 <LCD_Fast_DrawPoint+0x528>)
 8002614:	60da      	str	r2, [r3, #12]
 8002616:	4b4e      	ldr	r3, [pc, #312]	; (8002750 <LCD_Fast_DrawPoint+0x524>)
 8002618:	2280      	movs	r2, #128	; 0x80
 800261a:	615a      	str	r2, [r3, #20]
 800261c:	4b4c      	ldr	r3, [pc, #304]	; (8002750 <LCD_Fast_DrawPoint+0x524>)
 800261e:	2280      	movs	r2, #128	; 0x80
 8002620:	611a      	str	r2, [r3, #16]
 8002622:	4b4b      	ldr	r3, [pc, #300]	; (8002750 <LCD_Fast_DrawPoint+0x524>)
 8002624:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002628:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(x & 0XFF);
 800262a:	4b49      	ldr	r3, [pc, #292]	; (8002750 <LCD_Fast_DrawPoint+0x524>)
 800262c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002630:	611a      	str	r2, [r3, #16]
 8002632:	4b47      	ldr	r3, [pc, #284]	; (8002750 <LCD_Fast_DrawPoint+0x524>)
 8002634:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002638:	615a      	str	r2, [r3, #20]
 800263a:	88fb      	ldrh	r3, [r7, #6]
 800263c:	4a45      	ldr	r2, [pc, #276]	; (8002754 <LCD_Fast_DrawPoint+0x528>)
 800263e:	b2db      	uxtb	r3, r3
 8002640:	60d3      	str	r3, [r2, #12]
 8002642:	4b43      	ldr	r3, [pc, #268]	; (8002750 <LCD_Fast_DrawPoint+0x524>)
 8002644:	2280      	movs	r2, #128	; 0x80
 8002646:	615a      	str	r2, [r3, #20]
 8002648:	4b41      	ldr	r3, [pc, #260]	; (8002750 <LCD_Fast_DrawPoint+0x524>)
 800264a:	2280      	movs	r2, #128	; 0x80
 800264c:	611a      	str	r2, [r3, #16]
 800264e:	4b40      	ldr	r3, [pc, #256]	; (8002750 <LCD_Fast_DrawPoint+0x524>)
 8002650:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002654:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 8002656:	4b3d      	ldr	r3, [pc, #244]	; (800274c <LCD_Fast_DrawPoint+0x520>)
 8002658:	899b      	ldrh	r3, [r3, #12]
 800265a:	4618      	mov	r0, r3
 800265c:	f7fe ff06 	bl	800146c <LCD_WR_REG>
		LCD_WR_DATA(y >> 8);
 8002660:	4b3b      	ldr	r3, [pc, #236]	; (8002750 <LCD_Fast_DrawPoint+0x524>)
 8002662:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002666:	611a      	str	r2, [r3, #16]
 8002668:	4b39      	ldr	r3, [pc, #228]	; (8002750 <LCD_Fast_DrawPoint+0x524>)
 800266a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800266e:	615a      	str	r2, [r3, #20]
 8002670:	88bb      	ldrh	r3, [r7, #4]
 8002672:	0a1b      	lsrs	r3, r3, #8
 8002674:	b29a      	uxth	r2, r3
 8002676:	4b37      	ldr	r3, [pc, #220]	; (8002754 <LCD_Fast_DrawPoint+0x528>)
 8002678:	60da      	str	r2, [r3, #12]
 800267a:	4b35      	ldr	r3, [pc, #212]	; (8002750 <LCD_Fast_DrawPoint+0x524>)
 800267c:	2280      	movs	r2, #128	; 0x80
 800267e:	615a      	str	r2, [r3, #20]
 8002680:	4b33      	ldr	r3, [pc, #204]	; (8002750 <LCD_Fast_DrawPoint+0x524>)
 8002682:	2280      	movs	r2, #128	; 0x80
 8002684:	611a      	str	r2, [r3, #16]
 8002686:	4b32      	ldr	r3, [pc, #200]	; (8002750 <LCD_Fast_DrawPoint+0x524>)
 8002688:	f44f 7200 	mov.w	r2, #512	; 0x200
 800268c:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(y & 0XFF);
 800268e:	4b30      	ldr	r3, [pc, #192]	; (8002750 <LCD_Fast_DrawPoint+0x524>)
 8002690:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002694:	611a      	str	r2, [r3, #16]
 8002696:	4b2e      	ldr	r3, [pc, #184]	; (8002750 <LCD_Fast_DrawPoint+0x524>)
 8002698:	f44f 7200 	mov.w	r2, #512	; 0x200
 800269c:	615a      	str	r2, [r3, #20]
 800269e:	88bb      	ldrh	r3, [r7, #4]
 80026a0:	4a2c      	ldr	r2, [pc, #176]	; (8002754 <LCD_Fast_DrawPoint+0x528>)
 80026a2:	b2db      	uxtb	r3, r3
 80026a4:	60d3      	str	r3, [r2, #12]
 80026a6:	4b2a      	ldr	r3, [pc, #168]	; (8002750 <LCD_Fast_DrawPoint+0x524>)
 80026a8:	2280      	movs	r2, #128	; 0x80
 80026aa:	615a      	str	r2, [r3, #20]
 80026ac:	4b28      	ldr	r3, [pc, #160]	; (8002750 <LCD_Fast_DrawPoint+0x524>)
 80026ae:	2280      	movs	r2, #128	; 0x80
 80026b0:	611a      	str	r2, [r3, #16]
 80026b2:	4b27      	ldr	r3, [pc, #156]	; (8002750 <LCD_Fast_DrawPoint+0x524>)
 80026b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80026b8:	611a      	str	r2, [r3, #16]
 80026ba:	e018      	b.n	80026ee <LCD_Fast_DrawPoint+0x4c2>
	} else {
		if (lcddev.dir == 1)
 80026bc:	4b23      	ldr	r3, [pc, #140]	; (800274c <LCD_Fast_DrawPoint+0x520>)
 80026be:	799b      	ldrb	r3, [r3, #6]
 80026c0:	2b01      	cmp	r3, #1
 80026c2:	d106      	bne.n	80026d2 <LCD_Fast_DrawPoint+0x4a6>
			x = lcddev.width - 1 - x;	//横屏其实就是调转x,y坐标
 80026c4:	4b21      	ldr	r3, [pc, #132]	; (800274c <LCD_Fast_DrawPoint+0x520>)
 80026c6:	881a      	ldrh	r2, [r3, #0]
 80026c8:	88fb      	ldrh	r3, [r7, #6]
 80026ca:	1ad3      	subs	r3, r2, r3
 80026cc:	b29b      	uxth	r3, r3
 80026ce:	3b01      	subs	r3, #1
 80026d0:	80fb      	strh	r3, [r7, #6]
		LCD_WriteReg(lcddev.setxcmd, x);
 80026d2:	4b1e      	ldr	r3, [pc, #120]	; (800274c <LCD_Fast_DrawPoint+0x520>)
 80026d4:	895b      	ldrh	r3, [r3, #10]
 80026d6:	88fa      	ldrh	r2, [r7, #6]
 80026d8:	4611      	mov	r1, r2
 80026da:	4618      	mov	r0, r3
 80026dc:	f7fe ff52 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(lcddev.setycmd, y);
 80026e0:	4b1a      	ldr	r3, [pc, #104]	; (800274c <LCD_Fast_DrawPoint+0x520>)
 80026e2:	899b      	ldrh	r3, [r3, #12]
 80026e4:	88ba      	ldrh	r2, [r7, #4]
 80026e6:	4611      	mov	r1, r2
 80026e8:	4618      	mov	r0, r3
 80026ea:	f7fe ff4b 	bl	8001584 <LCD_WriteReg>
	}
	LCD_RS_CLR;
 80026ee:	4b18      	ldr	r3, [pc, #96]	; (8002750 <LCD_Fast_DrawPoint+0x524>)
 80026f0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80026f4:	615a      	str	r2, [r3, #20]
	LCD_CS_CLR;
 80026f6:	4b16      	ldr	r3, [pc, #88]	; (8002750 <LCD_Fast_DrawPoint+0x524>)
 80026f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80026fc:	615a      	str	r2, [r3, #20]
	DATAOUT(lcddev.wramcmd);	//写指令
 80026fe:	4b13      	ldr	r3, [pc, #76]	; (800274c <LCD_Fast_DrawPoint+0x520>)
 8002700:	891a      	ldrh	r2, [r3, #8]
 8002702:	4b14      	ldr	r3, [pc, #80]	; (8002754 <LCD_Fast_DrawPoint+0x528>)
 8002704:	60da      	str	r2, [r3, #12]
	LCD_WR_CLR;
 8002706:	4b12      	ldr	r3, [pc, #72]	; (8002750 <LCD_Fast_DrawPoint+0x524>)
 8002708:	2280      	movs	r2, #128	; 0x80
 800270a:	615a      	str	r2, [r3, #20]
	LCD_WR_SET;
 800270c:	4b10      	ldr	r3, [pc, #64]	; (8002750 <LCD_Fast_DrawPoint+0x524>)
 800270e:	2280      	movs	r2, #128	; 0x80
 8002710:	611a      	str	r2, [r3, #16]
	LCD_CS_SET;
 8002712:	4b0f      	ldr	r3, [pc, #60]	; (8002750 <LCD_Fast_DrawPoint+0x524>)
 8002714:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002718:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(color);		//写数据
 800271a:	4b0d      	ldr	r3, [pc, #52]	; (8002750 <LCD_Fast_DrawPoint+0x524>)
 800271c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002720:	611a      	str	r2, [r3, #16]
 8002722:	4b0b      	ldr	r3, [pc, #44]	; (8002750 <LCD_Fast_DrawPoint+0x524>)
 8002724:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002728:	615a      	str	r2, [r3, #20]
 800272a:	4a0a      	ldr	r2, [pc, #40]	; (8002754 <LCD_Fast_DrawPoint+0x528>)
 800272c:	887b      	ldrh	r3, [r7, #2]
 800272e:	60d3      	str	r3, [r2, #12]
 8002730:	4b07      	ldr	r3, [pc, #28]	; (8002750 <LCD_Fast_DrawPoint+0x524>)
 8002732:	2280      	movs	r2, #128	; 0x80
 8002734:	615a      	str	r2, [r3, #20]
 8002736:	4b06      	ldr	r3, [pc, #24]	; (8002750 <LCD_Fast_DrawPoint+0x524>)
 8002738:	2280      	movs	r2, #128	; 0x80
 800273a:	611a      	str	r2, [r3, #16]
 800273c:	4b04      	ldr	r3, [pc, #16]	; (8002750 <LCD_Fast_DrawPoint+0x524>)
 800273e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002742:	611a      	str	r2, [r3, #16]
}
 8002744:	bf00      	nop
 8002746:	3708      	adds	r7, #8
 8002748:	46bd      	mov	sp, r7
 800274a:	bd80      	pop	{r7, pc}
 800274c:	200000bc 	.word	0x200000bc
 8002750:	40011000 	.word	0x40011000
 8002754:	40010c00 	.word	0x40010c00

08002758 <LCD_SSD_BackLightSet>:
//SSD1963 背光设置
//pwm:背光等级,0~100.越大越亮.
void LCD_SSD_BackLightSet(uint8_t pwm) {
 8002758:	b590      	push	{r4, r7, lr}
 800275a:	b083      	sub	sp, #12
 800275c:	af00      	add	r7, sp, #0
 800275e:	4603      	mov	r3, r0
 8002760:	71fb      	strb	r3, [r7, #7]
	LCD_WR_REG(0xBE);	//配置PWM输出
 8002762:	20be      	movs	r0, #190	; 0xbe
 8002764:	f7fe fe82 	bl	800146c <LCD_WR_REG>
	LCD_WR_DATA(0x05);	//1设置PWM频率
 8002768:	4b4b      	ldr	r3, [pc, #300]	; (8002898 <LCD_SSD_BackLightSet+0x140>)
 800276a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800276e:	611a      	str	r2, [r3, #16]
 8002770:	4b49      	ldr	r3, [pc, #292]	; (8002898 <LCD_SSD_BackLightSet+0x140>)
 8002772:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002776:	615a      	str	r2, [r3, #20]
 8002778:	4b48      	ldr	r3, [pc, #288]	; (800289c <LCD_SSD_BackLightSet+0x144>)
 800277a:	2205      	movs	r2, #5
 800277c:	60da      	str	r2, [r3, #12]
 800277e:	4b46      	ldr	r3, [pc, #280]	; (8002898 <LCD_SSD_BackLightSet+0x140>)
 8002780:	2280      	movs	r2, #128	; 0x80
 8002782:	615a      	str	r2, [r3, #20]
 8002784:	4b44      	ldr	r3, [pc, #272]	; (8002898 <LCD_SSD_BackLightSet+0x140>)
 8002786:	2280      	movs	r2, #128	; 0x80
 8002788:	611a      	str	r2, [r3, #16]
 800278a:	4b43      	ldr	r3, [pc, #268]	; (8002898 <LCD_SSD_BackLightSet+0x140>)
 800278c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002790:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(pwm * 2.55);	//2设置PWM占空比
 8002792:	4b41      	ldr	r3, [pc, #260]	; (8002898 <LCD_SSD_BackLightSet+0x140>)
 8002794:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002798:	611a      	str	r2, [r3, #16]
 800279a:	4b3f      	ldr	r3, [pc, #252]	; (8002898 <LCD_SSD_BackLightSet+0x140>)
 800279c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027a0:	615a      	str	r2, [r3, #20]
 80027a2:	79fb      	ldrb	r3, [r7, #7]
 80027a4:	4618      	mov	r0, r3
 80027a6:	f7fd fe91 	bl	80004cc <__aeabi_i2d>
 80027aa:	a339      	add	r3, pc, #228	; (adr r3, 8002890 <LCD_SSD_BackLightSet+0x138>)
 80027ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027b0:	f7fd fef6 	bl	80005a0 <__aeabi_dmul>
 80027b4:	4603      	mov	r3, r0
 80027b6:	460c      	mov	r4, r1
 80027b8:	461a      	mov	r2, r3
 80027ba:	4623      	mov	r3, r4
 80027bc:	4c37      	ldr	r4, [pc, #220]	; (800289c <LCD_SSD_BackLightSet+0x144>)
 80027be:	4610      	mov	r0, r2
 80027c0:	4619      	mov	r1, r3
 80027c2:	f7fe f8ff 	bl	80009c4 <__aeabi_d2uiz>
 80027c6:	4603      	mov	r3, r0
 80027c8:	60e3      	str	r3, [r4, #12]
 80027ca:	4b33      	ldr	r3, [pc, #204]	; (8002898 <LCD_SSD_BackLightSet+0x140>)
 80027cc:	2280      	movs	r2, #128	; 0x80
 80027ce:	615a      	str	r2, [r3, #20]
 80027d0:	4b31      	ldr	r3, [pc, #196]	; (8002898 <LCD_SSD_BackLightSet+0x140>)
 80027d2:	2280      	movs	r2, #128	; 0x80
 80027d4:	611a      	str	r2, [r3, #16]
 80027d6:	4b30      	ldr	r3, [pc, #192]	; (8002898 <LCD_SSD_BackLightSet+0x140>)
 80027d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027dc:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(0x01);	//3设置C
 80027de:	4b2e      	ldr	r3, [pc, #184]	; (8002898 <LCD_SSD_BackLightSet+0x140>)
 80027e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80027e4:	611a      	str	r2, [r3, #16]
 80027e6:	4b2c      	ldr	r3, [pc, #176]	; (8002898 <LCD_SSD_BackLightSet+0x140>)
 80027e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027ec:	615a      	str	r2, [r3, #20]
 80027ee:	4b2b      	ldr	r3, [pc, #172]	; (800289c <LCD_SSD_BackLightSet+0x144>)
 80027f0:	2201      	movs	r2, #1
 80027f2:	60da      	str	r2, [r3, #12]
 80027f4:	4b28      	ldr	r3, [pc, #160]	; (8002898 <LCD_SSD_BackLightSet+0x140>)
 80027f6:	2280      	movs	r2, #128	; 0x80
 80027f8:	615a      	str	r2, [r3, #20]
 80027fa:	4b27      	ldr	r3, [pc, #156]	; (8002898 <LCD_SSD_BackLightSet+0x140>)
 80027fc:	2280      	movs	r2, #128	; 0x80
 80027fe:	611a      	str	r2, [r3, #16]
 8002800:	4b25      	ldr	r3, [pc, #148]	; (8002898 <LCD_SSD_BackLightSet+0x140>)
 8002802:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002806:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(0xFF);	//4设置D
 8002808:	4b23      	ldr	r3, [pc, #140]	; (8002898 <LCD_SSD_BackLightSet+0x140>)
 800280a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800280e:	611a      	str	r2, [r3, #16]
 8002810:	4b21      	ldr	r3, [pc, #132]	; (8002898 <LCD_SSD_BackLightSet+0x140>)
 8002812:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002816:	615a      	str	r2, [r3, #20]
 8002818:	4b20      	ldr	r3, [pc, #128]	; (800289c <LCD_SSD_BackLightSet+0x144>)
 800281a:	22ff      	movs	r2, #255	; 0xff
 800281c:	60da      	str	r2, [r3, #12]
 800281e:	4b1e      	ldr	r3, [pc, #120]	; (8002898 <LCD_SSD_BackLightSet+0x140>)
 8002820:	2280      	movs	r2, #128	; 0x80
 8002822:	615a      	str	r2, [r3, #20]
 8002824:	4b1c      	ldr	r3, [pc, #112]	; (8002898 <LCD_SSD_BackLightSet+0x140>)
 8002826:	2280      	movs	r2, #128	; 0x80
 8002828:	611a      	str	r2, [r3, #16]
 800282a:	4b1b      	ldr	r3, [pc, #108]	; (8002898 <LCD_SSD_BackLightSet+0x140>)
 800282c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002830:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(0x00);	//5设置E
 8002832:	4b19      	ldr	r3, [pc, #100]	; (8002898 <LCD_SSD_BackLightSet+0x140>)
 8002834:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002838:	611a      	str	r2, [r3, #16]
 800283a:	4b17      	ldr	r3, [pc, #92]	; (8002898 <LCD_SSD_BackLightSet+0x140>)
 800283c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002840:	615a      	str	r2, [r3, #20]
 8002842:	4b16      	ldr	r3, [pc, #88]	; (800289c <LCD_SSD_BackLightSet+0x144>)
 8002844:	2200      	movs	r2, #0
 8002846:	60da      	str	r2, [r3, #12]
 8002848:	4b13      	ldr	r3, [pc, #76]	; (8002898 <LCD_SSD_BackLightSet+0x140>)
 800284a:	2280      	movs	r2, #128	; 0x80
 800284c:	615a      	str	r2, [r3, #20]
 800284e:	4b12      	ldr	r3, [pc, #72]	; (8002898 <LCD_SSD_BackLightSet+0x140>)
 8002850:	2280      	movs	r2, #128	; 0x80
 8002852:	611a      	str	r2, [r3, #16]
 8002854:	4b10      	ldr	r3, [pc, #64]	; (8002898 <LCD_SSD_BackLightSet+0x140>)
 8002856:	f44f 7200 	mov.w	r2, #512	; 0x200
 800285a:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(0x00);	//6设置F
 800285c:	4b0e      	ldr	r3, [pc, #56]	; (8002898 <LCD_SSD_BackLightSet+0x140>)
 800285e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002862:	611a      	str	r2, [r3, #16]
 8002864:	4b0c      	ldr	r3, [pc, #48]	; (8002898 <LCD_SSD_BackLightSet+0x140>)
 8002866:	f44f 7200 	mov.w	r2, #512	; 0x200
 800286a:	615a      	str	r2, [r3, #20]
 800286c:	4b0b      	ldr	r3, [pc, #44]	; (800289c <LCD_SSD_BackLightSet+0x144>)
 800286e:	2200      	movs	r2, #0
 8002870:	60da      	str	r2, [r3, #12]
 8002872:	4b09      	ldr	r3, [pc, #36]	; (8002898 <LCD_SSD_BackLightSet+0x140>)
 8002874:	2280      	movs	r2, #128	; 0x80
 8002876:	615a      	str	r2, [r3, #20]
 8002878:	4b07      	ldr	r3, [pc, #28]	; (8002898 <LCD_SSD_BackLightSet+0x140>)
 800287a:	2280      	movs	r2, #128	; 0x80
 800287c:	611a      	str	r2, [r3, #16]
 800287e:	4b06      	ldr	r3, [pc, #24]	; (8002898 <LCD_SSD_BackLightSet+0x140>)
 8002880:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002884:	611a      	str	r2, [r3, #16]
}
 8002886:	bf00      	nop
 8002888:	370c      	adds	r7, #12
 800288a:	46bd      	mov	sp, r7
 800288c:	bd90      	pop	{r4, r7, pc}
 800288e:	bf00      	nop
 8002890:	66666666 	.word	0x66666666
 8002894:	40046666 	.word	0x40046666
 8002898:	40011000 	.word	0x40011000
 800289c:	40010c00 	.word	0x40010c00

080028a0 <LCD_Display_Dir>:
// Set LCD display direction
// dir: 0, vertical 1, horizontal
void LCD_Display_Dir(uint8_t dir) {
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b082      	sub	sp, #8
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	4603      	mov	r3, r0
 80028a8:	71fb      	strb	r3, [r7, #7]
	if (dir == 0)			//竖屏
 80028aa:	79fb      	ldrb	r3, [r7, #7]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d177      	bne.n	80029a0 <LCD_Display_Dir+0x100>
			{
		lcddev.dir = 0;	//竖屏
 80028b0:	4b80      	ldr	r3, [pc, #512]	; (8002ab4 <LCD_Display_Dir+0x214>)
 80028b2:	2200      	movs	r2, #0
 80028b4:	719a      	strb	r2, [r3, #6]
		lcddev.width = 240;
 80028b6:	4b7f      	ldr	r3, [pc, #508]	; (8002ab4 <LCD_Display_Dir+0x214>)
 80028b8:	22f0      	movs	r2, #240	; 0xf0
 80028ba:	801a      	strh	r2, [r3, #0]
		lcddev.height = 320;
 80028bc:	4b7d      	ldr	r3, [pc, #500]	; (8002ab4 <LCD_Display_Dir+0x214>)
 80028be:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80028c2:	805a      	strh	r2, [r3, #2]
		if (lcddev.id == 0X9341 || lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 80028c4:	4b7b      	ldr	r3, [pc, #492]	; (8002ab4 <LCD_Display_Dir+0x214>)
 80028c6:	889b      	ldrh	r3, [r3, #4]
 80028c8:	f249 3241 	movw	r2, #37697	; 0x9341
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d00b      	beq.n	80028e8 <LCD_Display_Dir+0x48>
 80028d0:	4b78      	ldr	r3, [pc, #480]	; (8002ab4 <LCD_Display_Dir+0x214>)
 80028d2:	889b      	ldrh	r3, [r3, #4]
 80028d4:	f646 0204 	movw	r2, #26628	; 0x6804
 80028d8:	4293      	cmp	r3, r2
 80028da:	d005      	beq.n	80028e8 <LCD_Display_Dir+0x48>
 80028dc:	4b75      	ldr	r3, [pc, #468]	; (8002ab4 <LCD_Display_Dir+0x214>)
 80028de:	889b      	ldrh	r3, [r3, #4]
 80028e0:	f245 3210 	movw	r2, #21264	; 0x5310
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d11e      	bne.n	8002926 <LCD_Display_Dir+0x86>
			lcddev.wramcmd = 0X2C;
 80028e8:	4b72      	ldr	r3, [pc, #456]	; (8002ab4 <LCD_Display_Dir+0x214>)
 80028ea:	222c      	movs	r2, #44	; 0x2c
 80028ec:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2A;
 80028ee:	4b71      	ldr	r3, [pc, #452]	; (8002ab4 <LCD_Display_Dir+0x214>)
 80028f0:	222a      	movs	r2, #42	; 0x2a
 80028f2:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2B;
 80028f4:	4b6f      	ldr	r3, [pc, #444]	; (8002ab4 <LCD_Display_Dir+0x214>)
 80028f6:	222b      	movs	r2, #43	; 0x2b
 80028f8:	819a      	strh	r2, [r3, #12]
			if (lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 80028fa:	4b6e      	ldr	r3, [pc, #440]	; (8002ab4 <LCD_Display_Dir+0x214>)
 80028fc:	889b      	ldrh	r3, [r3, #4]
 80028fe:	f646 0204 	movw	r2, #26628	; 0x6804
 8002902:	4293      	cmp	r3, r2
 8002904:	d006      	beq.n	8002914 <LCD_Display_Dir+0x74>
 8002906:	4b6b      	ldr	r3, [pc, #428]	; (8002ab4 <LCD_Display_Dir+0x214>)
 8002908:	889b      	ldrh	r3, [r3, #4]
 800290a:	f245 3210 	movw	r2, #21264	; 0x5310
 800290e:	4293      	cmp	r3, r2
 8002910:	f040 80c7 	bne.w	8002aa2 <LCD_Display_Dir+0x202>
				lcddev.width = 320;
 8002914:	4b67      	ldr	r3, [pc, #412]	; (8002ab4 <LCD_Display_Dir+0x214>)
 8002916:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800291a:	801a      	strh	r2, [r3, #0]
				lcddev.height = 480;
 800291c:	4b65      	ldr	r3, [pc, #404]	; (8002ab4 <LCD_Display_Dir+0x214>)
 800291e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002922:	805a      	strh	r2, [r3, #2]
			if (lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 8002924:	e0bd      	b.n	8002aa2 <LCD_Display_Dir+0x202>
			}
		} else if (lcddev.id == 0x5510) {
 8002926:	4b63      	ldr	r3, [pc, #396]	; (8002ab4 <LCD_Display_Dir+0x214>)
 8002928:	889b      	ldrh	r3, [r3, #4]
 800292a:	f245 5210 	movw	r2, #21776	; 0x5510
 800292e:	4293      	cmp	r3, r2
 8002930:	d114      	bne.n	800295c <LCD_Display_Dir+0xbc>
			lcddev.wramcmd = 0X2C00;
 8002932:	4b60      	ldr	r3, [pc, #384]	; (8002ab4 <LCD_Display_Dir+0x214>)
 8002934:	f44f 5230 	mov.w	r2, #11264	; 0x2c00
 8002938:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2A00;
 800293a:	4b5e      	ldr	r3, [pc, #376]	; (8002ab4 <LCD_Display_Dir+0x214>)
 800293c:	f44f 5228 	mov.w	r2, #10752	; 0x2a00
 8002940:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2B00;
 8002942:	4b5c      	ldr	r3, [pc, #368]	; (8002ab4 <LCD_Display_Dir+0x214>)
 8002944:	f44f 522c 	mov.w	r2, #11008	; 0x2b00
 8002948:	819a      	strh	r2, [r3, #12]
			lcddev.width = 480;
 800294a:	4b5a      	ldr	r3, [pc, #360]	; (8002ab4 <LCD_Display_Dir+0x214>)
 800294c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002950:	801a      	strh	r2, [r3, #0]
			lcddev.height = 800;
 8002952:	4b58      	ldr	r3, [pc, #352]	; (8002ab4 <LCD_Display_Dir+0x214>)
 8002954:	f44f 7248 	mov.w	r2, #800	; 0x320
 8002958:	805a      	strh	r2, [r3, #2]
 800295a:	e0a3      	b.n	8002aa4 <LCD_Display_Dir+0x204>
		} else if (lcddev.id == 0X1963) {
 800295c:	4b55      	ldr	r3, [pc, #340]	; (8002ab4 <LCD_Display_Dir+0x214>)
 800295e:	889b      	ldrh	r3, [r3, #4]
 8002960:	f641 1263 	movw	r2, #6499	; 0x1963
 8002964:	4293      	cmp	r3, r2
 8002966:	d111      	bne.n	800298c <LCD_Display_Dir+0xec>
			lcddev.wramcmd = 0X2C;	//设置写入GRAM的指令
 8002968:	4b52      	ldr	r3, [pc, #328]	; (8002ab4 <LCD_Display_Dir+0x214>)
 800296a:	222c      	movs	r2, #44	; 0x2c
 800296c:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2B;	//设置写X坐标指令
 800296e:	4b51      	ldr	r3, [pc, #324]	; (8002ab4 <LCD_Display_Dir+0x214>)
 8002970:	222b      	movs	r2, #43	; 0x2b
 8002972:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2A;	//设置写Y坐标指令
 8002974:	4b4f      	ldr	r3, [pc, #316]	; (8002ab4 <LCD_Display_Dir+0x214>)
 8002976:	222a      	movs	r2, #42	; 0x2a
 8002978:	819a      	strh	r2, [r3, #12]
			lcddev.width = 480;		//设置宽度480
 800297a:	4b4e      	ldr	r3, [pc, #312]	; (8002ab4 <LCD_Display_Dir+0x214>)
 800297c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002980:	801a      	strh	r2, [r3, #0]
			lcddev.height = 800;		//设置高度800
 8002982:	4b4c      	ldr	r3, [pc, #304]	; (8002ab4 <LCD_Display_Dir+0x214>)
 8002984:	f44f 7248 	mov.w	r2, #800	; 0x320
 8002988:	805a      	strh	r2, [r3, #2]
 800298a:	e08b      	b.n	8002aa4 <LCD_Display_Dir+0x204>
		} else {
			lcddev.wramcmd = 0X22;
 800298c:	4b49      	ldr	r3, [pc, #292]	; (8002ab4 <LCD_Display_Dir+0x214>)
 800298e:	2222      	movs	r2, #34	; 0x22
 8002990:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X20;
 8002992:	4b48      	ldr	r3, [pc, #288]	; (8002ab4 <LCD_Display_Dir+0x214>)
 8002994:	2220      	movs	r2, #32
 8002996:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X21;
 8002998:	4b46      	ldr	r3, [pc, #280]	; (8002ab4 <LCD_Display_Dir+0x214>)
 800299a:	2221      	movs	r2, #33	; 0x21
 800299c:	819a      	strh	r2, [r3, #12]
 800299e:	e081      	b.n	8002aa4 <LCD_Display_Dir+0x204>
		}
	} else 				//横屏
	{
		lcddev.dir = 1;	//横屏
 80029a0:	4b44      	ldr	r3, [pc, #272]	; (8002ab4 <LCD_Display_Dir+0x214>)
 80029a2:	2201      	movs	r2, #1
 80029a4:	719a      	strb	r2, [r3, #6]
		lcddev.width = 320;
 80029a6:	4b43      	ldr	r3, [pc, #268]	; (8002ab4 <LCD_Display_Dir+0x214>)
 80029a8:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80029ac:	801a      	strh	r2, [r3, #0]
		lcddev.height = 240;
 80029ae:	4b41      	ldr	r3, [pc, #260]	; (8002ab4 <LCD_Display_Dir+0x214>)
 80029b0:	22f0      	movs	r2, #240	; 0xf0
 80029b2:	805a      	strh	r2, [r3, #2]
		if (lcddev.id == 0X9341 || lcddev.id == 0X5310) {
 80029b4:	4b3f      	ldr	r3, [pc, #252]	; (8002ab4 <LCD_Display_Dir+0x214>)
 80029b6:	889b      	ldrh	r3, [r3, #4]
 80029b8:	f249 3241 	movw	r2, #37697	; 0x9341
 80029bc:	4293      	cmp	r3, r2
 80029be:	d005      	beq.n	80029cc <LCD_Display_Dir+0x12c>
 80029c0:	4b3c      	ldr	r3, [pc, #240]	; (8002ab4 <LCD_Display_Dir+0x214>)
 80029c2:	889b      	ldrh	r3, [r3, #4]
 80029c4:	f245 3210 	movw	r2, #21264	; 0x5310
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d109      	bne.n	80029e0 <LCD_Display_Dir+0x140>
			lcddev.wramcmd = 0X2C;
 80029cc:	4b39      	ldr	r3, [pc, #228]	; (8002ab4 <LCD_Display_Dir+0x214>)
 80029ce:	222c      	movs	r2, #44	; 0x2c
 80029d0:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2A;
 80029d2:	4b38      	ldr	r3, [pc, #224]	; (8002ab4 <LCD_Display_Dir+0x214>)
 80029d4:	222a      	movs	r2, #42	; 0x2a
 80029d6:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2B;
 80029d8:	4b36      	ldr	r3, [pc, #216]	; (8002ab4 <LCD_Display_Dir+0x214>)
 80029da:	222b      	movs	r2, #43	; 0x2b
 80029dc:	819a      	strh	r2, [r3, #12]
 80029de:	e04b      	b.n	8002a78 <LCD_Display_Dir+0x1d8>
		} else if (lcddev.id == 0X6804) {
 80029e0:	4b34      	ldr	r3, [pc, #208]	; (8002ab4 <LCD_Display_Dir+0x214>)
 80029e2:	889b      	ldrh	r3, [r3, #4]
 80029e4:	f646 0204 	movw	r2, #26628	; 0x6804
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d109      	bne.n	8002a00 <LCD_Display_Dir+0x160>
			lcddev.wramcmd = 0X2C;
 80029ec:	4b31      	ldr	r3, [pc, #196]	; (8002ab4 <LCD_Display_Dir+0x214>)
 80029ee:	222c      	movs	r2, #44	; 0x2c
 80029f0:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2B;
 80029f2:	4b30      	ldr	r3, [pc, #192]	; (8002ab4 <LCD_Display_Dir+0x214>)
 80029f4:	222b      	movs	r2, #43	; 0x2b
 80029f6:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2A;
 80029f8:	4b2e      	ldr	r3, [pc, #184]	; (8002ab4 <LCD_Display_Dir+0x214>)
 80029fa:	222a      	movs	r2, #42	; 0x2a
 80029fc:	819a      	strh	r2, [r3, #12]
 80029fe:	e03b      	b.n	8002a78 <LCD_Display_Dir+0x1d8>
		} else if (lcddev.id == 0x5510) {
 8002a00:	4b2c      	ldr	r3, [pc, #176]	; (8002ab4 <LCD_Display_Dir+0x214>)
 8002a02:	889b      	ldrh	r3, [r3, #4]
 8002a04:	f245 5210 	movw	r2, #21776	; 0x5510
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d114      	bne.n	8002a36 <LCD_Display_Dir+0x196>
			lcddev.wramcmd = 0X2C00;
 8002a0c:	4b29      	ldr	r3, [pc, #164]	; (8002ab4 <LCD_Display_Dir+0x214>)
 8002a0e:	f44f 5230 	mov.w	r2, #11264	; 0x2c00
 8002a12:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2A00;
 8002a14:	4b27      	ldr	r3, [pc, #156]	; (8002ab4 <LCD_Display_Dir+0x214>)
 8002a16:	f44f 5228 	mov.w	r2, #10752	; 0x2a00
 8002a1a:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2B00;
 8002a1c:	4b25      	ldr	r3, [pc, #148]	; (8002ab4 <LCD_Display_Dir+0x214>)
 8002a1e:	f44f 522c 	mov.w	r2, #11008	; 0x2b00
 8002a22:	819a      	strh	r2, [r3, #12]
			lcddev.width = 800;
 8002a24:	4b23      	ldr	r3, [pc, #140]	; (8002ab4 <LCD_Display_Dir+0x214>)
 8002a26:	f44f 7248 	mov.w	r2, #800	; 0x320
 8002a2a:	801a      	strh	r2, [r3, #0]
			lcddev.height = 480;
 8002a2c:	4b21      	ldr	r3, [pc, #132]	; (8002ab4 <LCD_Display_Dir+0x214>)
 8002a2e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002a32:	805a      	strh	r2, [r3, #2]
 8002a34:	e020      	b.n	8002a78 <LCD_Display_Dir+0x1d8>
		} else if (lcddev.id == 0X1963) {
 8002a36:	4b1f      	ldr	r3, [pc, #124]	; (8002ab4 <LCD_Display_Dir+0x214>)
 8002a38:	889b      	ldrh	r3, [r3, #4]
 8002a3a:	f641 1263 	movw	r2, #6499	; 0x1963
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d111      	bne.n	8002a66 <LCD_Display_Dir+0x1c6>
			lcddev.wramcmd = 0X2C;	//设置写入GRAM的指令
 8002a42:	4b1c      	ldr	r3, [pc, #112]	; (8002ab4 <LCD_Display_Dir+0x214>)
 8002a44:	222c      	movs	r2, #44	; 0x2c
 8002a46:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2A;	//设置写X坐标指令
 8002a48:	4b1a      	ldr	r3, [pc, #104]	; (8002ab4 <LCD_Display_Dir+0x214>)
 8002a4a:	222a      	movs	r2, #42	; 0x2a
 8002a4c:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2B;	//设置写Y坐标指令
 8002a4e:	4b19      	ldr	r3, [pc, #100]	; (8002ab4 <LCD_Display_Dir+0x214>)
 8002a50:	222b      	movs	r2, #43	; 0x2b
 8002a52:	819a      	strh	r2, [r3, #12]
			lcddev.width = 800;		//设置宽度800
 8002a54:	4b17      	ldr	r3, [pc, #92]	; (8002ab4 <LCD_Display_Dir+0x214>)
 8002a56:	f44f 7248 	mov.w	r2, #800	; 0x320
 8002a5a:	801a      	strh	r2, [r3, #0]
			lcddev.height = 480;		//设置高度480
 8002a5c:	4b15      	ldr	r3, [pc, #84]	; (8002ab4 <LCD_Display_Dir+0x214>)
 8002a5e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002a62:	805a      	strh	r2, [r3, #2]
 8002a64:	e008      	b.n	8002a78 <LCD_Display_Dir+0x1d8>
		} else {
			lcddev.wramcmd = 0X22;
 8002a66:	4b13      	ldr	r3, [pc, #76]	; (8002ab4 <LCD_Display_Dir+0x214>)
 8002a68:	2222      	movs	r2, #34	; 0x22
 8002a6a:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X21;
 8002a6c:	4b11      	ldr	r3, [pc, #68]	; (8002ab4 <LCD_Display_Dir+0x214>)
 8002a6e:	2221      	movs	r2, #33	; 0x21
 8002a70:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X20;
 8002a72:	4b10      	ldr	r3, [pc, #64]	; (8002ab4 <LCD_Display_Dir+0x214>)
 8002a74:	2220      	movs	r2, #32
 8002a76:	819a      	strh	r2, [r3, #12]
		}
		if (lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 8002a78:	4b0e      	ldr	r3, [pc, #56]	; (8002ab4 <LCD_Display_Dir+0x214>)
 8002a7a:	889b      	ldrh	r3, [r3, #4]
 8002a7c:	f646 0204 	movw	r2, #26628	; 0x6804
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d005      	beq.n	8002a90 <LCD_Display_Dir+0x1f0>
 8002a84:	4b0b      	ldr	r3, [pc, #44]	; (8002ab4 <LCD_Display_Dir+0x214>)
 8002a86:	889b      	ldrh	r3, [r3, #4]
 8002a88:	f245 3210 	movw	r2, #21264	; 0x5310
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d109      	bne.n	8002aa4 <LCD_Display_Dir+0x204>
			lcddev.width = 480;
 8002a90:	4b08      	ldr	r3, [pc, #32]	; (8002ab4 <LCD_Display_Dir+0x214>)
 8002a92:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002a96:	801a      	strh	r2, [r3, #0]
			lcddev.height = 320;
 8002a98:	4b06      	ldr	r3, [pc, #24]	; (8002ab4 <LCD_Display_Dir+0x214>)
 8002a9a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002a9e:	805a      	strh	r2, [r3, #2]
 8002aa0:	e000      	b.n	8002aa4 <LCD_Display_Dir+0x204>
			if (lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 8002aa2:	bf00      	nop
		}
	}
	LCD_Scan_Dir(DFT_SCAN_DIR);	//默认扫描方向
 8002aa4:	2000      	movs	r0, #0
 8002aa6:	f7ff f87f 	bl	8001ba8 <LCD_Scan_Dir>
}
 8002aaa:	bf00      	nop
 8002aac:	3708      	adds	r7, #8
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}
 8002ab2:	bf00      	nop
 8002ab4:	200000bc 	.word	0x200000bc

08002ab8 <LCD_Init>:
	}
}
//初始化lcd
//该初始化函数可以初始化各种ALIENTEK出品的LCD液晶屏
//本函数占用较大flash,用户可以根据自己的实际情况,删掉未用到的LCD初始化代码.以节省空间.
void LCD_Init(void) {
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b086      	sub	sp, #24
 8002abc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_Initure;

	__HAL_RCC_GPIOB_CLK_ENABLE();           	//开启GPIOB时钟
 8002abe:	4b90      	ldr	r3, [pc, #576]	; (8002d00 <LCD_Init+0x248>)
 8002ac0:	699b      	ldr	r3, [r3, #24]
 8002ac2:	4a8f      	ldr	r2, [pc, #572]	; (8002d00 <LCD_Init+0x248>)
 8002ac4:	f043 0308 	orr.w	r3, r3, #8
 8002ac8:	6193      	str	r3, [r2, #24]
 8002aca:	4b8d      	ldr	r3, [pc, #564]	; (8002d00 <LCD_Init+0x248>)
 8002acc:	699b      	ldr	r3, [r3, #24]
 8002ace:	f003 0308 	and.w	r3, r3, #8
 8002ad2:	607b      	str	r3, [r7, #4]
 8002ad4:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOC_CLK_ENABLE();           	//开启GPIOC时钟
 8002ad6:	4b8a      	ldr	r3, [pc, #552]	; (8002d00 <LCD_Init+0x248>)
 8002ad8:	699b      	ldr	r3, [r3, #24]
 8002ada:	4a89      	ldr	r2, [pc, #548]	; (8002d00 <LCD_Init+0x248>)
 8002adc:	f043 0310 	orr.w	r3, r3, #16
 8002ae0:	6193      	str	r3, [r2, #24]
 8002ae2:	4b87      	ldr	r3, [pc, #540]	; (8002d00 <LCD_Init+0x248>)
 8002ae4:	699b      	ldr	r3, [r3, #24]
 8002ae6:	f003 0310 	and.w	r3, r3, #16
 8002aea:	603b      	str	r3, [r7, #0]
 8002aec:	683b      	ldr	r3, [r7, #0]

	//PC6,7,8,9,10
	GPIO_Initure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 |\
 8002aee:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8002af2:	60bb      	str	r3, [r7, #8]
 GPIO_PIN_9
			| GPIO_PIN_10;
	GPIO_Initure.Mode = GPIO_MODE_OUTPUT_PP;  	//推挽输出
 8002af4:	2301      	movs	r3, #1
 8002af6:	60fb      	str	r3, [r7, #12]
	GPIO_Initure.Pull = GPIO_PULLUP;          	//上拉
 8002af8:	2301      	movs	r3, #1
 8002afa:	613b      	str	r3, [r7, #16]
	GPIO_Initure.Speed = GPIO_SPEED_FREQ_HIGH;    	 	//高速
 8002afc:	2303      	movs	r3, #3
 8002afe:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOC, &GPIO_Initure);
 8002b00:	f107 0308 	add.w	r3, r7, #8
 8002b04:	4619      	mov	r1, r3
 8002b06:	487f      	ldr	r0, [pc, #508]	; (8002d04 <LCD_Init+0x24c>)
 8002b08:	f005 fdf4 	bl	80086f4 <HAL_GPIO_Init>

	//PB0~15
	GPIO_Initure.Pin = GPIO_PIN_All;				//PB推挽输出
 8002b0c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002b10:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(GPIOB, &GPIO_Initure);
 8002b12:	f107 0308 	add.w	r3, r7, #8
 8002b16:	4619      	mov	r1, r3
 8002b18:	487b      	ldr	r0, [pc, #492]	; (8002d08 <LCD_Init+0x250>)
 8002b1a:	f005 fdeb 	bl	80086f4 <HAL_GPIO_Init>

//	__HAL_AFIO_REMAP_SWJ_DISABLE();				//禁止JTAG

	HAL_Delay(50); // delay 50 ms
 8002b1e:	2032      	movs	r0, #50	; 0x32
 8002b20:	f005 fce2 	bl	80084e8 <HAL_Delay>
	LCD_WriteReg(0x0000, 0x0001);
 8002b24:	2101      	movs	r1, #1
 8002b26:	2000      	movs	r0, #0
 8002b28:	f7fe fd2c 	bl	8001584 <LCD_WriteReg>
	HAL_Delay(50); // delay 50 ms
 8002b2c:	2032      	movs	r0, #50	; 0x32
 8002b2e:	f005 fcdb 	bl	80084e8 <HAL_Delay>
	lcddev.id = LCD_ReadReg(0x0000);
 8002b32:	2000      	movs	r0, #0
 8002b34:	f7fe fd50 	bl	80015d8 <LCD_ReadReg>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	461a      	mov	r2, r3
 8002b3c:	4b73      	ldr	r3, [pc, #460]	; (8002d0c <LCD_Init+0x254>)
 8002b3e:	809a      	strh	r2, [r3, #4]
	if (lcddev.id < 0XFF || lcddev.id == 0XFFFF || lcddev.id == 0X9300) //读到ID不正确,新增lcddev.id==0X9300判断，因为9341在未被复位的情况下会被读成9300
 8002b40:	4b72      	ldr	r3, [pc, #456]	; (8002d0c <LCD_Init+0x254>)
 8002b42:	889b      	ldrh	r3, [r3, #4]
 8002b44:	2bfe      	cmp	r3, #254	; 0xfe
 8002b46:	d90b      	bls.n	8002b60 <LCD_Init+0xa8>
 8002b48:	4b70      	ldr	r3, [pc, #448]	; (8002d0c <LCD_Init+0x254>)
 8002b4a:	889b      	ldrh	r3, [r3, #4]
 8002b4c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d005      	beq.n	8002b60 <LCD_Init+0xa8>
 8002b54:	4b6d      	ldr	r3, [pc, #436]	; (8002d0c <LCD_Init+0x254>)
 8002b56:	889b      	ldrh	r3, [r3, #4]
 8002b58:	f5b3 4f13 	cmp.w	r3, #37632	; 0x9300
 8002b5c:	f040 80c8 	bne.w	8002cf0 <LCD_Init+0x238>
			{
		//尝试9341 ID的读取
		LCD_WR_REG(0XD3);
 8002b60:	20d3      	movs	r0, #211	; 0xd3
 8002b62:	f7fe fc83 	bl	800146c <LCD_WR_REG>
		LCD_RD_DATA(); 				//dummy read 	
 8002b66:	f7fe fcc9 	bl	80014fc <LCD_RD_DATA>
		LCD_RD_DATA();   	    	//读到0X00
 8002b6a:	f7fe fcc7 	bl	80014fc <LCD_RD_DATA>
		lcddev.id = LCD_RD_DATA();   	//读取93
 8002b6e:	f7fe fcc5 	bl	80014fc <LCD_RD_DATA>
 8002b72:	4603      	mov	r3, r0
 8002b74:	461a      	mov	r2, r3
 8002b76:	4b65      	ldr	r3, [pc, #404]	; (8002d0c <LCD_Init+0x254>)
 8002b78:	809a      	strh	r2, [r3, #4]
		lcddev.id <<= 8;
 8002b7a:	4b64      	ldr	r3, [pc, #400]	; (8002d0c <LCD_Init+0x254>)
 8002b7c:	889b      	ldrh	r3, [r3, #4]
 8002b7e:	021b      	lsls	r3, r3, #8
 8002b80:	b29a      	uxth	r2, r3
 8002b82:	4b62      	ldr	r3, [pc, #392]	; (8002d0c <LCD_Init+0x254>)
 8002b84:	809a      	strh	r2, [r3, #4]
		lcddev.id |= LCD_RD_DATA();  	//读取41
 8002b86:	f7fe fcb9 	bl	80014fc <LCD_RD_DATA>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	461a      	mov	r2, r3
 8002b8e:	4b5f      	ldr	r3, [pc, #380]	; (8002d0c <LCD_Init+0x254>)
 8002b90:	889b      	ldrh	r3, [r3, #4]
 8002b92:	4313      	orrs	r3, r2
 8002b94:	b29a      	uxth	r2, r3
 8002b96:	4b5d      	ldr	r3, [pc, #372]	; (8002d0c <LCD_Init+0x254>)
 8002b98:	809a      	strh	r2, [r3, #4]
		if (lcddev.id != 0X9341)		//非9341,尝试是不是6804
 8002b9a:	4b5c      	ldr	r3, [pc, #368]	; (8002d0c <LCD_Init+0x254>)
 8002b9c:	889b      	ldrh	r3, [r3, #4]
 8002b9e:	f249 3241 	movw	r2, #37697	; 0x9341
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	f000 80a4 	beq.w	8002cf0 <LCD_Init+0x238>
				{
			LCD_WR_REG(0XBF);
 8002ba8:	20bf      	movs	r0, #191	; 0xbf
 8002baa:	f7fe fc5f 	bl	800146c <LCD_WR_REG>
			LCD_RD_DATA(); 			//dummy read 	 
 8002bae:	f7fe fca5 	bl	80014fc <LCD_RD_DATA>
			LCD_RD_DATA();   	    //读回0X01
 8002bb2:	f7fe fca3 	bl	80014fc <LCD_RD_DATA>
			LCD_RD_DATA(); 			//读回0XD0
 8002bb6:	f7fe fca1 	bl	80014fc <LCD_RD_DATA>
			lcddev.id = LCD_RD_DATA(); 			//这里读回0X68
 8002bba:	f7fe fc9f 	bl	80014fc <LCD_RD_DATA>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	461a      	mov	r2, r3
 8002bc2:	4b52      	ldr	r3, [pc, #328]	; (8002d0c <LCD_Init+0x254>)
 8002bc4:	809a      	strh	r2, [r3, #4]
			lcddev.id <<= 8;
 8002bc6:	4b51      	ldr	r3, [pc, #324]	; (8002d0c <LCD_Init+0x254>)
 8002bc8:	889b      	ldrh	r3, [r3, #4]
 8002bca:	021b      	lsls	r3, r3, #8
 8002bcc:	b29a      	uxth	r2, r3
 8002bce:	4b4f      	ldr	r3, [pc, #316]	; (8002d0c <LCD_Init+0x254>)
 8002bd0:	809a      	strh	r2, [r3, #4]
			lcddev.id |= LCD_RD_DATA(); 			//这里读回0X04
 8002bd2:	f7fe fc93 	bl	80014fc <LCD_RD_DATA>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	461a      	mov	r2, r3
 8002bda:	4b4c      	ldr	r3, [pc, #304]	; (8002d0c <LCD_Init+0x254>)
 8002bdc:	889b      	ldrh	r3, [r3, #4]
 8002bde:	4313      	orrs	r3, r2
 8002be0:	b29a      	uxth	r2, r3
 8002be2:	4b4a      	ldr	r3, [pc, #296]	; (8002d0c <LCD_Init+0x254>)
 8002be4:	809a      	strh	r2, [r3, #4]
			if (lcddev.id != 0X6804)	//也不是6804,尝试看看是不是NT35310
 8002be6:	4b49      	ldr	r3, [pc, #292]	; (8002d0c <LCD_Init+0x254>)
 8002be8:	889b      	ldrh	r3, [r3, #4]
 8002bea:	f646 0204 	movw	r2, #26628	; 0x6804
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d07e      	beq.n	8002cf0 <LCD_Init+0x238>
					{
				LCD_WR_REG(0XD4);
 8002bf2:	20d4      	movs	r0, #212	; 0xd4
 8002bf4:	f7fe fc3a 	bl	800146c <LCD_WR_REG>
				LCD_RD_DATA(); 				//dummy read  
 8002bf8:	f7fe fc80 	bl	80014fc <LCD_RD_DATA>
				LCD_RD_DATA();   			//读回0X01	 
 8002bfc:	f7fe fc7e 	bl	80014fc <LCD_RD_DATA>
				lcddev.id = LCD_RD_DATA();	//读回0X53
 8002c00:	f7fe fc7c 	bl	80014fc <LCD_RD_DATA>
 8002c04:	4603      	mov	r3, r0
 8002c06:	461a      	mov	r2, r3
 8002c08:	4b40      	ldr	r3, [pc, #256]	; (8002d0c <LCD_Init+0x254>)
 8002c0a:	809a      	strh	r2, [r3, #4]
				lcddev.id <<= 8;
 8002c0c:	4b3f      	ldr	r3, [pc, #252]	; (8002d0c <LCD_Init+0x254>)
 8002c0e:	889b      	ldrh	r3, [r3, #4]
 8002c10:	021b      	lsls	r3, r3, #8
 8002c12:	b29a      	uxth	r2, r3
 8002c14:	4b3d      	ldr	r3, [pc, #244]	; (8002d0c <LCD_Init+0x254>)
 8002c16:	809a      	strh	r2, [r3, #4]
				lcddev.id |= LCD_RD_DATA();	//这里读回0X10
 8002c18:	f7fe fc70 	bl	80014fc <LCD_RD_DATA>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	461a      	mov	r2, r3
 8002c20:	4b3a      	ldr	r3, [pc, #232]	; (8002d0c <LCD_Init+0x254>)
 8002c22:	889b      	ldrh	r3, [r3, #4]
 8002c24:	4313      	orrs	r3, r2
 8002c26:	b29a      	uxth	r2, r3
 8002c28:	4b38      	ldr	r3, [pc, #224]	; (8002d0c <LCD_Init+0x254>)
 8002c2a:	809a      	strh	r2, [r3, #4]
				if (lcddev.id != 0X5310)		//也不是NT35310,尝试看看是不是NT35510
 8002c2c:	4b37      	ldr	r3, [pc, #220]	; (8002d0c <LCD_Init+0x254>)
 8002c2e:	889b      	ldrh	r3, [r3, #4]
 8002c30:	f245 3210 	movw	r2, #21264	; 0x5310
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d05b      	beq.n	8002cf0 <LCD_Init+0x238>
						{
					LCD_WR_REG(0XDA00);
 8002c38:	f44f 405a 	mov.w	r0, #55808	; 0xda00
 8002c3c:	f7fe fc16 	bl	800146c <LCD_WR_REG>
					LCD_RD_DATA();   		//读回0X00	 
 8002c40:	f7fe fc5c 	bl	80014fc <LCD_RD_DATA>
					LCD_WR_REG(0XDB00);
 8002c44:	f44f 405b 	mov.w	r0, #56064	; 0xdb00
 8002c48:	f7fe fc10 	bl	800146c <LCD_WR_REG>
					lcddev.id = LCD_RD_DATA();   		//读回0X80
 8002c4c:	f7fe fc56 	bl	80014fc <LCD_RD_DATA>
 8002c50:	4603      	mov	r3, r0
 8002c52:	461a      	mov	r2, r3
 8002c54:	4b2d      	ldr	r3, [pc, #180]	; (8002d0c <LCD_Init+0x254>)
 8002c56:	809a      	strh	r2, [r3, #4]
					lcddev.id <<= 8;
 8002c58:	4b2c      	ldr	r3, [pc, #176]	; (8002d0c <LCD_Init+0x254>)
 8002c5a:	889b      	ldrh	r3, [r3, #4]
 8002c5c:	021b      	lsls	r3, r3, #8
 8002c5e:	b29a      	uxth	r2, r3
 8002c60:	4b2a      	ldr	r3, [pc, #168]	; (8002d0c <LCD_Init+0x254>)
 8002c62:	809a      	strh	r2, [r3, #4]
					LCD_WR_REG(0XDC00);
 8002c64:	f44f 405c 	mov.w	r0, #56320	; 0xdc00
 8002c68:	f7fe fc00 	bl	800146c <LCD_WR_REG>
					lcddev.id |= LCD_RD_DATA();   		//读回0X00
 8002c6c:	f7fe fc46 	bl	80014fc <LCD_RD_DATA>
 8002c70:	4603      	mov	r3, r0
 8002c72:	461a      	mov	r2, r3
 8002c74:	4b25      	ldr	r3, [pc, #148]	; (8002d0c <LCD_Init+0x254>)
 8002c76:	889b      	ldrh	r3, [r3, #4]
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	b29a      	uxth	r2, r3
 8002c7c:	4b23      	ldr	r3, [pc, #140]	; (8002d0c <LCD_Init+0x254>)
 8002c7e:	809a      	strh	r2, [r3, #4]
					if (lcddev.id == 0x8000)
 8002c80:	4b22      	ldr	r3, [pc, #136]	; (8002d0c <LCD_Init+0x254>)
 8002c82:	889b      	ldrh	r3, [r3, #4]
 8002c84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c88:	d103      	bne.n	8002c92 <LCD_Init+0x1da>
						lcddev.id = 0x5510;   		//NT35510读回的ID是8000H,为方便区分,我们强制设置为5510
 8002c8a:	4b20      	ldr	r3, [pc, #128]	; (8002d0c <LCD_Init+0x254>)
 8002c8c:	f245 5210 	movw	r2, #21776	; 0x5510
 8002c90:	809a      	strh	r2, [r3, #4]
					if (lcddev.id != 0X5510)			//也不是NT5510,尝试看看是不是SSD1963
 8002c92:	4b1e      	ldr	r3, [pc, #120]	; (8002d0c <LCD_Init+0x254>)
 8002c94:	889b      	ldrh	r3, [r3, #4]
 8002c96:	f245 5210 	movw	r2, #21776	; 0x5510
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d028      	beq.n	8002cf0 <LCD_Init+0x238>
							{
						LCD_WR_REG(0XA1);
 8002c9e:	20a1      	movs	r0, #161	; 0xa1
 8002ca0:	f7fe fbe4 	bl	800146c <LCD_WR_REG>
						lcddev.id = LCD_RD_DATA();
 8002ca4:	f7fe fc2a 	bl	80014fc <LCD_RD_DATA>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	461a      	mov	r2, r3
 8002cac:	4b17      	ldr	r3, [pc, #92]	; (8002d0c <LCD_Init+0x254>)
 8002cae:	809a      	strh	r2, [r3, #4]
						lcddev.id = LCD_RD_DATA();	//读回0X57
 8002cb0:	f7fe fc24 	bl	80014fc <LCD_RD_DATA>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	461a      	mov	r2, r3
 8002cb8:	4b14      	ldr	r3, [pc, #80]	; (8002d0c <LCD_Init+0x254>)
 8002cba:	809a      	strh	r2, [r3, #4]
						lcddev.id <<= 8;
 8002cbc:	4b13      	ldr	r3, [pc, #76]	; (8002d0c <LCD_Init+0x254>)
 8002cbe:	889b      	ldrh	r3, [r3, #4]
 8002cc0:	021b      	lsls	r3, r3, #8
 8002cc2:	b29a      	uxth	r2, r3
 8002cc4:	4b11      	ldr	r3, [pc, #68]	; (8002d0c <LCD_Init+0x254>)
 8002cc6:	809a      	strh	r2, [r3, #4]
						lcddev.id |= LCD_RD_DATA();	//读回0X61
 8002cc8:	f7fe fc18 	bl	80014fc <LCD_RD_DATA>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	461a      	mov	r2, r3
 8002cd0:	4b0e      	ldr	r3, [pc, #56]	; (8002d0c <LCD_Init+0x254>)
 8002cd2:	889b      	ldrh	r3, [r3, #4]
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	b29a      	uxth	r2, r3
 8002cd8:	4b0c      	ldr	r3, [pc, #48]	; (8002d0c <LCD_Init+0x254>)
 8002cda:	809a      	strh	r2, [r3, #4]
						if (lcddev.id == 0X5761)
 8002cdc:	4b0b      	ldr	r3, [pc, #44]	; (8002d0c <LCD_Init+0x254>)
 8002cde:	889b      	ldrh	r3, [r3, #4]
 8002ce0:	f245 7261 	movw	r2, #22369	; 0x5761
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d103      	bne.n	8002cf0 <LCD_Init+0x238>
							lcddev.id = 0X1963;	//SSD1963读回的ID是5761H,为方便区分,我们强制设置为1963
 8002ce8:	4b08      	ldr	r3, [pc, #32]	; (8002d0c <LCD_Init+0x254>)
 8002cea:	f641 1263 	movw	r2, #6499	; 0x1963
 8002cee:	809a      	strh	r2, [r3, #4]
				}
			}
		}
	}
// 	printf(" LCD ID:%x\r\n",lcddev.id); //打印LCD ID
	if (lcddev.id == 0X9341)	//9341初始化
 8002cf0:	4b06      	ldr	r3, [pc, #24]	; (8002d0c <LCD_Init+0x254>)
 8002cf2:	889b      	ldrh	r3, [r3, #4]
 8002cf4:	f249 3241 	movw	r2, #37697	; 0x9341
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	f040 811f 	bne.w	8002f3c <LCD_Init+0x484>
 8002cfe:	e007      	b.n	8002d10 <LCD_Init+0x258>
 8002d00:	40021000 	.word	0x40021000
 8002d04:	40011000 	.word	0x40011000
 8002d08:	40010c00 	.word	0x40010c00
 8002d0c:	200000bc 	.word	0x200000bc
			{
		LCD_WR_REG(0xCF);
 8002d10:	20cf      	movs	r0, #207	; 0xcf
 8002d12:	f7fe fbab 	bl	800146c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002d16:	2000      	movs	r0, #0
 8002d18:	f7fe fbcc 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC1);
 8002d1c:	20c1      	movs	r0, #193	; 0xc1
 8002d1e:	f7fe fbc9 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X30);
 8002d22:	2030      	movs	r0, #48	; 0x30
 8002d24:	f7fe fbc6 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_REG(0xED);
 8002d28:	20ed      	movs	r0, #237	; 0xed
 8002d2a:	f7fe fb9f 	bl	800146c <LCD_WR_REG>
		LCD_WR_DATAX(0x64);
 8002d2e:	2064      	movs	r0, #100	; 0x64
 8002d30:	f7fe fbc0 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x03);
 8002d34:	2003      	movs	r0, #3
 8002d36:	f7fe fbbd 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X12);
 8002d3a:	2012      	movs	r0, #18
 8002d3c:	f7fe fbba 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X81);
 8002d40:	2081      	movs	r0, #129	; 0x81
 8002d42:	f7fe fbb7 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_REG(0xE8);
 8002d46:	20e8      	movs	r0, #232	; 0xe8
 8002d48:	f7fe fb90 	bl	800146c <LCD_WR_REG>
		LCD_WR_DATAX(0x85);
 8002d4c:	2085      	movs	r0, #133	; 0x85
 8002d4e:	f7fe fbb1 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x10);
 8002d52:	2010      	movs	r0, #16
 8002d54:	f7fe fbae 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x7A);
 8002d58:	207a      	movs	r0, #122	; 0x7a
 8002d5a:	f7fe fbab 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_REG(0xCB);
 8002d5e:	20cb      	movs	r0, #203	; 0xcb
 8002d60:	f7fe fb84 	bl	800146c <LCD_WR_REG>
		LCD_WR_DATAX(0x39);
 8002d64:	2039      	movs	r0, #57	; 0x39
 8002d66:	f7fe fba5 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2C);
 8002d6a:	202c      	movs	r0, #44	; 0x2c
 8002d6c:	f7fe fba2 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d70:	2000      	movs	r0, #0
 8002d72:	f7fe fb9f 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x34);
 8002d76:	2034      	movs	r0, #52	; 0x34
 8002d78:	f7fe fb9c 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x02);
 8002d7c:	2002      	movs	r0, #2
 8002d7e:	f7fe fb99 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_REG(0xF7);
 8002d82:	20f7      	movs	r0, #247	; 0xf7
 8002d84:	f7fe fb72 	bl	800146c <LCD_WR_REG>
		LCD_WR_DATAX(0x20);
 8002d88:	2020      	movs	r0, #32
 8002d8a:	f7fe fb93 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_REG(0xEA);
 8002d8e:	20ea      	movs	r0, #234	; 0xea
 8002d90:	f7fe fb6c 	bl	800146c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002d94:	2000      	movs	r0, #0
 8002d96:	f7fe fb8d 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d9a:	2000      	movs	r0, #0
 8002d9c:	f7fe fb8a 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_REG(0xC0);    //Power control 
 8002da0:	20c0      	movs	r0, #192	; 0xc0
 8002da2:	f7fe fb63 	bl	800146c <LCD_WR_REG>
		LCD_WR_DATAX(0x1B);   //VRH[5:0] 
 8002da6:	201b      	movs	r0, #27
 8002da8:	f7fe fb84 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_REG(0xC1);    //Power control 
 8002dac:	20c1      	movs	r0, #193	; 0xc1
 8002dae:	f7fe fb5d 	bl	800146c <LCD_WR_REG>
		LCD_WR_DATAX(0x01);   //SAP[2:0];BT[3:0] 
 8002db2:	2001      	movs	r0, #1
 8002db4:	f7fe fb7e 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_REG(0xC5);    //VCM control 
 8002db8:	20c5      	movs	r0, #197	; 0xc5
 8002dba:	f7fe fb57 	bl	800146c <LCD_WR_REG>
		LCD_WR_DATAX(0x30); 	 //3F
 8002dbe:	2030      	movs	r0, #48	; 0x30
 8002dc0:	f7fe fb78 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x30); 	 //3C
 8002dc4:	2030      	movs	r0, #48	; 0x30
 8002dc6:	f7fe fb75 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_REG(0xC7);    //VCM control2 
 8002dca:	20c7      	movs	r0, #199	; 0xc7
 8002dcc:	f7fe fb4e 	bl	800146c <LCD_WR_REG>
		LCD_WR_DATAX(0XB7);
 8002dd0:	20b7      	movs	r0, #183	; 0xb7
 8002dd2:	f7fe fb6f 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_REG(0x36);    // Memory Access Control 
 8002dd6:	2036      	movs	r0, #54	; 0x36
 8002dd8:	f7fe fb48 	bl	800146c <LCD_WR_REG>
		LCD_WR_DATAX(0x48);
 8002ddc:	2048      	movs	r0, #72	; 0x48
 8002dde:	f7fe fb69 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_REG(0x3A);
 8002de2:	203a      	movs	r0, #58	; 0x3a
 8002de4:	f7fe fb42 	bl	800146c <LCD_WR_REG>
		LCD_WR_DATAX(0x55);
 8002de8:	2055      	movs	r0, #85	; 0x55
 8002dea:	f7fe fb63 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_REG(0xB1);
 8002dee:	20b1      	movs	r0, #177	; 0xb1
 8002df0:	f7fe fb3c 	bl	800146c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002df4:	2000      	movs	r0, #0
 8002df6:	f7fe fb5d 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1A);
 8002dfa:	201a      	movs	r0, #26
 8002dfc:	f7fe fb5a 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_REG(0xB6);    // Display Function Control 
 8002e00:	20b6      	movs	r0, #182	; 0xb6
 8002e02:	f7fe fb33 	bl	800146c <LCD_WR_REG>
		LCD_WR_DATAX(0x0A);
 8002e06:	200a      	movs	r0, #10
 8002e08:	f7fe fb54 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA2);
 8002e0c:	20a2      	movs	r0, #162	; 0xa2
 8002e0e:	f7fe fb51 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_REG(0xF2);    // 3Gamma Function Disable 
 8002e12:	20f2      	movs	r0, #242	; 0xf2
 8002e14:	f7fe fb2a 	bl	800146c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002e18:	2000      	movs	r0, #0
 8002e1a:	f7fe fb4b 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_REG(0x26);    //Gamma curve selected 
 8002e1e:	2026      	movs	r0, #38	; 0x26
 8002e20:	f7fe fb24 	bl	800146c <LCD_WR_REG>
		LCD_WR_DATAX(0x01);
 8002e24:	2001      	movs	r0, #1
 8002e26:	f7fe fb45 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_REG(0xE0);    //Set Gamma 
 8002e2a:	20e0      	movs	r0, #224	; 0xe0
 8002e2c:	f7fe fb1e 	bl	800146c <LCD_WR_REG>
		LCD_WR_DATAX(0x0F);
 8002e30:	200f      	movs	r0, #15
 8002e32:	f7fe fb3f 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2A);
 8002e36:	202a      	movs	r0, #42	; 0x2a
 8002e38:	f7fe fb3c 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x28);
 8002e3c:	2028      	movs	r0, #40	; 0x28
 8002e3e:	f7fe fb39 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x08);
 8002e42:	2008      	movs	r0, #8
 8002e44:	f7fe fb36 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0E);
 8002e48:	200e      	movs	r0, #14
 8002e4a:	f7fe fb33 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x08);
 8002e4e:	2008      	movs	r0, #8
 8002e50:	f7fe fb30 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x54);
 8002e54:	2054      	movs	r0, #84	; 0x54
 8002e56:	f7fe fb2d 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0XA9);
 8002e5a:	20a9      	movs	r0, #169	; 0xa9
 8002e5c:	f7fe fb2a 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x43);
 8002e60:	2043      	movs	r0, #67	; 0x43
 8002e62:	f7fe fb27 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0A);
 8002e66:	200a      	movs	r0, #10
 8002e68:	f7fe fb24 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0F);
 8002e6c:	200f      	movs	r0, #15
 8002e6e:	f7fe fb21 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e72:	2000      	movs	r0, #0
 8002e74:	f7fe fb1e 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e78:	2000      	movs	r0, #0
 8002e7a:	f7fe fb1b 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e7e:	2000      	movs	r0, #0
 8002e80:	f7fe fb18 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e84:	2000      	movs	r0, #0
 8002e86:	f7fe fb15 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_REG(0XE1);    //Set Gamma 
 8002e8a:	20e1      	movs	r0, #225	; 0xe1
 8002e8c:	f7fe faee 	bl	800146c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002e90:	2000      	movs	r0, #0
 8002e92:	f7fe fb0f 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x15);
 8002e96:	2015      	movs	r0, #21
 8002e98:	f7fe fb0c 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x17);
 8002e9c:	2017      	movs	r0, #23
 8002e9e:	f7fe fb09 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x07);
 8002ea2:	2007      	movs	r0, #7
 8002ea4:	f7fe fb06 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x11);
 8002ea8:	2011      	movs	r0, #17
 8002eaa:	f7fe fb03 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x06);
 8002eae:	2006      	movs	r0, #6
 8002eb0:	f7fe fb00 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2B);
 8002eb4:	202b      	movs	r0, #43	; 0x2b
 8002eb6:	f7fe fafd 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x56);
 8002eba:	2056      	movs	r0, #86	; 0x56
 8002ebc:	f7fe fafa 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 8002ec0:	203c      	movs	r0, #60	; 0x3c
 8002ec2:	f7fe faf7 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x05);
 8002ec6:	2005      	movs	r0, #5
 8002ec8:	f7fe faf4 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x10);
 8002ecc:	2010      	movs	r0, #16
 8002ece:	f7fe faf1 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0F);
 8002ed2:	200f      	movs	r0, #15
 8002ed4:	f7fe faee 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3F);
 8002ed8:	203f      	movs	r0, #63	; 0x3f
 8002eda:	f7fe faeb 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3F);
 8002ede:	203f      	movs	r0, #63	; 0x3f
 8002ee0:	f7fe fae8 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0F);
 8002ee4:	200f      	movs	r0, #15
 8002ee6:	f7fe fae5 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_REG(0x2B);
 8002eea:	202b      	movs	r0, #43	; 0x2b
 8002eec:	f7fe fabe 	bl	800146c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002ef0:	2000      	movs	r0, #0
 8002ef2:	f7fe fadf 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ef6:	2000      	movs	r0, #0
 8002ef8:	f7fe fadc 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x01);
 8002efc:	2001      	movs	r0, #1
 8002efe:	f7fe fad9 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3f);
 8002f02:	203f      	movs	r0, #63	; 0x3f
 8002f04:	f7fe fad6 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_REG(0x2A);
 8002f08:	202a      	movs	r0, #42	; 0x2a
 8002f0a:	f7fe faaf 	bl	800146c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002f0e:	2000      	movs	r0, #0
 8002f10:	f7fe fad0 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f14:	2000      	movs	r0, #0
 8002f16:	f7fe facd 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f1a:	2000      	movs	r0, #0
 8002f1c:	f7fe faca 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xef);
 8002f20:	20ef      	movs	r0, #239	; 0xef
 8002f22:	f7fe fac7 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_REG(0x11); //Exit Sleep
 8002f26:	2011      	movs	r0, #17
 8002f28:	f7fe faa0 	bl	800146c <LCD_WR_REG>
		HAL_Delay(120);
 8002f2c:	2078      	movs	r0, #120	; 0x78
 8002f2e:	f005 fadb 	bl	80084e8 <HAL_Delay>
		LCD_WR_REG(0x29); //display on	
 8002f32:	2029      	movs	r0, #41	; 0x29
 8002f34:	f7fe fa9a 	bl	800146c <LCD_WR_REG>
 8002f38:	f003 bcd8 	b.w	80068ec <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x6804) //6804初始化
 8002f3c:	4b58      	ldr	r3, [pc, #352]	; (80030a0 <LCD_Init+0x5e8>)
 8002f3e:	889b      	ldrh	r3, [r3, #4]
 8002f40:	f646 0204 	movw	r2, #26628	; 0x6804
 8002f44:	4293      	cmp	r3, r2
 8002f46:	f040 80ad 	bne.w	80030a4 <LCD_Init+0x5ec>
			{
		LCD_WR_REG(0X11);
 8002f4a:	2011      	movs	r0, #17
 8002f4c:	f7fe fa8e 	bl	800146c <LCD_WR_REG>
		HAL_Delay(20);
 8002f50:	2014      	movs	r0, #20
 8002f52:	f005 fac9 	bl	80084e8 <HAL_Delay>
		LCD_WR_REG(0XD0); //VCI1  VCL  VGH  VGL DDVDH VREG1OUT power amplitude setting
 8002f56:	20d0      	movs	r0, #208	; 0xd0
 8002f58:	f7fe fa88 	bl	800146c <LCD_WR_REG>
		LCD_WR_DATAX(0X07);
 8002f5c:	2007      	movs	r0, #7
 8002f5e:	f7fe faa9 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X42);
 8002f62:	2042      	movs	r0, #66	; 0x42
 8002f64:	f7fe faa6 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X1D);
 8002f68:	201d      	movs	r0, #29
 8002f6a:	f7fe faa3 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_REG(0XD1); //VCOMH VCOM_AC amplitude setting
 8002f6e:	20d1      	movs	r0, #209	; 0xd1
 8002f70:	f7fe fa7c 	bl	800146c <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 8002f74:	2000      	movs	r0, #0
 8002f76:	f7fe fa9d 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X1a);
 8002f7a:	201a      	movs	r0, #26
 8002f7c:	f7fe fa9a 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X09);
 8002f80:	2009      	movs	r0, #9
 8002f82:	f7fe fa97 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_REG(0XD2); //Operational Amplifier Circuit Constant Current Adjust , charge pump frequency setting
 8002f86:	20d2      	movs	r0, #210	; 0xd2
 8002f88:	f7fe fa70 	bl	800146c <LCD_WR_REG>
		LCD_WR_DATAX(0X01);
 8002f8c:	2001      	movs	r0, #1
 8002f8e:	f7fe fa91 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X22);
 8002f92:	2022      	movs	r0, #34	; 0x22
 8002f94:	f7fe fa8e 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_REG(0XC0); //REV SM GS
 8002f98:	20c0      	movs	r0, #192	; 0xc0
 8002f9a:	f7fe fa67 	bl	800146c <LCD_WR_REG>
		LCD_WR_DATAX(0X10);
 8002f9e:	2010      	movs	r0, #16
 8002fa0:	f7fe fa88 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X3B);
 8002fa4:	203b      	movs	r0, #59	; 0x3b
 8002fa6:	f7fe fa85 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 8002faa:	2000      	movs	r0, #0
 8002fac:	f7fe fa82 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X02);
 8002fb0:	2002      	movs	r0, #2
 8002fb2:	f7fe fa7f 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X11);
 8002fb6:	2011      	movs	r0, #17
 8002fb8:	f7fe fa7c 	bl	80014b4 <LCD_WR_DATAX>

		LCD_WR_REG(0XC5); // Frame rate setting = 72HZ  when setting 0x03
 8002fbc:	20c5      	movs	r0, #197	; 0xc5
 8002fbe:	f7fe fa55 	bl	800146c <LCD_WR_REG>
		LCD_WR_DATAX(0X03);
 8002fc2:	2003      	movs	r0, #3
 8002fc4:	f7fe fa76 	bl	80014b4 <LCD_WR_DATAX>

		LCD_WR_REG(0XC8); //Gamma setting
 8002fc8:	20c8      	movs	r0, #200	; 0xc8
 8002fca:	f7fe fa4f 	bl	800146c <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 8002fce:	2000      	movs	r0, #0
 8002fd0:	f7fe fa70 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X25);
 8002fd4:	2025      	movs	r0, #37	; 0x25
 8002fd6:	f7fe fa6d 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X21);
 8002fda:	2021      	movs	r0, #33	; 0x21
 8002fdc:	f7fe fa6a 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X05);
 8002fe0:	2005      	movs	r0, #5
 8002fe2:	f7fe fa67 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 8002fe6:	2000      	movs	r0, #0
 8002fe8:	f7fe fa64 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X0a);
 8002fec:	200a      	movs	r0, #10
 8002fee:	f7fe fa61 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X65);
 8002ff2:	2065      	movs	r0, #101	; 0x65
 8002ff4:	f7fe fa5e 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X25);
 8002ff8:	2025      	movs	r0, #37	; 0x25
 8002ffa:	f7fe fa5b 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X77);
 8002ffe:	2077      	movs	r0, #119	; 0x77
 8003000:	f7fe fa58 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X50);
 8003004:	2050      	movs	r0, #80	; 0x50
 8003006:	f7fe fa55 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X0f);
 800300a:	200f      	movs	r0, #15
 800300c:	f7fe fa52 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 8003010:	2000      	movs	r0, #0
 8003012:	f7fe fa4f 	bl	80014b4 <LCD_WR_DATAX>

		LCD_WR_REG(0XF8);
 8003016:	20f8      	movs	r0, #248	; 0xf8
 8003018:	f7fe fa28 	bl	800146c <LCD_WR_REG>
		LCD_WR_DATAX(0X01);
 800301c:	2001      	movs	r0, #1
 800301e:	f7fe fa49 	bl	80014b4 <LCD_WR_DATAX>

		LCD_WR_REG(0XFE);
 8003022:	20fe      	movs	r0, #254	; 0xfe
 8003024:	f7fe fa22 	bl	800146c <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 8003028:	2000      	movs	r0, #0
 800302a:	f7fe fa43 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X02);
 800302e:	2002      	movs	r0, #2
 8003030:	f7fe fa40 	bl	80014b4 <LCD_WR_DATAX>

		LCD_WR_REG(0X20); //Exit invert mode
 8003034:	2020      	movs	r0, #32
 8003036:	f7fe fa19 	bl	800146c <LCD_WR_REG>

		LCD_WR_REG(0X36);
 800303a:	2036      	movs	r0, #54	; 0x36
 800303c:	f7fe fa16 	bl	800146c <LCD_WR_REG>
		LCD_WR_DATAX(0X08); //原来是a
 8003040:	2008      	movs	r0, #8
 8003042:	f7fe fa37 	bl	80014b4 <LCD_WR_DATAX>

		LCD_WR_REG(0X3A);
 8003046:	203a      	movs	r0, #58	; 0x3a
 8003048:	f7fe fa10 	bl	800146c <LCD_WR_REG>
		LCD_WR_DATAX(0X55); //16位模式
 800304c:	2055      	movs	r0, #85	; 0x55
 800304e:	f7fe fa31 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_REG(0X2B);
 8003052:	202b      	movs	r0, #43	; 0x2b
 8003054:	f7fe fa0a 	bl	800146c <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 8003058:	2000      	movs	r0, #0
 800305a:	f7fe fa2b 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 800305e:	2000      	movs	r0, #0
 8003060:	f7fe fa28 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X01);
 8003064:	2001      	movs	r0, #1
 8003066:	f7fe fa25 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X3F);
 800306a:	203f      	movs	r0, #63	; 0x3f
 800306c:	f7fe fa22 	bl	80014b4 <LCD_WR_DATAX>

		LCD_WR_REG(0X2A);
 8003070:	202a      	movs	r0, #42	; 0x2a
 8003072:	f7fe f9fb 	bl	800146c <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 8003076:	2000      	movs	r0, #0
 8003078:	f7fe fa1c 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 800307c:	2000      	movs	r0, #0
 800307e:	f7fe fa19 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X01);
 8003082:	2001      	movs	r0, #1
 8003084:	f7fe fa16 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0XDF);
 8003088:	20df      	movs	r0, #223	; 0xdf
 800308a:	f7fe fa13 	bl	80014b4 <LCD_WR_DATAX>
		HAL_Delay(120);
 800308e:	2078      	movs	r0, #120	; 0x78
 8003090:	f005 fa2a 	bl	80084e8 <HAL_Delay>
		LCD_WR_REG(0X29);
 8003094:	2029      	movs	r0, #41	; 0x29
 8003096:	f7fe f9e9 	bl	800146c <LCD_WR_REG>
 800309a:	f003 bc27 	b.w	80068ec <LCD_Init+0x3e34>
 800309e:	bf00      	nop
 80030a0:	200000bc 	.word	0x200000bc
	} else if (lcddev.id == 0x5310) {
 80030a4:	4b03      	ldr	r3, [pc, #12]	; (80030b4 <LCD_Init+0x5fc>)
 80030a6:	889b      	ldrh	r3, [r3, #4]
 80030a8:	f245 3210 	movw	r2, #21264	; 0x5310
 80030ac:	4293      	cmp	r3, r2
 80030ae:	f040 877c 	bne.w	8003faa <LCD_Init+0x14f2>
 80030b2:	e001      	b.n	80030b8 <LCD_Init+0x600>
 80030b4:	200000bc 	.word	0x200000bc
		LCD_WR_REG(0xED);
 80030b8:	20ed      	movs	r0, #237	; 0xed
 80030ba:	f7fe f9d7 	bl	800146c <LCD_WR_REG>
		LCD_WR_DATAX(0x01);
 80030be:	2001      	movs	r0, #1
 80030c0:	f7fe f9f8 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xFE);
 80030c4:	20fe      	movs	r0, #254	; 0xfe
 80030c6:	f7fe f9f5 	bl	80014b4 <LCD_WR_DATAX>

		LCD_WR_REG(0xEE);
 80030ca:	20ee      	movs	r0, #238	; 0xee
 80030cc:	f7fe f9ce 	bl	800146c <LCD_WR_REG>
		LCD_WR_DATAX(0xDE);
 80030d0:	20de      	movs	r0, #222	; 0xde
 80030d2:	f7fe f9ef 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x21);
 80030d6:	2021      	movs	r0, #33	; 0x21
 80030d8:	f7fe f9ec 	bl	80014b4 <LCD_WR_DATAX>

		LCD_WR_REG(0xF1);
 80030dc:	20f1      	movs	r0, #241	; 0xf1
 80030de:	f7fe f9c5 	bl	800146c <LCD_WR_REG>
		LCD_WR_DATAX(0x01);
 80030e2:	2001      	movs	r0, #1
 80030e4:	f7fe f9e6 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_REG(0xDF);
 80030e8:	20df      	movs	r0, #223	; 0xdf
 80030ea:	f7fe f9bf 	bl	800146c <LCD_WR_REG>
		LCD_WR_DATAX(0x10);
 80030ee:	2010      	movs	r0, #16
 80030f0:	f7fe f9e0 	bl	80014b4 <LCD_WR_DATAX>

		//VCOMvoltage//
		LCD_WR_REG(0xC4);
 80030f4:	20c4      	movs	r0, #196	; 0xc4
 80030f6:	f7fe f9b9 	bl	800146c <LCD_WR_REG>
		LCD_WR_DATAX(0x8F);	  //5f
 80030fa:	208f      	movs	r0, #143	; 0x8f
 80030fc:	f7fe f9da 	bl	80014b4 <LCD_WR_DATAX>

		LCD_WR_REG(0xC6);
 8003100:	20c6      	movs	r0, #198	; 0xc6
 8003102:	f7fe f9b3 	bl	800146c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8003106:	2000      	movs	r0, #0
 8003108:	f7fe f9d4 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE2);
 800310c:	20e2      	movs	r0, #226	; 0xe2
 800310e:	f7fe f9d1 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE2);
 8003112:	20e2      	movs	r0, #226	; 0xe2
 8003114:	f7fe f9ce 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE2);
 8003118:	20e2      	movs	r0, #226	; 0xe2
 800311a:	f7fe f9cb 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_REG(0xBF);
 800311e:	20bf      	movs	r0, #191	; 0xbf
 8003120:	f7fe f9a4 	bl	800146c <LCD_WR_REG>
		LCD_WR_DATAX(0xAA);
 8003124:	20aa      	movs	r0, #170	; 0xaa
 8003126:	f7fe f9c5 	bl	80014b4 <LCD_WR_DATAX>

		LCD_WR_REG(0xB0);
 800312a:	20b0      	movs	r0, #176	; 0xb0
 800312c:	f7fe f99e 	bl	800146c <LCD_WR_REG>
		LCD_WR_DATAX(0x0D);
 8003130:	200d      	movs	r0, #13
 8003132:	f7fe f9bf 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003136:	2000      	movs	r0, #0
 8003138:	f7fe f9bc 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0D);
 800313c:	200d      	movs	r0, #13
 800313e:	f7fe f9b9 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003142:	2000      	movs	r0, #0
 8003144:	f7fe f9b6 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x11);
 8003148:	2011      	movs	r0, #17
 800314a:	f7fe f9b3 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800314e:	2000      	movs	r0, #0
 8003150:	f7fe f9b0 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x19);
 8003154:	2019      	movs	r0, #25
 8003156:	f7fe f9ad 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800315a:	2000      	movs	r0, #0
 800315c:	f7fe f9aa 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x21);
 8003160:	2021      	movs	r0, #33	; 0x21
 8003162:	f7fe f9a7 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003166:	2000      	movs	r0, #0
 8003168:	f7fe f9a4 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2D);
 800316c:	202d      	movs	r0, #45	; 0x2d
 800316e:	f7fe f9a1 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003172:	2000      	movs	r0, #0
 8003174:	f7fe f99e 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3D);
 8003178:	203d      	movs	r0, #61	; 0x3d
 800317a:	f7fe f99b 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800317e:	2000      	movs	r0, #0
 8003180:	f7fe f998 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5D);
 8003184:	205d      	movs	r0, #93	; 0x5d
 8003186:	f7fe f995 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800318a:	2000      	movs	r0, #0
 800318c:	f7fe f992 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5D);
 8003190:	205d      	movs	r0, #93	; 0x5d
 8003192:	f7fe f98f 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003196:	2000      	movs	r0, #0
 8003198:	f7fe f98c 	bl	80014b4 <LCD_WR_DATAX>

		LCD_WR_REG(0xB1);
 800319c:	20b1      	movs	r0, #177	; 0xb1
 800319e:	f7fe f965 	bl	800146c <LCD_WR_REG>
		LCD_WR_DATAX(0x80);
 80031a2:	2080      	movs	r0, #128	; 0x80
 80031a4:	f7fe f986 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80031a8:	2000      	movs	r0, #0
 80031aa:	f7fe f983 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x8B);
 80031ae:	208b      	movs	r0, #139	; 0x8b
 80031b0:	f7fe f980 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80031b4:	2000      	movs	r0, #0
 80031b6:	f7fe f97d 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x96);
 80031ba:	2096      	movs	r0, #150	; 0x96
 80031bc:	f7fe f97a 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80031c0:	2000      	movs	r0, #0
 80031c2:	f7fe f977 	bl	80014b4 <LCD_WR_DATAX>

		LCD_WR_REG(0xB2);
 80031c6:	20b2      	movs	r0, #178	; 0xb2
 80031c8:	f7fe f950 	bl	800146c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80031cc:	2000      	movs	r0, #0
 80031ce:	f7fe f971 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80031d2:	2000      	movs	r0, #0
 80031d4:	f7fe f96e 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x02);
 80031d8:	2002      	movs	r0, #2
 80031da:	f7fe f96b 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80031de:	2000      	movs	r0, #0
 80031e0:	f7fe f968 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x03);
 80031e4:	2003      	movs	r0, #3
 80031e6:	f7fe f965 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80031ea:	2000      	movs	r0, #0
 80031ec:	f7fe f962 	bl	80014b4 <LCD_WR_DATAX>

		LCD_WR_REG(0xB3);
 80031f0:	20b3      	movs	r0, #179	; 0xb3
 80031f2:	f7fe f93b 	bl	800146c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80031f6:	2000      	movs	r0, #0
 80031f8:	f7fe f95c 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80031fc:	2000      	movs	r0, #0
 80031fe:	f7fe f959 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003202:	2000      	movs	r0, #0
 8003204:	f7fe f956 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003208:	2000      	movs	r0, #0
 800320a:	f7fe f953 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800320e:	2000      	movs	r0, #0
 8003210:	f7fe f950 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003214:	2000      	movs	r0, #0
 8003216:	f7fe f94d 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800321a:	2000      	movs	r0, #0
 800321c:	f7fe f94a 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003220:	2000      	movs	r0, #0
 8003222:	f7fe f947 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003226:	2000      	movs	r0, #0
 8003228:	f7fe f944 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800322c:	2000      	movs	r0, #0
 800322e:	f7fe f941 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003232:	2000      	movs	r0, #0
 8003234:	f7fe f93e 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003238:	2000      	movs	r0, #0
 800323a:	f7fe f93b 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800323e:	2000      	movs	r0, #0
 8003240:	f7fe f938 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003244:	2000      	movs	r0, #0
 8003246:	f7fe f935 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800324a:	2000      	movs	r0, #0
 800324c:	f7fe f932 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003250:	2000      	movs	r0, #0
 8003252:	f7fe f92f 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003256:	2000      	movs	r0, #0
 8003258:	f7fe f92c 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800325c:	2000      	movs	r0, #0
 800325e:	f7fe f929 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003262:	2000      	movs	r0, #0
 8003264:	f7fe f926 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003268:	2000      	movs	r0, #0
 800326a:	f7fe f923 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800326e:	2000      	movs	r0, #0
 8003270:	f7fe f920 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003274:	2000      	movs	r0, #0
 8003276:	f7fe f91d 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800327a:	2000      	movs	r0, #0
 800327c:	f7fe f91a 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003280:	2000      	movs	r0, #0
 8003282:	f7fe f917 	bl	80014b4 <LCD_WR_DATAX>

		LCD_WR_REG(0xB4);
 8003286:	20b4      	movs	r0, #180	; 0xb4
 8003288:	f7fe f8f0 	bl	800146c <LCD_WR_REG>
		LCD_WR_DATAX(0x8B);
 800328c:	208b      	movs	r0, #139	; 0x8b
 800328e:	f7fe f911 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003292:	2000      	movs	r0, #0
 8003294:	f7fe f90e 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x96);
 8003298:	2096      	movs	r0, #150	; 0x96
 800329a:	f7fe f90b 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800329e:	2000      	movs	r0, #0
 80032a0:	f7fe f908 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA1);
 80032a4:	20a1      	movs	r0, #161	; 0xa1
 80032a6:	f7fe f905 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80032aa:	2000      	movs	r0, #0
 80032ac:	f7fe f902 	bl	80014b4 <LCD_WR_DATAX>

		LCD_WR_REG(0xB5);
 80032b0:	20b5      	movs	r0, #181	; 0xb5
 80032b2:	f7fe f8db 	bl	800146c <LCD_WR_REG>
		LCD_WR_DATAX(0x02);
 80032b6:	2002      	movs	r0, #2
 80032b8:	f7fe f8fc 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80032bc:	2000      	movs	r0, #0
 80032be:	f7fe f8f9 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x03);
 80032c2:	2003      	movs	r0, #3
 80032c4:	f7fe f8f6 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80032c8:	2000      	movs	r0, #0
 80032ca:	f7fe f8f3 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x04);
 80032ce:	2004      	movs	r0, #4
 80032d0:	f7fe f8f0 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80032d4:	2000      	movs	r0, #0
 80032d6:	f7fe f8ed 	bl	80014b4 <LCD_WR_DATAX>

		LCD_WR_REG(0xB6);
 80032da:	20b6      	movs	r0, #182	; 0xb6
 80032dc:	f7fe f8c6 	bl	800146c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80032e0:	2000      	movs	r0, #0
 80032e2:	f7fe f8e7 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80032e6:	2000      	movs	r0, #0
 80032e8:	f7fe f8e4 	bl	80014b4 <LCD_WR_DATAX>

		LCD_WR_REG(0xB7);
 80032ec:	20b7      	movs	r0, #183	; 0xb7
 80032ee:	f7fe f8bd 	bl	800146c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80032f2:	2000      	movs	r0, #0
 80032f4:	f7fe f8de 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80032f8:	2000      	movs	r0, #0
 80032fa:	f7fe f8db 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3F);
 80032fe:	203f      	movs	r0, #63	; 0x3f
 8003300:	f7fe f8d8 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003304:	2000      	movs	r0, #0
 8003306:	f7fe f8d5 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5E);
 800330a:	205e      	movs	r0, #94	; 0x5e
 800330c:	f7fe f8d2 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003310:	2000      	movs	r0, #0
 8003312:	f7fe f8cf 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x64);
 8003316:	2064      	movs	r0, #100	; 0x64
 8003318:	f7fe f8cc 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800331c:	2000      	movs	r0, #0
 800331e:	f7fe f8c9 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x8C);
 8003322:	208c      	movs	r0, #140	; 0x8c
 8003324:	f7fe f8c6 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003328:	2000      	movs	r0, #0
 800332a:	f7fe f8c3 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xAC);
 800332e:	20ac      	movs	r0, #172	; 0xac
 8003330:	f7fe f8c0 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003334:	2000      	movs	r0, #0
 8003336:	f7fe f8bd 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDC);
 800333a:	20dc      	movs	r0, #220	; 0xdc
 800333c:	f7fe f8ba 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003340:	2000      	movs	r0, #0
 8003342:	f7fe f8b7 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x70);
 8003346:	2070      	movs	r0, #112	; 0x70
 8003348:	f7fe f8b4 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800334c:	2000      	movs	r0, #0
 800334e:	f7fe f8b1 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x90);
 8003352:	2090      	movs	r0, #144	; 0x90
 8003354:	f7fe f8ae 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003358:	2000      	movs	r0, #0
 800335a:	f7fe f8ab 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xEB);
 800335e:	20eb      	movs	r0, #235	; 0xeb
 8003360:	f7fe f8a8 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003364:	2000      	movs	r0, #0
 8003366:	f7fe f8a5 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDC);
 800336a:	20dc      	movs	r0, #220	; 0xdc
 800336c:	f7fe f8a2 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003370:	2000      	movs	r0, #0
 8003372:	f7fe f89f 	bl	80014b4 <LCD_WR_DATAX>

		LCD_WR_REG(0xB8);
 8003376:	20b8      	movs	r0, #184	; 0xb8
 8003378:	f7fe f878 	bl	800146c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 800337c:	2000      	movs	r0, #0
 800337e:	f7fe f899 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003382:	2000      	movs	r0, #0
 8003384:	f7fe f896 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003388:	2000      	movs	r0, #0
 800338a:	f7fe f893 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800338e:	2000      	movs	r0, #0
 8003390:	f7fe f890 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003394:	2000      	movs	r0, #0
 8003396:	f7fe f88d 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800339a:	2000      	movs	r0, #0
 800339c:	f7fe f88a 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80033a0:	2000      	movs	r0, #0
 80033a2:	f7fe f887 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80033a6:	2000      	movs	r0, #0
 80033a8:	f7fe f884 	bl	80014b4 <LCD_WR_DATAX>

		LCD_WR_REG(0xBA);
 80033ac:	20ba      	movs	r0, #186	; 0xba
 80033ae:	f7fe f85d 	bl	800146c <LCD_WR_REG>
		LCD_WR_DATAX(0x24);
 80033b2:	2024      	movs	r0, #36	; 0x24
 80033b4:	f7fe f87e 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80033b8:	2000      	movs	r0, #0
 80033ba:	f7fe f87b 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80033be:	2000      	movs	r0, #0
 80033c0:	f7fe f878 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80033c4:	2000      	movs	r0, #0
 80033c6:	f7fe f875 	bl	80014b4 <LCD_WR_DATAX>

		LCD_WR_REG(0xC1);
 80033ca:	20c1      	movs	r0, #193	; 0xc1
 80033cc:	f7fe f84e 	bl	800146c <LCD_WR_REG>
		LCD_WR_DATAX(0x20);
 80033d0:	2020      	movs	r0, #32
 80033d2:	f7fe f86f 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80033d6:	2000      	movs	r0, #0
 80033d8:	f7fe f86c 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x54);
 80033dc:	2054      	movs	r0, #84	; 0x54
 80033de:	f7fe f869 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80033e2:	2000      	movs	r0, #0
 80033e4:	f7fe f866 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xFF);
 80033e8:	20ff      	movs	r0, #255	; 0xff
 80033ea:	f7fe f863 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80033ee:	2000      	movs	r0, #0
 80033f0:	f7fe f860 	bl	80014b4 <LCD_WR_DATAX>

		LCD_WR_REG(0xC2);
 80033f4:	20c2      	movs	r0, #194	; 0xc2
 80033f6:	f7fe f839 	bl	800146c <LCD_WR_REG>
		LCD_WR_DATAX(0x0A);
 80033fa:	200a      	movs	r0, #10
 80033fc:	f7fe f85a 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003400:	2000      	movs	r0, #0
 8003402:	f7fe f857 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x04);
 8003406:	2004      	movs	r0, #4
 8003408:	f7fe f854 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800340c:	2000      	movs	r0, #0
 800340e:	f7fe f851 	bl	80014b4 <LCD_WR_DATAX>

		LCD_WR_REG(0xC3);
 8003412:	20c3      	movs	r0, #195	; 0xc3
 8003414:	f7fe f82a 	bl	800146c <LCD_WR_REG>
		LCD_WR_DATAX(0x3C);
 8003418:	203c      	movs	r0, #60	; 0x3c
 800341a:	f7fe f84b 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800341e:	2000      	movs	r0, #0
 8003420:	f7fe f848 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3A);
 8003424:	203a      	movs	r0, #58	; 0x3a
 8003426:	f7fe f845 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800342a:	2000      	movs	r0, #0
 800342c:	f7fe f842 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x39);
 8003430:	2039      	movs	r0, #57	; 0x39
 8003432:	f7fe f83f 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003436:	2000      	movs	r0, #0
 8003438:	f7fe f83c 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x37);
 800343c:	2037      	movs	r0, #55	; 0x37
 800343e:	f7fe f839 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003442:	2000      	movs	r0, #0
 8003444:	f7fe f836 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 8003448:	203c      	movs	r0, #60	; 0x3c
 800344a:	f7fe f833 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800344e:	2000      	movs	r0, #0
 8003450:	f7fe f830 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x36);
 8003454:	2036      	movs	r0, #54	; 0x36
 8003456:	f7fe f82d 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800345a:	2000      	movs	r0, #0
 800345c:	f7fe f82a 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x32);
 8003460:	2032      	movs	r0, #50	; 0x32
 8003462:	f7fe f827 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003466:	2000      	movs	r0, #0
 8003468:	f7fe f824 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2F);
 800346c:	202f      	movs	r0, #47	; 0x2f
 800346e:	f7fe f821 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003472:	2000      	movs	r0, #0
 8003474:	f7fe f81e 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2C);
 8003478:	202c      	movs	r0, #44	; 0x2c
 800347a:	f7fe f81b 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800347e:	2000      	movs	r0, #0
 8003480:	f7fe f818 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x29);
 8003484:	2029      	movs	r0, #41	; 0x29
 8003486:	f7fe f815 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800348a:	2000      	movs	r0, #0
 800348c:	f7fe f812 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x26);
 8003490:	2026      	movs	r0, #38	; 0x26
 8003492:	f7fe f80f 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003496:	2000      	movs	r0, #0
 8003498:	f7fe f80c 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x24);
 800349c:	2024      	movs	r0, #36	; 0x24
 800349e:	f7fe f809 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80034a2:	2000      	movs	r0, #0
 80034a4:	f7fe f806 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x24);
 80034a8:	2024      	movs	r0, #36	; 0x24
 80034aa:	f7fe f803 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80034ae:	2000      	movs	r0, #0
 80034b0:	f7fe f800 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x23);
 80034b4:	2023      	movs	r0, #35	; 0x23
 80034b6:	f7fd fffd 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80034ba:	2000      	movs	r0, #0
 80034bc:	f7fd fffa 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 80034c0:	203c      	movs	r0, #60	; 0x3c
 80034c2:	f7fd fff7 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80034c6:	2000      	movs	r0, #0
 80034c8:	f7fd fff4 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x36);
 80034cc:	2036      	movs	r0, #54	; 0x36
 80034ce:	f7fd fff1 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80034d2:	2000      	movs	r0, #0
 80034d4:	f7fd ffee 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x32);
 80034d8:	2032      	movs	r0, #50	; 0x32
 80034da:	f7fd ffeb 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80034de:	2000      	movs	r0, #0
 80034e0:	f7fd ffe8 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2F);
 80034e4:	202f      	movs	r0, #47	; 0x2f
 80034e6:	f7fd ffe5 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80034ea:	2000      	movs	r0, #0
 80034ec:	f7fd ffe2 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2C);
 80034f0:	202c      	movs	r0, #44	; 0x2c
 80034f2:	f7fd ffdf 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80034f6:	2000      	movs	r0, #0
 80034f8:	f7fd ffdc 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x29);
 80034fc:	2029      	movs	r0, #41	; 0x29
 80034fe:	f7fd ffd9 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003502:	2000      	movs	r0, #0
 8003504:	f7fd ffd6 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x26);
 8003508:	2026      	movs	r0, #38	; 0x26
 800350a:	f7fd ffd3 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800350e:	2000      	movs	r0, #0
 8003510:	f7fd ffd0 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x24);
 8003514:	2024      	movs	r0, #36	; 0x24
 8003516:	f7fd ffcd 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800351a:	2000      	movs	r0, #0
 800351c:	f7fd ffca 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x24);
 8003520:	2024      	movs	r0, #36	; 0x24
 8003522:	f7fd ffc7 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003526:	2000      	movs	r0, #0
 8003528:	f7fd ffc4 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x23);
 800352c:	2023      	movs	r0, #35	; 0x23
 800352e:	f7fd ffc1 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003532:	2000      	movs	r0, #0
 8003534:	f7fd ffbe 	bl	80014b4 <LCD_WR_DATAX>

		LCD_WR_REG(0xC4);
 8003538:	20c4      	movs	r0, #196	; 0xc4
 800353a:	f7fd ff97 	bl	800146c <LCD_WR_REG>
		LCD_WR_DATAX(0x62);
 800353e:	2062      	movs	r0, #98	; 0x62
 8003540:	f7fd ffb8 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003544:	2000      	movs	r0, #0
 8003546:	f7fd ffb5 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x05);
 800354a:	2005      	movs	r0, #5
 800354c:	f7fd ffb2 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003550:	2000      	movs	r0, #0
 8003552:	f7fd ffaf 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x84);
 8003556:	2084      	movs	r0, #132	; 0x84
 8003558:	f7fd ffac 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800355c:	2000      	movs	r0, #0
 800355e:	f7fd ffa9 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF0);
 8003562:	20f0      	movs	r0, #240	; 0xf0
 8003564:	f7fd ffa6 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003568:	2000      	movs	r0, #0
 800356a:	f7fd ffa3 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x18);
 800356e:	2018      	movs	r0, #24
 8003570:	f7fd ffa0 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003574:	2000      	movs	r0, #0
 8003576:	f7fd ff9d 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA4);
 800357a:	20a4      	movs	r0, #164	; 0xa4
 800357c:	f7fd ff9a 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003580:	2000      	movs	r0, #0
 8003582:	f7fd ff97 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x18);
 8003586:	2018      	movs	r0, #24
 8003588:	f7fd ff94 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800358c:	2000      	movs	r0, #0
 800358e:	f7fd ff91 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x50);
 8003592:	2050      	movs	r0, #80	; 0x50
 8003594:	f7fd ff8e 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003598:	2000      	movs	r0, #0
 800359a:	f7fd ff8b 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0C);
 800359e:	200c      	movs	r0, #12
 80035a0:	f7fd ff88 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80035a4:	2000      	movs	r0, #0
 80035a6:	f7fd ff85 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x17);
 80035aa:	2017      	movs	r0, #23
 80035ac:	f7fd ff82 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80035b0:	2000      	movs	r0, #0
 80035b2:	f7fd ff7f 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x95);
 80035b6:	2095      	movs	r0, #149	; 0x95
 80035b8:	f7fd ff7c 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80035bc:	2000      	movs	r0, #0
 80035be:	f7fd ff79 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 80035c2:	20f3      	movs	r0, #243	; 0xf3
 80035c4:	f7fd ff76 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80035c8:	2000      	movs	r0, #0
 80035ca:	f7fd ff73 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE6);
 80035ce:	20e6      	movs	r0, #230	; 0xe6
 80035d0:	f7fd ff70 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80035d4:	2000      	movs	r0, #0
 80035d6:	f7fd ff6d 	bl	80014b4 <LCD_WR_DATAX>

		LCD_WR_REG(0xC5);
 80035da:	20c5      	movs	r0, #197	; 0xc5
 80035dc:	f7fd ff46 	bl	800146c <LCD_WR_REG>
		LCD_WR_DATAX(0x32);
 80035e0:	2032      	movs	r0, #50	; 0x32
 80035e2:	f7fd ff67 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80035e6:	2000      	movs	r0, #0
 80035e8:	f7fd ff64 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 80035ec:	2044      	movs	r0, #68	; 0x44
 80035ee:	f7fd ff61 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80035f2:	2000      	movs	r0, #0
 80035f4:	f7fd ff5e 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x65);
 80035f8:	2065      	movs	r0, #101	; 0x65
 80035fa:	f7fd ff5b 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80035fe:	2000      	movs	r0, #0
 8003600:	f7fd ff58 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x76);
 8003604:	2076      	movs	r0, #118	; 0x76
 8003606:	f7fd ff55 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800360a:	2000      	movs	r0, #0
 800360c:	f7fd ff52 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 8003610:	2088      	movs	r0, #136	; 0x88
 8003612:	f7fd ff4f 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003616:	2000      	movs	r0, #0
 8003618:	f7fd ff4c 	bl	80014b4 <LCD_WR_DATAX>

		LCD_WR_REG(0xC6);
 800361c:	20c6      	movs	r0, #198	; 0xc6
 800361e:	f7fd ff25 	bl	800146c <LCD_WR_REG>
		LCD_WR_DATAX(0x20);
 8003622:	2020      	movs	r0, #32
 8003624:	f7fd ff46 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003628:	2000      	movs	r0, #0
 800362a:	f7fd ff43 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x17);
 800362e:	2017      	movs	r0, #23
 8003630:	f7fd ff40 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003634:	2000      	movs	r0, #0
 8003636:	f7fd ff3d 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x01);
 800363a:	2001      	movs	r0, #1
 800363c:	f7fd ff3a 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003640:	2000      	movs	r0, #0
 8003642:	f7fd ff37 	bl	80014b4 <LCD_WR_DATAX>

		LCD_WR_REG(0xC7);
 8003646:	20c7      	movs	r0, #199	; 0xc7
 8003648:	f7fd ff10 	bl	800146c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 800364c:	2000      	movs	r0, #0
 800364e:	f7fd ff31 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003652:	2000      	movs	r0, #0
 8003654:	f7fd ff2e 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003658:	2000      	movs	r0, #0
 800365a:	f7fd ff2b 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800365e:	2000      	movs	r0, #0
 8003660:	f7fd ff28 	bl	80014b4 <LCD_WR_DATAX>

		LCD_WR_REG(0xC8);
 8003664:	20c8      	movs	r0, #200	; 0xc8
 8003666:	f7fd ff01 	bl	800146c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 800366a:	2000      	movs	r0, #0
 800366c:	f7fd ff22 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003670:	2000      	movs	r0, #0
 8003672:	f7fd ff1f 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003676:	2000      	movs	r0, #0
 8003678:	f7fd ff1c 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800367c:	2000      	movs	r0, #0
 800367e:	f7fd ff19 	bl	80014b4 <LCD_WR_DATAX>

		LCD_WR_REG(0xC9);
 8003682:	20c9      	movs	r0, #201	; 0xc9
 8003684:	f7fd fef2 	bl	800146c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8003688:	2000      	movs	r0, #0
 800368a:	f7fd ff13 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800368e:	2000      	movs	r0, #0
 8003690:	f7fd ff10 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003694:	2000      	movs	r0, #0
 8003696:	f7fd ff0d 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800369a:	2000      	movs	r0, #0
 800369c:	f7fd ff0a 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80036a0:	2000      	movs	r0, #0
 80036a2:	f7fd ff07 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80036a6:	2000      	movs	r0, #0
 80036a8:	f7fd ff04 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80036ac:	2000      	movs	r0, #0
 80036ae:	f7fd ff01 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80036b2:	2000      	movs	r0, #0
 80036b4:	f7fd fefe 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80036b8:	2000      	movs	r0, #0
 80036ba:	f7fd fefb 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80036be:	2000      	movs	r0, #0
 80036c0:	f7fd fef8 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80036c4:	2000      	movs	r0, #0
 80036c6:	f7fd fef5 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80036ca:	2000      	movs	r0, #0
 80036cc:	f7fd fef2 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80036d0:	2000      	movs	r0, #0
 80036d2:	f7fd feef 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80036d6:	2000      	movs	r0, #0
 80036d8:	f7fd feec 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80036dc:	2000      	movs	r0, #0
 80036de:	f7fd fee9 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80036e2:	2000      	movs	r0, #0
 80036e4:	f7fd fee6 	bl	80014b4 <LCD_WR_DATAX>

		LCD_WR_REG(0xE0);
 80036e8:	20e0      	movs	r0, #224	; 0xe0
 80036ea:	f7fd febf 	bl	800146c <LCD_WR_REG>
		LCD_WR_DATAX(0x16);
 80036ee:	2016      	movs	r0, #22
 80036f0:	f7fd fee0 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80036f4:	2000      	movs	r0, #0
 80036f6:	f7fd fedd 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1C);
 80036fa:	201c      	movs	r0, #28
 80036fc:	f7fd feda 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003700:	2000      	movs	r0, #0
 8003702:	f7fd fed7 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x21);
 8003706:	2021      	movs	r0, #33	; 0x21
 8003708:	f7fd fed4 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800370c:	2000      	movs	r0, #0
 800370e:	f7fd fed1 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x36);
 8003712:	2036      	movs	r0, #54	; 0x36
 8003714:	f7fd fece 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003718:	2000      	movs	r0, #0
 800371a:	f7fd fecb 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x46);
 800371e:	2046      	movs	r0, #70	; 0x46
 8003720:	f7fd fec8 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003724:	2000      	movs	r0, #0
 8003726:	f7fd fec5 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x52);
 800372a:	2052      	movs	r0, #82	; 0x52
 800372c:	f7fd fec2 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003730:	2000      	movs	r0, #0
 8003732:	f7fd febf 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x64);
 8003736:	2064      	movs	r0, #100	; 0x64
 8003738:	f7fd febc 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800373c:	2000      	movs	r0, #0
 800373e:	f7fd feb9 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x7A);
 8003742:	207a      	movs	r0, #122	; 0x7a
 8003744:	f7fd feb6 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003748:	2000      	movs	r0, #0
 800374a:	f7fd feb3 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x8B);
 800374e:	208b      	movs	r0, #139	; 0x8b
 8003750:	f7fd feb0 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003754:	2000      	movs	r0, #0
 8003756:	f7fd fead 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 800375a:	2099      	movs	r0, #153	; 0x99
 800375c:	f7fd feaa 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003760:	2000      	movs	r0, #0
 8003762:	f7fd fea7 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA8);
 8003766:	20a8      	movs	r0, #168	; 0xa8
 8003768:	f7fd fea4 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800376c:	2000      	movs	r0, #0
 800376e:	f7fd fea1 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB9);
 8003772:	20b9      	movs	r0, #185	; 0xb9
 8003774:	f7fd fe9e 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003778:	2000      	movs	r0, #0
 800377a:	f7fd fe9b 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC4);
 800377e:	20c4      	movs	r0, #196	; 0xc4
 8003780:	f7fd fe98 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003784:	2000      	movs	r0, #0
 8003786:	f7fd fe95 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xCA);
 800378a:	20ca      	movs	r0, #202	; 0xca
 800378c:	f7fd fe92 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003790:	2000      	movs	r0, #0
 8003792:	f7fd fe8f 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD2);
 8003796:	20d2      	movs	r0, #210	; 0xd2
 8003798:	f7fd fe8c 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800379c:	2000      	movs	r0, #0
 800379e:	f7fd fe89 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD9);
 80037a2:	20d9      	movs	r0, #217	; 0xd9
 80037a4:	f7fd fe86 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80037a8:	2000      	movs	r0, #0
 80037aa:	f7fd fe83 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE0);
 80037ae:	20e0      	movs	r0, #224	; 0xe0
 80037b0:	f7fd fe80 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80037b4:	2000      	movs	r0, #0
 80037b6:	f7fd fe7d 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 80037ba:	20f3      	movs	r0, #243	; 0xf3
 80037bc:	f7fd fe7a 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80037c0:	2000      	movs	r0, #0
 80037c2:	f7fd fe77 	bl	80014b4 <LCD_WR_DATAX>

		LCD_WR_REG(0xE1);
 80037c6:	20e1      	movs	r0, #225	; 0xe1
 80037c8:	f7fd fe50 	bl	800146c <LCD_WR_REG>
		LCD_WR_DATAX(0x16);
 80037cc:	2016      	movs	r0, #22
 80037ce:	f7fd fe71 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80037d2:	2000      	movs	r0, #0
 80037d4:	f7fd fe6e 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1C);
 80037d8:	201c      	movs	r0, #28
 80037da:	f7fd fe6b 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80037de:	2000      	movs	r0, #0
 80037e0:	f7fd fe68 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x22);
 80037e4:	2022      	movs	r0, #34	; 0x22
 80037e6:	f7fd fe65 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80037ea:	2000      	movs	r0, #0
 80037ec:	f7fd fe62 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x36);
 80037f0:	2036      	movs	r0, #54	; 0x36
 80037f2:	f7fd fe5f 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80037f6:	2000      	movs	r0, #0
 80037f8:	f7fd fe5c 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x45);
 80037fc:	2045      	movs	r0, #69	; 0x45
 80037fe:	f7fd fe59 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003802:	2000      	movs	r0, #0
 8003804:	f7fd fe56 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x52);
 8003808:	2052      	movs	r0, #82	; 0x52
 800380a:	f7fd fe53 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800380e:	2000      	movs	r0, #0
 8003810:	f7fd fe50 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x64);
 8003814:	2064      	movs	r0, #100	; 0x64
 8003816:	f7fd fe4d 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800381a:	2000      	movs	r0, #0
 800381c:	f7fd fe4a 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x7A);
 8003820:	207a      	movs	r0, #122	; 0x7a
 8003822:	f7fd fe47 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003826:	2000      	movs	r0, #0
 8003828:	f7fd fe44 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x8B);
 800382c:	208b      	movs	r0, #139	; 0x8b
 800382e:	f7fd fe41 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003832:	2000      	movs	r0, #0
 8003834:	f7fd fe3e 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 8003838:	2099      	movs	r0, #153	; 0x99
 800383a:	f7fd fe3b 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800383e:	2000      	movs	r0, #0
 8003840:	f7fd fe38 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA8);
 8003844:	20a8      	movs	r0, #168	; 0xa8
 8003846:	f7fd fe35 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800384a:	2000      	movs	r0, #0
 800384c:	f7fd fe32 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB9);
 8003850:	20b9      	movs	r0, #185	; 0xb9
 8003852:	f7fd fe2f 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003856:	2000      	movs	r0, #0
 8003858:	f7fd fe2c 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC4);
 800385c:	20c4      	movs	r0, #196	; 0xc4
 800385e:	f7fd fe29 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003862:	2000      	movs	r0, #0
 8003864:	f7fd fe26 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xCA);
 8003868:	20ca      	movs	r0, #202	; 0xca
 800386a:	f7fd fe23 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800386e:	2000      	movs	r0, #0
 8003870:	f7fd fe20 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD2);
 8003874:	20d2      	movs	r0, #210	; 0xd2
 8003876:	f7fd fe1d 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800387a:	2000      	movs	r0, #0
 800387c:	f7fd fe1a 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD8);
 8003880:	20d8      	movs	r0, #216	; 0xd8
 8003882:	f7fd fe17 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003886:	2000      	movs	r0, #0
 8003888:	f7fd fe14 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE0);
 800388c:	20e0      	movs	r0, #224	; 0xe0
 800388e:	f7fd fe11 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003892:	2000      	movs	r0, #0
 8003894:	f7fd fe0e 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 8003898:	20f3      	movs	r0, #243	; 0xf3
 800389a:	f7fd fe0b 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800389e:	2000      	movs	r0, #0
 80038a0:	f7fd fe08 	bl	80014b4 <LCD_WR_DATAX>

		LCD_WR_REG(0xE2);
 80038a4:	20e2      	movs	r0, #226	; 0xe2
 80038a6:	f7fd fde1 	bl	800146c <LCD_WR_REG>
		LCD_WR_DATAX(0x05);
 80038aa:	2005      	movs	r0, #5
 80038ac:	f7fd fe02 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80038b0:	2000      	movs	r0, #0
 80038b2:	f7fd fdff 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0B);
 80038b6:	200b      	movs	r0, #11
 80038b8:	f7fd fdfc 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80038bc:	2000      	movs	r0, #0
 80038be:	f7fd fdf9 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1B);
 80038c2:	201b      	movs	r0, #27
 80038c4:	f7fd fdf6 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80038c8:	2000      	movs	r0, #0
 80038ca:	f7fd fdf3 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x34);
 80038ce:	2034      	movs	r0, #52	; 0x34
 80038d0:	f7fd fdf0 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80038d4:	2000      	movs	r0, #0
 80038d6:	f7fd fded 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 80038da:	2044      	movs	r0, #68	; 0x44
 80038dc:	f7fd fdea 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80038e0:	2000      	movs	r0, #0
 80038e2:	f7fd fde7 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x4F);
 80038e6:	204f      	movs	r0, #79	; 0x4f
 80038e8:	f7fd fde4 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80038ec:	2000      	movs	r0, #0
 80038ee:	f7fd fde1 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x61);
 80038f2:	2061      	movs	r0, #97	; 0x61
 80038f4:	f7fd fdde 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80038f8:	2000      	movs	r0, #0
 80038fa:	f7fd fddb 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x79);
 80038fe:	2079      	movs	r0, #121	; 0x79
 8003900:	f7fd fdd8 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003904:	2000      	movs	r0, #0
 8003906:	f7fd fdd5 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 800390a:	2088      	movs	r0, #136	; 0x88
 800390c:	f7fd fdd2 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003910:	2000      	movs	r0, #0
 8003912:	f7fd fdcf 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x97);
 8003916:	2097      	movs	r0, #151	; 0x97
 8003918:	f7fd fdcc 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800391c:	2000      	movs	r0, #0
 800391e:	f7fd fdc9 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA6);
 8003922:	20a6      	movs	r0, #166	; 0xa6
 8003924:	f7fd fdc6 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003928:	2000      	movs	r0, #0
 800392a:	f7fd fdc3 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB7);
 800392e:	20b7      	movs	r0, #183	; 0xb7
 8003930:	f7fd fdc0 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003934:	2000      	movs	r0, #0
 8003936:	f7fd fdbd 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC2);
 800393a:	20c2      	movs	r0, #194	; 0xc2
 800393c:	f7fd fdba 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003940:	2000      	movs	r0, #0
 8003942:	f7fd fdb7 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC7);
 8003946:	20c7      	movs	r0, #199	; 0xc7
 8003948:	f7fd fdb4 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800394c:	2000      	movs	r0, #0
 800394e:	f7fd fdb1 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD1);
 8003952:	20d1      	movs	r0, #209	; 0xd1
 8003954:	f7fd fdae 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003958:	2000      	movs	r0, #0
 800395a:	f7fd fdab 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD6);
 800395e:	20d6      	movs	r0, #214	; 0xd6
 8003960:	f7fd fda8 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003964:	2000      	movs	r0, #0
 8003966:	f7fd fda5 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDD);
 800396a:	20dd      	movs	r0, #221	; 0xdd
 800396c:	f7fd fda2 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003970:	2000      	movs	r0, #0
 8003972:	f7fd fd9f 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 8003976:	20f3      	movs	r0, #243	; 0xf3
 8003978:	f7fd fd9c 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800397c:	2000      	movs	r0, #0
 800397e:	f7fd fd99 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_REG(0xE3);
 8003982:	20e3      	movs	r0, #227	; 0xe3
 8003984:	f7fd fd72 	bl	800146c <LCD_WR_REG>
		LCD_WR_DATAX(0x05);
 8003988:	2005      	movs	r0, #5
 800398a:	f7fd fd93 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800398e:	2000      	movs	r0, #0
 8003990:	f7fd fd90 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA);
 8003994:	200a      	movs	r0, #10
 8003996:	f7fd fd8d 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800399a:	2000      	movs	r0, #0
 800399c:	f7fd fd8a 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1C);
 80039a0:	201c      	movs	r0, #28
 80039a2:	f7fd fd87 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80039a6:	2000      	movs	r0, #0
 80039a8:	f7fd fd84 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x33);
 80039ac:	2033      	movs	r0, #51	; 0x33
 80039ae:	f7fd fd81 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80039b2:	2000      	movs	r0, #0
 80039b4:	f7fd fd7e 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 80039b8:	2044      	movs	r0, #68	; 0x44
 80039ba:	f7fd fd7b 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80039be:	2000      	movs	r0, #0
 80039c0:	f7fd fd78 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x50);
 80039c4:	2050      	movs	r0, #80	; 0x50
 80039c6:	f7fd fd75 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80039ca:	2000      	movs	r0, #0
 80039cc:	f7fd fd72 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x62);
 80039d0:	2062      	movs	r0, #98	; 0x62
 80039d2:	f7fd fd6f 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80039d6:	2000      	movs	r0, #0
 80039d8:	f7fd fd6c 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x78);
 80039dc:	2078      	movs	r0, #120	; 0x78
 80039de:	f7fd fd69 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80039e2:	2000      	movs	r0, #0
 80039e4:	f7fd fd66 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 80039e8:	2088      	movs	r0, #136	; 0x88
 80039ea:	f7fd fd63 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80039ee:	2000      	movs	r0, #0
 80039f0:	f7fd fd60 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x97);
 80039f4:	2097      	movs	r0, #151	; 0x97
 80039f6:	f7fd fd5d 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80039fa:	2000      	movs	r0, #0
 80039fc:	f7fd fd5a 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA6);
 8003a00:	20a6      	movs	r0, #166	; 0xa6
 8003a02:	f7fd fd57 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003a06:	2000      	movs	r0, #0
 8003a08:	f7fd fd54 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB7);
 8003a0c:	20b7      	movs	r0, #183	; 0xb7
 8003a0e:	f7fd fd51 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003a12:	2000      	movs	r0, #0
 8003a14:	f7fd fd4e 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC2);
 8003a18:	20c2      	movs	r0, #194	; 0xc2
 8003a1a:	f7fd fd4b 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003a1e:	2000      	movs	r0, #0
 8003a20:	f7fd fd48 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC7);
 8003a24:	20c7      	movs	r0, #199	; 0xc7
 8003a26:	f7fd fd45 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003a2a:	2000      	movs	r0, #0
 8003a2c:	f7fd fd42 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD1);
 8003a30:	20d1      	movs	r0, #209	; 0xd1
 8003a32:	f7fd fd3f 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003a36:	2000      	movs	r0, #0
 8003a38:	f7fd fd3c 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD5);
 8003a3c:	20d5      	movs	r0, #213	; 0xd5
 8003a3e:	f7fd fd39 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003a42:	2000      	movs	r0, #0
 8003a44:	f7fd fd36 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDD);
 8003a48:	20dd      	movs	r0, #221	; 0xdd
 8003a4a:	f7fd fd33 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003a4e:	2000      	movs	r0, #0
 8003a50:	f7fd fd30 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 8003a54:	20f3      	movs	r0, #243	; 0xf3
 8003a56:	f7fd fd2d 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003a5a:	2000      	movs	r0, #0
 8003a5c:	f7fd fd2a 	bl	80014b4 <LCD_WR_DATAX>

		LCD_WR_REG(0xE4);
 8003a60:	20e4      	movs	r0, #228	; 0xe4
 8003a62:	f7fd fd03 	bl	800146c <LCD_WR_REG>
		LCD_WR_DATAX(0x01);
 8003a66:	2001      	movs	r0, #1
 8003a68:	f7fd fd24 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003a6c:	2000      	movs	r0, #0
 8003a6e:	f7fd fd21 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x01);
 8003a72:	2001      	movs	r0, #1
 8003a74:	f7fd fd1e 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003a78:	2000      	movs	r0, #0
 8003a7a:	f7fd fd1b 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x02);
 8003a7e:	2002      	movs	r0, #2
 8003a80:	f7fd fd18 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003a84:	2000      	movs	r0, #0
 8003a86:	f7fd fd15 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2A);
 8003a8a:	202a      	movs	r0, #42	; 0x2a
 8003a8c:	f7fd fd12 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003a90:	2000      	movs	r0, #0
 8003a92:	f7fd fd0f 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 8003a96:	203c      	movs	r0, #60	; 0x3c
 8003a98:	f7fd fd0c 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003a9c:	2000      	movs	r0, #0
 8003a9e:	f7fd fd09 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x4B);
 8003aa2:	204b      	movs	r0, #75	; 0x4b
 8003aa4:	f7fd fd06 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003aa8:	2000      	movs	r0, #0
 8003aaa:	f7fd fd03 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5D);
 8003aae:	205d      	movs	r0, #93	; 0x5d
 8003ab0:	f7fd fd00 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003ab4:	2000      	movs	r0, #0
 8003ab6:	f7fd fcfd 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x74);
 8003aba:	2074      	movs	r0, #116	; 0x74
 8003abc:	f7fd fcfa 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003ac0:	2000      	movs	r0, #0
 8003ac2:	f7fd fcf7 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x84);
 8003ac6:	2084      	movs	r0, #132	; 0x84
 8003ac8:	f7fd fcf4 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003acc:	2000      	movs	r0, #0
 8003ace:	f7fd fcf1 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x93);
 8003ad2:	2093      	movs	r0, #147	; 0x93
 8003ad4:	f7fd fcee 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003ad8:	2000      	movs	r0, #0
 8003ada:	f7fd fceb 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA2);
 8003ade:	20a2      	movs	r0, #162	; 0xa2
 8003ae0:	f7fd fce8 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003ae4:	2000      	movs	r0, #0
 8003ae6:	f7fd fce5 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB3);
 8003aea:	20b3      	movs	r0, #179	; 0xb3
 8003aec:	f7fd fce2 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003af0:	2000      	movs	r0, #0
 8003af2:	f7fd fcdf 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBE);
 8003af6:	20be      	movs	r0, #190	; 0xbe
 8003af8:	f7fd fcdc 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003afc:	2000      	movs	r0, #0
 8003afe:	f7fd fcd9 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC4);
 8003b02:	20c4      	movs	r0, #196	; 0xc4
 8003b04:	f7fd fcd6 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003b08:	2000      	movs	r0, #0
 8003b0a:	f7fd fcd3 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xCD);
 8003b0e:	20cd      	movs	r0, #205	; 0xcd
 8003b10:	f7fd fcd0 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003b14:	2000      	movs	r0, #0
 8003b16:	f7fd fccd 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD3);
 8003b1a:	20d3      	movs	r0, #211	; 0xd3
 8003b1c:	f7fd fcca 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003b20:	2000      	movs	r0, #0
 8003b22:	f7fd fcc7 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDD);
 8003b26:	20dd      	movs	r0, #221	; 0xdd
 8003b28:	f7fd fcc4 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003b2c:	2000      	movs	r0, #0
 8003b2e:	f7fd fcc1 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 8003b32:	20f3      	movs	r0, #243	; 0xf3
 8003b34:	f7fd fcbe 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003b38:	2000      	movs	r0, #0
 8003b3a:	f7fd fcbb 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_REG(0xE5);
 8003b3e:	20e5      	movs	r0, #229	; 0xe5
 8003b40:	f7fd fc94 	bl	800146c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8003b44:	2000      	movs	r0, #0
 8003b46:	f7fd fcb5 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003b4a:	2000      	movs	r0, #0
 8003b4c:	f7fd fcb2 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003b50:	2000      	movs	r0, #0
 8003b52:	f7fd fcaf 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003b56:	2000      	movs	r0, #0
 8003b58:	f7fd fcac 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x02);
 8003b5c:	2002      	movs	r0, #2
 8003b5e:	f7fd fca9 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003b62:	2000      	movs	r0, #0
 8003b64:	f7fd fca6 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x29);
 8003b68:	2029      	movs	r0, #41	; 0x29
 8003b6a:	f7fd fca3 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003b6e:	2000      	movs	r0, #0
 8003b70:	f7fd fca0 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 8003b74:	203c      	movs	r0, #60	; 0x3c
 8003b76:	f7fd fc9d 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003b7a:	2000      	movs	r0, #0
 8003b7c:	f7fd fc9a 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x4B);
 8003b80:	204b      	movs	r0, #75	; 0x4b
 8003b82:	f7fd fc97 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003b86:	2000      	movs	r0, #0
 8003b88:	f7fd fc94 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5D);
 8003b8c:	205d      	movs	r0, #93	; 0x5d
 8003b8e:	f7fd fc91 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003b92:	2000      	movs	r0, #0
 8003b94:	f7fd fc8e 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x74);
 8003b98:	2074      	movs	r0, #116	; 0x74
 8003b9a:	f7fd fc8b 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003b9e:	2000      	movs	r0, #0
 8003ba0:	f7fd fc88 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x84);
 8003ba4:	2084      	movs	r0, #132	; 0x84
 8003ba6:	f7fd fc85 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003baa:	2000      	movs	r0, #0
 8003bac:	f7fd fc82 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x93);
 8003bb0:	2093      	movs	r0, #147	; 0x93
 8003bb2:	f7fd fc7f 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003bb6:	2000      	movs	r0, #0
 8003bb8:	f7fd fc7c 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA2);
 8003bbc:	20a2      	movs	r0, #162	; 0xa2
 8003bbe:	f7fd fc79 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003bc2:	2000      	movs	r0, #0
 8003bc4:	f7fd fc76 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB3);
 8003bc8:	20b3      	movs	r0, #179	; 0xb3
 8003bca:	f7fd fc73 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003bce:	2000      	movs	r0, #0
 8003bd0:	f7fd fc70 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBE);
 8003bd4:	20be      	movs	r0, #190	; 0xbe
 8003bd6:	f7fd fc6d 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003bda:	2000      	movs	r0, #0
 8003bdc:	f7fd fc6a 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC4);
 8003be0:	20c4      	movs	r0, #196	; 0xc4
 8003be2:	f7fd fc67 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003be6:	2000      	movs	r0, #0
 8003be8:	f7fd fc64 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xCD);
 8003bec:	20cd      	movs	r0, #205	; 0xcd
 8003bee:	f7fd fc61 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003bf2:	2000      	movs	r0, #0
 8003bf4:	f7fd fc5e 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD3);
 8003bf8:	20d3      	movs	r0, #211	; 0xd3
 8003bfa:	f7fd fc5b 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003bfe:	2000      	movs	r0, #0
 8003c00:	f7fd fc58 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDC);
 8003c04:	20dc      	movs	r0, #220	; 0xdc
 8003c06:	f7fd fc55 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003c0a:	2000      	movs	r0, #0
 8003c0c:	f7fd fc52 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 8003c10:	20f3      	movs	r0, #243	; 0xf3
 8003c12:	f7fd fc4f 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003c16:	2000      	movs	r0, #0
 8003c18:	f7fd fc4c 	bl	80014b4 <LCD_WR_DATAX>

		LCD_WR_REG(0xE6);
 8003c1c:	20e6      	movs	r0, #230	; 0xe6
 8003c1e:	f7fd fc25 	bl	800146c <LCD_WR_REG>
		LCD_WR_DATAX(0x11);
 8003c22:	2011      	movs	r0, #17
 8003c24:	f7fd fc46 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003c28:	2000      	movs	r0, #0
 8003c2a:	f7fd fc43 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x34);
 8003c2e:	2034      	movs	r0, #52	; 0x34
 8003c30:	f7fd fc40 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003c34:	2000      	movs	r0, #0
 8003c36:	f7fd fc3d 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x56);
 8003c3a:	2056      	movs	r0, #86	; 0x56
 8003c3c:	f7fd fc3a 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003c40:	2000      	movs	r0, #0
 8003c42:	f7fd fc37 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x76);
 8003c46:	2076      	movs	r0, #118	; 0x76
 8003c48:	f7fd fc34 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003c4c:	2000      	movs	r0, #0
 8003c4e:	f7fd fc31 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x77);
 8003c52:	2077      	movs	r0, #119	; 0x77
 8003c54:	f7fd fc2e 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003c58:	2000      	movs	r0, #0
 8003c5a:	f7fd fc2b 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 8003c5e:	2066      	movs	r0, #102	; 0x66
 8003c60:	f7fd fc28 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003c64:	2000      	movs	r0, #0
 8003c66:	f7fd fc25 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 8003c6a:	2088      	movs	r0, #136	; 0x88
 8003c6c:	f7fd fc22 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003c70:	2000      	movs	r0, #0
 8003c72:	f7fd fc1f 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 8003c76:	2099      	movs	r0, #153	; 0x99
 8003c78:	f7fd fc1c 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003c7c:	2000      	movs	r0, #0
 8003c7e:	f7fd fc19 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBB);
 8003c82:	20bb      	movs	r0, #187	; 0xbb
 8003c84:	f7fd fc16 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003c88:	2000      	movs	r0, #0
 8003c8a:	f7fd fc13 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 8003c8e:	2099      	movs	r0, #153	; 0x99
 8003c90:	f7fd fc10 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003c94:	2000      	movs	r0, #0
 8003c96:	f7fd fc0d 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 8003c9a:	2066      	movs	r0, #102	; 0x66
 8003c9c:	f7fd fc0a 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003ca0:	2000      	movs	r0, #0
 8003ca2:	f7fd fc07 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 8003ca6:	2055      	movs	r0, #85	; 0x55
 8003ca8:	f7fd fc04 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003cac:	2000      	movs	r0, #0
 8003cae:	f7fd fc01 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 8003cb2:	2055      	movs	r0, #85	; 0x55
 8003cb4:	f7fd fbfe 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003cb8:	2000      	movs	r0, #0
 8003cba:	f7fd fbfb 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x45);
 8003cbe:	2045      	movs	r0, #69	; 0x45
 8003cc0:	f7fd fbf8 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003cc4:	2000      	movs	r0, #0
 8003cc6:	f7fd fbf5 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x43);
 8003cca:	2043      	movs	r0, #67	; 0x43
 8003ccc:	f7fd fbf2 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003cd0:	2000      	movs	r0, #0
 8003cd2:	f7fd fbef 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 8003cd6:	2044      	movs	r0, #68	; 0x44
 8003cd8:	f7fd fbec 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003cdc:	2000      	movs	r0, #0
 8003cde:	f7fd fbe9 	bl	80014b4 <LCD_WR_DATAX>

		LCD_WR_REG(0xE7);
 8003ce2:	20e7      	movs	r0, #231	; 0xe7
 8003ce4:	f7fd fbc2 	bl	800146c <LCD_WR_REG>
		LCD_WR_DATAX(0x32);
 8003ce8:	2032      	movs	r0, #50	; 0x32
 8003cea:	f7fd fbe3 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003cee:	2000      	movs	r0, #0
 8003cf0:	f7fd fbe0 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 8003cf4:	2055      	movs	r0, #85	; 0x55
 8003cf6:	f7fd fbdd 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003cfa:	2000      	movs	r0, #0
 8003cfc:	f7fd fbda 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x76);
 8003d00:	2076      	movs	r0, #118	; 0x76
 8003d02:	f7fd fbd7 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003d06:	2000      	movs	r0, #0
 8003d08:	f7fd fbd4 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 8003d0c:	2066      	movs	r0, #102	; 0x66
 8003d0e:	f7fd fbd1 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003d12:	2000      	movs	r0, #0
 8003d14:	f7fd fbce 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x67);
 8003d18:	2067      	movs	r0, #103	; 0x67
 8003d1a:	f7fd fbcb 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003d1e:	2000      	movs	r0, #0
 8003d20:	f7fd fbc8 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x67);
 8003d24:	2067      	movs	r0, #103	; 0x67
 8003d26:	f7fd fbc5 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003d2a:	2000      	movs	r0, #0
 8003d2c:	f7fd fbc2 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x87);
 8003d30:	2087      	movs	r0, #135	; 0x87
 8003d32:	f7fd fbbf 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003d36:	2000      	movs	r0, #0
 8003d38:	f7fd fbbc 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 8003d3c:	2099      	movs	r0, #153	; 0x99
 8003d3e:	f7fd fbb9 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003d42:	2000      	movs	r0, #0
 8003d44:	f7fd fbb6 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBB);
 8003d48:	20bb      	movs	r0, #187	; 0xbb
 8003d4a:	f7fd fbb3 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003d4e:	2000      	movs	r0, #0
 8003d50:	f7fd fbb0 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 8003d54:	2099      	movs	r0, #153	; 0x99
 8003d56:	f7fd fbad 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003d5a:	2000      	movs	r0, #0
 8003d5c:	f7fd fbaa 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x77);
 8003d60:	2077      	movs	r0, #119	; 0x77
 8003d62:	f7fd fba7 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003d66:	2000      	movs	r0, #0
 8003d68:	f7fd fba4 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 8003d6c:	2044      	movs	r0, #68	; 0x44
 8003d6e:	f7fd fba1 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003d72:	2000      	movs	r0, #0
 8003d74:	f7fd fb9e 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x56);
 8003d78:	2056      	movs	r0, #86	; 0x56
 8003d7a:	f7fd fb9b 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003d7e:	2000      	movs	r0, #0
 8003d80:	f7fd fb98 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x23);
 8003d84:	2023      	movs	r0, #35	; 0x23
 8003d86:	f7fd fb95 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003d8a:	2000      	movs	r0, #0
 8003d8c:	f7fd fb92 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x33);
 8003d90:	2033      	movs	r0, #51	; 0x33
 8003d92:	f7fd fb8f 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003d96:	2000      	movs	r0, #0
 8003d98:	f7fd fb8c 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x45);
 8003d9c:	2045      	movs	r0, #69	; 0x45
 8003d9e:	f7fd fb89 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003da2:	2000      	movs	r0, #0
 8003da4:	f7fd fb86 	bl	80014b4 <LCD_WR_DATAX>

		LCD_WR_REG(0xE8);
 8003da8:	20e8      	movs	r0, #232	; 0xe8
 8003daa:	f7fd fb5f 	bl	800146c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8003dae:	2000      	movs	r0, #0
 8003db0:	f7fd fb80 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003db4:	2000      	movs	r0, #0
 8003db6:	f7fd fb7d 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 8003dba:	2099      	movs	r0, #153	; 0x99
 8003dbc:	f7fd fb7a 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003dc0:	2000      	movs	r0, #0
 8003dc2:	f7fd fb77 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x87);
 8003dc6:	2087      	movs	r0, #135	; 0x87
 8003dc8:	f7fd fb74 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003dcc:	2000      	movs	r0, #0
 8003dce:	f7fd fb71 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 8003dd2:	2088      	movs	r0, #136	; 0x88
 8003dd4:	f7fd fb6e 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003dd8:	2000      	movs	r0, #0
 8003dda:	f7fd fb6b 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x77);
 8003dde:	2077      	movs	r0, #119	; 0x77
 8003de0:	f7fd fb68 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003de4:	2000      	movs	r0, #0
 8003de6:	f7fd fb65 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 8003dea:	2066      	movs	r0, #102	; 0x66
 8003dec:	f7fd fb62 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003df0:	2000      	movs	r0, #0
 8003df2:	f7fd fb5f 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 8003df6:	2088      	movs	r0, #136	; 0x88
 8003df8:	f7fd fb5c 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003dfc:	2000      	movs	r0, #0
 8003dfe:	f7fd fb59 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xAA);
 8003e02:	20aa      	movs	r0, #170	; 0xaa
 8003e04:	f7fd fb56 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003e08:	2000      	movs	r0, #0
 8003e0a:	f7fd fb53 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBB);
 8003e0e:	20bb      	movs	r0, #187	; 0xbb
 8003e10:	f7fd fb50 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003e14:	2000      	movs	r0, #0
 8003e16:	f7fd fb4d 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 8003e1a:	2099      	movs	r0, #153	; 0x99
 8003e1c:	f7fd fb4a 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003e20:	2000      	movs	r0, #0
 8003e22:	f7fd fb47 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 8003e26:	2066      	movs	r0, #102	; 0x66
 8003e28:	f7fd fb44 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003e2c:	2000      	movs	r0, #0
 8003e2e:	f7fd fb41 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 8003e32:	2055      	movs	r0, #85	; 0x55
 8003e34:	f7fd fb3e 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003e38:	2000      	movs	r0, #0
 8003e3a:	f7fd fb3b 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 8003e3e:	2055      	movs	r0, #85	; 0x55
 8003e40:	f7fd fb38 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003e44:	2000      	movs	r0, #0
 8003e46:	f7fd fb35 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 8003e4a:	2044      	movs	r0, #68	; 0x44
 8003e4c:	f7fd fb32 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003e50:	2000      	movs	r0, #0
 8003e52:	f7fd fb2f 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 8003e56:	2044      	movs	r0, #68	; 0x44
 8003e58:	f7fd fb2c 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003e5c:	2000      	movs	r0, #0
 8003e5e:	f7fd fb29 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 8003e62:	2055      	movs	r0, #85	; 0x55
 8003e64:	f7fd fb26 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003e68:	2000      	movs	r0, #0
 8003e6a:	f7fd fb23 	bl	80014b4 <LCD_WR_DATAX>

		LCD_WR_REG(0xE9);
 8003e6e:	20e9      	movs	r0, #233	; 0xe9
 8003e70:	f7fd fafc 	bl	800146c <LCD_WR_REG>
		LCD_WR_DATAX(0xAA);
 8003e74:	20aa      	movs	r0, #170	; 0xaa
 8003e76:	f7fd fb1d 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003e7a:	2000      	movs	r0, #0
 8003e7c:	f7fd fb1a 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003e80:	2000      	movs	r0, #0
 8003e82:	f7fd fb17 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003e86:	2000      	movs	r0, #0
 8003e88:	f7fd fb14 	bl	80014b4 <LCD_WR_DATAX>

		LCD_WR_REG(0x00);
 8003e8c:	2000      	movs	r0, #0
 8003e8e:	f7fd faed 	bl	800146c <LCD_WR_REG>
		LCD_WR_DATAX(0xAA);
 8003e92:	20aa      	movs	r0, #170	; 0xaa
 8003e94:	f7fd fb0e 	bl	80014b4 <LCD_WR_DATAX>

		LCD_WR_REG(0xCF);
 8003e98:	20cf      	movs	r0, #207	; 0xcf
 8003e9a:	f7fd fae7 	bl	800146c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8003e9e:	2000      	movs	r0, #0
 8003ea0:	f7fd fb08 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003ea4:	2000      	movs	r0, #0
 8003ea6:	f7fd fb05 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003eaa:	2000      	movs	r0, #0
 8003eac:	f7fd fb02 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003eb0:	2000      	movs	r0, #0
 8003eb2:	f7fd faff 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003eb6:	2000      	movs	r0, #0
 8003eb8:	f7fd fafc 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003ebc:	2000      	movs	r0, #0
 8003ebe:	f7fd faf9 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003ec2:	2000      	movs	r0, #0
 8003ec4:	f7fd faf6 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003ec8:	2000      	movs	r0, #0
 8003eca:	f7fd faf3 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003ece:	2000      	movs	r0, #0
 8003ed0:	f7fd faf0 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003ed4:	2000      	movs	r0, #0
 8003ed6:	f7fd faed 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003eda:	2000      	movs	r0, #0
 8003edc:	f7fd faea 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003ee0:	2000      	movs	r0, #0
 8003ee2:	f7fd fae7 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003ee6:	2000      	movs	r0, #0
 8003ee8:	f7fd fae4 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003eec:	2000      	movs	r0, #0
 8003eee:	f7fd fae1 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003ef2:	2000      	movs	r0, #0
 8003ef4:	f7fd fade 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003ef8:	2000      	movs	r0, #0
 8003efa:	f7fd fadb 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003efe:	2000      	movs	r0, #0
 8003f00:	f7fd fad8 	bl	80014b4 <LCD_WR_DATAX>

		LCD_WR_REG(0xF0);
 8003f04:	20f0      	movs	r0, #240	; 0xf0
 8003f06:	f7fd fab1 	bl	800146c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8003f0a:	2000      	movs	r0, #0
 8003f0c:	f7fd fad2 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x50);
 8003f10:	2050      	movs	r0, #80	; 0x50
 8003f12:	f7fd facf 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003f16:	2000      	movs	r0, #0
 8003f18:	f7fd facc 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003f1c:	2000      	movs	r0, #0
 8003f1e:	f7fd fac9 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003f22:	2000      	movs	r0, #0
 8003f24:	f7fd fac6 	bl	80014b4 <LCD_WR_DATAX>

		LCD_WR_REG(0xF3);
 8003f28:	20f3      	movs	r0, #243	; 0xf3
 8003f2a:	f7fd fa9f 	bl	800146c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8003f2e:	2000      	movs	r0, #0
 8003f30:	f7fd fac0 	bl	80014b4 <LCD_WR_DATAX>

		LCD_WR_REG(0xF9);
 8003f34:	20f9      	movs	r0, #249	; 0xf9
 8003f36:	f7fd fa99 	bl	800146c <LCD_WR_REG>
		LCD_WR_DATAX(0x06);
 8003f3a:	2006      	movs	r0, #6
 8003f3c:	f7fd faba 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x10);
 8003f40:	2010      	movs	r0, #16
 8003f42:	f7fd fab7 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x29);
 8003f46:	2029      	movs	r0, #41	; 0x29
 8003f48:	f7fd fab4 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003f4c:	2000      	movs	r0, #0
 8003f4e:	f7fd fab1 	bl	80014b4 <LCD_WR_DATAX>

		LCD_WR_REG(0x3A);
 8003f52:	203a      	movs	r0, #58	; 0x3a
 8003f54:	f7fd fa8a 	bl	800146c <LCD_WR_REG>
		LCD_WR_DATAX(0x55);	//66
 8003f58:	2055      	movs	r0, #85	; 0x55
 8003f5a:	f7fd faab 	bl	80014b4 <LCD_WR_DATAX>

		LCD_WR_REG(0x11);
 8003f5e:	2011      	movs	r0, #17
 8003f60:	f7fd fa84 	bl	800146c <LCD_WR_REG>
		HAL_Delay(100);
 8003f64:	2064      	movs	r0, #100	; 0x64
 8003f66:	f004 fabf 	bl	80084e8 <HAL_Delay>
		LCD_WR_REG(0x29);
 8003f6a:	2029      	movs	r0, #41	; 0x29
 8003f6c:	f7fd fa7e 	bl	800146c <LCD_WR_REG>
		LCD_WR_REG(0x35);
 8003f70:	2035      	movs	r0, #53	; 0x35
 8003f72:	f7fd fa7b 	bl	800146c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8003f76:	2000      	movs	r0, #0
 8003f78:	f7fd fa9c 	bl	80014b4 <LCD_WR_DATAX>

		LCD_WR_REG(0x51);
 8003f7c:	2051      	movs	r0, #81	; 0x51
 8003f7e:	f7fd fa75 	bl	800146c <LCD_WR_REG>
		LCD_WR_DATAX(0xFF);
 8003f82:	20ff      	movs	r0, #255	; 0xff
 8003f84:	f7fd fa96 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_REG(0x53);
 8003f88:	2053      	movs	r0, #83	; 0x53
 8003f8a:	f7fd fa6f 	bl	800146c <LCD_WR_REG>
		LCD_WR_DATAX(0x2C);
 8003f8e:	202c      	movs	r0, #44	; 0x2c
 8003f90:	f7fd fa90 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_REG(0x55);
 8003f94:	2055      	movs	r0, #85	; 0x55
 8003f96:	f7fd fa69 	bl	800146c <LCD_WR_REG>
		LCD_WR_DATAX(0x82);
 8003f9a:	2082      	movs	r0, #130	; 0x82
 8003f9c:	f7fd fa8a 	bl	80014b4 <LCD_WR_DATAX>
		LCD_WR_REG(0x2c);
 8003fa0:	202c      	movs	r0, #44	; 0x2c
 8003fa2:	f7fd fa63 	bl	800146c <LCD_WR_REG>
 8003fa6:	f002 bca1 	b.w	80068ec <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x5510) {
 8003faa:	4b04      	ldr	r3, [pc, #16]	; (8003fbc <LCD_Init+0x1504>)
 8003fac:	889b      	ldrh	r3, [r3, #4]
 8003fae:	f245 5210 	movw	r2, #21776	; 0x5510
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	f040 8782 	bne.w	8004ebc <LCD_Init+0x2404>
 8003fb8:	e002      	b.n	8003fc0 <LCD_Init+0x1508>
 8003fba:	bf00      	nop
 8003fbc:	200000bc 	.word	0x200000bc
		LCD_WriteReg(0xF000, 0x55);
 8003fc0:	2155      	movs	r1, #85	; 0x55
 8003fc2:	f44f 4070 	mov.w	r0, #61440	; 0xf000
 8003fc6:	f7fd fadd 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xF001, 0xAA);
 8003fca:	21aa      	movs	r1, #170	; 0xaa
 8003fcc:	f24f 0001 	movw	r0, #61441	; 0xf001
 8003fd0:	f7fd fad8 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xF002, 0x52);
 8003fd4:	2152      	movs	r1, #82	; 0x52
 8003fd6:	f24f 0002 	movw	r0, #61442	; 0xf002
 8003fda:	f7fd fad3 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xF003, 0x08);
 8003fde:	2108      	movs	r1, #8
 8003fe0:	f24f 0003 	movw	r0, #61443	; 0xf003
 8003fe4:	f7fd face 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xF004, 0x01);
 8003fe8:	2101      	movs	r1, #1
 8003fea:	f24f 0004 	movw	r0, #61444	; 0xf004
 8003fee:	f7fd fac9 	bl	8001584 <LCD_WriteReg>
		//AVDD Set AVDD 5.2V
		LCD_WriteReg(0xB000, 0x0D);
 8003ff2:	210d      	movs	r1, #13
 8003ff4:	f44f 4030 	mov.w	r0, #45056	; 0xb000
 8003ff8:	f7fd fac4 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xB001, 0x0D);
 8003ffc:	210d      	movs	r1, #13
 8003ffe:	f24b 0001 	movw	r0, #45057	; 0xb001
 8004002:	f7fd fabf 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xB002, 0x0D);
 8004006:	210d      	movs	r1, #13
 8004008:	f24b 0002 	movw	r0, #45058	; 0xb002
 800400c:	f7fd faba 	bl	8001584 <LCD_WriteReg>
		//AVDD ratio
		LCD_WriteReg(0xB600, 0x34);
 8004010:	2134      	movs	r1, #52	; 0x34
 8004012:	f44f 4036 	mov.w	r0, #46592	; 0xb600
 8004016:	f7fd fab5 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xB601, 0x34);
 800401a:	2134      	movs	r1, #52	; 0x34
 800401c:	f24b 6001 	movw	r0, #46593	; 0xb601
 8004020:	f7fd fab0 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xB602, 0x34);
 8004024:	2134      	movs	r1, #52	; 0x34
 8004026:	f24b 6002 	movw	r0, #46594	; 0xb602
 800402a:	f7fd faab 	bl	8001584 <LCD_WriteReg>
		//AVEE -5.2V
		LCD_WriteReg(0xB100, 0x0D);
 800402e:	210d      	movs	r1, #13
 8004030:	f44f 4031 	mov.w	r0, #45312	; 0xb100
 8004034:	f7fd faa6 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xB101, 0x0D);
 8004038:	210d      	movs	r1, #13
 800403a:	f24b 1001 	movw	r0, #45313	; 0xb101
 800403e:	f7fd faa1 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xB102, 0x0D);
 8004042:	210d      	movs	r1, #13
 8004044:	f24b 1002 	movw	r0, #45314	; 0xb102
 8004048:	f7fd fa9c 	bl	8001584 <LCD_WriteReg>
		//AVEE ratio
		LCD_WriteReg(0xB700, 0x34);
 800404c:	2134      	movs	r1, #52	; 0x34
 800404e:	f44f 4037 	mov.w	r0, #46848	; 0xb700
 8004052:	f7fd fa97 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xB701, 0x34);
 8004056:	2134      	movs	r1, #52	; 0x34
 8004058:	f24b 7001 	movw	r0, #46849	; 0xb701
 800405c:	f7fd fa92 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xB702, 0x34);
 8004060:	2134      	movs	r1, #52	; 0x34
 8004062:	f24b 7002 	movw	r0, #46850	; 0xb702
 8004066:	f7fd fa8d 	bl	8001584 <LCD_WriteReg>
		//VCL -2.5V
		LCD_WriteReg(0xB200, 0x00);
 800406a:	2100      	movs	r1, #0
 800406c:	f44f 4032 	mov.w	r0, #45568	; 0xb200
 8004070:	f7fd fa88 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xB201, 0x00);
 8004074:	2100      	movs	r1, #0
 8004076:	f24b 2001 	movw	r0, #45569	; 0xb201
 800407a:	f7fd fa83 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xB202, 0x00);
 800407e:	2100      	movs	r1, #0
 8004080:	f24b 2002 	movw	r0, #45570	; 0xb202
 8004084:	f7fd fa7e 	bl	8001584 <LCD_WriteReg>
		//VCL ratio
		LCD_WriteReg(0xB800, 0x24);
 8004088:	2124      	movs	r1, #36	; 0x24
 800408a:	f44f 4038 	mov.w	r0, #47104	; 0xb800
 800408e:	f7fd fa79 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xB801, 0x24);
 8004092:	2124      	movs	r1, #36	; 0x24
 8004094:	f64b 0001 	movw	r0, #47105	; 0xb801
 8004098:	f7fd fa74 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xB802, 0x24);
 800409c:	2124      	movs	r1, #36	; 0x24
 800409e:	f64b 0002 	movw	r0, #47106	; 0xb802
 80040a2:	f7fd fa6f 	bl	8001584 <LCD_WriteReg>
		//VGH 15V (Free pump)
		LCD_WriteReg(0xBF00, 0x01);
 80040a6:	2101      	movs	r1, #1
 80040a8:	f44f 403f 	mov.w	r0, #48896	; 0xbf00
 80040ac:	f7fd fa6a 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xB300, 0x0F);
 80040b0:	210f      	movs	r1, #15
 80040b2:	f44f 4033 	mov.w	r0, #45824	; 0xb300
 80040b6:	f7fd fa65 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xB301, 0x0F);
 80040ba:	210f      	movs	r1, #15
 80040bc:	f24b 3001 	movw	r0, #45825	; 0xb301
 80040c0:	f7fd fa60 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xB302, 0x0F);
 80040c4:	210f      	movs	r1, #15
 80040c6:	f24b 3002 	movw	r0, #45826	; 0xb302
 80040ca:	f7fd fa5b 	bl	8001584 <LCD_WriteReg>
		//VGH ratio
		LCD_WriteReg(0xB900, 0x34);
 80040ce:	2134      	movs	r1, #52	; 0x34
 80040d0:	f44f 4039 	mov.w	r0, #47360	; 0xb900
 80040d4:	f7fd fa56 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xB901, 0x34);
 80040d8:	2134      	movs	r1, #52	; 0x34
 80040da:	f64b 1001 	movw	r0, #47361	; 0xb901
 80040de:	f7fd fa51 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xB902, 0x34);
 80040e2:	2134      	movs	r1, #52	; 0x34
 80040e4:	f64b 1002 	movw	r0, #47362	; 0xb902
 80040e8:	f7fd fa4c 	bl	8001584 <LCD_WriteReg>
		//VGL_REG -10V
		LCD_WriteReg(0xB500, 0x08);
 80040ec:	2108      	movs	r1, #8
 80040ee:	f44f 4035 	mov.w	r0, #46336	; 0xb500
 80040f2:	f7fd fa47 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xB501, 0x08);
 80040f6:	2108      	movs	r1, #8
 80040f8:	f24b 5001 	movw	r0, #46337	; 0xb501
 80040fc:	f7fd fa42 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xB502, 0x08);
 8004100:	2108      	movs	r1, #8
 8004102:	f24b 5002 	movw	r0, #46338	; 0xb502
 8004106:	f7fd fa3d 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xC200, 0x03);
 800410a:	2103      	movs	r1, #3
 800410c:	f44f 4042 	mov.w	r0, #49664	; 0xc200
 8004110:	f7fd fa38 	bl	8001584 <LCD_WriteReg>
		//VGLX ratio
		LCD_WriteReg(0xBA00, 0x24);
 8004114:	2124      	movs	r1, #36	; 0x24
 8004116:	f44f 403a 	mov.w	r0, #47616	; 0xba00
 800411a:	f7fd fa33 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xBA01, 0x24);
 800411e:	2124      	movs	r1, #36	; 0x24
 8004120:	f64b 2001 	movw	r0, #47617	; 0xba01
 8004124:	f7fd fa2e 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xBA02, 0x24);
 8004128:	2124      	movs	r1, #36	; 0x24
 800412a:	f64b 2002 	movw	r0, #47618	; 0xba02
 800412e:	f7fd fa29 	bl	8001584 <LCD_WriteReg>
		//VGMP/VGSP 4.5V/0V
		LCD_WriteReg(0xBC00, 0x00);
 8004132:	2100      	movs	r1, #0
 8004134:	f44f 403c 	mov.w	r0, #48128	; 0xbc00
 8004138:	f7fd fa24 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xBC01, 0x78);
 800413c:	2178      	movs	r1, #120	; 0x78
 800413e:	f64b 4001 	movw	r0, #48129	; 0xbc01
 8004142:	f7fd fa1f 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xBC02, 0x00);
 8004146:	2100      	movs	r1, #0
 8004148:	f64b 4002 	movw	r0, #48130	; 0xbc02
 800414c:	f7fd fa1a 	bl	8001584 <LCD_WriteReg>
		//VGMN/VGSN -4.5V/0V
		LCD_WriteReg(0xBD00, 0x00);
 8004150:	2100      	movs	r1, #0
 8004152:	f44f 403d 	mov.w	r0, #48384	; 0xbd00
 8004156:	f7fd fa15 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xBD01, 0x78);
 800415a:	2178      	movs	r1, #120	; 0x78
 800415c:	f64b 5001 	movw	r0, #48385	; 0xbd01
 8004160:	f7fd fa10 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xBD02, 0x00);
 8004164:	2100      	movs	r1, #0
 8004166:	f64b 5002 	movw	r0, #48386	; 0xbd02
 800416a:	f7fd fa0b 	bl	8001584 <LCD_WriteReg>
		//VCOM
		LCD_WriteReg(0xBE00, 0x00);
 800416e:	2100      	movs	r1, #0
 8004170:	f44f 403e 	mov.w	r0, #48640	; 0xbe00
 8004174:	f7fd fa06 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xBE01, 0x64);
 8004178:	2164      	movs	r1, #100	; 0x64
 800417a:	f64b 6001 	movw	r0, #48641	; 0xbe01
 800417e:	f7fd fa01 	bl	8001584 <LCD_WriteReg>
		//Gamma Setting
		LCD_WriteReg(0xD100, 0x00);
 8004182:	2100      	movs	r1, #0
 8004184:	f44f 4051 	mov.w	r0, #53504	; 0xd100
 8004188:	f7fd f9fc 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD101, 0x33);
 800418c:	2133      	movs	r1, #51	; 0x33
 800418e:	f24d 1001 	movw	r0, #53505	; 0xd101
 8004192:	f7fd f9f7 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD102, 0x00);
 8004196:	2100      	movs	r1, #0
 8004198:	f24d 1002 	movw	r0, #53506	; 0xd102
 800419c:	f7fd f9f2 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD103, 0x34);
 80041a0:	2134      	movs	r1, #52	; 0x34
 80041a2:	f24d 1003 	movw	r0, #53507	; 0xd103
 80041a6:	f7fd f9ed 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD104, 0x00);
 80041aa:	2100      	movs	r1, #0
 80041ac:	f24d 1004 	movw	r0, #53508	; 0xd104
 80041b0:	f7fd f9e8 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD105, 0x3A);
 80041b4:	213a      	movs	r1, #58	; 0x3a
 80041b6:	f24d 1005 	movw	r0, #53509	; 0xd105
 80041ba:	f7fd f9e3 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD106, 0x00);
 80041be:	2100      	movs	r1, #0
 80041c0:	f24d 1006 	movw	r0, #53510	; 0xd106
 80041c4:	f7fd f9de 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD107, 0x4A);
 80041c8:	214a      	movs	r1, #74	; 0x4a
 80041ca:	f24d 1007 	movw	r0, #53511	; 0xd107
 80041ce:	f7fd f9d9 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD108, 0x00);
 80041d2:	2100      	movs	r1, #0
 80041d4:	f24d 1008 	movw	r0, #53512	; 0xd108
 80041d8:	f7fd f9d4 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD109, 0x5C);
 80041dc:	215c      	movs	r1, #92	; 0x5c
 80041de:	f24d 1009 	movw	r0, #53513	; 0xd109
 80041e2:	f7fd f9cf 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD10A, 0x00);
 80041e6:	2100      	movs	r1, #0
 80041e8:	f24d 100a 	movw	r0, #53514	; 0xd10a
 80041ec:	f7fd f9ca 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD10B, 0x81);
 80041f0:	2181      	movs	r1, #129	; 0x81
 80041f2:	f24d 100b 	movw	r0, #53515	; 0xd10b
 80041f6:	f7fd f9c5 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD10C, 0x00);
 80041fa:	2100      	movs	r1, #0
 80041fc:	f24d 100c 	movw	r0, #53516	; 0xd10c
 8004200:	f7fd f9c0 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD10D, 0xA6);
 8004204:	21a6      	movs	r1, #166	; 0xa6
 8004206:	f24d 100d 	movw	r0, #53517	; 0xd10d
 800420a:	f7fd f9bb 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD10E, 0x00);
 800420e:	2100      	movs	r1, #0
 8004210:	f24d 100e 	movw	r0, #53518	; 0xd10e
 8004214:	f7fd f9b6 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD10F, 0xE5);
 8004218:	21e5      	movs	r1, #229	; 0xe5
 800421a:	f24d 100f 	movw	r0, #53519	; 0xd10f
 800421e:	f7fd f9b1 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD110, 0x01);
 8004222:	2101      	movs	r1, #1
 8004224:	f24d 1010 	movw	r0, #53520	; 0xd110
 8004228:	f7fd f9ac 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD111, 0x13);
 800422c:	2113      	movs	r1, #19
 800422e:	f24d 1011 	movw	r0, #53521	; 0xd111
 8004232:	f7fd f9a7 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD112, 0x01);
 8004236:	2101      	movs	r1, #1
 8004238:	f24d 1012 	movw	r0, #53522	; 0xd112
 800423c:	f7fd f9a2 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD113, 0x54);
 8004240:	2154      	movs	r1, #84	; 0x54
 8004242:	f24d 1013 	movw	r0, #53523	; 0xd113
 8004246:	f7fd f99d 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD114, 0x01);
 800424a:	2101      	movs	r1, #1
 800424c:	f24d 1014 	movw	r0, #53524	; 0xd114
 8004250:	f7fd f998 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD115, 0x82);
 8004254:	2182      	movs	r1, #130	; 0x82
 8004256:	f24d 1015 	movw	r0, #53525	; 0xd115
 800425a:	f7fd f993 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD116, 0x01);
 800425e:	2101      	movs	r1, #1
 8004260:	f24d 1016 	movw	r0, #53526	; 0xd116
 8004264:	f7fd f98e 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD117, 0xCA);
 8004268:	21ca      	movs	r1, #202	; 0xca
 800426a:	f24d 1017 	movw	r0, #53527	; 0xd117
 800426e:	f7fd f989 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD118, 0x02);
 8004272:	2102      	movs	r1, #2
 8004274:	f24d 1018 	movw	r0, #53528	; 0xd118
 8004278:	f7fd f984 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD119, 0x00);
 800427c:	2100      	movs	r1, #0
 800427e:	f24d 1019 	movw	r0, #53529	; 0xd119
 8004282:	f7fd f97f 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD11A, 0x02);
 8004286:	2102      	movs	r1, #2
 8004288:	f24d 101a 	movw	r0, #53530	; 0xd11a
 800428c:	f7fd f97a 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD11B, 0x01);
 8004290:	2101      	movs	r1, #1
 8004292:	f24d 101b 	movw	r0, #53531	; 0xd11b
 8004296:	f7fd f975 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD11C, 0x02);
 800429a:	2102      	movs	r1, #2
 800429c:	f24d 101c 	movw	r0, #53532	; 0xd11c
 80042a0:	f7fd f970 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD11D, 0x34);
 80042a4:	2134      	movs	r1, #52	; 0x34
 80042a6:	f24d 101d 	movw	r0, #53533	; 0xd11d
 80042aa:	f7fd f96b 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD11E, 0x02);
 80042ae:	2102      	movs	r1, #2
 80042b0:	f24d 101e 	movw	r0, #53534	; 0xd11e
 80042b4:	f7fd f966 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD11F, 0x67);
 80042b8:	2167      	movs	r1, #103	; 0x67
 80042ba:	f24d 101f 	movw	r0, #53535	; 0xd11f
 80042be:	f7fd f961 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD120, 0x02);
 80042c2:	2102      	movs	r1, #2
 80042c4:	f24d 1020 	movw	r0, #53536	; 0xd120
 80042c8:	f7fd f95c 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD121, 0x84);
 80042cc:	2184      	movs	r1, #132	; 0x84
 80042ce:	f24d 1021 	movw	r0, #53537	; 0xd121
 80042d2:	f7fd f957 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD122, 0x02);
 80042d6:	2102      	movs	r1, #2
 80042d8:	f24d 1022 	movw	r0, #53538	; 0xd122
 80042dc:	f7fd f952 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD123, 0xA4);
 80042e0:	21a4      	movs	r1, #164	; 0xa4
 80042e2:	f24d 1023 	movw	r0, #53539	; 0xd123
 80042e6:	f7fd f94d 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD124, 0x02);
 80042ea:	2102      	movs	r1, #2
 80042ec:	f24d 1024 	movw	r0, #53540	; 0xd124
 80042f0:	f7fd f948 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD125, 0xB7);
 80042f4:	21b7      	movs	r1, #183	; 0xb7
 80042f6:	f24d 1025 	movw	r0, #53541	; 0xd125
 80042fa:	f7fd f943 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD126, 0x02);
 80042fe:	2102      	movs	r1, #2
 8004300:	f24d 1026 	movw	r0, #53542	; 0xd126
 8004304:	f7fd f93e 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD127, 0xCF);
 8004308:	21cf      	movs	r1, #207	; 0xcf
 800430a:	f24d 1027 	movw	r0, #53543	; 0xd127
 800430e:	f7fd f939 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD128, 0x02);
 8004312:	2102      	movs	r1, #2
 8004314:	f24d 1028 	movw	r0, #53544	; 0xd128
 8004318:	f7fd f934 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD129, 0xDE);
 800431c:	21de      	movs	r1, #222	; 0xde
 800431e:	f24d 1029 	movw	r0, #53545	; 0xd129
 8004322:	f7fd f92f 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD12A, 0x02);
 8004326:	2102      	movs	r1, #2
 8004328:	f24d 102a 	movw	r0, #53546	; 0xd12a
 800432c:	f7fd f92a 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD12B, 0xF2);
 8004330:	21f2      	movs	r1, #242	; 0xf2
 8004332:	f24d 102b 	movw	r0, #53547	; 0xd12b
 8004336:	f7fd f925 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD12C, 0x02);
 800433a:	2102      	movs	r1, #2
 800433c:	f24d 102c 	movw	r0, #53548	; 0xd12c
 8004340:	f7fd f920 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD12D, 0xFE);
 8004344:	21fe      	movs	r1, #254	; 0xfe
 8004346:	f24d 102d 	movw	r0, #53549	; 0xd12d
 800434a:	f7fd f91b 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD12E, 0x03);
 800434e:	2103      	movs	r1, #3
 8004350:	f24d 102e 	movw	r0, #53550	; 0xd12e
 8004354:	f7fd f916 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD12F, 0x10);
 8004358:	2110      	movs	r1, #16
 800435a:	f24d 102f 	movw	r0, #53551	; 0xd12f
 800435e:	f7fd f911 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD130, 0x03);
 8004362:	2103      	movs	r1, #3
 8004364:	f24d 1030 	movw	r0, #53552	; 0xd130
 8004368:	f7fd f90c 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD131, 0x33);
 800436c:	2133      	movs	r1, #51	; 0x33
 800436e:	f24d 1031 	movw	r0, #53553	; 0xd131
 8004372:	f7fd f907 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD132, 0x03);
 8004376:	2103      	movs	r1, #3
 8004378:	f24d 1032 	movw	r0, #53554	; 0xd132
 800437c:	f7fd f902 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD133, 0x6D);
 8004380:	216d      	movs	r1, #109	; 0x6d
 8004382:	f24d 1033 	movw	r0, #53555	; 0xd133
 8004386:	f7fd f8fd 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD200, 0x00);
 800438a:	2100      	movs	r1, #0
 800438c:	f44f 4052 	mov.w	r0, #53760	; 0xd200
 8004390:	f7fd f8f8 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD201, 0x33);
 8004394:	2133      	movs	r1, #51	; 0x33
 8004396:	f24d 2001 	movw	r0, #53761	; 0xd201
 800439a:	f7fd f8f3 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD202, 0x00);
 800439e:	2100      	movs	r1, #0
 80043a0:	f24d 2002 	movw	r0, #53762	; 0xd202
 80043a4:	f7fd f8ee 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD203, 0x34);
 80043a8:	2134      	movs	r1, #52	; 0x34
 80043aa:	f24d 2003 	movw	r0, #53763	; 0xd203
 80043ae:	f7fd f8e9 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD204, 0x00);
 80043b2:	2100      	movs	r1, #0
 80043b4:	f24d 2004 	movw	r0, #53764	; 0xd204
 80043b8:	f7fd f8e4 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD205, 0x3A);
 80043bc:	213a      	movs	r1, #58	; 0x3a
 80043be:	f24d 2005 	movw	r0, #53765	; 0xd205
 80043c2:	f7fd f8df 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD206, 0x00);
 80043c6:	2100      	movs	r1, #0
 80043c8:	f24d 2006 	movw	r0, #53766	; 0xd206
 80043cc:	f7fd f8da 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD207, 0x4A);
 80043d0:	214a      	movs	r1, #74	; 0x4a
 80043d2:	f24d 2007 	movw	r0, #53767	; 0xd207
 80043d6:	f7fd f8d5 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD208, 0x00);
 80043da:	2100      	movs	r1, #0
 80043dc:	f24d 2008 	movw	r0, #53768	; 0xd208
 80043e0:	f7fd f8d0 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD209, 0x5C);
 80043e4:	215c      	movs	r1, #92	; 0x5c
 80043e6:	f24d 2009 	movw	r0, #53769	; 0xd209
 80043ea:	f7fd f8cb 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD20A, 0x00);
 80043ee:	2100      	movs	r1, #0
 80043f0:	f24d 200a 	movw	r0, #53770	; 0xd20a
 80043f4:	f7fd f8c6 	bl	8001584 <LCD_WriteReg>

		LCD_WriteReg(0xD20B, 0x81);
 80043f8:	2181      	movs	r1, #129	; 0x81
 80043fa:	f24d 200b 	movw	r0, #53771	; 0xd20b
 80043fe:	f7fd f8c1 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD20C, 0x00);
 8004402:	2100      	movs	r1, #0
 8004404:	f24d 200c 	movw	r0, #53772	; 0xd20c
 8004408:	f7fd f8bc 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD20D, 0xA6);
 800440c:	21a6      	movs	r1, #166	; 0xa6
 800440e:	f24d 200d 	movw	r0, #53773	; 0xd20d
 8004412:	f7fd f8b7 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD20E, 0x00);
 8004416:	2100      	movs	r1, #0
 8004418:	f24d 200e 	movw	r0, #53774	; 0xd20e
 800441c:	f7fd f8b2 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD20F, 0xE5);
 8004420:	21e5      	movs	r1, #229	; 0xe5
 8004422:	f24d 200f 	movw	r0, #53775	; 0xd20f
 8004426:	f7fd f8ad 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD210, 0x01);
 800442a:	2101      	movs	r1, #1
 800442c:	f24d 2010 	movw	r0, #53776	; 0xd210
 8004430:	f7fd f8a8 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD211, 0x13);
 8004434:	2113      	movs	r1, #19
 8004436:	f24d 2011 	movw	r0, #53777	; 0xd211
 800443a:	f7fd f8a3 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD212, 0x01);
 800443e:	2101      	movs	r1, #1
 8004440:	f24d 2012 	movw	r0, #53778	; 0xd212
 8004444:	f7fd f89e 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD213, 0x54);
 8004448:	2154      	movs	r1, #84	; 0x54
 800444a:	f24d 2013 	movw	r0, #53779	; 0xd213
 800444e:	f7fd f899 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD214, 0x01);
 8004452:	2101      	movs	r1, #1
 8004454:	f24d 2014 	movw	r0, #53780	; 0xd214
 8004458:	f7fd f894 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD215, 0x82);
 800445c:	2182      	movs	r1, #130	; 0x82
 800445e:	f24d 2015 	movw	r0, #53781	; 0xd215
 8004462:	f7fd f88f 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD216, 0x01);
 8004466:	2101      	movs	r1, #1
 8004468:	f24d 2016 	movw	r0, #53782	; 0xd216
 800446c:	f7fd f88a 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD217, 0xCA);
 8004470:	21ca      	movs	r1, #202	; 0xca
 8004472:	f24d 2017 	movw	r0, #53783	; 0xd217
 8004476:	f7fd f885 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD218, 0x02);
 800447a:	2102      	movs	r1, #2
 800447c:	f24d 2018 	movw	r0, #53784	; 0xd218
 8004480:	f7fd f880 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD219, 0x00);
 8004484:	2100      	movs	r1, #0
 8004486:	f24d 2019 	movw	r0, #53785	; 0xd219
 800448a:	f7fd f87b 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD21A, 0x02);
 800448e:	2102      	movs	r1, #2
 8004490:	f24d 201a 	movw	r0, #53786	; 0xd21a
 8004494:	f7fd f876 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD21B, 0x01);
 8004498:	2101      	movs	r1, #1
 800449a:	f24d 201b 	movw	r0, #53787	; 0xd21b
 800449e:	f7fd f871 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD21C, 0x02);
 80044a2:	2102      	movs	r1, #2
 80044a4:	f24d 201c 	movw	r0, #53788	; 0xd21c
 80044a8:	f7fd f86c 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD21D, 0x34);
 80044ac:	2134      	movs	r1, #52	; 0x34
 80044ae:	f24d 201d 	movw	r0, #53789	; 0xd21d
 80044b2:	f7fd f867 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD21E, 0x02);
 80044b6:	2102      	movs	r1, #2
 80044b8:	f24d 201e 	movw	r0, #53790	; 0xd21e
 80044bc:	f7fd f862 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD21F, 0x67);
 80044c0:	2167      	movs	r1, #103	; 0x67
 80044c2:	f24d 201f 	movw	r0, #53791	; 0xd21f
 80044c6:	f7fd f85d 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD220, 0x02);
 80044ca:	2102      	movs	r1, #2
 80044cc:	f24d 2020 	movw	r0, #53792	; 0xd220
 80044d0:	f7fd f858 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD221, 0x84);
 80044d4:	2184      	movs	r1, #132	; 0x84
 80044d6:	f24d 2021 	movw	r0, #53793	; 0xd221
 80044da:	f7fd f853 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD222, 0x02);
 80044de:	2102      	movs	r1, #2
 80044e0:	f24d 2022 	movw	r0, #53794	; 0xd222
 80044e4:	f7fd f84e 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD223, 0xA4);
 80044e8:	21a4      	movs	r1, #164	; 0xa4
 80044ea:	f24d 2023 	movw	r0, #53795	; 0xd223
 80044ee:	f7fd f849 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD224, 0x02);
 80044f2:	2102      	movs	r1, #2
 80044f4:	f24d 2024 	movw	r0, #53796	; 0xd224
 80044f8:	f7fd f844 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD225, 0xB7);
 80044fc:	21b7      	movs	r1, #183	; 0xb7
 80044fe:	f24d 2025 	movw	r0, #53797	; 0xd225
 8004502:	f7fd f83f 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD226, 0x02);
 8004506:	2102      	movs	r1, #2
 8004508:	f24d 2026 	movw	r0, #53798	; 0xd226
 800450c:	f7fd f83a 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD227, 0xCF);
 8004510:	21cf      	movs	r1, #207	; 0xcf
 8004512:	f24d 2027 	movw	r0, #53799	; 0xd227
 8004516:	f7fd f835 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD228, 0x02);
 800451a:	2102      	movs	r1, #2
 800451c:	f24d 2028 	movw	r0, #53800	; 0xd228
 8004520:	f7fd f830 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD229, 0xDE);
 8004524:	21de      	movs	r1, #222	; 0xde
 8004526:	f24d 2029 	movw	r0, #53801	; 0xd229
 800452a:	f7fd f82b 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD22A, 0x02);
 800452e:	2102      	movs	r1, #2
 8004530:	f24d 202a 	movw	r0, #53802	; 0xd22a
 8004534:	f7fd f826 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD22B, 0xF2);
 8004538:	21f2      	movs	r1, #242	; 0xf2
 800453a:	f24d 202b 	movw	r0, #53803	; 0xd22b
 800453e:	f7fd f821 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD22C, 0x02);
 8004542:	2102      	movs	r1, #2
 8004544:	f24d 202c 	movw	r0, #53804	; 0xd22c
 8004548:	f7fd f81c 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD22D, 0xFE);
 800454c:	21fe      	movs	r1, #254	; 0xfe
 800454e:	f24d 202d 	movw	r0, #53805	; 0xd22d
 8004552:	f7fd f817 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD22E, 0x03);
 8004556:	2103      	movs	r1, #3
 8004558:	f24d 202e 	movw	r0, #53806	; 0xd22e
 800455c:	f7fd f812 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD22F, 0x10);
 8004560:	2110      	movs	r1, #16
 8004562:	f24d 202f 	movw	r0, #53807	; 0xd22f
 8004566:	f7fd f80d 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD230, 0x03);
 800456a:	2103      	movs	r1, #3
 800456c:	f24d 2030 	movw	r0, #53808	; 0xd230
 8004570:	f7fd f808 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD231, 0x33);
 8004574:	2133      	movs	r1, #51	; 0x33
 8004576:	f24d 2031 	movw	r0, #53809	; 0xd231
 800457a:	f7fd f803 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD232, 0x03);
 800457e:	2103      	movs	r1, #3
 8004580:	f24d 2032 	movw	r0, #53810	; 0xd232
 8004584:	f7fc fffe 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD233, 0x6D);
 8004588:	216d      	movs	r1, #109	; 0x6d
 800458a:	f24d 2033 	movw	r0, #53811	; 0xd233
 800458e:	f7fc fff9 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD300, 0x00);
 8004592:	2100      	movs	r1, #0
 8004594:	f44f 4053 	mov.w	r0, #54016	; 0xd300
 8004598:	f7fc fff4 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD301, 0x33);
 800459c:	2133      	movs	r1, #51	; 0x33
 800459e:	f24d 3001 	movw	r0, #54017	; 0xd301
 80045a2:	f7fc ffef 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD302, 0x00);
 80045a6:	2100      	movs	r1, #0
 80045a8:	f24d 3002 	movw	r0, #54018	; 0xd302
 80045ac:	f7fc ffea 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD303, 0x34);
 80045b0:	2134      	movs	r1, #52	; 0x34
 80045b2:	f24d 3003 	movw	r0, #54019	; 0xd303
 80045b6:	f7fc ffe5 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD304, 0x00);
 80045ba:	2100      	movs	r1, #0
 80045bc:	f24d 3004 	movw	r0, #54020	; 0xd304
 80045c0:	f7fc ffe0 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD305, 0x3A);
 80045c4:	213a      	movs	r1, #58	; 0x3a
 80045c6:	f24d 3005 	movw	r0, #54021	; 0xd305
 80045ca:	f7fc ffdb 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD306, 0x00);
 80045ce:	2100      	movs	r1, #0
 80045d0:	f24d 3006 	movw	r0, #54022	; 0xd306
 80045d4:	f7fc ffd6 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD307, 0x4A);
 80045d8:	214a      	movs	r1, #74	; 0x4a
 80045da:	f24d 3007 	movw	r0, #54023	; 0xd307
 80045de:	f7fc ffd1 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD308, 0x00);
 80045e2:	2100      	movs	r1, #0
 80045e4:	f24d 3008 	movw	r0, #54024	; 0xd308
 80045e8:	f7fc ffcc 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD309, 0x5C);
 80045ec:	215c      	movs	r1, #92	; 0x5c
 80045ee:	f24d 3009 	movw	r0, #54025	; 0xd309
 80045f2:	f7fc ffc7 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD30A, 0x00);
 80045f6:	2100      	movs	r1, #0
 80045f8:	f24d 300a 	movw	r0, #54026	; 0xd30a
 80045fc:	f7fc ffc2 	bl	8001584 <LCD_WriteReg>

		LCD_WriteReg(0xD30B, 0x81);
 8004600:	2181      	movs	r1, #129	; 0x81
 8004602:	f24d 300b 	movw	r0, #54027	; 0xd30b
 8004606:	f7fc ffbd 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD30C, 0x00);
 800460a:	2100      	movs	r1, #0
 800460c:	f24d 300c 	movw	r0, #54028	; 0xd30c
 8004610:	f7fc ffb8 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD30D, 0xA6);
 8004614:	21a6      	movs	r1, #166	; 0xa6
 8004616:	f24d 300d 	movw	r0, #54029	; 0xd30d
 800461a:	f7fc ffb3 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD30E, 0x00);
 800461e:	2100      	movs	r1, #0
 8004620:	f24d 300e 	movw	r0, #54030	; 0xd30e
 8004624:	f7fc ffae 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD30F, 0xE5);
 8004628:	21e5      	movs	r1, #229	; 0xe5
 800462a:	f24d 300f 	movw	r0, #54031	; 0xd30f
 800462e:	f7fc ffa9 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD310, 0x01);
 8004632:	2101      	movs	r1, #1
 8004634:	f24d 3010 	movw	r0, #54032	; 0xd310
 8004638:	f7fc ffa4 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD311, 0x13);
 800463c:	2113      	movs	r1, #19
 800463e:	f24d 3011 	movw	r0, #54033	; 0xd311
 8004642:	f7fc ff9f 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD312, 0x01);
 8004646:	2101      	movs	r1, #1
 8004648:	f24d 3012 	movw	r0, #54034	; 0xd312
 800464c:	f7fc ff9a 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD313, 0x54);
 8004650:	2154      	movs	r1, #84	; 0x54
 8004652:	f24d 3013 	movw	r0, #54035	; 0xd313
 8004656:	f7fc ff95 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD314, 0x01);
 800465a:	2101      	movs	r1, #1
 800465c:	f24d 3014 	movw	r0, #54036	; 0xd314
 8004660:	f7fc ff90 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD315, 0x82);
 8004664:	2182      	movs	r1, #130	; 0x82
 8004666:	f24d 3015 	movw	r0, #54037	; 0xd315
 800466a:	f7fc ff8b 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD316, 0x01);
 800466e:	2101      	movs	r1, #1
 8004670:	f24d 3016 	movw	r0, #54038	; 0xd316
 8004674:	f7fc ff86 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD317, 0xCA);
 8004678:	21ca      	movs	r1, #202	; 0xca
 800467a:	f24d 3017 	movw	r0, #54039	; 0xd317
 800467e:	f7fc ff81 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD318, 0x02);
 8004682:	2102      	movs	r1, #2
 8004684:	f24d 3018 	movw	r0, #54040	; 0xd318
 8004688:	f7fc ff7c 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD319, 0x00);
 800468c:	2100      	movs	r1, #0
 800468e:	f24d 3019 	movw	r0, #54041	; 0xd319
 8004692:	f7fc ff77 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD31A, 0x02);
 8004696:	2102      	movs	r1, #2
 8004698:	f24d 301a 	movw	r0, #54042	; 0xd31a
 800469c:	f7fc ff72 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD31B, 0x01);
 80046a0:	2101      	movs	r1, #1
 80046a2:	f24d 301b 	movw	r0, #54043	; 0xd31b
 80046a6:	f7fc ff6d 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD31C, 0x02);
 80046aa:	2102      	movs	r1, #2
 80046ac:	f24d 301c 	movw	r0, #54044	; 0xd31c
 80046b0:	f7fc ff68 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD31D, 0x34);
 80046b4:	2134      	movs	r1, #52	; 0x34
 80046b6:	f24d 301d 	movw	r0, #54045	; 0xd31d
 80046ba:	f7fc ff63 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD31E, 0x02);
 80046be:	2102      	movs	r1, #2
 80046c0:	f24d 301e 	movw	r0, #54046	; 0xd31e
 80046c4:	f7fc ff5e 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD31F, 0x67);
 80046c8:	2167      	movs	r1, #103	; 0x67
 80046ca:	f24d 301f 	movw	r0, #54047	; 0xd31f
 80046ce:	f7fc ff59 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD320, 0x02);
 80046d2:	2102      	movs	r1, #2
 80046d4:	f24d 3020 	movw	r0, #54048	; 0xd320
 80046d8:	f7fc ff54 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD321, 0x84);
 80046dc:	2184      	movs	r1, #132	; 0x84
 80046de:	f24d 3021 	movw	r0, #54049	; 0xd321
 80046e2:	f7fc ff4f 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD322, 0x02);
 80046e6:	2102      	movs	r1, #2
 80046e8:	f24d 3022 	movw	r0, #54050	; 0xd322
 80046ec:	f7fc ff4a 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD323, 0xA4);
 80046f0:	21a4      	movs	r1, #164	; 0xa4
 80046f2:	f24d 3023 	movw	r0, #54051	; 0xd323
 80046f6:	f7fc ff45 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD324, 0x02);
 80046fa:	2102      	movs	r1, #2
 80046fc:	f24d 3024 	movw	r0, #54052	; 0xd324
 8004700:	f7fc ff40 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD325, 0xB7);
 8004704:	21b7      	movs	r1, #183	; 0xb7
 8004706:	f24d 3025 	movw	r0, #54053	; 0xd325
 800470a:	f7fc ff3b 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD326, 0x02);
 800470e:	2102      	movs	r1, #2
 8004710:	f24d 3026 	movw	r0, #54054	; 0xd326
 8004714:	f7fc ff36 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD327, 0xCF);
 8004718:	21cf      	movs	r1, #207	; 0xcf
 800471a:	f24d 3027 	movw	r0, #54055	; 0xd327
 800471e:	f7fc ff31 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD328, 0x02);
 8004722:	2102      	movs	r1, #2
 8004724:	f24d 3028 	movw	r0, #54056	; 0xd328
 8004728:	f7fc ff2c 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD329, 0xDE);
 800472c:	21de      	movs	r1, #222	; 0xde
 800472e:	f24d 3029 	movw	r0, #54057	; 0xd329
 8004732:	f7fc ff27 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD32A, 0x02);
 8004736:	2102      	movs	r1, #2
 8004738:	f24d 302a 	movw	r0, #54058	; 0xd32a
 800473c:	f7fc ff22 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD32B, 0xF2);
 8004740:	21f2      	movs	r1, #242	; 0xf2
 8004742:	f24d 302b 	movw	r0, #54059	; 0xd32b
 8004746:	f7fc ff1d 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD32C, 0x02);
 800474a:	2102      	movs	r1, #2
 800474c:	f24d 302c 	movw	r0, #54060	; 0xd32c
 8004750:	f7fc ff18 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD32D, 0xFE);
 8004754:	21fe      	movs	r1, #254	; 0xfe
 8004756:	f24d 302d 	movw	r0, #54061	; 0xd32d
 800475a:	f7fc ff13 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD32E, 0x03);
 800475e:	2103      	movs	r1, #3
 8004760:	f24d 302e 	movw	r0, #54062	; 0xd32e
 8004764:	f7fc ff0e 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD32F, 0x10);
 8004768:	2110      	movs	r1, #16
 800476a:	f24d 302f 	movw	r0, #54063	; 0xd32f
 800476e:	f7fc ff09 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD330, 0x03);
 8004772:	2103      	movs	r1, #3
 8004774:	f24d 3030 	movw	r0, #54064	; 0xd330
 8004778:	f7fc ff04 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD331, 0x33);
 800477c:	2133      	movs	r1, #51	; 0x33
 800477e:	f24d 3031 	movw	r0, #54065	; 0xd331
 8004782:	f7fc feff 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD332, 0x03);
 8004786:	2103      	movs	r1, #3
 8004788:	f24d 3032 	movw	r0, #54066	; 0xd332
 800478c:	f7fc fefa 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD333, 0x6D);
 8004790:	216d      	movs	r1, #109	; 0x6d
 8004792:	f24d 3033 	movw	r0, #54067	; 0xd333
 8004796:	f7fc fef5 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD400, 0x00);
 800479a:	2100      	movs	r1, #0
 800479c:	f44f 4054 	mov.w	r0, #54272	; 0xd400
 80047a0:	f7fc fef0 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD401, 0x33);
 80047a4:	2133      	movs	r1, #51	; 0x33
 80047a6:	f24d 4001 	movw	r0, #54273	; 0xd401
 80047aa:	f7fc feeb 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD402, 0x00);
 80047ae:	2100      	movs	r1, #0
 80047b0:	f24d 4002 	movw	r0, #54274	; 0xd402
 80047b4:	f7fc fee6 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD403, 0x34);
 80047b8:	2134      	movs	r1, #52	; 0x34
 80047ba:	f24d 4003 	movw	r0, #54275	; 0xd403
 80047be:	f7fc fee1 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD404, 0x00);
 80047c2:	2100      	movs	r1, #0
 80047c4:	f24d 4004 	movw	r0, #54276	; 0xd404
 80047c8:	f7fc fedc 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD405, 0x3A);
 80047cc:	213a      	movs	r1, #58	; 0x3a
 80047ce:	f24d 4005 	movw	r0, #54277	; 0xd405
 80047d2:	f7fc fed7 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD406, 0x00);
 80047d6:	2100      	movs	r1, #0
 80047d8:	f24d 4006 	movw	r0, #54278	; 0xd406
 80047dc:	f7fc fed2 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD407, 0x4A);
 80047e0:	214a      	movs	r1, #74	; 0x4a
 80047e2:	f24d 4007 	movw	r0, #54279	; 0xd407
 80047e6:	f7fc fecd 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD408, 0x00);
 80047ea:	2100      	movs	r1, #0
 80047ec:	f24d 4008 	movw	r0, #54280	; 0xd408
 80047f0:	f7fc fec8 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD409, 0x5C);
 80047f4:	215c      	movs	r1, #92	; 0x5c
 80047f6:	f24d 4009 	movw	r0, #54281	; 0xd409
 80047fa:	f7fc fec3 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD40A, 0x00);
 80047fe:	2100      	movs	r1, #0
 8004800:	f24d 400a 	movw	r0, #54282	; 0xd40a
 8004804:	f7fc febe 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD40B, 0x81);
 8004808:	2181      	movs	r1, #129	; 0x81
 800480a:	f24d 400b 	movw	r0, #54283	; 0xd40b
 800480e:	f7fc feb9 	bl	8001584 <LCD_WriteReg>

		LCD_WriteReg(0xD40C, 0x00);
 8004812:	2100      	movs	r1, #0
 8004814:	f24d 400c 	movw	r0, #54284	; 0xd40c
 8004818:	f7fc feb4 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD40D, 0xA6);
 800481c:	21a6      	movs	r1, #166	; 0xa6
 800481e:	f24d 400d 	movw	r0, #54285	; 0xd40d
 8004822:	f7fc feaf 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD40E, 0x00);
 8004826:	2100      	movs	r1, #0
 8004828:	f24d 400e 	movw	r0, #54286	; 0xd40e
 800482c:	f7fc feaa 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD40F, 0xE5);
 8004830:	21e5      	movs	r1, #229	; 0xe5
 8004832:	f24d 400f 	movw	r0, #54287	; 0xd40f
 8004836:	f7fc fea5 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD410, 0x01);
 800483a:	2101      	movs	r1, #1
 800483c:	f24d 4010 	movw	r0, #54288	; 0xd410
 8004840:	f7fc fea0 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD411, 0x13);
 8004844:	2113      	movs	r1, #19
 8004846:	f24d 4011 	movw	r0, #54289	; 0xd411
 800484a:	f7fc fe9b 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD412, 0x01);
 800484e:	2101      	movs	r1, #1
 8004850:	f24d 4012 	movw	r0, #54290	; 0xd412
 8004854:	f7fc fe96 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD413, 0x54);
 8004858:	2154      	movs	r1, #84	; 0x54
 800485a:	f24d 4013 	movw	r0, #54291	; 0xd413
 800485e:	f7fc fe91 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD414, 0x01);
 8004862:	2101      	movs	r1, #1
 8004864:	f24d 4014 	movw	r0, #54292	; 0xd414
 8004868:	f7fc fe8c 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD415, 0x82);
 800486c:	2182      	movs	r1, #130	; 0x82
 800486e:	f24d 4015 	movw	r0, #54293	; 0xd415
 8004872:	f7fc fe87 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD416, 0x01);
 8004876:	2101      	movs	r1, #1
 8004878:	f24d 4016 	movw	r0, #54294	; 0xd416
 800487c:	f7fc fe82 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD417, 0xCA);
 8004880:	21ca      	movs	r1, #202	; 0xca
 8004882:	f24d 4017 	movw	r0, #54295	; 0xd417
 8004886:	f7fc fe7d 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD418, 0x02);
 800488a:	2102      	movs	r1, #2
 800488c:	f24d 4018 	movw	r0, #54296	; 0xd418
 8004890:	f7fc fe78 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD419, 0x00);
 8004894:	2100      	movs	r1, #0
 8004896:	f24d 4019 	movw	r0, #54297	; 0xd419
 800489a:	f7fc fe73 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD41A, 0x02);
 800489e:	2102      	movs	r1, #2
 80048a0:	f24d 401a 	movw	r0, #54298	; 0xd41a
 80048a4:	f7fc fe6e 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD41B, 0x01);
 80048a8:	2101      	movs	r1, #1
 80048aa:	f24d 401b 	movw	r0, #54299	; 0xd41b
 80048ae:	f7fc fe69 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD41C, 0x02);
 80048b2:	2102      	movs	r1, #2
 80048b4:	f24d 401c 	movw	r0, #54300	; 0xd41c
 80048b8:	f7fc fe64 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD41D, 0x34);
 80048bc:	2134      	movs	r1, #52	; 0x34
 80048be:	f24d 401d 	movw	r0, #54301	; 0xd41d
 80048c2:	f7fc fe5f 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD41E, 0x02);
 80048c6:	2102      	movs	r1, #2
 80048c8:	f24d 401e 	movw	r0, #54302	; 0xd41e
 80048cc:	f7fc fe5a 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD41F, 0x67);
 80048d0:	2167      	movs	r1, #103	; 0x67
 80048d2:	f24d 401f 	movw	r0, #54303	; 0xd41f
 80048d6:	f7fc fe55 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD420, 0x02);
 80048da:	2102      	movs	r1, #2
 80048dc:	f24d 4020 	movw	r0, #54304	; 0xd420
 80048e0:	f7fc fe50 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD421, 0x84);
 80048e4:	2184      	movs	r1, #132	; 0x84
 80048e6:	f24d 4021 	movw	r0, #54305	; 0xd421
 80048ea:	f7fc fe4b 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD422, 0x02);
 80048ee:	2102      	movs	r1, #2
 80048f0:	f24d 4022 	movw	r0, #54306	; 0xd422
 80048f4:	f7fc fe46 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD423, 0xA4);
 80048f8:	21a4      	movs	r1, #164	; 0xa4
 80048fa:	f24d 4023 	movw	r0, #54307	; 0xd423
 80048fe:	f7fc fe41 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD424, 0x02);
 8004902:	2102      	movs	r1, #2
 8004904:	f24d 4024 	movw	r0, #54308	; 0xd424
 8004908:	f7fc fe3c 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD425, 0xB7);
 800490c:	21b7      	movs	r1, #183	; 0xb7
 800490e:	f24d 4025 	movw	r0, #54309	; 0xd425
 8004912:	f7fc fe37 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD426, 0x02);
 8004916:	2102      	movs	r1, #2
 8004918:	f24d 4026 	movw	r0, #54310	; 0xd426
 800491c:	f7fc fe32 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD427, 0xCF);
 8004920:	21cf      	movs	r1, #207	; 0xcf
 8004922:	f24d 4027 	movw	r0, #54311	; 0xd427
 8004926:	f7fc fe2d 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD428, 0x02);
 800492a:	2102      	movs	r1, #2
 800492c:	f24d 4028 	movw	r0, #54312	; 0xd428
 8004930:	f7fc fe28 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD429, 0xDE);
 8004934:	21de      	movs	r1, #222	; 0xde
 8004936:	f24d 4029 	movw	r0, #54313	; 0xd429
 800493a:	f7fc fe23 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD42A, 0x02);
 800493e:	2102      	movs	r1, #2
 8004940:	f24d 402a 	movw	r0, #54314	; 0xd42a
 8004944:	f7fc fe1e 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD42B, 0xF2);
 8004948:	21f2      	movs	r1, #242	; 0xf2
 800494a:	f24d 402b 	movw	r0, #54315	; 0xd42b
 800494e:	f7fc fe19 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD42C, 0x02);
 8004952:	2102      	movs	r1, #2
 8004954:	f24d 402c 	movw	r0, #54316	; 0xd42c
 8004958:	f7fc fe14 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD42D, 0xFE);
 800495c:	21fe      	movs	r1, #254	; 0xfe
 800495e:	f24d 402d 	movw	r0, #54317	; 0xd42d
 8004962:	f7fc fe0f 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD42E, 0x03);
 8004966:	2103      	movs	r1, #3
 8004968:	f24d 402e 	movw	r0, #54318	; 0xd42e
 800496c:	f7fc fe0a 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD42F, 0x10);
 8004970:	2110      	movs	r1, #16
 8004972:	f24d 402f 	movw	r0, #54319	; 0xd42f
 8004976:	f7fc fe05 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD430, 0x03);
 800497a:	2103      	movs	r1, #3
 800497c:	f24d 4030 	movw	r0, #54320	; 0xd430
 8004980:	f7fc fe00 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD431, 0x33);
 8004984:	2133      	movs	r1, #51	; 0x33
 8004986:	f24d 4031 	movw	r0, #54321	; 0xd431
 800498a:	f7fc fdfb 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD432, 0x03);
 800498e:	2103      	movs	r1, #3
 8004990:	f24d 4032 	movw	r0, #54322	; 0xd432
 8004994:	f7fc fdf6 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD433, 0x6D);
 8004998:	216d      	movs	r1, #109	; 0x6d
 800499a:	f24d 4033 	movw	r0, #54323	; 0xd433
 800499e:	f7fc fdf1 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD500, 0x00);
 80049a2:	2100      	movs	r1, #0
 80049a4:	f44f 4055 	mov.w	r0, #54528	; 0xd500
 80049a8:	f7fc fdec 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD501, 0x33);
 80049ac:	2133      	movs	r1, #51	; 0x33
 80049ae:	f24d 5001 	movw	r0, #54529	; 0xd501
 80049b2:	f7fc fde7 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD502, 0x00);
 80049b6:	2100      	movs	r1, #0
 80049b8:	f24d 5002 	movw	r0, #54530	; 0xd502
 80049bc:	f7fc fde2 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD503, 0x34);
 80049c0:	2134      	movs	r1, #52	; 0x34
 80049c2:	f24d 5003 	movw	r0, #54531	; 0xd503
 80049c6:	f7fc fddd 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD504, 0x00);
 80049ca:	2100      	movs	r1, #0
 80049cc:	f24d 5004 	movw	r0, #54532	; 0xd504
 80049d0:	f7fc fdd8 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD505, 0x3A);
 80049d4:	213a      	movs	r1, #58	; 0x3a
 80049d6:	f24d 5005 	movw	r0, #54533	; 0xd505
 80049da:	f7fc fdd3 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD506, 0x00);
 80049de:	2100      	movs	r1, #0
 80049e0:	f24d 5006 	movw	r0, #54534	; 0xd506
 80049e4:	f7fc fdce 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD507, 0x4A);
 80049e8:	214a      	movs	r1, #74	; 0x4a
 80049ea:	f24d 5007 	movw	r0, #54535	; 0xd507
 80049ee:	f7fc fdc9 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD508, 0x00);
 80049f2:	2100      	movs	r1, #0
 80049f4:	f24d 5008 	movw	r0, #54536	; 0xd508
 80049f8:	f7fc fdc4 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD509, 0x5C);
 80049fc:	215c      	movs	r1, #92	; 0x5c
 80049fe:	f24d 5009 	movw	r0, #54537	; 0xd509
 8004a02:	f7fc fdbf 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD50A, 0x00);
 8004a06:	2100      	movs	r1, #0
 8004a08:	f24d 500a 	movw	r0, #54538	; 0xd50a
 8004a0c:	f7fc fdba 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD50B, 0x81);
 8004a10:	2181      	movs	r1, #129	; 0x81
 8004a12:	f24d 500b 	movw	r0, #54539	; 0xd50b
 8004a16:	f7fc fdb5 	bl	8001584 <LCD_WriteReg>

		LCD_WriteReg(0xD50C, 0x00);
 8004a1a:	2100      	movs	r1, #0
 8004a1c:	f24d 500c 	movw	r0, #54540	; 0xd50c
 8004a20:	f7fc fdb0 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD50D, 0xA6);
 8004a24:	21a6      	movs	r1, #166	; 0xa6
 8004a26:	f24d 500d 	movw	r0, #54541	; 0xd50d
 8004a2a:	f7fc fdab 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD50E, 0x00);
 8004a2e:	2100      	movs	r1, #0
 8004a30:	f24d 500e 	movw	r0, #54542	; 0xd50e
 8004a34:	f7fc fda6 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD50F, 0xE5);
 8004a38:	21e5      	movs	r1, #229	; 0xe5
 8004a3a:	f24d 500f 	movw	r0, #54543	; 0xd50f
 8004a3e:	f7fc fda1 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD510, 0x01);
 8004a42:	2101      	movs	r1, #1
 8004a44:	f24d 5010 	movw	r0, #54544	; 0xd510
 8004a48:	f7fc fd9c 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD511, 0x13);
 8004a4c:	2113      	movs	r1, #19
 8004a4e:	f24d 5011 	movw	r0, #54545	; 0xd511
 8004a52:	f7fc fd97 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD512, 0x01);
 8004a56:	2101      	movs	r1, #1
 8004a58:	f24d 5012 	movw	r0, #54546	; 0xd512
 8004a5c:	f7fc fd92 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD513, 0x54);
 8004a60:	2154      	movs	r1, #84	; 0x54
 8004a62:	f24d 5013 	movw	r0, #54547	; 0xd513
 8004a66:	f7fc fd8d 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD514, 0x01);
 8004a6a:	2101      	movs	r1, #1
 8004a6c:	f24d 5014 	movw	r0, #54548	; 0xd514
 8004a70:	f7fc fd88 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD515, 0x82);
 8004a74:	2182      	movs	r1, #130	; 0x82
 8004a76:	f24d 5015 	movw	r0, #54549	; 0xd515
 8004a7a:	f7fc fd83 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD516, 0x01);
 8004a7e:	2101      	movs	r1, #1
 8004a80:	f24d 5016 	movw	r0, #54550	; 0xd516
 8004a84:	f7fc fd7e 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD517, 0xCA);
 8004a88:	21ca      	movs	r1, #202	; 0xca
 8004a8a:	f24d 5017 	movw	r0, #54551	; 0xd517
 8004a8e:	f7fc fd79 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD518, 0x02);
 8004a92:	2102      	movs	r1, #2
 8004a94:	f24d 5018 	movw	r0, #54552	; 0xd518
 8004a98:	f7fc fd74 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD519, 0x00);
 8004a9c:	2100      	movs	r1, #0
 8004a9e:	f24d 5019 	movw	r0, #54553	; 0xd519
 8004aa2:	f7fc fd6f 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD51A, 0x02);
 8004aa6:	2102      	movs	r1, #2
 8004aa8:	f24d 501a 	movw	r0, #54554	; 0xd51a
 8004aac:	f7fc fd6a 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD51B, 0x01);
 8004ab0:	2101      	movs	r1, #1
 8004ab2:	f24d 501b 	movw	r0, #54555	; 0xd51b
 8004ab6:	f7fc fd65 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD51C, 0x02);
 8004aba:	2102      	movs	r1, #2
 8004abc:	f24d 501c 	movw	r0, #54556	; 0xd51c
 8004ac0:	f7fc fd60 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD51D, 0x34);
 8004ac4:	2134      	movs	r1, #52	; 0x34
 8004ac6:	f24d 501d 	movw	r0, #54557	; 0xd51d
 8004aca:	f7fc fd5b 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD51E, 0x02);
 8004ace:	2102      	movs	r1, #2
 8004ad0:	f24d 501e 	movw	r0, #54558	; 0xd51e
 8004ad4:	f7fc fd56 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD51F, 0x67);
 8004ad8:	2167      	movs	r1, #103	; 0x67
 8004ada:	f24d 501f 	movw	r0, #54559	; 0xd51f
 8004ade:	f7fc fd51 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD520, 0x02);
 8004ae2:	2102      	movs	r1, #2
 8004ae4:	f24d 5020 	movw	r0, #54560	; 0xd520
 8004ae8:	f7fc fd4c 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD521, 0x84);
 8004aec:	2184      	movs	r1, #132	; 0x84
 8004aee:	f24d 5021 	movw	r0, #54561	; 0xd521
 8004af2:	f7fc fd47 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD522, 0x02);
 8004af6:	2102      	movs	r1, #2
 8004af8:	f24d 5022 	movw	r0, #54562	; 0xd522
 8004afc:	f7fc fd42 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD523, 0xA4);
 8004b00:	21a4      	movs	r1, #164	; 0xa4
 8004b02:	f24d 5023 	movw	r0, #54563	; 0xd523
 8004b06:	f7fc fd3d 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD524, 0x02);
 8004b0a:	2102      	movs	r1, #2
 8004b0c:	f24d 5024 	movw	r0, #54564	; 0xd524
 8004b10:	f7fc fd38 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD525, 0xB7);
 8004b14:	21b7      	movs	r1, #183	; 0xb7
 8004b16:	f24d 5025 	movw	r0, #54565	; 0xd525
 8004b1a:	f7fc fd33 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD526, 0x02);
 8004b1e:	2102      	movs	r1, #2
 8004b20:	f24d 5026 	movw	r0, #54566	; 0xd526
 8004b24:	f7fc fd2e 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD527, 0xCF);
 8004b28:	21cf      	movs	r1, #207	; 0xcf
 8004b2a:	f24d 5027 	movw	r0, #54567	; 0xd527
 8004b2e:	f7fc fd29 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD528, 0x02);
 8004b32:	2102      	movs	r1, #2
 8004b34:	f24d 5028 	movw	r0, #54568	; 0xd528
 8004b38:	f7fc fd24 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD529, 0xDE);
 8004b3c:	21de      	movs	r1, #222	; 0xde
 8004b3e:	f24d 5029 	movw	r0, #54569	; 0xd529
 8004b42:	f7fc fd1f 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD52A, 0x02);
 8004b46:	2102      	movs	r1, #2
 8004b48:	f24d 502a 	movw	r0, #54570	; 0xd52a
 8004b4c:	f7fc fd1a 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD52B, 0xF2);
 8004b50:	21f2      	movs	r1, #242	; 0xf2
 8004b52:	f24d 502b 	movw	r0, #54571	; 0xd52b
 8004b56:	f7fc fd15 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD52C, 0x02);
 8004b5a:	2102      	movs	r1, #2
 8004b5c:	f24d 502c 	movw	r0, #54572	; 0xd52c
 8004b60:	f7fc fd10 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD52D, 0xFE);
 8004b64:	21fe      	movs	r1, #254	; 0xfe
 8004b66:	f24d 502d 	movw	r0, #54573	; 0xd52d
 8004b6a:	f7fc fd0b 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD52E, 0x03);
 8004b6e:	2103      	movs	r1, #3
 8004b70:	f24d 502e 	movw	r0, #54574	; 0xd52e
 8004b74:	f7fc fd06 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD52F, 0x10);
 8004b78:	2110      	movs	r1, #16
 8004b7a:	f24d 502f 	movw	r0, #54575	; 0xd52f
 8004b7e:	f7fc fd01 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD530, 0x03);
 8004b82:	2103      	movs	r1, #3
 8004b84:	f24d 5030 	movw	r0, #54576	; 0xd530
 8004b88:	f7fc fcfc 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD531, 0x33);
 8004b8c:	2133      	movs	r1, #51	; 0x33
 8004b8e:	f24d 5031 	movw	r0, #54577	; 0xd531
 8004b92:	f7fc fcf7 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD532, 0x03);
 8004b96:	2103      	movs	r1, #3
 8004b98:	f24d 5032 	movw	r0, #54578	; 0xd532
 8004b9c:	f7fc fcf2 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD533, 0x6D);
 8004ba0:	216d      	movs	r1, #109	; 0x6d
 8004ba2:	f24d 5033 	movw	r0, #54579	; 0xd533
 8004ba6:	f7fc fced 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD600, 0x00);
 8004baa:	2100      	movs	r1, #0
 8004bac:	f44f 4056 	mov.w	r0, #54784	; 0xd600
 8004bb0:	f7fc fce8 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD601, 0x33);
 8004bb4:	2133      	movs	r1, #51	; 0x33
 8004bb6:	f24d 6001 	movw	r0, #54785	; 0xd601
 8004bba:	f7fc fce3 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD602, 0x00);
 8004bbe:	2100      	movs	r1, #0
 8004bc0:	f24d 6002 	movw	r0, #54786	; 0xd602
 8004bc4:	f7fc fcde 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD603, 0x34);
 8004bc8:	2134      	movs	r1, #52	; 0x34
 8004bca:	f24d 6003 	movw	r0, #54787	; 0xd603
 8004bce:	f7fc fcd9 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD604, 0x00);
 8004bd2:	2100      	movs	r1, #0
 8004bd4:	f24d 6004 	movw	r0, #54788	; 0xd604
 8004bd8:	f7fc fcd4 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD605, 0x3A);
 8004bdc:	213a      	movs	r1, #58	; 0x3a
 8004bde:	f24d 6005 	movw	r0, #54789	; 0xd605
 8004be2:	f7fc fccf 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD606, 0x00);
 8004be6:	2100      	movs	r1, #0
 8004be8:	f24d 6006 	movw	r0, #54790	; 0xd606
 8004bec:	f7fc fcca 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD607, 0x4A);
 8004bf0:	214a      	movs	r1, #74	; 0x4a
 8004bf2:	f24d 6007 	movw	r0, #54791	; 0xd607
 8004bf6:	f7fc fcc5 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD608, 0x00);
 8004bfa:	2100      	movs	r1, #0
 8004bfc:	f24d 6008 	movw	r0, #54792	; 0xd608
 8004c00:	f7fc fcc0 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD609, 0x5C);
 8004c04:	215c      	movs	r1, #92	; 0x5c
 8004c06:	f24d 6009 	movw	r0, #54793	; 0xd609
 8004c0a:	f7fc fcbb 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD60A, 0x00);
 8004c0e:	2100      	movs	r1, #0
 8004c10:	f24d 600a 	movw	r0, #54794	; 0xd60a
 8004c14:	f7fc fcb6 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD60B, 0x81);
 8004c18:	2181      	movs	r1, #129	; 0x81
 8004c1a:	f24d 600b 	movw	r0, #54795	; 0xd60b
 8004c1e:	f7fc fcb1 	bl	8001584 <LCD_WriteReg>

		LCD_WriteReg(0xD60C, 0x00);
 8004c22:	2100      	movs	r1, #0
 8004c24:	f24d 600c 	movw	r0, #54796	; 0xd60c
 8004c28:	f7fc fcac 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD60D, 0xA6);
 8004c2c:	21a6      	movs	r1, #166	; 0xa6
 8004c2e:	f24d 600d 	movw	r0, #54797	; 0xd60d
 8004c32:	f7fc fca7 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD60E, 0x00);
 8004c36:	2100      	movs	r1, #0
 8004c38:	f24d 600e 	movw	r0, #54798	; 0xd60e
 8004c3c:	f7fc fca2 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD60F, 0xE5);
 8004c40:	21e5      	movs	r1, #229	; 0xe5
 8004c42:	f24d 600f 	movw	r0, #54799	; 0xd60f
 8004c46:	f7fc fc9d 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD610, 0x01);
 8004c4a:	2101      	movs	r1, #1
 8004c4c:	f24d 6010 	movw	r0, #54800	; 0xd610
 8004c50:	f7fc fc98 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD611, 0x13);
 8004c54:	2113      	movs	r1, #19
 8004c56:	f24d 6011 	movw	r0, #54801	; 0xd611
 8004c5a:	f7fc fc93 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD612, 0x01);
 8004c5e:	2101      	movs	r1, #1
 8004c60:	f24d 6012 	movw	r0, #54802	; 0xd612
 8004c64:	f7fc fc8e 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD613, 0x54);
 8004c68:	2154      	movs	r1, #84	; 0x54
 8004c6a:	f24d 6013 	movw	r0, #54803	; 0xd613
 8004c6e:	f7fc fc89 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD614, 0x01);
 8004c72:	2101      	movs	r1, #1
 8004c74:	f24d 6014 	movw	r0, #54804	; 0xd614
 8004c78:	f7fc fc84 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD615, 0x82);
 8004c7c:	2182      	movs	r1, #130	; 0x82
 8004c7e:	f24d 6015 	movw	r0, #54805	; 0xd615
 8004c82:	f7fc fc7f 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD616, 0x01);
 8004c86:	2101      	movs	r1, #1
 8004c88:	f24d 6016 	movw	r0, #54806	; 0xd616
 8004c8c:	f7fc fc7a 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD617, 0xCA);
 8004c90:	21ca      	movs	r1, #202	; 0xca
 8004c92:	f24d 6017 	movw	r0, #54807	; 0xd617
 8004c96:	f7fc fc75 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD618, 0x02);
 8004c9a:	2102      	movs	r1, #2
 8004c9c:	f24d 6018 	movw	r0, #54808	; 0xd618
 8004ca0:	f7fc fc70 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD619, 0x00);
 8004ca4:	2100      	movs	r1, #0
 8004ca6:	f24d 6019 	movw	r0, #54809	; 0xd619
 8004caa:	f7fc fc6b 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD61A, 0x02);
 8004cae:	2102      	movs	r1, #2
 8004cb0:	f24d 601a 	movw	r0, #54810	; 0xd61a
 8004cb4:	f7fc fc66 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD61B, 0x01);
 8004cb8:	2101      	movs	r1, #1
 8004cba:	f24d 601b 	movw	r0, #54811	; 0xd61b
 8004cbe:	f7fc fc61 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD61C, 0x02);
 8004cc2:	2102      	movs	r1, #2
 8004cc4:	f24d 601c 	movw	r0, #54812	; 0xd61c
 8004cc8:	f7fc fc5c 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD61D, 0x34);
 8004ccc:	2134      	movs	r1, #52	; 0x34
 8004cce:	f24d 601d 	movw	r0, #54813	; 0xd61d
 8004cd2:	f7fc fc57 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD61E, 0x02);
 8004cd6:	2102      	movs	r1, #2
 8004cd8:	f24d 601e 	movw	r0, #54814	; 0xd61e
 8004cdc:	f7fc fc52 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD61F, 0x67);
 8004ce0:	2167      	movs	r1, #103	; 0x67
 8004ce2:	f24d 601f 	movw	r0, #54815	; 0xd61f
 8004ce6:	f7fc fc4d 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD620, 0x02);
 8004cea:	2102      	movs	r1, #2
 8004cec:	f24d 6020 	movw	r0, #54816	; 0xd620
 8004cf0:	f7fc fc48 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD621, 0x84);
 8004cf4:	2184      	movs	r1, #132	; 0x84
 8004cf6:	f24d 6021 	movw	r0, #54817	; 0xd621
 8004cfa:	f7fc fc43 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD622, 0x02);
 8004cfe:	2102      	movs	r1, #2
 8004d00:	f24d 6022 	movw	r0, #54818	; 0xd622
 8004d04:	f7fc fc3e 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD623, 0xA4);
 8004d08:	21a4      	movs	r1, #164	; 0xa4
 8004d0a:	f24d 6023 	movw	r0, #54819	; 0xd623
 8004d0e:	f7fc fc39 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD624, 0x02);
 8004d12:	2102      	movs	r1, #2
 8004d14:	f24d 6024 	movw	r0, #54820	; 0xd624
 8004d18:	f7fc fc34 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD625, 0xB7);
 8004d1c:	21b7      	movs	r1, #183	; 0xb7
 8004d1e:	f24d 6025 	movw	r0, #54821	; 0xd625
 8004d22:	f7fc fc2f 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD626, 0x02);
 8004d26:	2102      	movs	r1, #2
 8004d28:	f24d 6026 	movw	r0, #54822	; 0xd626
 8004d2c:	f7fc fc2a 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD627, 0xCF);
 8004d30:	21cf      	movs	r1, #207	; 0xcf
 8004d32:	f24d 6027 	movw	r0, #54823	; 0xd627
 8004d36:	f7fc fc25 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD628, 0x02);
 8004d3a:	2102      	movs	r1, #2
 8004d3c:	f24d 6028 	movw	r0, #54824	; 0xd628
 8004d40:	f7fc fc20 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD629, 0xDE);
 8004d44:	21de      	movs	r1, #222	; 0xde
 8004d46:	f24d 6029 	movw	r0, #54825	; 0xd629
 8004d4a:	f7fc fc1b 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD62A, 0x02);
 8004d4e:	2102      	movs	r1, #2
 8004d50:	f24d 602a 	movw	r0, #54826	; 0xd62a
 8004d54:	f7fc fc16 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD62B, 0xF2);
 8004d58:	21f2      	movs	r1, #242	; 0xf2
 8004d5a:	f24d 602b 	movw	r0, #54827	; 0xd62b
 8004d5e:	f7fc fc11 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD62C, 0x02);
 8004d62:	2102      	movs	r1, #2
 8004d64:	f24d 602c 	movw	r0, #54828	; 0xd62c
 8004d68:	f7fc fc0c 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD62D, 0xFE);
 8004d6c:	21fe      	movs	r1, #254	; 0xfe
 8004d6e:	f24d 602d 	movw	r0, #54829	; 0xd62d
 8004d72:	f7fc fc07 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD62E, 0x03);
 8004d76:	2103      	movs	r1, #3
 8004d78:	f24d 602e 	movw	r0, #54830	; 0xd62e
 8004d7c:	f7fc fc02 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD62F, 0x10);
 8004d80:	2110      	movs	r1, #16
 8004d82:	f24d 602f 	movw	r0, #54831	; 0xd62f
 8004d86:	f7fc fbfd 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD630, 0x03);
 8004d8a:	2103      	movs	r1, #3
 8004d8c:	f24d 6030 	movw	r0, #54832	; 0xd630
 8004d90:	f7fc fbf8 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD631, 0x33);
 8004d94:	2133      	movs	r1, #51	; 0x33
 8004d96:	f24d 6031 	movw	r0, #54833	; 0xd631
 8004d9a:	f7fc fbf3 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD632, 0x03);
 8004d9e:	2103      	movs	r1, #3
 8004da0:	f24d 6032 	movw	r0, #54834	; 0xd632
 8004da4:	f7fc fbee 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xD633, 0x6D);
 8004da8:	216d      	movs	r1, #109	; 0x6d
 8004daa:	f24d 6033 	movw	r0, #54835	; 0xd633
 8004dae:	f7fc fbe9 	bl	8001584 <LCD_WriteReg>
		//LV2 Page 0 enable
		LCD_WriteReg(0xF000, 0x55);
 8004db2:	2155      	movs	r1, #85	; 0x55
 8004db4:	f44f 4070 	mov.w	r0, #61440	; 0xf000
 8004db8:	f7fc fbe4 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xF001, 0xAA);
 8004dbc:	21aa      	movs	r1, #170	; 0xaa
 8004dbe:	f24f 0001 	movw	r0, #61441	; 0xf001
 8004dc2:	f7fc fbdf 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xF002, 0x52);
 8004dc6:	2152      	movs	r1, #82	; 0x52
 8004dc8:	f24f 0002 	movw	r0, #61442	; 0xf002
 8004dcc:	f7fc fbda 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xF003, 0x08);
 8004dd0:	2108      	movs	r1, #8
 8004dd2:	f24f 0003 	movw	r0, #61443	; 0xf003
 8004dd6:	f7fc fbd5 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xF004, 0x00);
 8004dda:	2100      	movs	r1, #0
 8004ddc:	f24f 0004 	movw	r0, #61444	; 0xf004
 8004de0:	f7fc fbd0 	bl	8001584 <LCD_WriteReg>
		//Display control
		LCD_WriteReg(0xB100, 0xCC);
 8004de4:	21cc      	movs	r1, #204	; 0xcc
 8004de6:	f44f 4031 	mov.w	r0, #45312	; 0xb100
 8004dea:	f7fc fbcb 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xB101, 0x00);
 8004dee:	2100      	movs	r1, #0
 8004df0:	f24b 1001 	movw	r0, #45313	; 0xb101
 8004df4:	f7fc fbc6 	bl	8001584 <LCD_WriteReg>
		//Source hold time
		LCD_WriteReg(0xB600, 0x05);
 8004df8:	2105      	movs	r1, #5
 8004dfa:	f44f 4036 	mov.w	r0, #46592	; 0xb600
 8004dfe:	f7fc fbc1 	bl	8001584 <LCD_WriteReg>
		//Gate EQ control
		LCD_WriteReg(0xB700, 0x70);
 8004e02:	2170      	movs	r1, #112	; 0x70
 8004e04:	f44f 4037 	mov.w	r0, #46848	; 0xb700
 8004e08:	f7fc fbbc 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xB701, 0x70);
 8004e0c:	2170      	movs	r1, #112	; 0x70
 8004e0e:	f24b 7001 	movw	r0, #46849	; 0xb701
 8004e12:	f7fc fbb7 	bl	8001584 <LCD_WriteReg>
		//Source EQ control (Mode 2)
		LCD_WriteReg(0xB800, 0x01);
 8004e16:	2101      	movs	r1, #1
 8004e18:	f44f 4038 	mov.w	r0, #47104	; 0xb800
 8004e1c:	f7fc fbb2 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xB801, 0x03);
 8004e20:	2103      	movs	r1, #3
 8004e22:	f64b 0001 	movw	r0, #47105	; 0xb801
 8004e26:	f7fc fbad 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xB802, 0x03);
 8004e2a:	2103      	movs	r1, #3
 8004e2c:	f64b 0002 	movw	r0, #47106	; 0xb802
 8004e30:	f7fc fba8 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xB803, 0x03);
 8004e34:	2103      	movs	r1, #3
 8004e36:	f64b 0003 	movw	r0, #47107	; 0xb803
 8004e3a:	f7fc fba3 	bl	8001584 <LCD_WriteReg>
		//Inversion mode (2-dot)
		LCD_WriteReg(0xBC00, 0x02);
 8004e3e:	2102      	movs	r1, #2
 8004e40:	f44f 403c 	mov.w	r0, #48128	; 0xbc00
 8004e44:	f7fc fb9e 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xBC01, 0x00);
 8004e48:	2100      	movs	r1, #0
 8004e4a:	f64b 4001 	movw	r0, #48129	; 0xbc01
 8004e4e:	f7fc fb99 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xBC02, 0x00);
 8004e52:	2100      	movs	r1, #0
 8004e54:	f64b 4002 	movw	r0, #48130	; 0xbc02
 8004e58:	f7fc fb94 	bl	8001584 <LCD_WriteReg>
		//Timing control 4H w/ 4-delay
		LCD_WriteReg(0xC900, 0xD0);
 8004e5c:	21d0      	movs	r1, #208	; 0xd0
 8004e5e:	f44f 4049 	mov.w	r0, #51456	; 0xc900
 8004e62:	f7fc fb8f 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xC901, 0x02);
 8004e66:	2102      	movs	r1, #2
 8004e68:	f64c 1001 	movw	r0, #51457	; 0xc901
 8004e6c:	f7fc fb8a 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xC902, 0x50);
 8004e70:	2150      	movs	r1, #80	; 0x50
 8004e72:	f64c 1002 	movw	r0, #51458	; 0xc902
 8004e76:	f7fc fb85 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xC903, 0x50);
 8004e7a:	2150      	movs	r1, #80	; 0x50
 8004e7c:	f64c 1003 	movw	r0, #51459	; 0xc903
 8004e80:	f7fc fb80 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xC904, 0x50);
 8004e84:	2150      	movs	r1, #80	; 0x50
 8004e86:	f64c 1004 	movw	r0, #51460	; 0xc904
 8004e8a:	f7fc fb7b 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x3500, 0x00);
 8004e8e:	2100      	movs	r1, #0
 8004e90:	f44f 5054 	mov.w	r0, #13568	; 0x3500
 8004e94:	f7fc fb76 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x3A00, 0x55);  //16-bit/pixel
 8004e98:	2155      	movs	r1, #85	; 0x55
 8004e9a:	f44f 5068 	mov.w	r0, #14848	; 0x3a00
 8004e9e:	f7fc fb71 	bl	8001584 <LCD_WriteReg>
		LCD_WR_REG(0x1100);
 8004ea2:	f44f 5088 	mov.w	r0, #4352	; 0x1100
 8004ea6:	f7fc fae1 	bl	800146c <LCD_WR_REG>
//		delay_us(120); // us
		HAL_Delay(1);
 8004eaa:	2001      	movs	r0, #1
 8004eac:	f003 fb1c 	bl	80084e8 <HAL_Delay>
		LCD_WR_REG(0x2900);
 8004eb0:	f44f 5024 	mov.w	r0, #10496	; 0x2900
 8004eb4:	f7fc fada 	bl	800146c <LCD_WR_REG>
 8004eb8:	f001 bd18 	b.w	80068ec <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x9325)  //9325
 8004ebc:	4bec      	ldr	r3, [pc, #944]	; (8005270 <LCD_Init+0x27b8>)
 8004ebe:	889b      	ldrh	r3, [r3, #4]
 8004ec0:	f249 3225 	movw	r2, #37669	; 0x9325
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	f040 80d7 	bne.w	8005078 <LCD_Init+0x25c0>
			{
		LCD_WriteReg(0x00E5, 0x78F0);
 8004eca:	f647 01f0 	movw	r1, #30960	; 0x78f0
 8004ece:	20e5      	movs	r0, #229	; 0xe5
 8004ed0:	f7fc fb58 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0001, 0x0100);
 8004ed4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004ed8:	2001      	movs	r0, #1
 8004eda:	f7fc fb53 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0700);
 8004ede:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8004ee2:	2002      	movs	r0, #2
 8004ee4:	f7fc fb4e 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0x1030);
 8004ee8:	f241 0130 	movw	r1, #4144	; 0x1030
 8004eec:	2003      	movs	r0, #3
 8004eee:	f7fc fb49 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0004, 0x0000);
 8004ef2:	2100      	movs	r1, #0
 8004ef4:	2004      	movs	r0, #4
 8004ef6:	f7fc fb45 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x0202);
 8004efa:	f240 2102 	movw	r1, #514	; 0x202
 8004efe:	2008      	movs	r0, #8
 8004f00:	f7fc fb40 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0009, 0x0000);
 8004f04:	2100      	movs	r1, #0
 8004f06:	2009      	movs	r0, #9
 8004f08:	f7fc fb3c 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x000A, 0x0000);
 8004f0c:	2100      	movs	r1, #0
 8004f0e:	200a      	movs	r0, #10
 8004f10:	f7fc fb38 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000);
 8004f14:	2100      	movs	r1, #0
 8004f16:	200c      	movs	r0, #12
 8004f18:	f7fc fb34 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x000D, 0x0000);
 8004f1c:	2100      	movs	r1, #0
 8004f1e:	200d      	movs	r0, #13
 8004f20:	f7fc fb30 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000);
 8004f24:	2100      	movs	r1, #0
 8004f26:	200f      	movs	r0, #15
 8004f28:	f7fc fb2c 	bl	8001584 <LCD_WriteReg>
		//power on sequence VGHVGL
		LCD_WriteReg(0x0010, 0x0000);
 8004f2c:	2100      	movs	r1, #0
 8004f2e:	2010      	movs	r0, #16
 8004f30:	f7fc fb28 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0007);
 8004f34:	2107      	movs	r1, #7
 8004f36:	2011      	movs	r0, #17
 8004f38:	f7fc fb24 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x0000);
 8004f3c:	2100      	movs	r1, #0
 8004f3e:	2012      	movs	r0, #18
 8004f40:	f7fc fb20 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0000);
 8004f44:	2100      	movs	r1, #0
 8004f46:	2013      	movs	r0, #19
 8004f48:	f7fc fb1c 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0000);
 8004f4c:	2100      	movs	r1, #0
 8004f4e:	2007      	movs	r0, #7
 8004f50:	f7fc fb18 	bl	8001584 <LCD_WriteReg>
		//vgh 
		LCD_WriteReg(0x0010, 0x1690);
 8004f54:	f241 6190 	movw	r1, #5776	; 0x1690
 8004f58:	2010      	movs	r0, #16
 8004f5a:	f7fc fb13 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0227);
 8004f5e:	f240 2127 	movw	r1, #551	; 0x227
 8004f62:	2011      	movs	r0, #17
 8004f64:	f7fc fb0e 	bl	8001584 <LCD_WriteReg>
		//delayms(100);
		//vregiout 
		LCD_WriteReg(0x0012, 0x009D); //0x001b
 8004f68:	219d      	movs	r1, #157	; 0x9d
 8004f6a:	2012      	movs	r0, #18
 8004f6c:	f7fc fb0a 	bl	8001584 <LCD_WriteReg>
		//delayms(100); 
		//vom amplitude
		LCD_WriteReg(0x0013, 0x1900);
 8004f70:	f44f 51c8 	mov.w	r1, #6400	; 0x1900
 8004f74:	2013      	movs	r0, #19
 8004f76:	f7fc fb05 	bl	8001584 <LCD_WriteReg>
		//delayms(100); 
		//vom H
		LCD_WriteReg(0x0029, 0x0025);
 8004f7a:	2125      	movs	r1, #37	; 0x25
 8004f7c:	2029      	movs	r0, #41	; 0x29
 8004f7e:	f7fc fb01 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x002B, 0x000D);
 8004f82:	210d      	movs	r1, #13
 8004f84:	202b      	movs	r0, #43	; 0x2b
 8004f86:	f7fc fafd 	bl	8001584 <LCD_WriteReg>
		//gamma
		LCD_WriteReg(0x0030, 0x0007);
 8004f8a:	2107      	movs	r1, #7
 8004f8c:	2030      	movs	r0, #48	; 0x30
 8004f8e:	f7fc faf9 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0303);
 8004f92:	f240 3103 	movw	r1, #771	; 0x303
 8004f96:	2031      	movs	r0, #49	; 0x31
 8004f98:	f7fc faf4 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0003);		// 0006
 8004f9c:	2103      	movs	r1, #3
 8004f9e:	2032      	movs	r0, #50	; 0x32
 8004fa0:	f7fc faf0 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0206);
 8004fa4:	f240 2106 	movw	r1, #518	; 0x206
 8004fa8:	2035      	movs	r0, #53	; 0x35
 8004faa:	f7fc faeb 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x0008);
 8004fae:	2108      	movs	r1, #8
 8004fb0:	2036      	movs	r0, #54	; 0x36
 8004fb2:	f7fc fae7 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0406);
 8004fb6:	f240 4106 	movw	r1, #1030	; 0x406
 8004fba:	2037      	movs	r0, #55	; 0x37
 8004fbc:	f7fc fae2 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0304);		//0200
 8004fc0:	f44f 7141 	mov.w	r1, #772	; 0x304
 8004fc4:	2038      	movs	r0, #56	; 0x38
 8004fc6:	f7fc fadd 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0007);
 8004fca:	2107      	movs	r1, #7
 8004fcc:	2039      	movs	r0, #57	; 0x39
 8004fce:	f7fc fad9 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x003C, 0x0602);		// 0504
 8004fd2:	f240 6102 	movw	r1, #1538	; 0x602
 8004fd6:	203c      	movs	r0, #60	; 0x3c
 8004fd8:	f7fc fad4 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x003D, 0x0008);
 8004fdc:	2108      	movs	r1, #8
 8004fde:	203d      	movs	r0, #61	; 0x3d
 8004fe0:	f7fc fad0 	bl	8001584 <LCD_WriteReg>
		//ram
		LCD_WriteReg(0x0050, 0x0000);
 8004fe4:	2100      	movs	r1, #0
 8004fe6:	2050      	movs	r0, #80	; 0x50
 8004fe8:	f7fc facc 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00EF);
 8004fec:	21ef      	movs	r1, #239	; 0xef
 8004fee:	2051      	movs	r0, #81	; 0x51
 8004ff0:	f7fc fac8 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000);
 8004ff4:	2100      	movs	r1, #0
 8004ff6:	2052      	movs	r0, #82	; 0x52
 8004ff8:	f7fc fac4 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013F);
 8004ffc:	f240 113f 	movw	r1, #319	; 0x13f
 8005000:	2053      	movs	r0, #83	; 0x53
 8005002:	f7fc fabf 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0060, 0xA700);
 8005006:	f44f 4127 	mov.w	r1, #42752	; 0xa700
 800500a:	2060      	movs	r0, #96	; 0x60
 800500c:	f7fc faba 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001);
 8005010:	2101      	movs	r1, #1
 8005012:	2061      	movs	r0, #97	; 0x61
 8005014:	f7fc fab6 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x006A, 0x0000);
 8005018:	2100      	movs	r1, #0
 800501a:	206a      	movs	r0, #106	; 0x6a
 800501c:	f7fc fab2 	bl	8001584 <LCD_WriteReg>
		//
		LCD_WriteReg(0x0080, 0x0000);
 8005020:	2100      	movs	r1, #0
 8005022:	2080      	movs	r0, #128	; 0x80
 8005024:	f7fc faae 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0081, 0x0000);
 8005028:	2100      	movs	r1, #0
 800502a:	2081      	movs	r0, #129	; 0x81
 800502c:	f7fc faaa 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0082, 0x0000);
 8005030:	2100      	movs	r1, #0
 8005032:	2082      	movs	r0, #130	; 0x82
 8005034:	f7fc faa6 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0083, 0x0000);
 8005038:	2100      	movs	r1, #0
 800503a:	2083      	movs	r0, #131	; 0x83
 800503c:	f7fc faa2 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0084, 0x0000);
 8005040:	2100      	movs	r1, #0
 8005042:	2084      	movs	r0, #132	; 0x84
 8005044:	f7fc fa9e 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0085, 0x0000);
 8005048:	2100      	movs	r1, #0
 800504a:	2085      	movs	r0, #133	; 0x85
 800504c:	f7fc fa9a 	bl	8001584 <LCD_WriteReg>
		//
		LCD_WriteReg(0x0090, 0x0010);
 8005050:	2110      	movs	r1, #16
 8005052:	2090      	movs	r0, #144	; 0x90
 8005054:	f7fc fa96 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0600);
 8005058:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800505c:	2092      	movs	r0, #146	; 0x92
 800505e:	f7fc fa91 	bl	8001584 <LCD_WriteReg>

		LCD_WriteReg(0x0007, 0x0133);
 8005062:	f240 1133 	movw	r1, #307	; 0x133
 8005066:	2007      	movs	r0, #7
 8005068:	f7fc fa8c 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x00, 0x0022);		//
 800506c:	2122      	movs	r1, #34	; 0x22
 800506e:	2000      	movs	r0, #0
 8005070:	f7fc fa88 	bl	8001584 <LCD_WriteReg>
 8005074:	f001 bc3a 	b.w	80068ec <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x9328)		//ILI9328   OK
 8005078:	4b7d      	ldr	r3, [pc, #500]	; (8005270 <LCD_Init+0x27b8>)
 800507a:	889b      	ldrh	r3, [r3, #4]
 800507c:	f249 3228 	movw	r2, #37672	; 0x9328
 8005080:	4293      	cmp	r3, r2
 8005082:	f040 80f7 	bne.w	8005274 <LCD_Init+0x27bc>
			{
		LCD_WriteReg(0x00EC, 0x108F);		// internal timeing
 8005086:	f241 018f 	movw	r1, #4239	; 0x108f
 800508a:	20ec      	movs	r0, #236	; 0xec
 800508c:	f7fc fa7a 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x00EF, 0x1234);		// ADD
 8005090:	f241 2134 	movw	r1, #4660	; 0x1234
 8005094:	20ef      	movs	r0, #239	; 0xef
 8005096:	f7fc fa75 	bl	8001584 <LCD_WriteReg>
		//LCD_WriteReg(0x00e7,0x0010);      
		//LCD_WriteReg(0x0000,0x0001);//开启内部时钟
		LCD_WriteReg(0x0001, 0x0100);
 800509a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800509e:	2001      	movs	r0, #1
 80050a0:	f7fc fa70 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0700);        //电源开启
 80050a4:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80050a8:	2002      	movs	r0, #2
 80050aa:	f7fc fa6b 	bl	8001584 <LCD_WriteReg>
		// 1  1   0    D->U	L->R
		// 0  0   1	   R->L U->D
		// 1  0   1    U->D	R->L
		// 0  1   1    L->R U->D 正常就用这个.
		// 1  1   1	   U->D	L->R
		LCD_WriteReg(0x0003, (1 << 12) | (3 << 4) | (0 << 3));		//65K
 80050ae:	f241 0130 	movw	r1, #4144	; 0x1030
 80050b2:	2003      	movs	r0, #3
 80050b4:	f7fc fa66 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0004, 0x0000);
 80050b8:	2100      	movs	r1, #0
 80050ba:	2004      	movs	r0, #4
 80050bc:	f7fc fa62 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x0202);
 80050c0:	f240 2102 	movw	r1, #514	; 0x202
 80050c4:	2008      	movs	r0, #8
 80050c6:	f7fc fa5d 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0009, 0x0000);
 80050ca:	2100      	movs	r1, #0
 80050cc:	2009      	movs	r0, #9
 80050ce:	f7fc fa59 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x000a, 0x0000);		//display setting
 80050d2:	2100      	movs	r1, #0
 80050d4:	200a      	movs	r0, #10
 80050d6:	f7fc fa55 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x000c, 0x0001);		//display setting
 80050da:	2101      	movs	r1, #1
 80050dc:	200c      	movs	r0, #12
 80050de:	f7fc fa51 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x000d, 0x0000);		//0f3c
 80050e2:	2100      	movs	r1, #0
 80050e4:	200d      	movs	r0, #13
 80050e6:	f7fc fa4d 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x000f, 0x0000);
 80050ea:	2100      	movs	r1, #0
 80050ec:	200f      	movs	r0, #15
 80050ee:	f7fc fa49 	bl	8001584 <LCD_WriteReg>
		//电源配置
		LCD_WriteReg(0x0010, 0x0000);
 80050f2:	2100      	movs	r1, #0
 80050f4:	2010      	movs	r0, #16
 80050f6:	f7fc fa45 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0007);
 80050fa:	2107      	movs	r1, #7
 80050fc:	2011      	movs	r0, #17
 80050fe:	f7fc fa41 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x0000);
 8005102:	2100      	movs	r1, #0
 8005104:	2012      	movs	r0, #18
 8005106:	f7fc fa3d 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0000);
 800510a:	2100      	movs	r1, #0
 800510c:	2013      	movs	r0, #19
 800510e:	f7fc fa39 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0001);
 8005112:	2101      	movs	r1, #1
 8005114:	2007      	movs	r0, #7
 8005116:	f7fc fa35 	bl	8001584 <LCD_WriteReg>
		HAL_Delay(50);
 800511a:	2032      	movs	r0, #50	; 0x32
 800511c:	f003 f9e4 	bl	80084e8 <HAL_Delay>
		LCD_WriteReg(0x0010, 0x1490);
 8005120:	f241 4190 	movw	r1, #5264	; 0x1490
 8005124:	2010      	movs	r0, #16
 8005126:	f7fc fa2d 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0227);
 800512a:	f240 2127 	movw	r1, #551	; 0x227
 800512e:	2011      	movs	r0, #17
 8005130:	f7fc fa28 	bl	8001584 <LCD_WriteReg>
		HAL_Delay(50);
 8005134:	2032      	movs	r0, #50	; 0x32
 8005136:	f003 f9d7 	bl	80084e8 <HAL_Delay>
		LCD_WriteReg(0x0012, 0x008A);
 800513a:	218a      	movs	r1, #138	; 0x8a
 800513c:	2012      	movs	r0, #18
 800513e:	f7fc fa21 	bl	8001584 <LCD_WriteReg>
		HAL_Delay(50);
 8005142:	2032      	movs	r0, #50	; 0x32
 8005144:	f003 f9d0 	bl	80084e8 <HAL_Delay>
		LCD_WriteReg(0x0013, 0x1a00);
 8005148:	f44f 51d0 	mov.w	r1, #6656	; 0x1a00
 800514c:	2013      	movs	r0, #19
 800514e:	f7fc fa19 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0029, 0x0006);
 8005152:	2106      	movs	r1, #6
 8005154:	2029      	movs	r0, #41	; 0x29
 8005156:	f7fc fa15 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x002b, 0x000d);
 800515a:	210d      	movs	r1, #13
 800515c:	202b      	movs	r0, #43	; 0x2b
 800515e:	f7fc fa11 	bl	8001584 <LCD_WriteReg>
		HAL_Delay(50);
 8005162:	2032      	movs	r0, #50	; 0x32
 8005164:	f003 f9c0 	bl	80084e8 <HAL_Delay>
		LCD_WriteReg(0x0020, 0x0000);
 8005168:	2100      	movs	r1, #0
 800516a:	2020      	movs	r0, #32
 800516c:	f7fc fa0a 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x0000);
 8005170:	2100      	movs	r1, #0
 8005172:	2021      	movs	r0, #33	; 0x21
 8005174:	f7fc fa06 	bl	8001584 <LCD_WriteReg>
		HAL_Delay(50);
 8005178:	2032      	movs	r0, #50	; 0x32
 800517a:	f003 f9b5 	bl	80084e8 <HAL_Delay>
		//伽马校正
		LCD_WriteReg(0x0030, 0x0000);
 800517e:	2100      	movs	r1, #0
 8005180:	2030      	movs	r0, #48	; 0x30
 8005182:	f7fc f9ff 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0604);
 8005186:	f240 6104 	movw	r1, #1540	; 0x604
 800518a:	2031      	movs	r0, #49	; 0x31
 800518c:	f7fc f9fa 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0305);
 8005190:	f240 3105 	movw	r1, #773	; 0x305
 8005194:	2032      	movs	r0, #50	; 0x32
 8005196:	f7fc f9f5 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0000);
 800519a:	2100      	movs	r1, #0
 800519c:	2035      	movs	r0, #53	; 0x35
 800519e:	f7fc f9f1 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x0C09);
 80051a2:	f640 4109 	movw	r1, #3081	; 0xc09
 80051a6:	2036      	movs	r0, #54	; 0x36
 80051a8:	f7fc f9ec 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0204);
 80051ac:	f44f 7101 	mov.w	r1, #516	; 0x204
 80051b0:	2037      	movs	r0, #55	; 0x37
 80051b2:	f7fc f9e7 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0301);
 80051b6:	f240 3101 	movw	r1, #769	; 0x301
 80051ba:	2038      	movs	r0, #56	; 0x38
 80051bc:	f7fc f9e2 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0707);
 80051c0:	f240 7107 	movw	r1, #1799	; 0x707
 80051c4:	2039      	movs	r0, #57	; 0x39
 80051c6:	f7fc f9dd 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x003c, 0x0000);
 80051ca:	2100      	movs	r1, #0
 80051cc:	203c      	movs	r0, #60	; 0x3c
 80051ce:	f7fc f9d9 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x003d, 0x0a0a);
 80051d2:	f640 210a 	movw	r1, #2570	; 0xa0a
 80051d6:	203d      	movs	r0, #61	; 0x3d
 80051d8:	f7fc f9d4 	bl	8001584 <LCD_WriteReg>
		HAL_Delay(50);
 80051dc:	2032      	movs	r0, #50	; 0x32
 80051de:	f003 f983 	bl	80084e8 <HAL_Delay>
		LCD_WriteReg(0x0050, 0x0000); //水平GRAM起始位置
 80051e2:	2100      	movs	r1, #0
 80051e4:	2050      	movs	r0, #80	; 0x50
 80051e6:	f7fc f9cd 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00ef); //水平GRAM终止位置
 80051ea:	21ef      	movs	r1, #239	; 0xef
 80051ec:	2051      	movs	r0, #81	; 0x51
 80051ee:	f7fc f9c9 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000); //垂直GRAM起始位置
 80051f2:	2100      	movs	r1, #0
 80051f4:	2052      	movs	r0, #82	; 0x52
 80051f6:	f7fc f9c5 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013f); //垂直GRAM终止位置
 80051fa:	f240 113f 	movw	r1, #319	; 0x13f
 80051fe:	2053      	movs	r0, #83	; 0x53
 8005200:	f7fc f9c0 	bl	8001584 <LCD_WriteReg>

		LCD_WriteReg(0x0060, 0xa700);
 8005204:	f44f 4127 	mov.w	r1, #42752	; 0xa700
 8005208:	2060      	movs	r0, #96	; 0x60
 800520a:	f7fc f9bb 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001);
 800520e:	2101      	movs	r1, #1
 8005210:	2061      	movs	r0, #97	; 0x61
 8005212:	f7fc f9b7 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x006a, 0x0000);
 8005216:	2100      	movs	r1, #0
 8005218:	206a      	movs	r0, #106	; 0x6a
 800521a:	f7fc f9b3 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0080, 0x0000);
 800521e:	2100      	movs	r1, #0
 8005220:	2080      	movs	r0, #128	; 0x80
 8005222:	f7fc f9af 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0081, 0x0000);
 8005226:	2100      	movs	r1, #0
 8005228:	2081      	movs	r0, #129	; 0x81
 800522a:	f7fc f9ab 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0082, 0x0000);
 800522e:	2100      	movs	r1, #0
 8005230:	2082      	movs	r0, #130	; 0x82
 8005232:	f7fc f9a7 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0083, 0x0000);
 8005236:	2100      	movs	r1, #0
 8005238:	2083      	movs	r0, #131	; 0x83
 800523a:	f7fc f9a3 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0084, 0x0000);
 800523e:	2100      	movs	r1, #0
 8005240:	2084      	movs	r0, #132	; 0x84
 8005242:	f7fc f99f 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0085, 0x0000);
 8005246:	2100      	movs	r1, #0
 8005248:	2085      	movs	r0, #133	; 0x85
 800524a:	f7fc f99b 	bl	8001584 <LCD_WriteReg>

		LCD_WriteReg(0x0090, 0x0010);
 800524e:	2110      	movs	r1, #16
 8005250:	2090      	movs	r0, #144	; 0x90
 8005252:	f7fc f997 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0600);
 8005256:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800525a:	2092      	movs	r0, #146	; 0x92
 800525c:	f7fc f992 	bl	8001584 <LCD_WriteReg>
		//开启显示设置
		LCD_WriteReg(0x0007, 0x0133);
 8005260:	f240 1133 	movw	r1, #307	; 0x133
 8005264:	2007      	movs	r0, #7
 8005266:	f7fc f98d 	bl	8001584 <LCD_WriteReg>
 800526a:	f001 bb3f 	b.w	80068ec <LCD_Init+0x3e34>
 800526e:	bf00      	nop
 8005270:	200000bc 	.word	0x200000bc
	} else if (lcddev.id == 0x9320) //测试OK.
 8005274:	4bce      	ldr	r3, [pc, #824]	; (80055b0 <LCD_Init+0x2af8>)
 8005276:	889b      	ldrh	r3, [r3, #4]
 8005278:	f249 3220 	movw	r2, #37664	; 0x9320
 800527c:	4293      	cmp	r3, r2
 800527e:	f040 80ad 	bne.w	80053dc <LCD_Init+0x2924>
			{
		LCD_WriteReg(0x00, 0x0000);
 8005282:	2100      	movs	r1, #0
 8005284:	2000      	movs	r0, #0
 8005286:	f7fc f97d 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x01, 0x0100);	//Driver Output Contral.
 800528a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800528e:	2001      	movs	r0, #1
 8005290:	f7fc f978 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x02, 0x0700);	//LCD Driver Waveform Contral.
 8005294:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8005298:	2002      	movs	r0, #2
 800529a:	f7fc f973 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x03, 0x1030);	//Entry Mode Set.
 800529e:	f241 0130 	movw	r1, #4144	; 0x1030
 80052a2:	2003      	movs	r0, #3
 80052a4:	f7fc f96e 	bl	8001584 <LCD_WriteReg>
		//LCD_WriteReg(0x03,0x1018);	//Entry Mode Set.

		LCD_WriteReg(0x04, 0x0000);	//Scalling Contral.
 80052a8:	2100      	movs	r1, #0
 80052aa:	2004      	movs	r0, #4
 80052ac:	f7fc f96a 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x08, 0x0202);	//Display Contral 2.(0x0207)
 80052b0:	f240 2102 	movw	r1, #514	; 0x202
 80052b4:	2008      	movs	r0, #8
 80052b6:	f7fc f965 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x09, 0x0000);	//Display Contral 3.(0x0000)
 80052ba:	2100      	movs	r1, #0
 80052bc:	2009      	movs	r0, #9
 80052be:	f7fc f961 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0a, 0x0000);	//Frame Cycle Contal.(0x0000)
 80052c2:	2100      	movs	r1, #0
 80052c4:	200a      	movs	r0, #10
 80052c6:	f7fc f95d 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0c, (1 << 0));	//Extern Display Interface Contral 1.(0x0000)
 80052ca:	2101      	movs	r1, #1
 80052cc:	200c      	movs	r0, #12
 80052ce:	f7fc f959 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0d, 0x0000);	//Frame Maker Position.
 80052d2:	2100      	movs	r1, #0
 80052d4:	200d      	movs	r0, #13
 80052d6:	f7fc f955 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0f, 0x0000);	//Extern Display Interface Contral 2.
 80052da:	2100      	movs	r1, #0
 80052dc:	200f      	movs	r0, #15
 80052de:	f7fc f951 	bl	8001584 <LCD_WriteReg>
		HAL_Delay(50);
 80052e2:	2032      	movs	r0, #50	; 0x32
 80052e4:	f003 f900 	bl	80084e8 <HAL_Delay>
		LCD_WriteReg(0x07, 0x0101);	//Display Contral.
 80052e8:	f240 1101 	movw	r1, #257	; 0x101
 80052ec:	2007      	movs	r0, #7
 80052ee:	f7fc f949 	bl	8001584 <LCD_WriteReg>
		HAL_Delay(50);
 80052f2:	2032      	movs	r0, #50	; 0x32
 80052f4:	f003 f8f8 	bl	80084e8 <HAL_Delay>
		LCD_WriteReg(0x10, (1 << 12) | (0 << 8) | (1 << 7) | (1 << 6) | (0 << 4));//Power Control 1.(0x16b0)
 80052f8:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
 80052fc:	2010      	movs	r0, #16
 80052fe:	f7fc f941 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x11, 0x0007);								//Power Control 2.(0x0001)
 8005302:	2107      	movs	r1, #7
 8005304:	2011      	movs	r0, #17
 8005306:	f7fc f93d 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x12, (1 << 8) | (1 << 4) | (0 << 0));	//Power Control 3.(0x0138)
 800530a:	f44f 7188 	mov.w	r1, #272	; 0x110
 800530e:	2012      	movs	r0, #18
 8005310:	f7fc f938 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x13, 0x0b00);								//Power Control 4.
 8005314:	f44f 6130 	mov.w	r1, #2816	; 0xb00
 8005318:	2013      	movs	r0, #19
 800531a:	f7fc f933 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x29, 0x0000);								//Power Control 7.
 800531e:	2100      	movs	r1, #0
 8005320:	2029      	movs	r0, #41	; 0x29
 8005322:	f7fc f92f 	bl	8001584 <LCD_WriteReg>

		LCD_WriteReg(0x2b, (1 << 14) | (1 << 4));
 8005326:	f244 0110 	movw	r1, #16400	; 0x4010
 800532a:	202b      	movs	r0, #43	; 0x2b
 800532c:	f7fc f92a 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x50, 0);	//Set X Star
 8005330:	2100      	movs	r1, #0
 8005332:	2050      	movs	r0, #80	; 0x50
 8005334:	f7fc f926 	bl	8001584 <LCD_WriteReg>
		//水平GRAM终止位置Set X End.
		LCD_WriteReg(0x51, 239);	//Set Y Star
 8005338:	21ef      	movs	r1, #239	; 0xef
 800533a:	2051      	movs	r0, #81	; 0x51
 800533c:	f7fc f922 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x52, 0);	//Set Y End.t.
 8005340:	2100      	movs	r1, #0
 8005342:	2052      	movs	r0, #82	; 0x52
 8005344:	f7fc f91e 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x53, 319);	//
 8005348:	f240 113f 	movw	r1, #319	; 0x13f
 800534c:	2053      	movs	r0, #83	; 0x53
 800534e:	f7fc f919 	bl	8001584 <LCD_WriteReg>

		LCD_WriteReg(0x60, 0x2700);	//Driver Output Control.
 8005352:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8005356:	2060      	movs	r0, #96	; 0x60
 8005358:	f7fc f914 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x61, 0x0001);	//Driver Output Control.
 800535c:	2101      	movs	r1, #1
 800535e:	2061      	movs	r0, #97	; 0x61
 8005360:	f7fc f910 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x6a, 0x0000);	//Vertical Srcoll Control.
 8005364:	2100      	movs	r1, #0
 8005366:	206a      	movs	r0, #106	; 0x6a
 8005368:	f7fc f90c 	bl	8001584 <LCD_WriteReg>

		LCD_WriteReg(0x80, 0x0000);	//Display Position? Partial Display 1.
 800536c:	2100      	movs	r1, #0
 800536e:	2080      	movs	r0, #128	; 0x80
 8005370:	f7fc f908 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x81, 0x0000);	//RAM Address Start? Partial Display 1.
 8005374:	2100      	movs	r1, #0
 8005376:	2081      	movs	r0, #129	; 0x81
 8005378:	f7fc f904 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x82, 0x0000);	//RAM Address End-Partial Display 1.
 800537c:	2100      	movs	r1, #0
 800537e:	2082      	movs	r0, #130	; 0x82
 8005380:	f7fc f900 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x83, 0x0000);	//Displsy Position? Partial Display 2.
 8005384:	2100      	movs	r1, #0
 8005386:	2083      	movs	r0, #131	; 0x83
 8005388:	f7fc f8fc 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x84, 0x0000);	//RAM Address Start? Partial Display 2.
 800538c:	2100      	movs	r1, #0
 800538e:	2084      	movs	r0, #132	; 0x84
 8005390:	f7fc f8f8 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x85, 0x0000);	//RAM Address End? Partial Display 2.
 8005394:	2100      	movs	r1, #0
 8005396:	2085      	movs	r0, #133	; 0x85
 8005398:	f7fc f8f4 	bl	8001584 <LCD_WriteReg>

		LCD_WriteReg(0x90, (0 << 7) | (16 << 0));	//Frame Cycle Contral.(0x0013)
 800539c:	2110      	movs	r1, #16
 800539e:	2090      	movs	r0, #144	; 0x90
 80053a0:	f7fc f8f0 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x92, 0x0000);	//Panel Interface Contral 2.(0x0000)
 80053a4:	2100      	movs	r1, #0
 80053a6:	2092      	movs	r0, #146	; 0x92
 80053a8:	f7fc f8ec 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x93, 0x0001);	//Panel Interface Contral 3.
 80053ac:	2101      	movs	r1, #1
 80053ae:	2093      	movs	r0, #147	; 0x93
 80053b0:	f7fc f8e8 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x95, 0x0110);	//Frame Cycle Contral.(0x0110)
 80053b4:	f44f 7188 	mov.w	r1, #272	; 0x110
 80053b8:	2095      	movs	r0, #149	; 0x95
 80053ba:	f7fc f8e3 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x97, (0 << 8));	//
 80053be:	2100      	movs	r1, #0
 80053c0:	2097      	movs	r0, #151	; 0x97
 80053c2:	f7fc f8df 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x98, 0x0000);	//Frame Cycle Contral.
 80053c6:	2100      	movs	r1, #0
 80053c8:	2098      	movs	r0, #152	; 0x98
 80053ca:	f7fc f8db 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x07, 0x0173);	//(0x0173)
 80053ce:	f240 1173 	movw	r1, #371	; 0x173
 80053d2:	2007      	movs	r0, #7
 80053d4:	f7fc f8d6 	bl	8001584 <LCD_WriteReg>
 80053d8:	f001 ba88 	b.w	80068ec <LCD_Init+0x3e34>
	} else if (lcddev.id == 0X9331)	//OK |/|/|
 80053dc:	4b74      	ldr	r3, [pc, #464]	; (80055b0 <LCD_Init+0x2af8>)
 80053de:	889b      	ldrh	r3, [r3, #4]
 80053e0:	f249 3231 	movw	r2, #37681	; 0x9331
 80053e4:	4293      	cmp	r3, r2
 80053e6:	f040 80e5 	bne.w	80055b4 <LCD_Init+0x2afc>
			{
		LCD_WriteReg(0x00E7, 0x1014);
 80053ea:	f241 0114 	movw	r1, #4116	; 0x1014
 80053ee:	20e7      	movs	r0, #231	; 0xe7
 80053f0:	f7fc f8c8 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0001, 0x0100); // set SS and SM bit
 80053f4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80053f8:	2001      	movs	r0, #1
 80053fa:	f7fc f8c3 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0200); // set 1 line inversion
 80053fe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005402:	2002      	movs	r0, #2
 8005404:	f7fc f8be 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0003, (1 << 12) | (3 << 4) | (1 << 3)); //65K
 8005408:	f241 0138 	movw	r1, #4152	; 0x1038
 800540c:	2003      	movs	r0, #3
 800540e:	f7fc f8b9 	bl	8001584 <LCD_WriteReg>
		//LCD_WriteReg(0x0003, 0x1030); // set GRAM write direction and BGR=1.
		LCD_WriteReg(0x0008, 0x0202); // set the back porch and front porch
 8005412:	f240 2102 	movw	r1, #514	; 0x202
 8005416:	2008      	movs	r0, #8
 8005418:	f7fc f8b4 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0009, 0x0000); // set non-display area refresh cycle ISC[3:0]
 800541c:	2100      	movs	r1, #0
 800541e:	2009      	movs	r0, #9
 8005420:	f7fc f8b0 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x000A, 0x0000); // FMARK function
 8005424:	2100      	movs	r1, #0
 8005426:	200a      	movs	r0, #10
 8005428:	f7fc f8ac 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000); // RGB interface setting
 800542c:	2100      	movs	r1, #0
 800542e:	200c      	movs	r0, #12
 8005430:	f7fc f8a8 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x000D, 0x0000); // Frame marker Position
 8005434:	2100      	movs	r1, #0
 8005436:	200d      	movs	r0, #13
 8005438:	f7fc f8a4 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000); // RGB interface polarity
 800543c:	2100      	movs	r1, #0
 800543e:	200f      	movs	r0, #15
 8005440:	f7fc f8a0 	bl	8001584 <LCD_WriteReg>
		//*************Power On sequence ****************//
		LCD_WriteReg(0x0010, 0x0000); // SAP, BT[3:0], AP, DSTB, SLP, STB
 8005444:	2100      	movs	r1, #0
 8005446:	2010      	movs	r0, #16
 8005448:	f7fc f89c 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0007); // DC1[2:0], DC0[2:0], VC[2:0]
 800544c:	2107      	movs	r1, #7
 800544e:	2011      	movs	r0, #17
 8005450:	f7fc f898 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x0000); // VREG1OUT voltage
 8005454:	2100      	movs	r1, #0
 8005456:	2012      	movs	r0, #18
 8005458:	f7fc f894 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0000); // VDV[4:0] for VCOM amplitude
 800545c:	2100      	movs	r1, #0
 800545e:	2013      	movs	r0, #19
 8005460:	f7fc f890 	bl	8001584 <LCD_WriteReg>
		HAL_Delay(200); // Dis-charge capacitor power voltage
 8005464:	20c8      	movs	r0, #200	; 0xc8
 8005466:	f003 f83f 	bl	80084e8 <HAL_Delay>
		LCD_WriteReg(0x0010, 0x1690); // SAP, BT[3:0], AP, DSTB, SLP, STB
 800546a:	f241 6190 	movw	r1, #5776	; 0x1690
 800546e:	2010      	movs	r0, #16
 8005470:	f7fc f888 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0227); // DC1[2:0], DC0[2:0], VC[2:0]
 8005474:	f240 2127 	movw	r1, #551	; 0x227
 8005478:	2011      	movs	r0, #17
 800547a:	f7fc f883 	bl	8001584 <LCD_WriteReg>
		HAL_Delay(50); // Delay 50ms
 800547e:	2032      	movs	r0, #50	; 0x32
 8005480:	f003 f832 	bl	80084e8 <HAL_Delay>
		LCD_WriteReg(0x0012, 0x000C); // Internal reference voltage= Vci;
 8005484:	210c      	movs	r1, #12
 8005486:	2012      	movs	r0, #18
 8005488:	f7fc f87c 	bl	8001584 <LCD_WriteReg>
		HAL_Delay(50); // Delay 50ms
 800548c:	2032      	movs	r0, #50	; 0x32
 800548e:	f003 f82b 	bl	80084e8 <HAL_Delay>
		LCD_WriteReg(0x0013, 0x0800); // Set VDV[4:0] for VCOM amplitude
 8005492:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005496:	2013      	movs	r0, #19
 8005498:	f7fc f874 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0029, 0x0011); // Set VCM[5:0] for VCOMH
 800549c:	2111      	movs	r1, #17
 800549e:	2029      	movs	r0, #41	; 0x29
 80054a0:	f7fc f870 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x002B, 0x000B); // Set Frame Rate
 80054a4:	210b      	movs	r1, #11
 80054a6:	202b      	movs	r0, #43	; 0x2b
 80054a8:	f7fc f86c 	bl	8001584 <LCD_WriteReg>
		HAL_Delay(50); // Delay 50ms
 80054ac:	2032      	movs	r0, #50	; 0x32
 80054ae:	f003 f81b 	bl	80084e8 <HAL_Delay>
		LCD_WriteReg(0x0020, 0x0000); // GRAM horizontal Address
 80054b2:	2100      	movs	r1, #0
 80054b4:	2020      	movs	r0, #32
 80054b6:	f7fc f865 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x013f); // GRAM Vertical Address
 80054ba:	f240 113f 	movw	r1, #319	; 0x13f
 80054be:	2021      	movs	r0, #33	; 0x21
 80054c0:	f7fc f860 	bl	8001584 <LCD_WriteReg>
		// ----------- Adjust the Gamma Curve ----------//
		LCD_WriteReg(0x0030, 0x0000);
 80054c4:	2100      	movs	r1, #0
 80054c6:	2030      	movs	r0, #48	; 0x30
 80054c8:	f7fc f85c 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0106);
 80054cc:	f44f 7183 	mov.w	r1, #262	; 0x106
 80054d0:	2031      	movs	r0, #49	; 0x31
 80054d2:	f7fc f857 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0000);
 80054d6:	2100      	movs	r1, #0
 80054d8:	2032      	movs	r0, #50	; 0x32
 80054da:	f7fc f853 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0204);
 80054de:	f44f 7101 	mov.w	r1, #516	; 0x204
 80054e2:	2035      	movs	r0, #53	; 0x35
 80054e4:	f7fc f84e 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x160A);
 80054e8:	f241 610a 	movw	r1, #5642	; 0x160a
 80054ec:	2036      	movs	r0, #54	; 0x36
 80054ee:	f7fc f849 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0707);
 80054f2:	f240 7107 	movw	r1, #1799	; 0x707
 80054f6:	2037      	movs	r0, #55	; 0x37
 80054f8:	f7fc f844 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0106);
 80054fc:	f44f 7183 	mov.w	r1, #262	; 0x106
 8005500:	2038      	movs	r0, #56	; 0x38
 8005502:	f7fc f83f 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0707);
 8005506:	f240 7107 	movw	r1, #1799	; 0x707
 800550a:	2039      	movs	r0, #57	; 0x39
 800550c:	f7fc f83a 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x003C, 0x0402);
 8005510:	f240 4102 	movw	r1, #1026	; 0x402
 8005514:	203c      	movs	r0, #60	; 0x3c
 8005516:	f7fc f835 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x003D, 0x0C0F);
 800551a:	f640 410f 	movw	r1, #3087	; 0xc0f
 800551e:	203d      	movs	r0, #61	; 0x3d
 8005520:	f7fc f830 	bl	8001584 <LCD_WriteReg>
		//------------------ Set GRAM area ---------------//
		LCD_WriteReg(0x0050, 0x0000); // Horizontal GRAM Start Address
 8005524:	2100      	movs	r1, #0
 8005526:	2050      	movs	r0, #80	; 0x50
 8005528:	f7fc f82c 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00EF); // Horizontal GRAM End Address
 800552c:	21ef      	movs	r1, #239	; 0xef
 800552e:	2051      	movs	r0, #81	; 0x51
 8005530:	f7fc f828 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000); // Vertical GRAM Start Address
 8005534:	2100      	movs	r1, #0
 8005536:	2052      	movs	r0, #82	; 0x52
 8005538:	f7fc f824 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013F); // Vertical GRAM Start Address
 800553c:	f240 113f 	movw	r1, #319	; 0x13f
 8005540:	2053      	movs	r0, #83	; 0x53
 8005542:	f7fc f81f 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0060, 0x2700); // Gate Scan Line
 8005546:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 800554a:	2060      	movs	r0, #96	; 0x60
 800554c:	f7fc f81a 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001); // NDL,VLE, REV 
 8005550:	2101      	movs	r1, #1
 8005552:	2061      	movs	r0, #97	; 0x61
 8005554:	f7fc f816 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x006A, 0x0000); // set scrolling line
 8005558:	2100      	movs	r1, #0
 800555a:	206a      	movs	r0, #106	; 0x6a
 800555c:	f7fc f812 	bl	8001584 <LCD_WriteReg>
		//-------------- Partial Display Control ---------//
		LCD_WriteReg(0x0080, 0x0000);
 8005560:	2100      	movs	r1, #0
 8005562:	2080      	movs	r0, #128	; 0x80
 8005564:	f7fc f80e 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0081, 0x0000);
 8005568:	2100      	movs	r1, #0
 800556a:	2081      	movs	r0, #129	; 0x81
 800556c:	f7fc f80a 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0082, 0x0000);
 8005570:	2100      	movs	r1, #0
 8005572:	2082      	movs	r0, #130	; 0x82
 8005574:	f7fc f806 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0083, 0x0000);
 8005578:	2100      	movs	r1, #0
 800557a:	2083      	movs	r0, #131	; 0x83
 800557c:	f7fc f802 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0084, 0x0000);
 8005580:	2100      	movs	r1, #0
 8005582:	2084      	movs	r0, #132	; 0x84
 8005584:	f7fb fffe 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0085, 0x0000);
 8005588:	2100      	movs	r1, #0
 800558a:	2085      	movs	r0, #133	; 0x85
 800558c:	f7fb fffa 	bl	8001584 <LCD_WriteReg>
		//-------------- Panel Control -------------------//
		LCD_WriteReg(0x0090, 0x0010);
 8005590:	2110      	movs	r1, #16
 8005592:	2090      	movs	r0, #144	; 0x90
 8005594:	f7fb fff6 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0600);
 8005598:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800559c:	2092      	movs	r0, #146	; 0x92
 800559e:	f7fb fff1 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0133); // 262K color and display ON
 80055a2:	f240 1133 	movw	r1, #307	; 0x133
 80055a6:	2007      	movs	r0, #7
 80055a8:	f7fb ffec 	bl	8001584 <LCD_WriteReg>
 80055ac:	f001 b99e 	b.w	80068ec <LCD_Init+0x3e34>
 80055b0:	200000bc 	.word	0x200000bc
	} else if (lcddev.id == 0x5408) {
 80055b4:	4be2      	ldr	r3, [pc, #904]	; (8005940 <LCD_Init+0x2e88>)
 80055b6:	889b      	ldrh	r3, [r3, #4]
 80055b8:	f245 4208 	movw	r2, #21512	; 0x5408
 80055bc:	4293      	cmp	r3, r2
 80055be:	f040 80a3 	bne.w	8005708 <LCD_Init+0x2c50>
		LCD_WriteReg(0x01, 0x0100);
 80055c2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80055c6:	2001      	movs	r0, #1
 80055c8:	f7fb ffdc 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x02, 0x0700); //LCD Driving Waveform Contral
 80055cc:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80055d0:	2002      	movs	r0, #2
 80055d2:	f7fb ffd7 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x03, 0x1030); //Entry Mode设置
 80055d6:	f241 0130 	movw	r1, #4144	; 0x1030
 80055da:	2003      	movs	r0, #3
 80055dc:	f7fb ffd2 	bl	8001584 <LCD_WriteReg>
		//指针从左至右自上而下的自动增模式
		//Normal Mode(Window Mode disable)
		//RGB格式
		//16位数据2次传输的8总线设置
		LCD_WriteReg(0x04, 0x0000); //Scalling Control register
 80055e0:	2100      	movs	r1, #0
 80055e2:	2004      	movs	r0, #4
 80055e4:	f7fb ffce 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x08, 0x0207); //Display Control 2
 80055e8:	f240 2107 	movw	r1, #519	; 0x207
 80055ec:	2008      	movs	r0, #8
 80055ee:	f7fb ffc9 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x09, 0x0000); //Display Control 3
 80055f2:	2100      	movs	r1, #0
 80055f4:	2009      	movs	r0, #9
 80055f6:	f7fb ffc5 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0A, 0x0000); //Frame Cycle Control
 80055fa:	2100      	movs	r1, #0
 80055fc:	200a      	movs	r0, #10
 80055fe:	f7fb ffc1 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0C, 0x0000); //External Display Interface Control 1
 8005602:	2100      	movs	r1, #0
 8005604:	200c      	movs	r0, #12
 8005606:	f7fb ffbd 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0D, 0x0000); //Frame Maker Position
 800560a:	2100      	movs	r1, #0
 800560c:	200d      	movs	r0, #13
 800560e:	f7fb ffb9 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0F, 0x0000); //External Display Interface Control 2
 8005612:	2100      	movs	r1, #0
 8005614:	200f      	movs	r0, #15
 8005616:	f7fb ffb5 	bl	8001584 <LCD_WriteReg>
		HAL_Delay(20);
 800561a:	2014      	movs	r0, #20
 800561c:	f002 ff64 	bl	80084e8 <HAL_Delay>
		//TFT 液晶彩色图像显示方法14
		LCD_WriteReg(0x10, 0x16B0); //0x14B0 //Power Control 1
 8005620:	f241 61b0 	movw	r1, #5808	; 0x16b0
 8005624:	2010      	movs	r0, #16
 8005626:	f7fb ffad 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x11, 0x0001); //0x0007 //Power Control 2
 800562a:	2101      	movs	r1, #1
 800562c:	2011      	movs	r0, #17
 800562e:	f7fb ffa9 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x17, 0x0001); //0x0000 //Power Control 3
 8005632:	2101      	movs	r1, #1
 8005634:	2017      	movs	r0, #23
 8005636:	f7fb ffa5 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x12, 0x0138); //0x013B //Power Control 4
 800563a:	f44f 719c 	mov.w	r1, #312	; 0x138
 800563e:	2012      	movs	r0, #18
 8005640:	f7fb ffa0 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x13, 0x0800); //0x0800 //Power Control 5
 8005644:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005648:	2013      	movs	r0, #19
 800564a:	f7fb ff9b 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x29, 0x0009); //NVM read data 2
 800564e:	2109      	movs	r1, #9
 8005650:	2029      	movs	r0, #41	; 0x29
 8005652:	f7fb ff97 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x2a, 0x0009); //NVM read data 3
 8005656:	2109      	movs	r1, #9
 8005658:	202a      	movs	r0, #42	; 0x2a
 800565a:	f7fb ff93 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0xa4, 0x0000);
 800565e:	2100      	movs	r1, #0
 8005660:	20a4      	movs	r0, #164	; 0xa4
 8005662:	f7fb ff8f 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x50, 0x0000); //设置操作窗口的X轴开始列
 8005666:	2100      	movs	r1, #0
 8005668:	2050      	movs	r0, #80	; 0x50
 800566a:	f7fb ff8b 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x51, 0x00EF); //设置操作窗口的X轴结束列
 800566e:	21ef      	movs	r1, #239	; 0xef
 8005670:	2051      	movs	r0, #81	; 0x51
 8005672:	f7fb ff87 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x52, 0x0000); //设置操作窗口的Y轴开始行
 8005676:	2100      	movs	r1, #0
 8005678:	2052      	movs	r0, #82	; 0x52
 800567a:	f7fb ff83 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x53, 0x013F); //设置操作窗口的Y轴结束行
 800567e:	f240 113f 	movw	r1, #319	; 0x13f
 8005682:	2053      	movs	r0, #83	; 0x53
 8005684:	f7fb ff7e 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x60, 0x2700); //Driver Output Control
 8005688:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 800568c:	2060      	movs	r0, #96	; 0x60
 800568e:	f7fb ff79 	bl	8001584 <LCD_WriteReg>
		//设置屏幕的点数以及扫描的起始行
		LCD_WriteReg(0x61, 0x0001); //Driver Output Control
 8005692:	2101      	movs	r1, #1
 8005694:	2061      	movs	r0, #97	; 0x61
 8005696:	f7fb ff75 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x6A, 0x0000); //Vertical Scroll Control
 800569a:	2100      	movs	r1, #0
 800569c:	206a      	movs	r0, #106	; 0x6a
 800569e:	f7fb ff71 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x80, 0x0000); //Display Position – Partial Display 1
 80056a2:	2100      	movs	r1, #0
 80056a4:	2080      	movs	r0, #128	; 0x80
 80056a6:	f7fb ff6d 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x81, 0x0000); //RAM Address Start – Partial Display 1
 80056aa:	2100      	movs	r1, #0
 80056ac:	2081      	movs	r0, #129	; 0x81
 80056ae:	f7fb ff69 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x82, 0x0000); //RAM address End - Partial Display 1
 80056b2:	2100      	movs	r1, #0
 80056b4:	2082      	movs	r0, #130	; 0x82
 80056b6:	f7fb ff65 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x83, 0x0000); //Display Position – Partial Display 2
 80056ba:	2100      	movs	r1, #0
 80056bc:	2083      	movs	r0, #131	; 0x83
 80056be:	f7fb ff61 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x84, 0x0000); //RAM Address Start – Partial Display 2
 80056c2:	2100      	movs	r1, #0
 80056c4:	2084      	movs	r0, #132	; 0x84
 80056c6:	f7fb ff5d 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x85, 0x0000); //RAM address End – Partail Display2
 80056ca:	2100      	movs	r1, #0
 80056cc:	2085      	movs	r0, #133	; 0x85
 80056ce:	f7fb ff59 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x90, 0x0013); //Frame Cycle Control
 80056d2:	2113      	movs	r1, #19
 80056d4:	2090      	movs	r0, #144	; 0x90
 80056d6:	f7fb ff55 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x92, 0x0000);  //Panel Interface Control 2
 80056da:	2100      	movs	r1, #0
 80056dc:	2092      	movs	r0, #146	; 0x92
 80056de:	f7fb ff51 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x93, 0x0003); //Panel Interface control 3
 80056e2:	2103      	movs	r1, #3
 80056e4:	2093      	movs	r0, #147	; 0x93
 80056e6:	f7fb ff4d 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x95, 0x0110);  //Frame Cycle Control
 80056ea:	f44f 7188 	mov.w	r1, #272	; 0x110
 80056ee:	2095      	movs	r0, #149	; 0x95
 80056f0:	f7fb ff48 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x07, 0x0173);
 80056f4:	f240 1173 	movw	r1, #371	; 0x173
 80056f8:	2007      	movs	r0, #7
 80056fa:	f7fb ff43 	bl	8001584 <LCD_WriteReg>
		HAL_Delay(50);
 80056fe:	2032      	movs	r0, #50	; 0x32
 8005700:	f002 fef2 	bl	80084e8 <HAL_Delay>
 8005704:	f001 b8f2 	b.w	80068ec <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x1505)  //OK
 8005708:	4b8d      	ldr	r3, [pc, #564]	; (8005940 <LCD_Init+0x2e88>)
 800570a:	889b      	ldrh	r3, [r3, #4]
 800570c:	f241 5205 	movw	r2, #5381	; 0x1505
 8005710:	4293      	cmp	r3, r2
 8005712:	f040 8117 	bne.w	8005944 <LCD_Init+0x2e8c>
			{
		// second release on 3/5  ,luminance is acceptable,water wave appear during camera preview
		LCD_WriteReg(0x0007, 0x0000);
 8005716:	2100      	movs	r1, #0
 8005718:	2007      	movs	r0, #7
 800571a:	f7fb ff33 	bl	8001584 <LCD_WriteReg>
		HAL_Delay(50);
 800571e:	2032      	movs	r0, #50	; 0x32
 8005720:	f002 fee2 	bl	80084e8 <HAL_Delay>
		LCD_WriteReg(0x0012, 0x011C);  //0x011A   why need to set several times?
 8005724:	f44f 718e 	mov.w	r1, #284	; 0x11c
 8005728:	2012      	movs	r0, #18
 800572a:	f7fb ff2b 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x00A4, 0x0001);  //NVM
 800572e:	2101      	movs	r1, #1
 8005730:	20a4      	movs	r0, #164	; 0xa4
 8005732:	f7fb ff27 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x000F);
 8005736:	210f      	movs	r1, #15
 8005738:	2008      	movs	r0, #8
 800573a:	f7fb ff23 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x000A, 0x0008);
 800573e:	2108      	movs	r1, #8
 8005740:	200a      	movs	r0, #10
 8005742:	f7fb ff1f 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x000D, 0x0008);
 8005746:	2108      	movs	r1, #8
 8005748:	200d      	movs	r0, #13
 800574a:	f7fb ff1b 	bl	8001584 <LCD_WriteReg>
		//伽马校正
		LCD_WriteReg(0x0030, 0x0707);
 800574e:	f240 7107 	movw	r1, #1799	; 0x707
 8005752:	2030      	movs	r0, #48	; 0x30
 8005754:	f7fb ff16 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0007); //0x0707
 8005758:	2107      	movs	r1, #7
 800575a:	2031      	movs	r0, #49	; 0x31
 800575c:	f7fb ff12 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0603);
 8005760:	f240 6103 	movw	r1, #1539	; 0x603
 8005764:	2032      	movs	r0, #50	; 0x32
 8005766:	f7fb ff0d 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0033, 0x0700);
 800576a:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 800576e:	2033      	movs	r0, #51	; 0x33
 8005770:	f7fb ff08 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0034, 0x0202);
 8005774:	f240 2102 	movw	r1, #514	; 0x202
 8005778:	2034      	movs	r0, #52	; 0x34
 800577a:	f7fb ff03 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0002); //?0x0606
 800577e:	2102      	movs	r1, #2
 8005780:	2035      	movs	r0, #53	; 0x35
 8005782:	f7fb feff 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x1F0F);
 8005786:	f641 710f 	movw	r1, #7951	; 0x1f0f
 800578a:	2036      	movs	r0, #54	; 0x36
 800578c:	f7fb fefa 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0707); //0x0f0f  0x0105
 8005790:	f240 7107 	movw	r1, #1799	; 0x707
 8005794:	2037      	movs	r0, #55	; 0x37
 8005796:	f7fb fef5 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0000);
 800579a:	2100      	movs	r1, #0
 800579c:	2038      	movs	r0, #56	; 0x38
 800579e:	f7fb fef1 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0000);
 80057a2:	2100      	movs	r1, #0
 80057a4:	2039      	movs	r0, #57	; 0x39
 80057a6:	f7fb feed 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x003A, 0x0707);
 80057aa:	f240 7107 	movw	r1, #1799	; 0x707
 80057ae:	203a      	movs	r0, #58	; 0x3a
 80057b0:	f7fb fee8 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x003B, 0x0000); //0x0303
 80057b4:	2100      	movs	r1, #0
 80057b6:	203b      	movs	r0, #59	; 0x3b
 80057b8:	f7fb fee4 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x003C, 0x0007); //?0x0707
 80057bc:	2107      	movs	r1, #7
 80057be:	203c      	movs	r0, #60	; 0x3c
 80057c0:	f7fb fee0 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x003D, 0x0000); //0x1313//0x1f08
 80057c4:	2100      	movs	r1, #0
 80057c6:	203d      	movs	r0, #61	; 0x3d
 80057c8:	f7fb fedc 	bl	8001584 <LCD_WriteReg>
		HAL_Delay(50);
 80057cc:	2032      	movs	r0, #50	; 0x32
 80057ce:	f002 fe8b 	bl	80084e8 <HAL_Delay>
		LCD_WriteReg(0x0007, 0x0001);
 80057d2:	2101      	movs	r1, #1
 80057d4:	2007      	movs	r0, #7
 80057d6:	f7fb fed5 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0017, 0x0001); //开启电源
 80057da:	2101      	movs	r1, #1
 80057dc:	2017      	movs	r0, #23
 80057de:	f7fb fed1 	bl	8001584 <LCD_WriteReg>
		HAL_Delay(50);
 80057e2:	2032      	movs	r0, #50	; 0x32
 80057e4:	f002 fe80 	bl	80084e8 <HAL_Delay>
		//电源配置
		LCD_WriteReg(0x0010, 0x17A0);
 80057e8:	f44f 51bd 	mov.w	r1, #6048	; 0x17a0
 80057ec:	2010      	movs	r0, #16
 80057ee:	f7fb fec9 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0217); //reference voltage VC[2:0]   Vciout = 1.00*Vcivl
 80057f2:	f240 2117 	movw	r1, #535	; 0x217
 80057f6:	2011      	movs	r0, #17
 80057f8:	f7fb fec4 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x011E); //0x011c  //Vreg1out = Vcilvl*1.80   is it the same as Vgama1out ?
 80057fc:	f44f 718f 	mov.w	r1, #286	; 0x11e
 8005800:	2012      	movs	r0, #18
 8005802:	f7fb febf 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0F00); //VDV[4:0]-->VCOM Amplitude VcomL = VcomH - Vcom Ampl
 8005806:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 800580a:	2013      	movs	r0, #19
 800580c:	f7fb feba 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x002A, 0x0000);
 8005810:	2100      	movs	r1, #0
 8005812:	202a      	movs	r0, #42	; 0x2a
 8005814:	f7fb feb6 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0029, 0x000A); //0x0001F  Vcomh = VCM1[4:0]*Vreg1out    gate source voltage??
 8005818:	210a      	movs	r1, #10
 800581a:	2029      	movs	r0, #41	; 0x29
 800581c:	f7fb feb2 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x013E); // 0x013C  power supply on
 8005820:	f44f 719f 	mov.w	r1, #318	; 0x13e
 8005824:	2012      	movs	r0, #18
 8005826:	f7fb fead 	bl	8001584 <LCD_WriteReg>
		//Coordinates Control//
		LCD_WriteReg(0x0050, 0x0000);        //0x0e00
 800582a:	2100      	movs	r1, #0
 800582c:	2050      	movs	r0, #80	; 0x50
 800582e:	f7fb fea9 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00EF);
 8005832:	21ef      	movs	r1, #239	; 0xef
 8005834:	2051      	movs	r0, #81	; 0x51
 8005836:	f7fb fea5 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000);
 800583a:	2100      	movs	r1, #0
 800583c:	2052      	movs	r0, #82	; 0x52
 800583e:	f7fb fea1 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013F);
 8005842:	f240 113f 	movw	r1, #319	; 0x13f
 8005846:	2053      	movs	r0, #83	; 0x53
 8005848:	f7fb fe9c 	bl	8001584 <LCD_WriteReg>
		//Pannel Image Control//
		LCD_WriteReg(0x0060, 0x2700);
 800584c:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8005850:	2060      	movs	r0, #96	; 0x60
 8005852:	f7fb fe97 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001);
 8005856:	2101      	movs	r1, #1
 8005858:	2061      	movs	r0, #97	; 0x61
 800585a:	f7fb fe93 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x006A, 0x0000);
 800585e:	2100      	movs	r1, #0
 8005860:	206a      	movs	r0, #106	; 0x6a
 8005862:	f7fb fe8f 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0080, 0x0000);
 8005866:	2100      	movs	r1, #0
 8005868:	2080      	movs	r0, #128	; 0x80
 800586a:	f7fb fe8b 	bl	8001584 <LCD_WriteReg>
		//Partial Image Control//
		LCD_WriteReg(0x0081, 0x0000);
 800586e:	2100      	movs	r1, #0
 8005870:	2081      	movs	r0, #129	; 0x81
 8005872:	f7fb fe87 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0082, 0x0000);
 8005876:	2100      	movs	r1, #0
 8005878:	2082      	movs	r0, #130	; 0x82
 800587a:	f7fb fe83 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0083, 0x0000);
 800587e:	2100      	movs	r1, #0
 8005880:	2083      	movs	r0, #131	; 0x83
 8005882:	f7fb fe7f 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0084, 0x0000);
 8005886:	2100      	movs	r1, #0
 8005888:	2084      	movs	r0, #132	; 0x84
 800588a:	f7fb fe7b 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0085, 0x0000);
 800588e:	2100      	movs	r1, #0
 8005890:	2085      	movs	r0, #133	; 0x85
 8005892:	f7fb fe77 	bl	8001584 <LCD_WriteReg>
		//Panel Interface Control//
		LCD_WriteReg(0x0090, 0x0013);        //0x0010 frenqucy
 8005896:	2113      	movs	r1, #19
 8005898:	2090      	movs	r0, #144	; 0x90
 800589a:	f7fb fe73 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0300);
 800589e:	f44f 7140 	mov.w	r1, #768	; 0x300
 80058a2:	2092      	movs	r0, #146	; 0x92
 80058a4:	f7fb fe6e 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0093, 0x0005);
 80058a8:	2105      	movs	r1, #5
 80058aa:	2093      	movs	r0, #147	; 0x93
 80058ac:	f7fb fe6a 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0095, 0x0000);
 80058b0:	2100      	movs	r1, #0
 80058b2:	2095      	movs	r0, #149	; 0x95
 80058b4:	f7fb fe66 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0097, 0x0000);
 80058b8:	2100      	movs	r1, #0
 80058ba:	2097      	movs	r0, #151	; 0x97
 80058bc:	f7fb fe62 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0098, 0x0000);
 80058c0:	2100      	movs	r1, #0
 80058c2:	2098      	movs	r0, #152	; 0x98
 80058c4:	f7fb fe5e 	bl	8001584 <LCD_WriteReg>

		LCD_WriteReg(0x0001, 0x0100);
 80058c8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80058cc:	2001      	movs	r0, #1
 80058ce:	f7fb fe59 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0700);
 80058d2:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80058d6:	2002      	movs	r0, #2
 80058d8:	f7fb fe54 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0x1038);        //扫描方向 上->下  左->右
 80058dc:	f241 0138 	movw	r1, #4152	; 0x1038
 80058e0:	2003      	movs	r0, #3
 80058e2:	f7fb fe4f 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0004, 0x0000);
 80058e6:	2100      	movs	r1, #0
 80058e8:	2004      	movs	r0, #4
 80058ea:	f7fb fe4b 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000);
 80058ee:	2100      	movs	r1, #0
 80058f0:	200c      	movs	r0, #12
 80058f2:	f7fb fe47 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000);
 80058f6:	2100      	movs	r1, #0
 80058f8:	200f      	movs	r0, #15
 80058fa:	f7fb fe43 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0020, 0x0000);
 80058fe:	2100      	movs	r1, #0
 8005900:	2020      	movs	r0, #32
 8005902:	f7fb fe3f 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x0000);
 8005906:	2100      	movs	r1, #0
 8005908:	2021      	movs	r0, #33	; 0x21
 800590a:	f7fb fe3b 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0021);
 800590e:	2121      	movs	r1, #33	; 0x21
 8005910:	2007      	movs	r0, #7
 8005912:	f7fb fe37 	bl	8001584 <LCD_WriteReg>
		HAL_Delay(20);
 8005916:	2014      	movs	r0, #20
 8005918:	f002 fde6 	bl	80084e8 <HAL_Delay>
		LCD_WriteReg(0x0007, 0x0061);
 800591c:	2161      	movs	r1, #97	; 0x61
 800591e:	2007      	movs	r0, #7
 8005920:	f7fb fe30 	bl	8001584 <LCD_WriteReg>
		HAL_Delay(20);
 8005924:	2014      	movs	r0, #20
 8005926:	f002 fddf 	bl	80084e8 <HAL_Delay>
		LCD_WriteReg(0x0007, 0x0173);
 800592a:	f240 1173 	movw	r1, #371	; 0x173
 800592e:	2007      	movs	r0, #7
 8005930:	f7fb fe28 	bl	8001584 <LCD_WriteReg>
		HAL_Delay(20);
 8005934:	2014      	movs	r0, #20
 8005936:	f002 fdd7 	bl	80084e8 <HAL_Delay>
 800593a:	f000 bfd7 	b.w	80068ec <LCD_Init+0x3e34>
 800593e:	bf00      	nop
 8005940:	200000bc 	.word	0x200000bc
	} else if (lcddev.id == 0xB505) {
 8005944:	4bf0      	ldr	r3, [pc, #960]	; (8005d08 <LCD_Init+0x3250>)
 8005946:	889b      	ldrh	r3, [r3, #4]
 8005948:	f24b 5205 	movw	r2, #46341	; 0xb505
 800594c:	4293      	cmp	r3, r2
 800594e:	f040 8103 	bne.w	8005b58 <LCD_Init+0x30a0>
		LCD_WriteReg(0x0000, 0x0000);
 8005952:	2100      	movs	r1, #0
 8005954:	2000      	movs	r0, #0
 8005956:	f7fb fe15 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 800595a:	2100      	movs	r1, #0
 800595c:	2000      	movs	r0, #0
 800595e:	f7fb fe11 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 8005962:	2100      	movs	r1, #0
 8005964:	2000      	movs	r0, #0
 8005966:	f7fb fe0d 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 800596a:	2100      	movs	r1, #0
 800596c:	2000      	movs	r0, #0
 800596e:	f7fb fe09 	bl	8001584 <LCD_WriteReg>

		LCD_WriteReg(0x00a4, 0x0001);
 8005972:	2101      	movs	r1, #1
 8005974:	20a4      	movs	r0, #164	; 0xa4
 8005976:	f7fb fe05 	bl	8001584 <LCD_WriteReg>
		HAL_Delay(20);
 800597a:	2014      	movs	r0, #20
 800597c:	f002 fdb4 	bl	80084e8 <HAL_Delay>
		LCD_WriteReg(0x0060, 0x2700);
 8005980:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8005984:	2060      	movs	r0, #96	; 0x60
 8005986:	f7fb fdfd 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x0202);
 800598a:	f240 2102 	movw	r1, #514	; 0x202
 800598e:	2008      	movs	r0, #8
 8005990:	f7fb fdf8 	bl	8001584 <LCD_WriteReg>

		LCD_WriteReg(0x0030, 0x0214);
 8005994:	f44f 7105 	mov.w	r1, #532	; 0x214
 8005998:	2030      	movs	r0, #48	; 0x30
 800599a:	f7fb fdf3 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x3715);
 800599e:	f243 7115 	movw	r1, #14101	; 0x3715
 80059a2:	2031      	movs	r0, #49	; 0x31
 80059a4:	f7fb fdee 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0604);
 80059a8:	f240 6104 	movw	r1, #1540	; 0x604
 80059ac:	2032      	movs	r0, #50	; 0x32
 80059ae:	f7fb fde9 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0033, 0x0e16);
 80059b2:	f640 6116 	movw	r1, #3606	; 0xe16
 80059b6:	2033      	movs	r0, #51	; 0x33
 80059b8:	f7fb fde4 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0034, 0x2211);
 80059bc:	f242 2111 	movw	r1, #8721	; 0x2211
 80059c0:	2034      	movs	r0, #52	; 0x34
 80059c2:	f7fb fddf 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x1500);
 80059c6:	f44f 51a8 	mov.w	r1, #5376	; 0x1500
 80059ca:	2035      	movs	r0, #53	; 0x35
 80059cc:	f7fb fdda 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x8507);
 80059d0:	f248 5107 	movw	r1, #34055	; 0x8507
 80059d4:	2036      	movs	r0, #54	; 0x36
 80059d6:	f7fb fdd5 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x1407);
 80059da:	f241 4107 	movw	r1, #5127	; 0x1407
 80059de:	2037      	movs	r0, #55	; 0x37
 80059e0:	f7fb fdd0 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x1403);
 80059e4:	f241 4103 	movw	r1, #5123	; 0x1403
 80059e8:	2038      	movs	r0, #56	; 0x38
 80059ea:	f7fb fdcb 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0020);
 80059ee:	2120      	movs	r1, #32
 80059f0:	2039      	movs	r0, #57	; 0x39
 80059f2:	f7fb fdc7 	bl	8001584 <LCD_WriteReg>

		LCD_WriteReg(0x0090, 0x001a);
 80059f6:	211a      	movs	r1, #26
 80059f8:	2090      	movs	r0, #144	; 0x90
 80059fa:	f7fb fdc3 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0010, 0x0000);
 80059fe:	2100      	movs	r1, #0
 8005a00:	2010      	movs	r0, #16
 8005a02:	f7fb fdbf 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0007);
 8005a06:	2107      	movs	r1, #7
 8005a08:	2011      	movs	r0, #17
 8005a0a:	f7fb fdbb 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x0000);
 8005a0e:	2100      	movs	r1, #0
 8005a10:	2012      	movs	r0, #18
 8005a12:	f7fb fdb7 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0000);
 8005a16:	2100      	movs	r1, #0
 8005a18:	2013      	movs	r0, #19
 8005a1a:	f7fb fdb3 	bl	8001584 <LCD_WriteReg>
		HAL_Delay(20);
 8005a1e:	2014      	movs	r0, #20
 8005a20:	f002 fd62 	bl	80084e8 <HAL_Delay>

		LCD_WriteReg(0x0010, 0x0730);
 8005a24:	f44f 61e6 	mov.w	r1, #1840	; 0x730
 8005a28:	2010      	movs	r0, #16
 8005a2a:	f7fb fdab 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0137);
 8005a2e:	f240 1137 	movw	r1, #311	; 0x137
 8005a32:	2011      	movs	r0, #17
 8005a34:	f7fb fda6 	bl	8001584 <LCD_WriteReg>
		HAL_Delay(20);
 8005a38:	2014      	movs	r0, #20
 8005a3a:	f002 fd55 	bl	80084e8 <HAL_Delay>

		LCD_WriteReg(0x0012, 0x01b8);
 8005a3e:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
 8005a42:	2012      	movs	r0, #18
 8005a44:	f7fb fd9e 	bl	8001584 <LCD_WriteReg>
		HAL_Delay(20);
 8005a48:	2014      	movs	r0, #20
 8005a4a:	f002 fd4d 	bl	80084e8 <HAL_Delay>

		LCD_WriteReg(0x0013, 0x0f00);
 8005a4e:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 8005a52:	2013      	movs	r0, #19
 8005a54:	f7fb fd96 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x002a, 0x0080);
 8005a58:	2180      	movs	r1, #128	; 0x80
 8005a5a:	202a      	movs	r0, #42	; 0x2a
 8005a5c:	f7fb fd92 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0029, 0x0048);
 8005a60:	2148      	movs	r1, #72	; 0x48
 8005a62:	2029      	movs	r0, #41	; 0x29
 8005a64:	f7fb fd8e 	bl	8001584 <LCD_WriteReg>
		HAL_Delay(20);
 8005a68:	2014      	movs	r0, #20
 8005a6a:	f002 fd3d 	bl	80084e8 <HAL_Delay>

		LCD_WriteReg(0x0001, 0x0100);
 8005a6e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005a72:	2001      	movs	r0, #1
 8005a74:	f7fb fd86 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0700);
 8005a78:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8005a7c:	2002      	movs	r0, #2
 8005a7e:	f7fb fd81 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0x1038);        //扫描方向 上->下  左->右
 8005a82:	f241 0138 	movw	r1, #4152	; 0x1038
 8005a86:	2003      	movs	r0, #3
 8005a88:	f7fb fd7c 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x0202);
 8005a8c:	f240 2102 	movw	r1, #514	; 0x202
 8005a90:	2008      	movs	r0, #8
 8005a92:	f7fb fd77 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x000a, 0x0000);
 8005a96:	2100      	movs	r1, #0
 8005a98:	200a      	movs	r0, #10
 8005a9a:	f7fb fd73 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x000c, 0x0000);
 8005a9e:	2100      	movs	r1, #0
 8005aa0:	200c      	movs	r0, #12
 8005aa2:	f7fb fd6f 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x000d, 0x0000);
 8005aa6:	2100      	movs	r1, #0
 8005aa8:	200d      	movs	r0, #13
 8005aaa:	f7fb fd6b 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x000e, 0x0030);
 8005aae:	2130      	movs	r1, #48	; 0x30
 8005ab0:	200e      	movs	r0, #14
 8005ab2:	f7fb fd67 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0050, 0x0000);
 8005ab6:	2100      	movs	r1, #0
 8005ab8:	2050      	movs	r0, #80	; 0x50
 8005aba:	f7fb fd63 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00ef);
 8005abe:	21ef      	movs	r1, #239	; 0xef
 8005ac0:	2051      	movs	r0, #81	; 0x51
 8005ac2:	f7fb fd5f 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000);
 8005ac6:	2100      	movs	r1, #0
 8005ac8:	2052      	movs	r0, #82	; 0x52
 8005aca:	f7fb fd5b 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013f);
 8005ace:	f240 113f 	movw	r1, #319	; 0x13f
 8005ad2:	2053      	movs	r0, #83	; 0x53
 8005ad4:	f7fb fd56 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0060, 0x2700);
 8005ad8:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8005adc:	2060      	movs	r0, #96	; 0x60
 8005ade:	f7fb fd51 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001);
 8005ae2:	2101      	movs	r1, #1
 8005ae4:	2061      	movs	r0, #97	; 0x61
 8005ae6:	f7fb fd4d 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x006a, 0x0000);
 8005aea:	2100      	movs	r1, #0
 8005aec:	206a      	movs	r0, #106	; 0x6a
 8005aee:	f7fb fd49 	bl	8001584 <LCD_WriteReg>
		//LCD_WriteReg(0x0080,0x0000);
		//LCD_WriteReg(0x0081,0x0000);
		LCD_WriteReg(0x0090, 0X0011);
 8005af2:	2111      	movs	r1, #17
 8005af4:	2090      	movs	r0, #144	; 0x90
 8005af6:	f7fb fd45 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0600);
 8005afa:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005afe:	2092      	movs	r0, #146	; 0x92
 8005b00:	f7fb fd40 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0093, 0x0402);
 8005b04:	f240 4102 	movw	r1, #1026	; 0x402
 8005b08:	2093      	movs	r0, #147	; 0x93
 8005b0a:	f7fb fd3b 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0094, 0x0002);
 8005b0e:	2102      	movs	r1, #2
 8005b10:	2094      	movs	r0, #148	; 0x94
 8005b12:	f7fb fd37 	bl	8001584 <LCD_WriteReg>
		HAL_Delay(20);
 8005b16:	2014      	movs	r0, #20
 8005b18:	f002 fce6 	bl	80084e8 <HAL_Delay>

		LCD_WriteReg(0x0007, 0x0001);
 8005b1c:	2101      	movs	r1, #1
 8005b1e:	2007      	movs	r0, #7
 8005b20:	f7fb fd30 	bl	8001584 <LCD_WriteReg>
		HAL_Delay(20);
 8005b24:	2014      	movs	r0, #20
 8005b26:	f002 fcdf 	bl	80084e8 <HAL_Delay>
		LCD_WriteReg(0x0007, 0x0061);
 8005b2a:	2161      	movs	r1, #97	; 0x61
 8005b2c:	2007      	movs	r0, #7
 8005b2e:	f7fb fd29 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0173);
 8005b32:	f240 1173 	movw	r1, #371	; 0x173
 8005b36:	2007      	movs	r0, #7
 8005b38:	f7fb fd24 	bl	8001584 <LCD_WriteReg>

		LCD_WriteReg(0x0020, 0x0000);
 8005b3c:	2100      	movs	r1, #0
 8005b3e:	2020      	movs	r0, #32
 8005b40:	f7fb fd20 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x0000);
 8005b44:	2100      	movs	r1, #0
 8005b46:	2021      	movs	r0, #33	; 0x21
 8005b48:	f7fb fd1c 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x00, 0x22);
 8005b4c:	2122      	movs	r1, #34	; 0x22
 8005b4e:	2000      	movs	r0, #0
 8005b50:	f7fb fd18 	bl	8001584 <LCD_WriteReg>
 8005b54:	f000 beca 	b.w	80068ec <LCD_Init+0x3e34>
	} else if (lcddev.id == 0xC505) {
 8005b58:	4b6b      	ldr	r3, [pc, #428]	; (8005d08 <LCD_Init+0x3250>)
 8005b5a:	889b      	ldrh	r3, [r3, #4]
 8005b5c:	f24c 5205 	movw	r2, #50437	; 0xc505
 8005b60:	4293      	cmp	r3, r2
 8005b62:	f040 80d3 	bne.w	8005d0c <LCD_Init+0x3254>
		LCD_WriteReg(0x0000, 0x0000);
 8005b66:	2100      	movs	r1, #0
 8005b68:	2000      	movs	r0, #0
 8005b6a:	f7fb fd0b 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 8005b6e:	2100      	movs	r1, #0
 8005b70:	2000      	movs	r0, #0
 8005b72:	f7fb fd07 	bl	8001584 <LCD_WriteReg>
		HAL_Delay(20);
 8005b76:	2014      	movs	r0, #20
 8005b78:	f002 fcb6 	bl	80084e8 <HAL_Delay>
		LCD_WriteReg(0x0000, 0x0000);
 8005b7c:	2100      	movs	r1, #0
 8005b7e:	2000      	movs	r0, #0
 8005b80:	f7fb fd00 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 8005b84:	2100      	movs	r1, #0
 8005b86:	2000      	movs	r0, #0
 8005b88:	f7fb fcfc 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 8005b8c:	2100      	movs	r1, #0
 8005b8e:	2000      	movs	r0, #0
 8005b90:	f7fb fcf8 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 8005b94:	2100      	movs	r1, #0
 8005b96:	2000      	movs	r0, #0
 8005b98:	f7fb fcf4 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x00a4, 0x0001);
 8005b9c:	2101      	movs	r1, #1
 8005b9e:	20a4      	movs	r0, #164	; 0xa4
 8005ba0:	f7fb fcf0 	bl	8001584 <LCD_WriteReg>
		HAL_Delay(20);
 8005ba4:	2014      	movs	r0, #20
 8005ba6:	f002 fc9f 	bl	80084e8 <HAL_Delay>
		LCD_WriteReg(0x0060, 0x2700);
 8005baa:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8005bae:	2060      	movs	r0, #96	; 0x60
 8005bb0:	f7fb fce8 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x0806);
 8005bb4:	f640 0106 	movw	r1, #2054	; 0x806
 8005bb8:	2008      	movs	r0, #8
 8005bba:	f7fb fce3 	bl	8001584 <LCD_WriteReg>

		LCD_WriteReg(0x0030, 0x0703);		//gamma setting
 8005bbe:	f240 7103 	movw	r1, #1795	; 0x703
 8005bc2:	2030      	movs	r0, #48	; 0x30
 8005bc4:	f7fb fcde 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0001);
 8005bc8:	2101      	movs	r1, #1
 8005bca:	2031      	movs	r0, #49	; 0x31
 8005bcc:	f7fb fcda 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0004);
 8005bd0:	2104      	movs	r1, #4
 8005bd2:	2032      	movs	r0, #50	; 0x32
 8005bd4:	f7fb fcd6 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0033, 0x0102);
 8005bd8:	f44f 7181 	mov.w	r1, #258	; 0x102
 8005bdc:	2033      	movs	r0, #51	; 0x33
 8005bde:	f7fb fcd1 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0034, 0x0300);
 8005be2:	f44f 7140 	mov.w	r1, #768	; 0x300
 8005be6:	2034      	movs	r0, #52	; 0x34
 8005be8:	f7fb fccc 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0103);
 8005bec:	f240 1103 	movw	r1, #259	; 0x103
 8005bf0:	2035      	movs	r0, #53	; 0x35
 8005bf2:	f7fb fcc7 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x001F);
 8005bf6:	211f      	movs	r1, #31
 8005bf8:	2036      	movs	r0, #54	; 0x36
 8005bfa:	f7fb fcc3 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0703);
 8005bfe:	f240 7103 	movw	r1, #1795	; 0x703
 8005c02:	2037      	movs	r0, #55	; 0x37
 8005c04:	f7fb fcbe 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0001);
 8005c08:	2101      	movs	r1, #1
 8005c0a:	2038      	movs	r0, #56	; 0x38
 8005c0c:	f7fb fcba 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0004);
 8005c10:	2104      	movs	r1, #4
 8005c12:	2039      	movs	r0, #57	; 0x39
 8005c14:	f7fb fcb6 	bl	8001584 <LCD_WriteReg>

		LCD_WriteReg(0x0090, 0x0015);	//80Hz
 8005c18:	2115      	movs	r1, #21
 8005c1a:	2090      	movs	r0, #144	; 0x90
 8005c1c:	f7fb fcb2 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0010, 0X0410);	//BT,AP
 8005c20:	f44f 6182 	mov.w	r1, #1040	; 0x410
 8005c24:	2010      	movs	r0, #16
 8005c26:	f7fb fcad 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0247);	//DC1,DC0,VC
 8005c2a:	f240 2147 	movw	r1, #583	; 0x247
 8005c2e:	2011      	movs	r0, #17
 8005c30:	f7fb fca8 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x01BC);
 8005c34:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 8005c38:	2012      	movs	r0, #18
 8005c3a:	f7fb fca3 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0e00);
 8005c3e:	f44f 6160 	mov.w	r1, #3584	; 0xe00
 8005c42:	2013      	movs	r0, #19
 8005c44:	f7fb fc9e 	bl	8001584 <LCD_WriteReg>
		HAL_Delay(120);
 8005c48:	2078      	movs	r0, #120	; 0x78
 8005c4a:	f002 fc4d 	bl	80084e8 <HAL_Delay>
		LCD_WriteReg(0x0001, 0x0100);
 8005c4e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005c52:	2001      	movs	r0, #1
 8005c54:	f7fb fc96 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0200);
 8005c58:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005c5c:	2002      	movs	r0, #2
 8005c5e:	f7fb fc91 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0x1030);
 8005c62:	f241 0130 	movw	r1, #4144	; 0x1030
 8005c66:	2003      	movs	r0, #3
 8005c68:	f7fb fc8c 	bl	8001584 <LCD_WriteReg>

		LCD_WriteReg(0x000A, 0x0008);
 8005c6c:	2108      	movs	r1, #8
 8005c6e:	200a      	movs	r0, #10
 8005c70:	f7fb fc88 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000);
 8005c74:	2100      	movs	r1, #0
 8005c76:	200c      	movs	r0, #12
 8005c78:	f7fb fc84 	bl	8001584 <LCD_WriteReg>

		LCD_WriteReg(0x000E, 0x0020);
 8005c7c:	2120      	movs	r1, #32
 8005c7e:	200e      	movs	r0, #14
 8005c80:	f7fb fc80 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000);
 8005c84:	2100      	movs	r1, #0
 8005c86:	200f      	movs	r0, #15
 8005c88:	f7fb fc7c 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0020, 0x0000);	//H Start
 8005c8c:	2100      	movs	r1, #0
 8005c8e:	2020      	movs	r0, #32
 8005c90:	f7fb fc78 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x0000);	//V Start
 8005c94:	2100      	movs	r1, #0
 8005c96:	2021      	movs	r0, #33	; 0x21
 8005c98:	f7fb fc74 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x002A, 0x003D);	//vcom2
 8005c9c:	213d      	movs	r1, #61	; 0x3d
 8005c9e:	202a      	movs	r0, #42	; 0x2a
 8005ca0:	f7fb fc70 	bl	8001584 <LCD_WriteReg>
		HAL_Delay(20);
 8005ca4:	2014      	movs	r0, #20
 8005ca6:	f002 fc1f 	bl	80084e8 <HAL_Delay>
		LCD_WriteReg(0x0029, 0x002d);
 8005caa:	212d      	movs	r1, #45	; 0x2d
 8005cac:	2029      	movs	r0, #41	; 0x29
 8005cae:	f7fb fc69 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0050, 0x0000);
 8005cb2:	2100      	movs	r1, #0
 8005cb4:	2050      	movs	r0, #80	; 0x50
 8005cb6:	f7fb fc65 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0xD0EF);
 8005cba:	f24d 01ef 	movw	r1, #53487	; 0xd0ef
 8005cbe:	2051      	movs	r0, #81	; 0x51
 8005cc0:	f7fb fc60 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000);
 8005cc4:	2100      	movs	r1, #0
 8005cc6:	2052      	movs	r0, #82	; 0x52
 8005cc8:	f7fb fc5c 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013F);
 8005ccc:	f240 113f 	movw	r1, #319	; 0x13f
 8005cd0:	2053      	movs	r0, #83	; 0x53
 8005cd2:	f7fb fc57 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0000);
 8005cd6:	2100      	movs	r1, #0
 8005cd8:	2061      	movs	r0, #97	; 0x61
 8005cda:	f7fb fc53 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x006A, 0x0000);
 8005cde:	2100      	movs	r1, #0
 8005ce0:	206a      	movs	r0, #106	; 0x6a
 8005ce2:	f7fb fc4f 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0300);
 8005ce6:	f44f 7140 	mov.w	r1, #768	; 0x300
 8005cea:	2092      	movs	r0, #146	; 0x92
 8005cec:	f7fb fc4a 	bl	8001584 <LCD_WriteReg>

		LCD_WriteReg(0x0093, 0x0005);
 8005cf0:	2105      	movs	r1, #5
 8005cf2:	2093      	movs	r0, #147	; 0x93
 8005cf4:	f7fb fc46 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0100);
 8005cf8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005cfc:	2007      	movs	r0, #7
 8005cfe:	f7fb fc41 	bl	8001584 <LCD_WriteReg>
 8005d02:	f000 bdf3 	b.w	80068ec <LCD_Init+0x3e34>
 8005d06:	bf00      	nop
 8005d08:	200000bc 	.word	0x200000bc
	} else if (lcddev.id == 0x8989)	//OK |/|/|
 8005d0c:	4bc2      	ldr	r3, [pc, #776]	; (8006018 <LCD_Init+0x3560>)
 8005d0e:	889b      	ldrh	r3, [r3, #4]
 8005d10:	f648 1289 	movw	r2, #35209	; 0x8989
 8005d14:	4293      	cmp	r3, r2
 8005d16:	f040 80bc 	bne.w	8005e92 <LCD_Init+0x33da>
			{
		LCD_WriteReg(0x0000, 0x0001);	//打开晶振
 8005d1a:	2101      	movs	r1, #1
 8005d1c:	2000      	movs	r0, #0
 8005d1e:	f7fb fc31 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0xA8A4);	//0xA8A4
 8005d22:	f64a 01a4 	movw	r1, #43172	; 0xa8a4
 8005d26:	2003      	movs	r0, #3
 8005d28:	f7fb fc2c 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000);
 8005d2c:	2100      	movs	r1, #0
 8005d2e:	200c      	movs	r0, #12
 8005d30:	f7fb fc28 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x000D, 0x080C);
 8005d34:	f640 010c 	movw	r1, #2060	; 0x80c
 8005d38:	200d      	movs	r0, #13
 8005d3a:	f7fb fc23 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x000E, 0x2B00);
 8005d3e:	f44f 512c 	mov.w	r1, #11008	; 0x2b00
 8005d42:	200e      	movs	r0, #14
 8005d44:	f7fb fc1e 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x001E, 0x00B0);
 8005d48:	21b0      	movs	r1, #176	; 0xb0
 8005d4a:	201e      	movs	r0, #30
 8005d4c:	f7fb fc1a 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0001, 0x2B3F);	//驱动输出控制320*240  0x6B3F
 8005d50:	f642 313f 	movw	r1, #11071	; 0x2b3f
 8005d54:	2001      	movs	r0, #1
 8005d56:	f7fb fc15 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0600);
 8005d5a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005d5e:	2002      	movs	r0, #2
 8005d60:	f7fb fc10 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0010, 0x0000);
 8005d64:	2100      	movs	r1, #0
 8005d66:	2010      	movs	r0, #16
 8005d68:	f7fb fc0c 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x6078); //定义数据格式  16位色 		横屏 0x6058
 8005d6c:	f246 0178 	movw	r1, #24696	; 0x6078
 8005d70:	2011      	movs	r0, #17
 8005d72:	f7fb fc07 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0005, 0x0000);
 8005d76:	2100      	movs	r1, #0
 8005d78:	2005      	movs	r0, #5
 8005d7a:	f7fb fc03 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0006, 0x0000);
 8005d7e:	2100      	movs	r1, #0
 8005d80:	2006      	movs	r0, #6
 8005d82:	f7fb fbff 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0016, 0xEF1C);
 8005d86:	f64e 711c 	movw	r1, #61212	; 0xef1c
 8005d8a:	2016      	movs	r0, #22
 8005d8c:	f7fb fbfa 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0017, 0x0003);
 8005d90:	2103      	movs	r1, #3
 8005d92:	2017      	movs	r0, #23
 8005d94:	f7fb fbf6 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0233); //0x0233
 8005d98:	f240 2133 	movw	r1, #563	; 0x233
 8005d9c:	2007      	movs	r0, #7
 8005d9e:	f7fb fbf1 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x000B, 0x0000);
 8005da2:	2100      	movs	r1, #0
 8005da4:	200b      	movs	r0, #11
 8005da6:	f7fb fbed 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000); //扫描开始地址
 8005daa:	2100      	movs	r1, #0
 8005dac:	200f      	movs	r0, #15
 8005dae:	f7fb fbe9 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0041, 0x0000);
 8005db2:	2100      	movs	r1, #0
 8005db4:	2041      	movs	r0, #65	; 0x41
 8005db6:	f7fb fbe5 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0042, 0x0000);
 8005dba:	2100      	movs	r1, #0
 8005dbc:	2042      	movs	r0, #66	; 0x42
 8005dbe:	f7fb fbe1 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0048, 0x0000);
 8005dc2:	2100      	movs	r1, #0
 8005dc4:	2048      	movs	r0, #72	; 0x48
 8005dc6:	f7fb fbdd 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0049, 0x013F);
 8005dca:	f240 113f 	movw	r1, #319	; 0x13f
 8005dce:	2049      	movs	r0, #73	; 0x49
 8005dd0:	f7fb fbd8 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x004A, 0x0000);
 8005dd4:	2100      	movs	r1, #0
 8005dd6:	204a      	movs	r0, #74	; 0x4a
 8005dd8:	f7fb fbd4 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x004B, 0x0000);
 8005ddc:	2100      	movs	r1, #0
 8005dde:	204b      	movs	r0, #75	; 0x4b
 8005de0:	f7fb fbd0 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0044, 0xEF00);
 8005de4:	f44f 416f 	mov.w	r1, #61184	; 0xef00
 8005de8:	2044      	movs	r0, #68	; 0x44
 8005dea:	f7fb fbcb 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0045, 0x0000);
 8005dee:	2100      	movs	r1, #0
 8005df0:	2045      	movs	r0, #69	; 0x45
 8005df2:	f7fb fbc7 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0046, 0x013F);
 8005df6:	f240 113f 	movw	r1, #319	; 0x13f
 8005dfa:	2046      	movs	r0, #70	; 0x46
 8005dfc:	f7fb fbc2 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0030, 0x0707);
 8005e00:	f240 7107 	movw	r1, #1799	; 0x707
 8005e04:	2030      	movs	r0, #48	; 0x30
 8005e06:	f7fb fbbd 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0204);
 8005e0a:	f44f 7101 	mov.w	r1, #516	; 0x204
 8005e0e:	2031      	movs	r0, #49	; 0x31
 8005e10:	f7fb fbb8 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0204);
 8005e14:	f44f 7101 	mov.w	r1, #516	; 0x204
 8005e18:	2032      	movs	r0, #50	; 0x32
 8005e1a:	f7fb fbb3 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0033, 0x0502);
 8005e1e:	f240 5102 	movw	r1, #1282	; 0x502
 8005e22:	2033      	movs	r0, #51	; 0x33
 8005e24:	f7fb fbae 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0034, 0x0507);
 8005e28:	f240 5107 	movw	r1, #1287	; 0x507
 8005e2c:	2034      	movs	r0, #52	; 0x34
 8005e2e:	f7fb fba9 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0204);
 8005e32:	f44f 7101 	mov.w	r1, #516	; 0x204
 8005e36:	2035      	movs	r0, #53	; 0x35
 8005e38:	f7fb fba4 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x0204);
 8005e3c:	f44f 7101 	mov.w	r1, #516	; 0x204
 8005e40:	2036      	movs	r0, #54	; 0x36
 8005e42:	f7fb fb9f 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0502);
 8005e46:	f240 5102 	movw	r1, #1282	; 0x502
 8005e4a:	2037      	movs	r0, #55	; 0x37
 8005e4c:	f7fb fb9a 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x003A, 0x0302);
 8005e50:	f240 3102 	movw	r1, #770	; 0x302
 8005e54:	203a      	movs	r0, #58	; 0x3a
 8005e56:	f7fb fb95 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x003B, 0x0302);
 8005e5a:	f240 3102 	movw	r1, #770	; 0x302
 8005e5e:	203b      	movs	r0, #59	; 0x3b
 8005e60:	f7fb fb90 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0023, 0x0000);
 8005e64:	2100      	movs	r1, #0
 8005e66:	2023      	movs	r0, #35	; 0x23
 8005e68:	f7fb fb8c 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0024, 0x0000);
 8005e6c:	2100      	movs	r1, #0
 8005e6e:	2024      	movs	r0, #36	; 0x24
 8005e70:	f7fb fb88 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x0025, 0x8000);
 8005e74:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005e78:	2025      	movs	r0, #37	; 0x25
 8005e7a:	f7fb fb83 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x004f, 0);        //行首址0
 8005e7e:	2100      	movs	r1, #0
 8005e80:	204f      	movs	r0, #79	; 0x4f
 8005e82:	f7fb fb7f 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0x004e, 0);        //列首址0
 8005e86:	2100      	movs	r1, #0
 8005e88:	204e      	movs	r0, #78	; 0x4e
 8005e8a:	f7fb fb7b 	bl	8001584 <LCD_WriteReg>
 8005e8e:	f000 bd2d 	b.w	80068ec <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x4531)        //OK |/|/|
 8005e92:	4b61      	ldr	r3, [pc, #388]	; (8006018 <LCD_Init+0x3560>)
 8005e94:	889b      	ldrh	r3, [r3, #4]
 8005e96:	f244 5231 	movw	r2, #17713	; 0x4531
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	f040 80be 	bne.w	800601c <LCD_Init+0x3564>
			{
		LCD_WriteReg(0X00, 0X0001);
 8005ea0:	2101      	movs	r1, #1
 8005ea2:	2000      	movs	r0, #0
 8005ea4:	f7fb fb6e 	bl	8001584 <LCD_WriteReg>
		HAL_Delay(10);
 8005ea8:	200a      	movs	r0, #10
 8005eaa:	f002 fb1d 	bl	80084e8 <HAL_Delay>
		LCD_WriteReg(0X10, 0X1628);
 8005eae:	f241 6128 	movw	r1, #5672	; 0x1628
 8005eb2:	2010      	movs	r0, #16
 8005eb4:	f7fb fb66 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0X12, 0X000e);        //0x0006
 8005eb8:	210e      	movs	r1, #14
 8005eba:	2012      	movs	r0, #18
 8005ebc:	f7fb fb62 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0X13, 0X0A39);
 8005ec0:	f640 2139 	movw	r1, #2617	; 0xa39
 8005ec4:	2013      	movs	r0, #19
 8005ec6:	f7fb fb5d 	bl	8001584 <LCD_WriteReg>
		HAL_Delay(10);
 8005eca:	200a      	movs	r0, #10
 8005ecc:	f002 fb0c 	bl	80084e8 <HAL_Delay>
		LCD_WriteReg(0X11, 0X0040);
 8005ed0:	2140      	movs	r1, #64	; 0x40
 8005ed2:	2011      	movs	r0, #17
 8005ed4:	f7fb fb56 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0X15, 0X0050);
 8005ed8:	2150      	movs	r1, #80	; 0x50
 8005eda:	2015      	movs	r0, #21
 8005edc:	f7fb fb52 	bl	8001584 <LCD_WriteReg>
		HAL_Delay(10);
 8005ee0:	200a      	movs	r0, #10
 8005ee2:	f002 fb01 	bl	80084e8 <HAL_Delay>
		LCD_WriteReg(0X12, 0X001e);        //16
 8005ee6:	211e      	movs	r1, #30
 8005ee8:	2012      	movs	r0, #18
 8005eea:	f7fb fb4b 	bl	8001584 <LCD_WriteReg>
		HAL_Delay(10);
 8005eee:	200a      	movs	r0, #10
 8005ef0:	f002 fafa 	bl	80084e8 <HAL_Delay>
		LCD_WriteReg(0X10, 0X1620);
 8005ef4:	f44f 51b1 	mov.w	r1, #5664	; 0x1620
 8005ef8:	2010      	movs	r0, #16
 8005efa:	f7fb fb43 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0X13, 0X2A39);
 8005efe:	f642 2139 	movw	r1, #10809	; 0x2a39
 8005f02:	2013      	movs	r0, #19
 8005f04:	f7fb fb3e 	bl	8001584 <LCD_WriteReg>
		HAL_Delay(10);
 8005f08:	200a      	movs	r0, #10
 8005f0a:	f002 faed 	bl	80084e8 <HAL_Delay>
		LCD_WriteReg(0X01, 0X0100);
 8005f0e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005f12:	2001      	movs	r0, #1
 8005f14:	f7fb fb36 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0X02, 0X0300);
 8005f18:	f44f 7140 	mov.w	r1, #768	; 0x300
 8005f1c:	2002      	movs	r0, #2
 8005f1e:	f7fb fb31 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0X03, 0X1038);        //改变方向的
 8005f22:	f241 0138 	movw	r1, #4152	; 0x1038
 8005f26:	2003      	movs	r0, #3
 8005f28:	f7fb fb2c 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0X08, 0X0202);
 8005f2c:	f240 2102 	movw	r1, #514	; 0x202
 8005f30:	2008      	movs	r0, #8
 8005f32:	f7fb fb27 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0X0A, 0X0008);
 8005f36:	2108      	movs	r1, #8
 8005f38:	200a      	movs	r0, #10
 8005f3a:	f7fb fb23 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0X30, 0X0000);
 8005f3e:	2100      	movs	r1, #0
 8005f40:	2030      	movs	r0, #48	; 0x30
 8005f42:	f7fb fb1f 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0X31, 0X0402);
 8005f46:	f240 4102 	movw	r1, #1026	; 0x402
 8005f4a:	2031      	movs	r0, #49	; 0x31
 8005f4c:	f7fb fb1a 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0X32, 0X0106);
 8005f50:	f44f 7183 	mov.w	r1, #262	; 0x106
 8005f54:	2032      	movs	r0, #50	; 0x32
 8005f56:	f7fb fb15 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0X33, 0X0503);
 8005f5a:	f240 5103 	movw	r1, #1283	; 0x503
 8005f5e:	2033      	movs	r0, #51	; 0x33
 8005f60:	f7fb fb10 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0X34, 0X0104);
 8005f64:	f44f 7182 	mov.w	r1, #260	; 0x104
 8005f68:	2034      	movs	r0, #52	; 0x34
 8005f6a:	f7fb fb0b 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0X35, 0X0301);
 8005f6e:	f240 3101 	movw	r1, #769	; 0x301
 8005f72:	2035      	movs	r0, #53	; 0x35
 8005f74:	f7fb fb06 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0X36, 0X0707);
 8005f78:	f240 7107 	movw	r1, #1799	; 0x707
 8005f7c:	2036      	movs	r0, #54	; 0x36
 8005f7e:	f7fb fb01 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0X37, 0X0305);
 8005f82:	f240 3105 	movw	r1, #773	; 0x305
 8005f86:	2037      	movs	r0, #55	; 0x37
 8005f88:	f7fb fafc 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0X38, 0X0208);
 8005f8c:	f44f 7102 	mov.w	r1, #520	; 0x208
 8005f90:	2038      	movs	r0, #56	; 0x38
 8005f92:	f7fb faf7 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0X39, 0X0F0B);
 8005f96:	f640 710b 	movw	r1, #3851	; 0xf0b
 8005f9a:	2039      	movs	r0, #57	; 0x39
 8005f9c:	f7fb faf2 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0X41, 0X0002);
 8005fa0:	2102      	movs	r1, #2
 8005fa2:	2041      	movs	r0, #65	; 0x41
 8005fa4:	f7fb faee 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0X60, 0X2700);
 8005fa8:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8005fac:	2060      	movs	r0, #96	; 0x60
 8005fae:	f7fb fae9 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0X61, 0X0001);
 8005fb2:	2101      	movs	r1, #1
 8005fb4:	2061      	movs	r0, #97	; 0x61
 8005fb6:	f7fb fae5 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0X90, 0X0210);
 8005fba:	f44f 7104 	mov.w	r1, #528	; 0x210
 8005fbe:	2090      	movs	r0, #144	; 0x90
 8005fc0:	f7fb fae0 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0X92, 0X010A);
 8005fc4:	f44f 7185 	mov.w	r1, #266	; 0x10a
 8005fc8:	2092      	movs	r0, #146	; 0x92
 8005fca:	f7fb fadb 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0X93, 0X0004);
 8005fce:	2104      	movs	r1, #4
 8005fd0:	2093      	movs	r0, #147	; 0x93
 8005fd2:	f7fb fad7 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0XA0, 0X0100);
 8005fd6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005fda:	20a0      	movs	r0, #160	; 0xa0
 8005fdc:	f7fb fad2 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0001);
 8005fe0:	2101      	movs	r1, #1
 8005fe2:	2007      	movs	r0, #7
 8005fe4:	f7fb face 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0021);
 8005fe8:	2121      	movs	r1, #33	; 0x21
 8005fea:	2007      	movs	r0, #7
 8005fec:	f7fb faca 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0023);
 8005ff0:	2123      	movs	r1, #35	; 0x23
 8005ff2:	2007      	movs	r0, #7
 8005ff4:	f7fb fac6 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0033);
 8005ff8:	2133      	movs	r1, #51	; 0x33
 8005ffa:	2007      	movs	r0, #7
 8005ffc:	f7fb fac2 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0133);
 8006000:	f240 1133 	movw	r1, #307	; 0x133
 8006004:	2007      	movs	r0, #7
 8006006:	f7fb fabd 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0XA0, 0X0000);
 800600a:	2100      	movs	r1, #0
 800600c:	20a0      	movs	r0, #160	; 0xa0
 800600e:	f7fb fab9 	bl	8001584 <LCD_WriteReg>
 8006012:	f000 bc6b 	b.w	80068ec <LCD_Init+0x3e34>
 8006016:	bf00      	nop
 8006018:	200000bc 	.word	0x200000bc
	} else if (lcddev.id == 0x4535) {
 800601c:	4b5b      	ldr	r3, [pc, #364]	; (800618c <LCD_Init+0x36d4>)
 800601e:	889b      	ldrh	r3, [r3, #4]
 8006020:	f244 5235 	movw	r2, #17717	; 0x4535
 8006024:	4293      	cmp	r3, r2
 8006026:	f040 80b3 	bne.w	8006190 <LCD_Init+0x36d8>
		LCD_WriteReg(0X15, 0X0030);
 800602a:	2130      	movs	r1, #48	; 0x30
 800602c:	2015      	movs	r0, #21
 800602e:	f7fb faa9 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0X9A, 0X0010);
 8006032:	2110      	movs	r1, #16
 8006034:	209a      	movs	r0, #154	; 0x9a
 8006036:	f7fb faa5 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0X11, 0X0020);
 800603a:	2120      	movs	r1, #32
 800603c:	2011      	movs	r0, #17
 800603e:	f7fb faa1 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0X10, 0X3428);
 8006042:	f243 4128 	movw	r1, #13352	; 0x3428
 8006046:	2010      	movs	r0, #16
 8006048:	f7fb fa9c 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0X12, 0X0002);        //16
 800604c:	2102      	movs	r1, #2
 800604e:	2012      	movs	r0, #18
 8006050:	f7fb fa98 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0X13, 0X1038);
 8006054:	f241 0138 	movw	r1, #4152	; 0x1038
 8006058:	2013      	movs	r0, #19
 800605a:	f7fb fa93 	bl	8001584 <LCD_WriteReg>
		HAL_Delay(40);
 800605e:	2028      	movs	r0, #40	; 0x28
 8006060:	f002 fa42 	bl	80084e8 <HAL_Delay>
		LCD_WriteReg(0X12, 0X0012);        //16
 8006064:	2112      	movs	r1, #18
 8006066:	2012      	movs	r0, #18
 8006068:	f7fb fa8c 	bl	8001584 <LCD_WriteReg>
		HAL_Delay(40);
 800606c:	2028      	movs	r0, #40	; 0x28
 800606e:	f002 fa3b 	bl	80084e8 <HAL_Delay>
		LCD_WriteReg(0X10, 0X3420);
 8006072:	f243 4120 	movw	r1, #13344	; 0x3420
 8006076:	2010      	movs	r0, #16
 8006078:	f7fb fa84 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0X13, 0X3038);
 800607c:	f243 0138 	movw	r1, #12344	; 0x3038
 8006080:	2013      	movs	r0, #19
 8006082:	f7fb fa7f 	bl	8001584 <LCD_WriteReg>
		HAL_Delay(70);
 8006086:	2046      	movs	r0, #70	; 0x46
 8006088:	f002 fa2e 	bl	80084e8 <HAL_Delay>
		LCD_WriteReg(0X30, 0X0000);
 800608c:	2100      	movs	r1, #0
 800608e:	2030      	movs	r0, #48	; 0x30
 8006090:	f7fb fa78 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0X31, 0X0402);
 8006094:	f240 4102 	movw	r1, #1026	; 0x402
 8006098:	2031      	movs	r0, #49	; 0x31
 800609a:	f7fb fa73 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0X32, 0X0307);
 800609e:	f240 3107 	movw	r1, #775	; 0x307
 80060a2:	2032      	movs	r0, #50	; 0x32
 80060a4:	f7fb fa6e 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0X33, 0X0304);
 80060a8:	f44f 7141 	mov.w	r1, #772	; 0x304
 80060ac:	2033      	movs	r0, #51	; 0x33
 80060ae:	f7fb fa69 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0X34, 0X0004);
 80060b2:	2104      	movs	r1, #4
 80060b4:	2034      	movs	r0, #52	; 0x34
 80060b6:	f7fb fa65 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0X35, 0X0401);
 80060ba:	f240 4101 	movw	r1, #1025	; 0x401
 80060be:	2035      	movs	r0, #53	; 0x35
 80060c0:	f7fb fa60 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0X36, 0X0707);
 80060c4:	f240 7107 	movw	r1, #1799	; 0x707
 80060c8:	2036      	movs	r0, #54	; 0x36
 80060ca:	f7fb fa5b 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0X37, 0X0305);
 80060ce:	f240 3105 	movw	r1, #773	; 0x305
 80060d2:	2037      	movs	r0, #55	; 0x37
 80060d4:	f7fb fa56 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0X38, 0X0610);
 80060d8:	f44f 61c2 	mov.w	r1, #1552	; 0x610
 80060dc:	2038      	movs	r0, #56	; 0x38
 80060de:	f7fb fa51 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0X39, 0X0610);
 80060e2:	f44f 61c2 	mov.w	r1, #1552	; 0x610
 80060e6:	2039      	movs	r0, #57	; 0x39
 80060e8:	f7fb fa4c 	bl	8001584 <LCD_WriteReg>

		LCD_WriteReg(0X01, 0X0100);
 80060ec:	f44f 7180 	mov.w	r1, #256	; 0x100
 80060f0:	2001      	movs	r0, #1
 80060f2:	f7fb fa47 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0X02, 0X0300);
 80060f6:	f44f 7140 	mov.w	r1, #768	; 0x300
 80060fa:	2002      	movs	r0, #2
 80060fc:	f7fb fa42 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0X03, 0X1030);        //改变方向的
 8006100:	f241 0130 	movw	r1, #4144	; 0x1030
 8006104:	2003      	movs	r0, #3
 8006106:	f7fb fa3d 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0X08, 0X0808);
 800610a:	f640 0108 	movw	r1, #2056	; 0x808
 800610e:	2008      	movs	r0, #8
 8006110:	f7fb fa38 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0X0A, 0X0008);
 8006114:	2108      	movs	r1, #8
 8006116:	200a      	movs	r0, #10
 8006118:	f7fb fa34 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0X60, 0X2700);
 800611c:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8006120:	2060      	movs	r0, #96	; 0x60
 8006122:	f7fb fa2f 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0X61, 0X0001);
 8006126:	2101      	movs	r1, #1
 8006128:	2061      	movs	r0, #97	; 0x61
 800612a:	f7fb fa2b 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0X90, 0X013E);
 800612e:	f44f 719f 	mov.w	r1, #318	; 0x13e
 8006132:	2090      	movs	r0, #144	; 0x90
 8006134:	f7fb fa26 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0X92, 0X0100);
 8006138:	f44f 7180 	mov.w	r1, #256	; 0x100
 800613c:	2092      	movs	r0, #146	; 0x92
 800613e:	f7fb fa21 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0X93, 0X0100);
 8006142:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006146:	2093      	movs	r0, #147	; 0x93
 8006148:	f7fb fa1c 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0XA0, 0X3000);
 800614c:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8006150:	20a0      	movs	r0, #160	; 0xa0
 8006152:	f7fb fa17 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0XA3, 0X0010);
 8006156:	2110      	movs	r1, #16
 8006158:	20a3      	movs	r0, #163	; 0xa3
 800615a:	f7fb fa13 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0001);
 800615e:	2101      	movs	r1, #1
 8006160:	2007      	movs	r0, #7
 8006162:	f7fb fa0f 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0021);
 8006166:	2121      	movs	r1, #33	; 0x21
 8006168:	2007      	movs	r0, #7
 800616a:	f7fb fa0b 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0023);
 800616e:	2123      	movs	r1, #35	; 0x23
 8006170:	2007      	movs	r0, #7
 8006172:	f7fb fa07 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0033);
 8006176:	2133      	movs	r1, #51	; 0x33
 8006178:	2007      	movs	r0, #7
 800617a:	f7fb fa03 	bl	8001584 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0133);
 800617e:	f240 1133 	movw	r1, #307	; 0x133
 8006182:	2007      	movs	r0, #7
 8006184:	f7fb f9fe 	bl	8001584 <LCD_WriteReg>
 8006188:	e3b0      	b.n	80068ec <LCD_Init+0x3e34>
 800618a:	bf00      	nop
 800618c:	200000bc 	.word	0x200000bc
	} else if (lcddev.id == 0X1963) {
 8006190:	4ba8      	ldr	r3, [pc, #672]	; (8006434 <LCD_Init+0x397c>)
 8006192:	889b      	ldrh	r3, [r3, #4]
 8006194:	f641 1263 	movw	r2, #6499	; 0x1963
 8006198:	4293      	cmp	r3, r2
 800619a:	f040 83a7 	bne.w	80068ec <LCD_Init+0x3e34>
		LCD_WR_REG(0xE2);	//Set PLL with OSC = 10MHz (hardware),	Multiplier N = 35, 250MHz < VCO < 800MHz = OSC*(N+1), VCO = 300MHz
 800619e:	20e2      	movs	r0, #226	; 0xe2
 80061a0:	f7fb f964 	bl	800146c <LCD_WR_REG>
		LCD_WR_DATA(0x1D);		//参数1 
 80061a4:	4ba4      	ldr	r3, [pc, #656]	; (8006438 <LCD_Init+0x3980>)
 80061a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80061aa:	611a      	str	r2, [r3, #16]
 80061ac:	4ba2      	ldr	r3, [pc, #648]	; (8006438 <LCD_Init+0x3980>)
 80061ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80061b2:	615a      	str	r2, [r3, #20]
 80061b4:	4ba1      	ldr	r3, [pc, #644]	; (800643c <LCD_Init+0x3984>)
 80061b6:	221d      	movs	r2, #29
 80061b8:	60da      	str	r2, [r3, #12]
 80061ba:	4b9f      	ldr	r3, [pc, #636]	; (8006438 <LCD_Init+0x3980>)
 80061bc:	2280      	movs	r2, #128	; 0x80
 80061be:	615a      	str	r2, [r3, #20]
 80061c0:	4b9d      	ldr	r3, [pc, #628]	; (8006438 <LCD_Init+0x3980>)
 80061c2:	2280      	movs	r2, #128	; 0x80
 80061c4:	611a      	str	r2, [r3, #16]
 80061c6:	4b9c      	ldr	r3, [pc, #624]	; (8006438 <LCD_Init+0x3980>)
 80061c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80061cc:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x02);		//参数2 Divider M = 2, PLL = 300/(M+1) = 100MHz
 80061ce:	4b9a      	ldr	r3, [pc, #616]	; (8006438 <LCD_Init+0x3980>)
 80061d0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80061d4:	611a      	str	r2, [r3, #16]
 80061d6:	4b98      	ldr	r3, [pc, #608]	; (8006438 <LCD_Init+0x3980>)
 80061d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80061dc:	615a      	str	r2, [r3, #20]
 80061de:	4b97      	ldr	r3, [pc, #604]	; (800643c <LCD_Init+0x3984>)
 80061e0:	2202      	movs	r2, #2
 80061e2:	60da      	str	r2, [r3, #12]
 80061e4:	4b94      	ldr	r3, [pc, #592]	; (8006438 <LCD_Init+0x3980>)
 80061e6:	2280      	movs	r2, #128	; 0x80
 80061e8:	615a      	str	r2, [r3, #20]
 80061ea:	4b93      	ldr	r3, [pc, #588]	; (8006438 <LCD_Init+0x3980>)
 80061ec:	2280      	movs	r2, #128	; 0x80
 80061ee:	611a      	str	r2, [r3, #16]
 80061f0:	4b91      	ldr	r3, [pc, #580]	; (8006438 <LCD_Init+0x3980>)
 80061f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80061f6:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x04);		//参数3 Validate M and N values   
 80061f8:	4b8f      	ldr	r3, [pc, #572]	; (8006438 <LCD_Init+0x3980>)
 80061fa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80061fe:	611a      	str	r2, [r3, #16]
 8006200:	4b8d      	ldr	r3, [pc, #564]	; (8006438 <LCD_Init+0x3980>)
 8006202:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006206:	615a      	str	r2, [r3, #20]
 8006208:	4b8c      	ldr	r3, [pc, #560]	; (800643c <LCD_Init+0x3984>)
 800620a:	2204      	movs	r2, #4
 800620c:	60da      	str	r2, [r3, #12]
 800620e:	4b8a      	ldr	r3, [pc, #552]	; (8006438 <LCD_Init+0x3980>)
 8006210:	2280      	movs	r2, #128	; 0x80
 8006212:	615a      	str	r2, [r3, #20]
 8006214:	4b88      	ldr	r3, [pc, #544]	; (8006438 <LCD_Init+0x3980>)
 8006216:	2280      	movs	r2, #128	; 0x80
 8006218:	611a      	str	r2, [r3, #16]
 800621a:	4b87      	ldr	r3, [pc, #540]	; (8006438 <LCD_Init+0x3980>)
 800621c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006220:	611a      	str	r2, [r3, #16]
//		delay_us(100);
		HAL_Delay(1);
 8006222:	2001      	movs	r0, #1
 8006224:	f002 f960 	bl	80084e8 <HAL_Delay>
		LCD_WR_REG(0xE0);		// Start PLL command
 8006228:	20e0      	movs	r0, #224	; 0xe0
 800622a:	f7fb f91f 	bl	800146c <LCD_WR_REG>
		LCD_WR_DATA(0x01);		// enable PLL
 800622e:	4b82      	ldr	r3, [pc, #520]	; (8006438 <LCD_Init+0x3980>)
 8006230:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006234:	611a      	str	r2, [r3, #16]
 8006236:	4b80      	ldr	r3, [pc, #512]	; (8006438 <LCD_Init+0x3980>)
 8006238:	f44f 7200 	mov.w	r2, #512	; 0x200
 800623c:	615a      	str	r2, [r3, #20]
 800623e:	4b7f      	ldr	r3, [pc, #508]	; (800643c <LCD_Init+0x3984>)
 8006240:	2201      	movs	r2, #1
 8006242:	60da      	str	r2, [r3, #12]
 8006244:	4b7c      	ldr	r3, [pc, #496]	; (8006438 <LCD_Init+0x3980>)
 8006246:	2280      	movs	r2, #128	; 0x80
 8006248:	615a      	str	r2, [r3, #20]
 800624a:	4b7b      	ldr	r3, [pc, #492]	; (8006438 <LCD_Init+0x3980>)
 800624c:	2280      	movs	r2, #128	; 0x80
 800624e:	611a      	str	r2, [r3, #16]
 8006250:	4b79      	ldr	r3, [pc, #484]	; (8006438 <LCD_Init+0x3980>)
 8006252:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006256:	611a      	str	r2, [r3, #16]
		HAL_Delay(10);
 8006258:	200a      	movs	r0, #10
 800625a:	f002 f945 	bl	80084e8 <HAL_Delay>
		LCD_WR_REG(0xE0);		// Start PLL command again
 800625e:	20e0      	movs	r0, #224	; 0xe0
 8006260:	f7fb f904 	bl	800146c <LCD_WR_REG>
		LCD_WR_DATA(0x03);		// now, use PLL output as system clock	
 8006264:	4b74      	ldr	r3, [pc, #464]	; (8006438 <LCD_Init+0x3980>)
 8006266:	f44f 7280 	mov.w	r2, #256	; 0x100
 800626a:	611a      	str	r2, [r3, #16]
 800626c:	4b72      	ldr	r3, [pc, #456]	; (8006438 <LCD_Init+0x3980>)
 800626e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006272:	615a      	str	r2, [r3, #20]
 8006274:	4b71      	ldr	r3, [pc, #452]	; (800643c <LCD_Init+0x3984>)
 8006276:	2203      	movs	r2, #3
 8006278:	60da      	str	r2, [r3, #12]
 800627a:	4b6f      	ldr	r3, [pc, #444]	; (8006438 <LCD_Init+0x3980>)
 800627c:	2280      	movs	r2, #128	; 0x80
 800627e:	615a      	str	r2, [r3, #20]
 8006280:	4b6d      	ldr	r3, [pc, #436]	; (8006438 <LCD_Init+0x3980>)
 8006282:	2280      	movs	r2, #128	; 0x80
 8006284:	611a      	str	r2, [r3, #16]
 8006286:	4b6c      	ldr	r3, [pc, #432]	; (8006438 <LCD_Init+0x3980>)
 8006288:	f44f 7200 	mov.w	r2, #512	; 0x200
 800628c:	611a      	str	r2, [r3, #16]
		HAL_Delay(12);
 800628e:	200c      	movs	r0, #12
 8006290:	f002 f92a 	bl	80084e8 <HAL_Delay>
		LCD_WR_REG(0x01);		//软复位
 8006294:	2001      	movs	r0, #1
 8006296:	f7fb f8e9 	bl	800146c <LCD_WR_REG>
		HAL_Delay(10);
 800629a:	200a      	movs	r0, #10
 800629c:	f002 f924 	bl	80084e8 <HAL_Delay>

		LCD_WR_REG(0xE6);		//设置像素频率,33Mhz
 80062a0:	20e6      	movs	r0, #230	; 0xe6
 80062a2:	f7fb f8e3 	bl	800146c <LCD_WR_REG>
		LCD_WR_DATA(0x2F);
 80062a6:	4b64      	ldr	r3, [pc, #400]	; (8006438 <LCD_Init+0x3980>)
 80062a8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80062ac:	611a      	str	r2, [r3, #16]
 80062ae:	4b62      	ldr	r3, [pc, #392]	; (8006438 <LCD_Init+0x3980>)
 80062b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80062b4:	615a      	str	r2, [r3, #20]
 80062b6:	4b61      	ldr	r3, [pc, #388]	; (800643c <LCD_Init+0x3984>)
 80062b8:	222f      	movs	r2, #47	; 0x2f
 80062ba:	60da      	str	r2, [r3, #12]
 80062bc:	4b5e      	ldr	r3, [pc, #376]	; (8006438 <LCD_Init+0x3980>)
 80062be:	2280      	movs	r2, #128	; 0x80
 80062c0:	615a      	str	r2, [r3, #20]
 80062c2:	4b5d      	ldr	r3, [pc, #372]	; (8006438 <LCD_Init+0x3980>)
 80062c4:	2280      	movs	r2, #128	; 0x80
 80062c6:	611a      	str	r2, [r3, #16]
 80062c8:	4b5b      	ldr	r3, [pc, #364]	; (8006438 <LCD_Init+0x3980>)
 80062ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80062ce:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0xFF);
 80062d0:	4b59      	ldr	r3, [pc, #356]	; (8006438 <LCD_Init+0x3980>)
 80062d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80062d6:	611a      	str	r2, [r3, #16]
 80062d8:	4b57      	ldr	r3, [pc, #348]	; (8006438 <LCD_Init+0x3980>)
 80062da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80062de:	615a      	str	r2, [r3, #20]
 80062e0:	4b56      	ldr	r3, [pc, #344]	; (800643c <LCD_Init+0x3984>)
 80062e2:	22ff      	movs	r2, #255	; 0xff
 80062e4:	60da      	str	r2, [r3, #12]
 80062e6:	4b54      	ldr	r3, [pc, #336]	; (8006438 <LCD_Init+0x3980>)
 80062e8:	2280      	movs	r2, #128	; 0x80
 80062ea:	615a      	str	r2, [r3, #20]
 80062ec:	4b52      	ldr	r3, [pc, #328]	; (8006438 <LCD_Init+0x3980>)
 80062ee:	2280      	movs	r2, #128	; 0x80
 80062f0:	611a      	str	r2, [r3, #16]
 80062f2:	4b51      	ldr	r3, [pc, #324]	; (8006438 <LCD_Init+0x3980>)
 80062f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80062f8:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0xFF);
 80062fa:	4b4f      	ldr	r3, [pc, #316]	; (8006438 <LCD_Init+0x3980>)
 80062fc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006300:	611a      	str	r2, [r3, #16]
 8006302:	4b4d      	ldr	r3, [pc, #308]	; (8006438 <LCD_Init+0x3980>)
 8006304:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006308:	615a      	str	r2, [r3, #20]
 800630a:	4b4c      	ldr	r3, [pc, #304]	; (800643c <LCD_Init+0x3984>)
 800630c:	22ff      	movs	r2, #255	; 0xff
 800630e:	60da      	str	r2, [r3, #12]
 8006310:	4b49      	ldr	r3, [pc, #292]	; (8006438 <LCD_Init+0x3980>)
 8006312:	2280      	movs	r2, #128	; 0x80
 8006314:	615a      	str	r2, [r3, #20]
 8006316:	4b48      	ldr	r3, [pc, #288]	; (8006438 <LCD_Init+0x3980>)
 8006318:	2280      	movs	r2, #128	; 0x80
 800631a:	611a      	str	r2, [r3, #16]
 800631c:	4b46      	ldr	r3, [pc, #280]	; (8006438 <LCD_Init+0x3980>)
 800631e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006322:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0xB0);		//设置LCD模式
 8006324:	20b0      	movs	r0, #176	; 0xb0
 8006326:	f7fb f8a1 	bl	800146c <LCD_WR_REG>
		LCD_WR_DATA(0x20);		//24位模式
 800632a:	4b43      	ldr	r3, [pc, #268]	; (8006438 <LCD_Init+0x3980>)
 800632c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006330:	611a      	str	r2, [r3, #16]
 8006332:	4b41      	ldr	r3, [pc, #260]	; (8006438 <LCD_Init+0x3980>)
 8006334:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006338:	615a      	str	r2, [r3, #20]
 800633a:	4b40      	ldr	r3, [pc, #256]	; (800643c <LCD_Init+0x3984>)
 800633c:	2220      	movs	r2, #32
 800633e:	60da      	str	r2, [r3, #12]
 8006340:	4b3d      	ldr	r3, [pc, #244]	; (8006438 <LCD_Init+0x3980>)
 8006342:	2280      	movs	r2, #128	; 0x80
 8006344:	615a      	str	r2, [r3, #20]
 8006346:	4b3c      	ldr	r3, [pc, #240]	; (8006438 <LCD_Init+0x3980>)
 8006348:	2280      	movs	r2, #128	; 0x80
 800634a:	611a      	str	r2, [r3, #16]
 800634c:	4b3a      	ldr	r3, [pc, #232]	; (8006438 <LCD_Init+0x3980>)
 800634e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006352:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);		//TFT 模式 
 8006354:	4b38      	ldr	r3, [pc, #224]	; (8006438 <LCD_Init+0x3980>)
 8006356:	f44f 7280 	mov.w	r2, #256	; 0x100
 800635a:	611a      	str	r2, [r3, #16]
 800635c:	4b36      	ldr	r3, [pc, #216]	; (8006438 <LCD_Init+0x3980>)
 800635e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006362:	615a      	str	r2, [r3, #20]
 8006364:	4b35      	ldr	r3, [pc, #212]	; (800643c <LCD_Init+0x3984>)
 8006366:	2200      	movs	r2, #0
 8006368:	60da      	str	r2, [r3, #12]
 800636a:	4b33      	ldr	r3, [pc, #204]	; (8006438 <LCD_Init+0x3980>)
 800636c:	2280      	movs	r2, #128	; 0x80
 800636e:	615a      	str	r2, [r3, #20]
 8006370:	4b31      	ldr	r3, [pc, #196]	; (8006438 <LCD_Init+0x3980>)
 8006372:	2280      	movs	r2, #128	; 0x80
 8006374:	611a      	str	r2, [r3, #16]
 8006376:	4b30      	ldr	r3, [pc, #192]	; (8006438 <LCD_Init+0x3980>)
 8006378:	f44f 7200 	mov.w	r2, #512	; 0x200
 800637c:	611a      	str	r2, [r3, #16]

		LCD_WR_DATA((SSD_HOR_RESOLUTION-1)>>8);		//设置LCD水平像素
 800637e:	4b2e      	ldr	r3, [pc, #184]	; (8006438 <LCD_Init+0x3980>)
 8006380:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006384:	611a      	str	r2, [r3, #16]
 8006386:	4b2c      	ldr	r3, [pc, #176]	; (8006438 <LCD_Init+0x3980>)
 8006388:	f44f 7200 	mov.w	r2, #512	; 0x200
 800638c:	615a      	str	r2, [r3, #20]
 800638e:	4b2b      	ldr	r3, [pc, #172]	; (800643c <LCD_Init+0x3984>)
 8006390:	2203      	movs	r2, #3
 8006392:	60da      	str	r2, [r3, #12]
 8006394:	4b28      	ldr	r3, [pc, #160]	; (8006438 <LCD_Init+0x3980>)
 8006396:	2280      	movs	r2, #128	; 0x80
 8006398:	615a      	str	r2, [r3, #20]
 800639a:	4b27      	ldr	r3, [pc, #156]	; (8006438 <LCD_Init+0x3980>)
 800639c:	2280      	movs	r2, #128	; 0x80
 800639e:	611a      	str	r2, [r3, #16]
 80063a0:	4b25      	ldr	r3, [pc, #148]	; (8006438 <LCD_Init+0x3980>)
 80063a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80063a6:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HOR_RESOLUTION-1);
 80063a8:	4b23      	ldr	r3, [pc, #140]	; (8006438 <LCD_Init+0x3980>)
 80063aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80063ae:	611a      	str	r2, [r3, #16]
 80063b0:	4b21      	ldr	r3, [pc, #132]	; (8006438 <LCD_Init+0x3980>)
 80063b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80063b6:	615a      	str	r2, [r3, #20]
 80063b8:	4b20      	ldr	r3, [pc, #128]	; (800643c <LCD_Init+0x3984>)
 80063ba:	f240 321f 	movw	r2, #799	; 0x31f
 80063be:	60da      	str	r2, [r3, #12]
 80063c0:	4b1d      	ldr	r3, [pc, #116]	; (8006438 <LCD_Init+0x3980>)
 80063c2:	2280      	movs	r2, #128	; 0x80
 80063c4:	615a      	str	r2, [r3, #20]
 80063c6:	4b1c      	ldr	r3, [pc, #112]	; (8006438 <LCD_Init+0x3980>)
 80063c8:	2280      	movs	r2, #128	; 0x80
 80063ca:	611a      	str	r2, [r3, #16]
 80063cc:	4b1a      	ldr	r3, [pc, #104]	; (8006438 <LCD_Init+0x3980>)
 80063ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80063d2:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA((SSD_VER_RESOLUTION-1)>>8);		//设置LCD垂直像素
 80063d4:	4b18      	ldr	r3, [pc, #96]	; (8006438 <LCD_Init+0x3980>)
 80063d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80063da:	611a      	str	r2, [r3, #16]
 80063dc:	4b16      	ldr	r3, [pc, #88]	; (8006438 <LCD_Init+0x3980>)
 80063de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80063e2:	615a      	str	r2, [r3, #20]
 80063e4:	4b15      	ldr	r3, [pc, #84]	; (800643c <LCD_Init+0x3984>)
 80063e6:	2201      	movs	r2, #1
 80063e8:	60da      	str	r2, [r3, #12]
 80063ea:	4b13      	ldr	r3, [pc, #76]	; (8006438 <LCD_Init+0x3980>)
 80063ec:	2280      	movs	r2, #128	; 0x80
 80063ee:	615a      	str	r2, [r3, #20]
 80063f0:	4b11      	ldr	r3, [pc, #68]	; (8006438 <LCD_Init+0x3980>)
 80063f2:	2280      	movs	r2, #128	; 0x80
 80063f4:	611a      	str	r2, [r3, #16]
 80063f6:	4b10      	ldr	r3, [pc, #64]	; (8006438 <LCD_Init+0x3980>)
 80063f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80063fc:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VER_RESOLUTION-1);
 80063fe:	4b0e      	ldr	r3, [pc, #56]	; (8006438 <LCD_Init+0x3980>)
 8006400:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006404:	611a      	str	r2, [r3, #16]
 8006406:	4b0c      	ldr	r3, [pc, #48]	; (8006438 <LCD_Init+0x3980>)
 8006408:	f44f 7200 	mov.w	r2, #512	; 0x200
 800640c:	615a      	str	r2, [r3, #20]
 800640e:	4b0b      	ldr	r3, [pc, #44]	; (800643c <LCD_Init+0x3984>)
 8006410:	f240 12df 	movw	r2, #479	; 0x1df
 8006414:	60da      	str	r2, [r3, #12]
 8006416:	4b08      	ldr	r3, [pc, #32]	; (8006438 <LCD_Init+0x3980>)
 8006418:	2280      	movs	r2, #128	; 0x80
 800641a:	615a      	str	r2, [r3, #20]
 800641c:	4b06      	ldr	r3, [pc, #24]	; (8006438 <LCD_Init+0x3980>)
 800641e:	2280      	movs	r2, #128	; 0x80
 8006420:	611a      	str	r2, [r3, #16]
 8006422:	4b05      	ldr	r3, [pc, #20]	; (8006438 <LCD_Init+0x3980>)
 8006424:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006428:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);		//RGB序列 
 800642a:	4b03      	ldr	r3, [pc, #12]	; (8006438 <LCD_Init+0x3980>)
 800642c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006430:	e006      	b.n	8006440 <LCD_Init+0x3988>
 8006432:	bf00      	nop
 8006434:	200000bc 	.word	0x200000bc
 8006438:	40011000 	.word	0x40011000
 800643c:	40010c00 	.word	0x40010c00
 8006440:	611a      	str	r2, [r3, #16]
 8006442:	4ba3      	ldr	r3, [pc, #652]	; (80066d0 <LCD_Init+0x3c18>)
 8006444:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006448:	615a      	str	r2, [r3, #20]
 800644a:	4ba2      	ldr	r3, [pc, #648]	; (80066d4 <LCD_Init+0x3c1c>)
 800644c:	2200      	movs	r2, #0
 800644e:	60da      	str	r2, [r3, #12]
 8006450:	4b9f      	ldr	r3, [pc, #636]	; (80066d0 <LCD_Init+0x3c18>)
 8006452:	2280      	movs	r2, #128	; 0x80
 8006454:	615a      	str	r2, [r3, #20]
 8006456:	4b9e      	ldr	r3, [pc, #632]	; (80066d0 <LCD_Init+0x3c18>)
 8006458:	2280      	movs	r2, #128	; 0x80
 800645a:	611a      	str	r2, [r3, #16]
 800645c:	4b9c      	ldr	r3, [pc, #624]	; (80066d0 <LCD_Init+0x3c18>)
 800645e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006462:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0xB4);		//Set horizontal period
 8006464:	20b4      	movs	r0, #180	; 0xb4
 8006466:	f7fb f801 	bl	800146c <LCD_WR_REG>
		LCD_WR_DATA((SSD_HT-1)>>8);
 800646a:	4b99      	ldr	r3, [pc, #612]	; (80066d0 <LCD_Init+0x3c18>)
 800646c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006470:	611a      	str	r2, [r3, #16]
 8006472:	4b97      	ldr	r3, [pc, #604]	; (80066d0 <LCD_Init+0x3c18>)
 8006474:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006478:	615a      	str	r2, [r3, #20]
 800647a:	4b96      	ldr	r3, [pc, #600]	; (80066d4 <LCD_Init+0x3c1c>)
 800647c:	2204      	movs	r2, #4
 800647e:	60da      	str	r2, [r3, #12]
 8006480:	4b93      	ldr	r3, [pc, #588]	; (80066d0 <LCD_Init+0x3c18>)
 8006482:	2280      	movs	r2, #128	; 0x80
 8006484:	615a      	str	r2, [r3, #20]
 8006486:	4b92      	ldr	r3, [pc, #584]	; (80066d0 <LCD_Init+0x3c18>)
 8006488:	2280      	movs	r2, #128	; 0x80
 800648a:	611a      	str	r2, [r3, #16]
 800648c:	4b90      	ldr	r3, [pc, #576]	; (80066d0 <LCD_Init+0x3c18>)
 800648e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006492:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HT-1);
 8006494:	4b8e      	ldr	r3, [pc, #568]	; (80066d0 <LCD_Init+0x3c18>)
 8006496:	f44f 7280 	mov.w	r2, #256	; 0x100
 800649a:	611a      	str	r2, [r3, #16]
 800649c:	4b8c      	ldr	r3, [pc, #560]	; (80066d0 <LCD_Init+0x3c18>)
 800649e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80064a2:	615a      	str	r2, [r3, #20]
 80064a4:	4b8b      	ldr	r3, [pc, #556]	; (80066d4 <LCD_Init+0x3c1c>)
 80064a6:	f240 421f 	movw	r2, #1055	; 0x41f
 80064aa:	60da      	str	r2, [r3, #12]
 80064ac:	4b88      	ldr	r3, [pc, #544]	; (80066d0 <LCD_Init+0x3c18>)
 80064ae:	2280      	movs	r2, #128	; 0x80
 80064b0:	615a      	str	r2, [r3, #20]
 80064b2:	4b87      	ldr	r3, [pc, #540]	; (80066d0 <LCD_Init+0x3c18>)
 80064b4:	2280      	movs	r2, #128	; 0x80
 80064b6:	611a      	str	r2, [r3, #16]
 80064b8:	4b85      	ldr	r3, [pc, #532]	; (80066d0 <LCD_Init+0x3c18>)
 80064ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80064be:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HPS>>8);
 80064c0:	4b83      	ldr	r3, [pc, #524]	; (80066d0 <LCD_Init+0x3c18>)
 80064c2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80064c6:	611a      	str	r2, [r3, #16]
 80064c8:	4b81      	ldr	r3, [pc, #516]	; (80066d0 <LCD_Init+0x3c18>)
 80064ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80064ce:	615a      	str	r2, [r3, #20]
 80064d0:	4b80      	ldr	r3, [pc, #512]	; (80066d4 <LCD_Init+0x3c1c>)
 80064d2:	2200      	movs	r2, #0
 80064d4:	60da      	str	r2, [r3, #12]
 80064d6:	4b7e      	ldr	r3, [pc, #504]	; (80066d0 <LCD_Init+0x3c18>)
 80064d8:	2280      	movs	r2, #128	; 0x80
 80064da:	615a      	str	r2, [r3, #20]
 80064dc:	4b7c      	ldr	r3, [pc, #496]	; (80066d0 <LCD_Init+0x3c18>)
 80064de:	2280      	movs	r2, #128	; 0x80
 80064e0:	611a      	str	r2, [r3, #16]
 80064e2:	4b7b      	ldr	r3, [pc, #492]	; (80066d0 <LCD_Init+0x3c18>)
 80064e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80064e8:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HPS);
 80064ea:	4b79      	ldr	r3, [pc, #484]	; (80066d0 <LCD_Init+0x3c18>)
 80064ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 80064f0:	611a      	str	r2, [r3, #16]
 80064f2:	4b77      	ldr	r3, [pc, #476]	; (80066d0 <LCD_Init+0x3c18>)
 80064f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80064f8:	615a      	str	r2, [r3, #20]
 80064fa:	4b76      	ldr	r3, [pc, #472]	; (80066d4 <LCD_Init+0x3c1c>)
 80064fc:	222e      	movs	r2, #46	; 0x2e
 80064fe:	60da      	str	r2, [r3, #12]
 8006500:	4b73      	ldr	r3, [pc, #460]	; (80066d0 <LCD_Init+0x3c18>)
 8006502:	2280      	movs	r2, #128	; 0x80
 8006504:	615a      	str	r2, [r3, #20]
 8006506:	4b72      	ldr	r3, [pc, #456]	; (80066d0 <LCD_Init+0x3c18>)
 8006508:	2280      	movs	r2, #128	; 0x80
 800650a:	611a      	str	r2, [r3, #16]
 800650c:	4b70      	ldr	r3, [pc, #448]	; (80066d0 <LCD_Init+0x3c18>)
 800650e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006512:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HOR_PULSE_WIDTH-1);
 8006514:	4b6e      	ldr	r3, [pc, #440]	; (80066d0 <LCD_Init+0x3c18>)
 8006516:	f44f 7280 	mov.w	r2, #256	; 0x100
 800651a:	611a      	str	r2, [r3, #16]
 800651c:	4b6c      	ldr	r3, [pc, #432]	; (80066d0 <LCD_Init+0x3c18>)
 800651e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006522:	615a      	str	r2, [r3, #20]
 8006524:	4b6b      	ldr	r3, [pc, #428]	; (80066d4 <LCD_Init+0x3c1c>)
 8006526:	2200      	movs	r2, #0
 8006528:	60da      	str	r2, [r3, #12]
 800652a:	4b69      	ldr	r3, [pc, #420]	; (80066d0 <LCD_Init+0x3c18>)
 800652c:	2280      	movs	r2, #128	; 0x80
 800652e:	615a      	str	r2, [r3, #20]
 8006530:	4b67      	ldr	r3, [pc, #412]	; (80066d0 <LCD_Init+0x3c18>)
 8006532:	2280      	movs	r2, #128	; 0x80
 8006534:	611a      	str	r2, [r3, #16]
 8006536:	4b66      	ldr	r3, [pc, #408]	; (80066d0 <LCD_Init+0x3c18>)
 8006538:	f44f 7200 	mov.w	r2, #512	; 0x200
 800653c:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 800653e:	4b64      	ldr	r3, [pc, #400]	; (80066d0 <LCD_Init+0x3c18>)
 8006540:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006544:	611a      	str	r2, [r3, #16]
 8006546:	4b62      	ldr	r3, [pc, #392]	; (80066d0 <LCD_Init+0x3c18>)
 8006548:	f44f 7200 	mov.w	r2, #512	; 0x200
 800654c:	615a      	str	r2, [r3, #20]
 800654e:	4b61      	ldr	r3, [pc, #388]	; (80066d4 <LCD_Init+0x3c1c>)
 8006550:	2200      	movs	r2, #0
 8006552:	60da      	str	r2, [r3, #12]
 8006554:	4b5e      	ldr	r3, [pc, #376]	; (80066d0 <LCD_Init+0x3c18>)
 8006556:	2280      	movs	r2, #128	; 0x80
 8006558:	615a      	str	r2, [r3, #20]
 800655a:	4b5d      	ldr	r3, [pc, #372]	; (80066d0 <LCD_Init+0x3c18>)
 800655c:	2280      	movs	r2, #128	; 0x80
 800655e:	611a      	str	r2, [r3, #16]
 8006560:	4b5b      	ldr	r3, [pc, #364]	; (80066d0 <LCD_Init+0x3c18>)
 8006562:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006566:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 8006568:	4b59      	ldr	r3, [pc, #356]	; (80066d0 <LCD_Init+0x3c18>)
 800656a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800656e:	611a      	str	r2, [r3, #16]
 8006570:	4b57      	ldr	r3, [pc, #348]	; (80066d0 <LCD_Init+0x3c18>)
 8006572:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006576:	615a      	str	r2, [r3, #20]
 8006578:	4b56      	ldr	r3, [pc, #344]	; (80066d4 <LCD_Init+0x3c1c>)
 800657a:	2200      	movs	r2, #0
 800657c:	60da      	str	r2, [r3, #12]
 800657e:	4b54      	ldr	r3, [pc, #336]	; (80066d0 <LCD_Init+0x3c18>)
 8006580:	2280      	movs	r2, #128	; 0x80
 8006582:	615a      	str	r2, [r3, #20]
 8006584:	4b52      	ldr	r3, [pc, #328]	; (80066d0 <LCD_Init+0x3c18>)
 8006586:	2280      	movs	r2, #128	; 0x80
 8006588:	611a      	str	r2, [r3, #16]
 800658a:	4b51      	ldr	r3, [pc, #324]	; (80066d0 <LCD_Init+0x3c18>)
 800658c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006590:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 8006592:	4b4f      	ldr	r3, [pc, #316]	; (80066d0 <LCD_Init+0x3c18>)
 8006594:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006598:	611a      	str	r2, [r3, #16]
 800659a:	4b4d      	ldr	r3, [pc, #308]	; (80066d0 <LCD_Init+0x3c18>)
 800659c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80065a0:	615a      	str	r2, [r3, #20]
 80065a2:	4b4c      	ldr	r3, [pc, #304]	; (80066d4 <LCD_Init+0x3c1c>)
 80065a4:	2200      	movs	r2, #0
 80065a6:	60da      	str	r2, [r3, #12]
 80065a8:	4b49      	ldr	r3, [pc, #292]	; (80066d0 <LCD_Init+0x3c18>)
 80065aa:	2280      	movs	r2, #128	; 0x80
 80065ac:	615a      	str	r2, [r3, #20]
 80065ae:	4b48      	ldr	r3, [pc, #288]	; (80066d0 <LCD_Init+0x3c18>)
 80065b0:	2280      	movs	r2, #128	; 0x80
 80065b2:	611a      	str	r2, [r3, #16]
 80065b4:	4b46      	ldr	r3, [pc, #280]	; (80066d0 <LCD_Init+0x3c18>)
 80065b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80065ba:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(0xB6);		//Set vertical period
 80065bc:	20b6      	movs	r0, #182	; 0xb6
 80065be:	f7fa ff55 	bl	800146c <LCD_WR_REG>
		LCD_WR_DATA((SSD_VT-1)>>8);
 80065c2:	4b43      	ldr	r3, [pc, #268]	; (80066d0 <LCD_Init+0x3c18>)
 80065c4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80065c8:	611a      	str	r2, [r3, #16]
 80065ca:	4b41      	ldr	r3, [pc, #260]	; (80066d0 <LCD_Init+0x3c18>)
 80065cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80065d0:	615a      	str	r2, [r3, #20]
 80065d2:	4b40      	ldr	r3, [pc, #256]	; (80066d4 <LCD_Init+0x3c1c>)
 80065d4:	2202      	movs	r2, #2
 80065d6:	60da      	str	r2, [r3, #12]
 80065d8:	4b3d      	ldr	r3, [pc, #244]	; (80066d0 <LCD_Init+0x3c18>)
 80065da:	2280      	movs	r2, #128	; 0x80
 80065dc:	615a      	str	r2, [r3, #20]
 80065de:	4b3c      	ldr	r3, [pc, #240]	; (80066d0 <LCD_Init+0x3c18>)
 80065e0:	2280      	movs	r2, #128	; 0x80
 80065e2:	611a      	str	r2, [r3, #16]
 80065e4:	4b3a      	ldr	r3, [pc, #232]	; (80066d0 <LCD_Init+0x3c18>)
 80065e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80065ea:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VT-1);
 80065ec:	4b38      	ldr	r3, [pc, #224]	; (80066d0 <LCD_Init+0x3c18>)
 80065ee:	f44f 7280 	mov.w	r2, #256	; 0x100
 80065f2:	611a      	str	r2, [r3, #16]
 80065f4:	4b36      	ldr	r3, [pc, #216]	; (80066d0 <LCD_Init+0x3c18>)
 80065f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80065fa:	615a      	str	r2, [r3, #20]
 80065fc:	4b35      	ldr	r3, [pc, #212]	; (80066d4 <LCD_Init+0x3c1c>)
 80065fe:	f44f 7203 	mov.w	r2, #524	; 0x20c
 8006602:	60da      	str	r2, [r3, #12]
 8006604:	4b32      	ldr	r3, [pc, #200]	; (80066d0 <LCD_Init+0x3c18>)
 8006606:	2280      	movs	r2, #128	; 0x80
 8006608:	615a      	str	r2, [r3, #20]
 800660a:	4b31      	ldr	r3, [pc, #196]	; (80066d0 <LCD_Init+0x3c18>)
 800660c:	2280      	movs	r2, #128	; 0x80
 800660e:	611a      	str	r2, [r3, #16]
 8006610:	4b2f      	ldr	r3, [pc, #188]	; (80066d0 <LCD_Init+0x3c18>)
 8006612:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006616:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VPS>>8);
 8006618:	4b2d      	ldr	r3, [pc, #180]	; (80066d0 <LCD_Init+0x3c18>)
 800661a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800661e:	611a      	str	r2, [r3, #16]
 8006620:	4b2b      	ldr	r3, [pc, #172]	; (80066d0 <LCD_Init+0x3c18>)
 8006622:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006626:	615a      	str	r2, [r3, #20]
 8006628:	4b2a      	ldr	r3, [pc, #168]	; (80066d4 <LCD_Init+0x3c1c>)
 800662a:	2200      	movs	r2, #0
 800662c:	60da      	str	r2, [r3, #12]
 800662e:	4b28      	ldr	r3, [pc, #160]	; (80066d0 <LCD_Init+0x3c18>)
 8006630:	2280      	movs	r2, #128	; 0x80
 8006632:	615a      	str	r2, [r3, #20]
 8006634:	4b26      	ldr	r3, [pc, #152]	; (80066d0 <LCD_Init+0x3c18>)
 8006636:	2280      	movs	r2, #128	; 0x80
 8006638:	611a      	str	r2, [r3, #16]
 800663a:	4b25      	ldr	r3, [pc, #148]	; (80066d0 <LCD_Init+0x3c18>)
 800663c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006640:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VPS);
 8006642:	4b23      	ldr	r3, [pc, #140]	; (80066d0 <LCD_Init+0x3c18>)
 8006644:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006648:	611a      	str	r2, [r3, #16]
 800664a:	4b21      	ldr	r3, [pc, #132]	; (80066d0 <LCD_Init+0x3c18>)
 800664c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006650:	615a      	str	r2, [r3, #20]
 8006652:	4b20      	ldr	r3, [pc, #128]	; (80066d4 <LCD_Init+0x3c1c>)
 8006654:	2217      	movs	r2, #23
 8006656:	60da      	str	r2, [r3, #12]
 8006658:	4b1d      	ldr	r3, [pc, #116]	; (80066d0 <LCD_Init+0x3c18>)
 800665a:	2280      	movs	r2, #128	; 0x80
 800665c:	615a      	str	r2, [r3, #20]
 800665e:	4b1c      	ldr	r3, [pc, #112]	; (80066d0 <LCD_Init+0x3c18>)
 8006660:	2280      	movs	r2, #128	; 0x80
 8006662:	611a      	str	r2, [r3, #16]
 8006664:	4b1a      	ldr	r3, [pc, #104]	; (80066d0 <LCD_Init+0x3c18>)
 8006666:	f44f 7200 	mov.w	r2, #512	; 0x200
 800666a:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VER_FRONT_PORCH-1);
 800666c:	4b18      	ldr	r3, [pc, #96]	; (80066d0 <LCD_Init+0x3c18>)
 800666e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006672:	611a      	str	r2, [r3, #16]
 8006674:	4b16      	ldr	r3, [pc, #88]	; (80066d0 <LCD_Init+0x3c18>)
 8006676:	f44f 7200 	mov.w	r2, #512	; 0x200
 800667a:	615a      	str	r2, [r3, #20]
 800667c:	4b15      	ldr	r3, [pc, #84]	; (80066d4 <LCD_Init+0x3c1c>)
 800667e:	2215      	movs	r2, #21
 8006680:	60da      	str	r2, [r3, #12]
 8006682:	4b13      	ldr	r3, [pc, #76]	; (80066d0 <LCD_Init+0x3c18>)
 8006684:	2280      	movs	r2, #128	; 0x80
 8006686:	615a      	str	r2, [r3, #20]
 8006688:	4b11      	ldr	r3, [pc, #68]	; (80066d0 <LCD_Init+0x3c18>)
 800668a:	2280      	movs	r2, #128	; 0x80
 800668c:	611a      	str	r2, [r3, #16]
 800668e:	4b10      	ldr	r3, [pc, #64]	; (80066d0 <LCD_Init+0x3c18>)
 8006690:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006694:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 8006696:	4b0e      	ldr	r3, [pc, #56]	; (80066d0 <LCD_Init+0x3c18>)
 8006698:	f44f 7280 	mov.w	r2, #256	; 0x100
 800669c:	611a      	str	r2, [r3, #16]
 800669e:	4b0c      	ldr	r3, [pc, #48]	; (80066d0 <LCD_Init+0x3c18>)
 80066a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80066a4:	615a      	str	r2, [r3, #20]
 80066a6:	4b0b      	ldr	r3, [pc, #44]	; (80066d4 <LCD_Init+0x3c1c>)
 80066a8:	2200      	movs	r2, #0
 80066aa:	60da      	str	r2, [r3, #12]
 80066ac:	4b08      	ldr	r3, [pc, #32]	; (80066d0 <LCD_Init+0x3c18>)
 80066ae:	2280      	movs	r2, #128	; 0x80
 80066b0:	615a      	str	r2, [r3, #20]
 80066b2:	4b07      	ldr	r3, [pc, #28]	; (80066d0 <LCD_Init+0x3c18>)
 80066b4:	2280      	movs	r2, #128	; 0x80
 80066b6:	611a      	str	r2, [r3, #16]
 80066b8:	4b05      	ldr	r3, [pc, #20]	; (80066d0 <LCD_Init+0x3c18>)
 80066ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80066be:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 80066c0:	4b03      	ldr	r3, [pc, #12]	; (80066d0 <LCD_Init+0x3c18>)
 80066c2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80066c6:	611a      	str	r2, [r3, #16]
 80066c8:	4b01      	ldr	r3, [pc, #4]	; (80066d0 <LCD_Init+0x3c18>)
 80066ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80066ce:	e003      	b.n	80066d8 <LCD_Init+0x3c20>
 80066d0:	40011000 	.word	0x40011000
 80066d4:	40010c00 	.word	0x40010c00
 80066d8:	615a      	str	r2, [r3, #20]
 80066da:	4b8b      	ldr	r3, [pc, #556]	; (8006908 <LCD_Init+0x3e50>)
 80066dc:	2200      	movs	r2, #0
 80066de:	60da      	str	r2, [r3, #12]
 80066e0:	4b8a      	ldr	r3, [pc, #552]	; (800690c <LCD_Init+0x3e54>)
 80066e2:	2280      	movs	r2, #128	; 0x80
 80066e4:	615a      	str	r2, [r3, #20]
 80066e6:	4b89      	ldr	r3, [pc, #548]	; (800690c <LCD_Init+0x3e54>)
 80066e8:	2280      	movs	r2, #128	; 0x80
 80066ea:	611a      	str	r2, [r3, #16]
 80066ec:	4b87      	ldr	r3, [pc, #540]	; (800690c <LCD_Init+0x3e54>)
 80066ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80066f2:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0xF0);	//设置SSD1963与CPU接口为16bit  
 80066f4:	20f0      	movs	r0, #240	; 0xf0
 80066f6:	f7fa feb9 	bl	800146c <LCD_WR_REG>
		LCD_WR_DATA(0x03);	//16-bit(565 format) data for 16bpp 
 80066fa:	4b84      	ldr	r3, [pc, #528]	; (800690c <LCD_Init+0x3e54>)
 80066fc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006700:	611a      	str	r2, [r3, #16]
 8006702:	4b82      	ldr	r3, [pc, #520]	; (800690c <LCD_Init+0x3e54>)
 8006704:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006708:	615a      	str	r2, [r3, #20]
 800670a:	4b7f      	ldr	r3, [pc, #508]	; (8006908 <LCD_Init+0x3e50>)
 800670c:	2203      	movs	r2, #3
 800670e:	60da      	str	r2, [r3, #12]
 8006710:	4b7e      	ldr	r3, [pc, #504]	; (800690c <LCD_Init+0x3e54>)
 8006712:	2280      	movs	r2, #128	; 0x80
 8006714:	615a      	str	r2, [r3, #20]
 8006716:	4b7d      	ldr	r3, [pc, #500]	; (800690c <LCD_Init+0x3e54>)
 8006718:	2280      	movs	r2, #128	; 0x80
 800671a:	611a      	str	r2, [r3, #16]
 800671c:	4b7b      	ldr	r3, [pc, #492]	; (800690c <LCD_Init+0x3e54>)
 800671e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006722:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0x29);	//开启显示
 8006724:	2029      	movs	r0, #41	; 0x29
 8006726:	f7fa fea1 	bl	800146c <LCD_WR_REG>
		//设置PWM输出  背光通过占空比可调 
		LCD_WR_REG(0xD0);	//设置自动白平衡DBC
 800672a:	20d0      	movs	r0, #208	; 0xd0
 800672c:	f7fa fe9e 	bl	800146c <LCD_WR_REG>
		LCD_WR_DATA(0x00);	//disable
 8006730:	4b76      	ldr	r3, [pc, #472]	; (800690c <LCD_Init+0x3e54>)
 8006732:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006736:	611a      	str	r2, [r3, #16]
 8006738:	4b74      	ldr	r3, [pc, #464]	; (800690c <LCD_Init+0x3e54>)
 800673a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800673e:	615a      	str	r2, [r3, #20]
 8006740:	4b71      	ldr	r3, [pc, #452]	; (8006908 <LCD_Init+0x3e50>)
 8006742:	2200      	movs	r2, #0
 8006744:	60da      	str	r2, [r3, #12]
 8006746:	4b71      	ldr	r3, [pc, #452]	; (800690c <LCD_Init+0x3e54>)
 8006748:	2280      	movs	r2, #128	; 0x80
 800674a:	615a      	str	r2, [r3, #20]
 800674c:	4b6f      	ldr	r3, [pc, #444]	; (800690c <LCD_Init+0x3e54>)
 800674e:	2280      	movs	r2, #128	; 0x80
 8006750:	611a      	str	r2, [r3, #16]
 8006752:	4b6e      	ldr	r3, [pc, #440]	; (800690c <LCD_Init+0x3e54>)
 8006754:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006758:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0xBE);	//配置PWM输出
 800675a:	20be      	movs	r0, #190	; 0xbe
 800675c:	f7fa fe86 	bl	800146c <LCD_WR_REG>
		LCD_WR_DATA(0x05);	//1设置PWM频率
 8006760:	4b6a      	ldr	r3, [pc, #424]	; (800690c <LCD_Init+0x3e54>)
 8006762:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006766:	611a      	str	r2, [r3, #16]
 8006768:	4b68      	ldr	r3, [pc, #416]	; (800690c <LCD_Init+0x3e54>)
 800676a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800676e:	615a      	str	r2, [r3, #20]
 8006770:	4b65      	ldr	r3, [pc, #404]	; (8006908 <LCD_Init+0x3e50>)
 8006772:	2205      	movs	r2, #5
 8006774:	60da      	str	r2, [r3, #12]
 8006776:	4b65      	ldr	r3, [pc, #404]	; (800690c <LCD_Init+0x3e54>)
 8006778:	2280      	movs	r2, #128	; 0x80
 800677a:	615a      	str	r2, [r3, #20]
 800677c:	4b63      	ldr	r3, [pc, #396]	; (800690c <LCD_Init+0x3e54>)
 800677e:	2280      	movs	r2, #128	; 0x80
 8006780:	611a      	str	r2, [r3, #16]
 8006782:	4b62      	ldr	r3, [pc, #392]	; (800690c <LCD_Init+0x3e54>)
 8006784:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006788:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0xFE);	//2设置PWM占空比
 800678a:	4b60      	ldr	r3, [pc, #384]	; (800690c <LCD_Init+0x3e54>)
 800678c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006790:	611a      	str	r2, [r3, #16]
 8006792:	4b5e      	ldr	r3, [pc, #376]	; (800690c <LCD_Init+0x3e54>)
 8006794:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006798:	615a      	str	r2, [r3, #20]
 800679a:	4b5b      	ldr	r3, [pc, #364]	; (8006908 <LCD_Init+0x3e50>)
 800679c:	22fe      	movs	r2, #254	; 0xfe
 800679e:	60da      	str	r2, [r3, #12]
 80067a0:	4b5a      	ldr	r3, [pc, #360]	; (800690c <LCD_Init+0x3e54>)
 80067a2:	2280      	movs	r2, #128	; 0x80
 80067a4:	615a      	str	r2, [r3, #20]
 80067a6:	4b59      	ldr	r3, [pc, #356]	; (800690c <LCD_Init+0x3e54>)
 80067a8:	2280      	movs	r2, #128	; 0x80
 80067aa:	611a      	str	r2, [r3, #16]
 80067ac:	4b57      	ldr	r3, [pc, #348]	; (800690c <LCD_Init+0x3e54>)
 80067ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80067b2:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x01);	//3设置C
 80067b4:	4b55      	ldr	r3, [pc, #340]	; (800690c <LCD_Init+0x3e54>)
 80067b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80067ba:	611a      	str	r2, [r3, #16]
 80067bc:	4b53      	ldr	r3, [pc, #332]	; (800690c <LCD_Init+0x3e54>)
 80067be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80067c2:	615a      	str	r2, [r3, #20]
 80067c4:	4b50      	ldr	r3, [pc, #320]	; (8006908 <LCD_Init+0x3e50>)
 80067c6:	2201      	movs	r2, #1
 80067c8:	60da      	str	r2, [r3, #12]
 80067ca:	4b50      	ldr	r3, [pc, #320]	; (800690c <LCD_Init+0x3e54>)
 80067cc:	2280      	movs	r2, #128	; 0x80
 80067ce:	615a      	str	r2, [r3, #20]
 80067d0:	4b4e      	ldr	r3, [pc, #312]	; (800690c <LCD_Init+0x3e54>)
 80067d2:	2280      	movs	r2, #128	; 0x80
 80067d4:	611a      	str	r2, [r3, #16]
 80067d6:	4b4d      	ldr	r3, [pc, #308]	; (800690c <LCD_Init+0x3e54>)
 80067d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80067dc:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);	//4设置D
 80067de:	4b4b      	ldr	r3, [pc, #300]	; (800690c <LCD_Init+0x3e54>)
 80067e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80067e4:	611a      	str	r2, [r3, #16]
 80067e6:	4b49      	ldr	r3, [pc, #292]	; (800690c <LCD_Init+0x3e54>)
 80067e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80067ec:	615a      	str	r2, [r3, #20]
 80067ee:	4b46      	ldr	r3, [pc, #280]	; (8006908 <LCD_Init+0x3e50>)
 80067f0:	2200      	movs	r2, #0
 80067f2:	60da      	str	r2, [r3, #12]
 80067f4:	4b45      	ldr	r3, [pc, #276]	; (800690c <LCD_Init+0x3e54>)
 80067f6:	2280      	movs	r2, #128	; 0x80
 80067f8:	615a      	str	r2, [r3, #20]
 80067fa:	4b44      	ldr	r3, [pc, #272]	; (800690c <LCD_Init+0x3e54>)
 80067fc:	2280      	movs	r2, #128	; 0x80
 80067fe:	611a      	str	r2, [r3, #16]
 8006800:	4b42      	ldr	r3, [pc, #264]	; (800690c <LCD_Init+0x3e54>)
 8006802:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006806:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);	//5设置E 
 8006808:	4b40      	ldr	r3, [pc, #256]	; (800690c <LCD_Init+0x3e54>)
 800680a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800680e:	611a      	str	r2, [r3, #16]
 8006810:	4b3e      	ldr	r3, [pc, #248]	; (800690c <LCD_Init+0x3e54>)
 8006812:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006816:	615a      	str	r2, [r3, #20]
 8006818:	4b3b      	ldr	r3, [pc, #236]	; (8006908 <LCD_Init+0x3e50>)
 800681a:	2200      	movs	r2, #0
 800681c:	60da      	str	r2, [r3, #12]
 800681e:	4b3b      	ldr	r3, [pc, #236]	; (800690c <LCD_Init+0x3e54>)
 8006820:	2280      	movs	r2, #128	; 0x80
 8006822:	615a      	str	r2, [r3, #20]
 8006824:	4b39      	ldr	r3, [pc, #228]	; (800690c <LCD_Init+0x3e54>)
 8006826:	2280      	movs	r2, #128	; 0x80
 8006828:	611a      	str	r2, [r3, #16]
 800682a:	4b38      	ldr	r3, [pc, #224]	; (800690c <LCD_Init+0x3e54>)
 800682c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006830:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);	//6设置F 
 8006832:	4b36      	ldr	r3, [pc, #216]	; (800690c <LCD_Init+0x3e54>)
 8006834:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006838:	611a      	str	r2, [r3, #16]
 800683a:	4b34      	ldr	r3, [pc, #208]	; (800690c <LCD_Init+0x3e54>)
 800683c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006840:	615a      	str	r2, [r3, #20]
 8006842:	4b31      	ldr	r3, [pc, #196]	; (8006908 <LCD_Init+0x3e50>)
 8006844:	2200      	movs	r2, #0
 8006846:	60da      	str	r2, [r3, #12]
 8006848:	4b30      	ldr	r3, [pc, #192]	; (800690c <LCD_Init+0x3e54>)
 800684a:	2280      	movs	r2, #128	; 0x80
 800684c:	615a      	str	r2, [r3, #20]
 800684e:	4b2f      	ldr	r3, [pc, #188]	; (800690c <LCD_Init+0x3e54>)
 8006850:	2280      	movs	r2, #128	; 0x80
 8006852:	611a      	str	r2, [r3, #16]
 8006854:	4b2d      	ldr	r3, [pc, #180]	; (800690c <LCD_Init+0x3e54>)
 8006856:	f44f 7200 	mov.w	r2, #512	; 0x200
 800685a:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0xB8);	//设置GPIO配置
 800685c:	20b8      	movs	r0, #184	; 0xb8
 800685e:	f7fa fe05 	bl	800146c <LCD_WR_REG>
		LCD_WR_DATA(0x03);	//2个IO口设置成输出
 8006862:	4b2a      	ldr	r3, [pc, #168]	; (800690c <LCD_Init+0x3e54>)
 8006864:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006868:	611a      	str	r2, [r3, #16]
 800686a:	4b28      	ldr	r3, [pc, #160]	; (800690c <LCD_Init+0x3e54>)
 800686c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006870:	615a      	str	r2, [r3, #20]
 8006872:	4b25      	ldr	r3, [pc, #148]	; (8006908 <LCD_Init+0x3e50>)
 8006874:	2203      	movs	r2, #3
 8006876:	60da      	str	r2, [r3, #12]
 8006878:	4b24      	ldr	r3, [pc, #144]	; (800690c <LCD_Init+0x3e54>)
 800687a:	2280      	movs	r2, #128	; 0x80
 800687c:	615a      	str	r2, [r3, #20]
 800687e:	4b23      	ldr	r3, [pc, #140]	; (800690c <LCD_Init+0x3e54>)
 8006880:	2280      	movs	r2, #128	; 0x80
 8006882:	611a      	str	r2, [r3, #16]
 8006884:	4b21      	ldr	r3, [pc, #132]	; (800690c <LCD_Init+0x3e54>)
 8006886:	f44f 7200 	mov.w	r2, #512	; 0x200
 800688a:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x01);	//GPIO使用正常的IO功能 
 800688c:	4b1f      	ldr	r3, [pc, #124]	; (800690c <LCD_Init+0x3e54>)
 800688e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006892:	611a      	str	r2, [r3, #16]
 8006894:	4b1d      	ldr	r3, [pc, #116]	; (800690c <LCD_Init+0x3e54>)
 8006896:	f44f 7200 	mov.w	r2, #512	; 0x200
 800689a:	615a      	str	r2, [r3, #20]
 800689c:	4b1a      	ldr	r3, [pc, #104]	; (8006908 <LCD_Init+0x3e50>)
 800689e:	2201      	movs	r2, #1
 80068a0:	60da      	str	r2, [r3, #12]
 80068a2:	4b1a      	ldr	r3, [pc, #104]	; (800690c <LCD_Init+0x3e54>)
 80068a4:	2280      	movs	r2, #128	; 0x80
 80068a6:	615a      	str	r2, [r3, #20]
 80068a8:	4b18      	ldr	r3, [pc, #96]	; (800690c <LCD_Init+0x3e54>)
 80068aa:	2280      	movs	r2, #128	; 0x80
 80068ac:	611a      	str	r2, [r3, #16]
 80068ae:	4b17      	ldr	r3, [pc, #92]	; (800690c <LCD_Init+0x3e54>)
 80068b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80068b4:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(0xBA);
 80068b6:	20ba      	movs	r0, #186	; 0xba
 80068b8:	f7fa fdd8 	bl	800146c <LCD_WR_REG>
		LCD_WR_DATA(0X01);	//GPIO[1:0]=01,控制LCD方向
 80068bc:	4b13      	ldr	r3, [pc, #76]	; (800690c <LCD_Init+0x3e54>)
 80068be:	f44f 7280 	mov.w	r2, #256	; 0x100
 80068c2:	611a      	str	r2, [r3, #16]
 80068c4:	4b11      	ldr	r3, [pc, #68]	; (800690c <LCD_Init+0x3e54>)
 80068c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80068ca:	615a      	str	r2, [r3, #20]
 80068cc:	4b0e      	ldr	r3, [pc, #56]	; (8006908 <LCD_Init+0x3e50>)
 80068ce:	2201      	movs	r2, #1
 80068d0:	60da      	str	r2, [r3, #12]
 80068d2:	4b0e      	ldr	r3, [pc, #56]	; (800690c <LCD_Init+0x3e54>)
 80068d4:	2280      	movs	r2, #128	; 0x80
 80068d6:	615a      	str	r2, [r3, #20]
 80068d8:	4b0c      	ldr	r3, [pc, #48]	; (800690c <LCD_Init+0x3e54>)
 80068da:	2280      	movs	r2, #128	; 0x80
 80068dc:	611a      	str	r2, [r3, #16]
 80068de:	4b0b      	ldr	r3, [pc, #44]	; (800690c <LCD_Init+0x3e54>)
 80068e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80068e4:	611a      	str	r2, [r3, #16]

		LCD_SSD_BackLightSet(100);	//背光设置为最亮
 80068e6:	2064      	movs	r0, #100	; 0x64
 80068e8:	f7fb ff36 	bl	8002758 <LCD_SSD_BackLightSet>
	}
	LCD_Display_Dir(0);		 	//默认为竖屏
 80068ec:	2000      	movs	r0, #0
 80068ee:	f7fb ffd7 	bl	80028a0 <LCD_Display_Dir>
	LCD_LED = 1;					//点亮背光
 80068f2:	4b07      	ldr	r3, [pc, #28]	; (8006910 <LCD_Init+0x3e58>)
 80068f4:	2201      	movs	r2, #1
 80068f6:	601a      	str	r2, [r3, #0]
	LCD_Clear(WHITE);
 80068f8:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80068fc:	f000 f80a 	bl	8006914 <LCD_Clear>
}
 8006900:	bf00      	nop
 8006902:	3718      	adds	r7, #24
 8006904:	46bd      	mov	sp, r7
 8006906:	bd80      	pop	{r7, pc}
 8006908:	40010c00 	.word	0x40010c00
 800690c:	40011000 	.word	0x40011000
 8006910:	422201a8 	.word	0x422201a8

08006914 <LCD_Clear>:

// Clear the screen with specific color
void LCD_Clear(uint16_t color) {
 8006914:	b580      	push	{r7, lr}
 8006916:	b084      	sub	sp, #16
 8006918:	af00      	add	r7, sp, #0
 800691a:	4603      	mov	r3, r0
 800691c:	80fb      	strh	r3, [r7, #6]
	uint32_t index = 0;
 800691e:	2300      	movs	r3, #0
 8006920:	60fb      	str	r3, [r7, #12]
	uint32_t totalpoint = lcddev.width;
 8006922:	4b2a      	ldr	r3, [pc, #168]	; (80069cc <LCD_Clear+0xb8>)
 8006924:	881b      	ldrh	r3, [r3, #0]
 8006926:	60bb      	str	r3, [r7, #8]
	totalpoint *= lcddev.height; 			//得到总点数
 8006928:	4b28      	ldr	r3, [pc, #160]	; (80069cc <LCD_Clear+0xb8>)
 800692a:	885b      	ldrh	r3, [r3, #2]
 800692c:	461a      	mov	r2, r3
 800692e:	68bb      	ldr	r3, [r7, #8]
 8006930:	fb02 f303 	mul.w	r3, r2, r3
 8006934:	60bb      	str	r3, [r7, #8]
	if ((lcddev.id == 0X6804) && (lcddev.dir == 1)) 			//6804横屏的时候特殊处理
 8006936:	4b25      	ldr	r3, [pc, #148]	; (80069cc <LCD_Clear+0xb8>)
 8006938:	889b      	ldrh	r3, [r3, #4]
 800693a:	f646 0204 	movw	r2, #26628	; 0x6804
 800693e:	4293      	cmp	r3, r2
 8006940:	d11a      	bne.n	8006978 <LCD_Clear+0x64>
 8006942:	4b22      	ldr	r3, [pc, #136]	; (80069cc <LCD_Clear+0xb8>)
 8006944:	799b      	ldrb	r3, [r3, #6]
 8006946:	2b01      	cmp	r3, #1
 8006948:	d116      	bne.n	8006978 <LCD_Clear+0x64>
			{
		lcddev.dir = 0;
 800694a:	4b20      	ldr	r3, [pc, #128]	; (80069cc <LCD_Clear+0xb8>)
 800694c:	2200      	movs	r2, #0
 800694e:	719a      	strb	r2, [r3, #6]
		lcddev.setxcmd = 0X2A;
 8006950:	4b1e      	ldr	r3, [pc, #120]	; (80069cc <LCD_Clear+0xb8>)
 8006952:	222a      	movs	r2, #42	; 0x2a
 8006954:	815a      	strh	r2, [r3, #10]
		lcddev.setycmd = 0X2B;
 8006956:	4b1d      	ldr	r3, [pc, #116]	; (80069cc <LCD_Clear+0xb8>)
 8006958:	222b      	movs	r2, #43	; 0x2b
 800695a:	819a      	strh	r2, [r3, #12]
		LCD_SetCursor(0x00, 0x0000);		//设置光标位置
 800695c:	2100      	movs	r1, #0
 800695e:	2000      	movs	r0, #0
 8006960:	f7fa fe56 	bl	8001610 <LCD_SetCursor>
		lcddev.dir = 1;
 8006964:	4b19      	ldr	r3, [pc, #100]	; (80069cc <LCD_Clear+0xb8>)
 8006966:	2201      	movs	r2, #1
 8006968:	719a      	strb	r2, [r3, #6]
		lcddev.setxcmd = 0X2B;
 800696a:	4b18      	ldr	r3, [pc, #96]	; (80069cc <LCD_Clear+0xb8>)
 800696c:	222b      	movs	r2, #43	; 0x2b
 800696e:	815a      	strh	r2, [r3, #10]
		lcddev.setycmd = 0X2A;
 8006970:	4b16      	ldr	r3, [pc, #88]	; (80069cc <LCD_Clear+0xb8>)
 8006972:	222a      	movs	r2, #42	; 0x2a
 8006974:	819a      	strh	r2, [r3, #12]
 8006976:	e003      	b.n	8006980 <LCD_Clear+0x6c>
	} else
		LCD_SetCursor(0x00, 0x0000);	//设置光标位置
 8006978:	2100      	movs	r1, #0
 800697a:	2000      	movs	r0, #0
 800697c:	f7fa fe48 	bl	8001610 <LCD_SetCursor>
	LCD_WriteRAM_Prepare();     		//开始写入GRAM	  	  
 8006980:	f7fa fe3a 	bl	80015f8 <LCD_WriteRAM_Prepare>
	for (index = 0; index < totalpoint; index++)
 8006984:	2300      	movs	r3, #0
 8006986:	60fb      	str	r3, [r7, #12]
 8006988:	e017      	b.n	80069ba <LCD_Clear+0xa6>
		LCD_WR_DATA(color);
 800698a:	4b11      	ldr	r3, [pc, #68]	; (80069d0 <LCD_Clear+0xbc>)
 800698c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006990:	611a      	str	r2, [r3, #16]
 8006992:	4b0f      	ldr	r3, [pc, #60]	; (80069d0 <LCD_Clear+0xbc>)
 8006994:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006998:	615a      	str	r2, [r3, #20]
 800699a:	4a0e      	ldr	r2, [pc, #56]	; (80069d4 <LCD_Clear+0xc0>)
 800699c:	88fb      	ldrh	r3, [r7, #6]
 800699e:	60d3      	str	r3, [r2, #12]
 80069a0:	4b0b      	ldr	r3, [pc, #44]	; (80069d0 <LCD_Clear+0xbc>)
 80069a2:	2280      	movs	r2, #128	; 0x80
 80069a4:	615a      	str	r2, [r3, #20]
 80069a6:	4b0a      	ldr	r3, [pc, #40]	; (80069d0 <LCD_Clear+0xbc>)
 80069a8:	2280      	movs	r2, #128	; 0x80
 80069aa:	611a      	str	r2, [r3, #16]
 80069ac:	4b08      	ldr	r3, [pc, #32]	; (80069d0 <LCD_Clear+0xbc>)
 80069ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80069b2:	611a      	str	r2, [r3, #16]
	for (index = 0; index < totalpoint; index++)
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	3301      	adds	r3, #1
 80069b8:	60fb      	str	r3, [r7, #12]
 80069ba:	68fa      	ldr	r2, [r7, #12]
 80069bc:	68bb      	ldr	r3, [r7, #8]
 80069be:	429a      	cmp	r2, r3
 80069c0:	d3e3      	bcc.n	800698a <LCD_Clear+0x76>
}
 80069c2:	bf00      	nop
 80069c4:	3710      	adds	r7, #16
 80069c6:	46bd      	mov	sp, r7
 80069c8:	bd80      	pop	{r7, pc}
 80069ca:	bf00      	nop
 80069cc:	200000bc 	.word	0x200000bc
 80069d0:	40011000 	.word	0x40011000
 80069d4:	40010c00 	.word	0x40010c00

080069d8 <LCD_Fill>:
// Fill the area with color
// :(xend-xsta+1)*(yend-ysta+1)
void LCD_Fill(uint16_t sx, uint16_t sy, uint16_t ex, uint16_t ey,
		uint16_t color) {
 80069d8:	b590      	push	{r4, r7, lr}
 80069da:	b087      	sub	sp, #28
 80069dc:	af02      	add	r7, sp, #8
 80069de:	4604      	mov	r4, r0
 80069e0:	4608      	mov	r0, r1
 80069e2:	4611      	mov	r1, r2
 80069e4:	461a      	mov	r2, r3
 80069e6:	4623      	mov	r3, r4
 80069e8:	80fb      	strh	r3, [r7, #6]
 80069ea:	4603      	mov	r3, r0
 80069ec:	80bb      	strh	r3, [r7, #4]
 80069ee:	460b      	mov	r3, r1
 80069f0:	807b      	strh	r3, [r7, #2]
 80069f2:	4613      	mov	r3, r2
 80069f4:	803b      	strh	r3, [r7, #0]
	uint16_t i, j;
	uint16_t xlen = 0;
 80069f6:	2300      	movs	r3, #0
 80069f8:	817b      	strh	r3, [r7, #10]
	uint16_t temp;
	if ((lcddev.id == 0X6804) && (lcddev.dir == 1))	//6804横屏的时候特殊处理
 80069fa:	4b3a      	ldr	r3, [pc, #232]	; (8006ae4 <LCD_Fill+0x10c>)
 80069fc:	889b      	ldrh	r3, [r3, #4]
 80069fe:	f646 0204 	movw	r2, #26628	; 0x6804
 8006a02:	4293      	cmp	r3, r2
 8006a04:	d133      	bne.n	8006a6e <LCD_Fill+0x96>
 8006a06:	4b37      	ldr	r3, [pc, #220]	; (8006ae4 <LCD_Fill+0x10c>)
 8006a08:	799b      	ldrb	r3, [r3, #6]
 8006a0a:	2b01      	cmp	r3, #1
 8006a0c:	d12f      	bne.n	8006a6e <LCD_Fill+0x96>
			{
		temp = sx;
 8006a0e:	88fb      	ldrh	r3, [r7, #6]
 8006a10:	813b      	strh	r3, [r7, #8]
		sx = sy;
 8006a12:	88bb      	ldrh	r3, [r7, #4]
 8006a14:	80fb      	strh	r3, [r7, #6]
		sy = lcddev.width - ex - 1;
 8006a16:	4b33      	ldr	r3, [pc, #204]	; (8006ae4 <LCD_Fill+0x10c>)
 8006a18:	881a      	ldrh	r2, [r3, #0]
 8006a1a:	887b      	ldrh	r3, [r7, #2]
 8006a1c:	1ad3      	subs	r3, r2, r3
 8006a1e:	b29b      	uxth	r3, r3
 8006a20:	3b01      	subs	r3, #1
 8006a22:	80bb      	strh	r3, [r7, #4]
		ex = ey;
 8006a24:	883b      	ldrh	r3, [r7, #0]
 8006a26:	807b      	strh	r3, [r7, #2]
		ey = lcddev.width - temp - 1;
 8006a28:	4b2e      	ldr	r3, [pc, #184]	; (8006ae4 <LCD_Fill+0x10c>)
 8006a2a:	881a      	ldrh	r2, [r3, #0]
 8006a2c:	893b      	ldrh	r3, [r7, #8]
 8006a2e:	1ad3      	subs	r3, r2, r3
 8006a30:	b29b      	uxth	r3, r3
 8006a32:	3b01      	subs	r3, #1
 8006a34:	803b      	strh	r3, [r7, #0]
		lcddev.dir = 0;
 8006a36:	4b2b      	ldr	r3, [pc, #172]	; (8006ae4 <LCD_Fill+0x10c>)
 8006a38:	2200      	movs	r2, #0
 8006a3a:	719a      	strb	r2, [r3, #6]
		lcddev.setxcmd = 0X2A;
 8006a3c:	4b29      	ldr	r3, [pc, #164]	; (8006ae4 <LCD_Fill+0x10c>)
 8006a3e:	222a      	movs	r2, #42	; 0x2a
 8006a40:	815a      	strh	r2, [r3, #10]
		lcddev.setycmd = 0X2B;
 8006a42:	4b28      	ldr	r3, [pc, #160]	; (8006ae4 <LCD_Fill+0x10c>)
 8006a44:	222b      	movs	r2, #43	; 0x2b
 8006a46:	819a      	strh	r2, [r3, #12]
		LCD_Fill(sx, sy, ex, ey, color);
 8006a48:	883c      	ldrh	r4, [r7, #0]
 8006a4a:	887a      	ldrh	r2, [r7, #2]
 8006a4c:	88b9      	ldrh	r1, [r7, #4]
 8006a4e:	88f8      	ldrh	r0, [r7, #6]
 8006a50:	8c3b      	ldrh	r3, [r7, #32]
 8006a52:	9300      	str	r3, [sp, #0]
 8006a54:	4623      	mov	r3, r4
 8006a56:	f7ff ffbf 	bl	80069d8 <LCD_Fill>
		lcddev.dir = 1;
 8006a5a:	4b22      	ldr	r3, [pc, #136]	; (8006ae4 <LCD_Fill+0x10c>)
 8006a5c:	2201      	movs	r2, #1
 8006a5e:	719a      	strb	r2, [r3, #6]
		lcddev.setxcmd = 0X2B;
 8006a60:	4b20      	ldr	r3, [pc, #128]	; (8006ae4 <LCD_Fill+0x10c>)
 8006a62:	222b      	movs	r2, #43	; 0x2b
 8006a64:	815a      	strh	r2, [r3, #10]
		lcddev.setycmd = 0X2A;
 8006a66:	4b1f      	ldr	r3, [pc, #124]	; (8006ae4 <LCD_Fill+0x10c>)
 8006a68:	222a      	movs	r2, #42	; 0x2a
 8006a6a:	819a      	strh	r2, [r3, #12]
 8006a6c:	e036      	b.n	8006adc <LCD_Fill+0x104>
	} else {
		xlen = ex - sx + 1;
 8006a6e:	887a      	ldrh	r2, [r7, #2]
 8006a70:	88fb      	ldrh	r3, [r7, #6]
 8006a72:	1ad3      	subs	r3, r2, r3
 8006a74:	b29b      	uxth	r3, r3
 8006a76:	3301      	adds	r3, #1
 8006a78:	817b      	strh	r3, [r7, #10]
		for (i = sy; i <= ey; i++) {
 8006a7a:	88bb      	ldrh	r3, [r7, #4]
 8006a7c:	81fb      	strh	r3, [r7, #14]
 8006a7e:	e029      	b.n	8006ad4 <LCD_Fill+0xfc>
			LCD_SetCursor(sx, i);      				//设置光标位置
 8006a80:	89fa      	ldrh	r2, [r7, #14]
 8006a82:	88fb      	ldrh	r3, [r7, #6]
 8006a84:	4611      	mov	r1, r2
 8006a86:	4618      	mov	r0, r3
 8006a88:	f7fa fdc2 	bl	8001610 <LCD_SetCursor>
			LCD_WriteRAM_Prepare();     			//开始写入GRAM	  
 8006a8c:	f7fa fdb4 	bl	80015f8 <LCD_WriteRAM_Prepare>
			for (j = 0; j < xlen; j++)
 8006a90:	2300      	movs	r3, #0
 8006a92:	81bb      	strh	r3, [r7, #12]
 8006a94:	e017      	b.n	8006ac6 <LCD_Fill+0xee>
				LCD_WR_DATA(color);	//设置光标位置
 8006a96:	4b14      	ldr	r3, [pc, #80]	; (8006ae8 <LCD_Fill+0x110>)
 8006a98:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006a9c:	611a      	str	r2, [r3, #16]
 8006a9e:	4b12      	ldr	r3, [pc, #72]	; (8006ae8 <LCD_Fill+0x110>)
 8006aa0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006aa4:	615a      	str	r2, [r3, #20]
 8006aa6:	4a11      	ldr	r2, [pc, #68]	; (8006aec <LCD_Fill+0x114>)
 8006aa8:	8c3b      	ldrh	r3, [r7, #32]
 8006aaa:	60d3      	str	r3, [r2, #12]
 8006aac:	4b0e      	ldr	r3, [pc, #56]	; (8006ae8 <LCD_Fill+0x110>)
 8006aae:	2280      	movs	r2, #128	; 0x80
 8006ab0:	615a      	str	r2, [r3, #20]
 8006ab2:	4b0d      	ldr	r3, [pc, #52]	; (8006ae8 <LCD_Fill+0x110>)
 8006ab4:	2280      	movs	r2, #128	; 0x80
 8006ab6:	611a      	str	r2, [r3, #16]
 8006ab8:	4b0b      	ldr	r3, [pc, #44]	; (8006ae8 <LCD_Fill+0x110>)
 8006aba:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006abe:	611a      	str	r2, [r3, #16]
			for (j = 0; j < xlen; j++)
 8006ac0:	89bb      	ldrh	r3, [r7, #12]
 8006ac2:	3301      	adds	r3, #1
 8006ac4:	81bb      	strh	r3, [r7, #12]
 8006ac6:	89ba      	ldrh	r2, [r7, #12]
 8006ac8:	897b      	ldrh	r3, [r7, #10]
 8006aca:	429a      	cmp	r2, r3
 8006acc:	d3e3      	bcc.n	8006a96 <LCD_Fill+0xbe>
		for (i = sy; i <= ey; i++) {
 8006ace:	89fb      	ldrh	r3, [r7, #14]
 8006ad0:	3301      	adds	r3, #1
 8006ad2:	81fb      	strh	r3, [r7, #14]
 8006ad4:	89fa      	ldrh	r2, [r7, #14]
 8006ad6:	883b      	ldrh	r3, [r7, #0]
 8006ad8:	429a      	cmp	r2, r3
 8006ada:	d9d1      	bls.n	8006a80 <LCD_Fill+0xa8>
		}
	}
}
 8006adc:	bf00      	nop
 8006ade:	3714      	adds	r7, #20
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	bd90      	pop	{r4, r7, pc}
 8006ae4:	200000bc 	.word	0x200000bc
 8006ae8:	40011000 	.word	0x40011000
 8006aec:	40010c00 	.word	0x40010c00

08006af0 <LCD_DrawLine>:
	}
}
// Draw a line
//x1,y1: coordinate of starting point
//x2,y2: coordinate of terminal point
void LCD_DrawLine(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
 8006af0:	b590      	push	{r4, r7, lr}
 8006af2:	b08d      	sub	sp, #52	; 0x34
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	4604      	mov	r4, r0
 8006af8:	4608      	mov	r0, r1
 8006afa:	4611      	mov	r1, r2
 8006afc:	461a      	mov	r2, r3
 8006afe:	4623      	mov	r3, r4
 8006b00:	80fb      	strh	r3, [r7, #6]
 8006b02:	4603      	mov	r3, r0
 8006b04:	80bb      	strh	r3, [r7, #4]
 8006b06:	460b      	mov	r3, r1
 8006b08:	807b      	strh	r3, [r7, #2]
 8006b0a:	4613      	mov	r3, r2
 8006b0c:	803b      	strh	r3, [r7, #0]
	uint16_t t;
	int xerr = 0, yerr = 0, delta_x, delta_y, distance;
 8006b0e:	2300      	movs	r3, #0
 8006b10:	62bb      	str	r3, [r7, #40]	; 0x28
 8006b12:	2300      	movs	r3, #0
 8006b14:	627b      	str	r3, [r7, #36]	; 0x24
	int incx, incy, uRow, uCol;
	delta_x = x2 - x1; //计算坐标增量
 8006b16:	887a      	ldrh	r2, [r7, #2]
 8006b18:	88fb      	ldrh	r3, [r7, #6]
 8006b1a:	1ad3      	subs	r3, r2, r3
 8006b1c:	623b      	str	r3, [r7, #32]
	delta_y = y2 - y1;
 8006b1e:	883a      	ldrh	r2, [r7, #0]
 8006b20:	88bb      	ldrh	r3, [r7, #4]
 8006b22:	1ad3      	subs	r3, r2, r3
 8006b24:	61fb      	str	r3, [r7, #28]
	uRow = x1;
 8006b26:	88fb      	ldrh	r3, [r7, #6]
 8006b28:	60fb      	str	r3, [r7, #12]
	uCol = y1;
 8006b2a:	88bb      	ldrh	r3, [r7, #4]
 8006b2c:	60bb      	str	r3, [r7, #8]
	if (delta_x > 0)
 8006b2e:	6a3b      	ldr	r3, [r7, #32]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	dd02      	ble.n	8006b3a <LCD_DrawLine+0x4a>
		incx = 1; //设置单步方向
 8006b34:	2301      	movs	r3, #1
 8006b36:	617b      	str	r3, [r7, #20]
 8006b38:	e00b      	b.n	8006b52 <LCD_DrawLine+0x62>
	else if (delta_x == 0)
 8006b3a:	6a3b      	ldr	r3, [r7, #32]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d102      	bne.n	8006b46 <LCD_DrawLine+0x56>
		incx = 0; //垂直线
 8006b40:	2300      	movs	r3, #0
 8006b42:	617b      	str	r3, [r7, #20]
 8006b44:	e005      	b.n	8006b52 <LCD_DrawLine+0x62>
	else {
		incx = -1;
 8006b46:	f04f 33ff 	mov.w	r3, #4294967295
 8006b4a:	617b      	str	r3, [r7, #20]
		delta_x = -delta_x;
 8006b4c:	6a3b      	ldr	r3, [r7, #32]
 8006b4e:	425b      	negs	r3, r3
 8006b50:	623b      	str	r3, [r7, #32]
	}
	if (delta_y > 0)
 8006b52:	69fb      	ldr	r3, [r7, #28]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	dd02      	ble.n	8006b5e <LCD_DrawLine+0x6e>
		incy = 1;
 8006b58:	2301      	movs	r3, #1
 8006b5a:	613b      	str	r3, [r7, #16]
 8006b5c:	e00b      	b.n	8006b76 <LCD_DrawLine+0x86>
	else if (delta_y == 0)
 8006b5e:	69fb      	ldr	r3, [r7, #28]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d102      	bne.n	8006b6a <LCD_DrawLine+0x7a>
		incy = 0; //水平线
 8006b64:	2300      	movs	r3, #0
 8006b66:	613b      	str	r3, [r7, #16]
 8006b68:	e005      	b.n	8006b76 <LCD_DrawLine+0x86>
	else {
		incy = -1;
 8006b6a:	f04f 33ff 	mov.w	r3, #4294967295
 8006b6e:	613b      	str	r3, [r7, #16]
		delta_y = -delta_y;
 8006b70:	69fb      	ldr	r3, [r7, #28]
 8006b72:	425b      	negs	r3, r3
 8006b74:	61fb      	str	r3, [r7, #28]
	}
	if (delta_x > delta_y)
 8006b76:	6a3a      	ldr	r2, [r7, #32]
 8006b78:	69fb      	ldr	r3, [r7, #28]
 8006b7a:	429a      	cmp	r2, r3
 8006b7c:	dd02      	ble.n	8006b84 <LCD_DrawLine+0x94>
		distance = delta_x; //选取基本增量坐标轴
 8006b7e:	6a3b      	ldr	r3, [r7, #32]
 8006b80:	61bb      	str	r3, [r7, #24]
 8006b82:	e001      	b.n	8006b88 <LCD_DrawLine+0x98>
	else
		distance = delta_y;
 8006b84:	69fb      	ldr	r3, [r7, #28]
 8006b86:	61bb      	str	r3, [r7, #24]
	for (t = 0; t <= distance + 1; t++) //画线输出
 8006b88:	2300      	movs	r3, #0
 8006b8a:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8006b8c:	e02a      	b.n	8006be4 <LCD_DrawLine+0xf4>
			{
		LCD_DrawPoint(uRow, uCol); //画点
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	b29b      	uxth	r3, r3
 8006b92:	68ba      	ldr	r2, [r7, #8]
 8006b94:	b292      	uxth	r2, r2
 8006b96:	4611      	mov	r1, r2
 8006b98:	4618      	mov	r0, r3
 8006b9a:	f7fb fb17 	bl	80021cc <LCD_DrawPoint>
		xerr += delta_x;
 8006b9e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006ba0:	6a3b      	ldr	r3, [r7, #32]
 8006ba2:	4413      	add	r3, r2
 8006ba4:	62bb      	str	r3, [r7, #40]	; 0x28
		yerr += delta_y;
 8006ba6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ba8:	69fb      	ldr	r3, [r7, #28]
 8006baa:	4413      	add	r3, r2
 8006bac:	627b      	str	r3, [r7, #36]	; 0x24
		if (xerr > distance) {
 8006bae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006bb0:	69bb      	ldr	r3, [r7, #24]
 8006bb2:	429a      	cmp	r2, r3
 8006bb4:	dd07      	ble.n	8006bc6 <LCD_DrawLine+0xd6>
			xerr -= distance;
 8006bb6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006bb8:	69bb      	ldr	r3, [r7, #24]
 8006bba:	1ad3      	subs	r3, r2, r3
 8006bbc:	62bb      	str	r3, [r7, #40]	; 0x28
			uRow += incx;
 8006bbe:	68fa      	ldr	r2, [r7, #12]
 8006bc0:	697b      	ldr	r3, [r7, #20]
 8006bc2:	4413      	add	r3, r2
 8006bc4:	60fb      	str	r3, [r7, #12]
		}
		if (yerr > distance) {
 8006bc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006bc8:	69bb      	ldr	r3, [r7, #24]
 8006bca:	429a      	cmp	r2, r3
 8006bcc:	dd07      	ble.n	8006bde <LCD_DrawLine+0xee>
			yerr -= distance;
 8006bce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006bd0:	69bb      	ldr	r3, [r7, #24]
 8006bd2:	1ad3      	subs	r3, r2, r3
 8006bd4:	627b      	str	r3, [r7, #36]	; 0x24
			uCol += incy;
 8006bd6:	68ba      	ldr	r2, [r7, #8]
 8006bd8:	693b      	ldr	r3, [r7, #16]
 8006bda:	4413      	add	r3, r2
 8006bdc:	60bb      	str	r3, [r7, #8]
	for (t = 0; t <= distance + 1; t++) //画线输出
 8006bde:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006be0:	3301      	adds	r3, #1
 8006be2:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8006be4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006be6:	69bb      	ldr	r3, [r7, #24]
 8006be8:	3301      	adds	r3, #1
 8006bea:	429a      	cmp	r2, r3
 8006bec:	ddcf      	ble.n	8006b8e <LCD_DrawLine+0x9e>
		}
	}
}
 8006bee:	bf00      	nop
 8006bf0:	3734      	adds	r7, #52	; 0x34
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	bd90      	pop	{r4, r7, pc}

08006bf6 <LCD_Draw_Circle>:
}

// Draw a circle
//(x,y): center
//r    : radius
void LCD_Draw_Circle(uint16_t x0, uint16_t y0, uint8_t r) {
 8006bf6:	b580      	push	{r7, lr}
 8006bf8:	b086      	sub	sp, #24
 8006bfa:	af00      	add	r7, sp, #0
 8006bfc:	4603      	mov	r3, r0
 8006bfe:	80fb      	strh	r3, [r7, #6]
 8006c00:	460b      	mov	r3, r1
 8006c02:	80bb      	strh	r3, [r7, #4]
 8006c04:	4613      	mov	r3, r2
 8006c06:	70fb      	strb	r3, [r7, #3]
	int a, b;
	int di;
	a = 0;
 8006c08:	2300      	movs	r3, #0
 8006c0a:	617b      	str	r3, [r7, #20]
	b = r;
 8006c0c:	78fb      	ldrb	r3, [r7, #3]
 8006c0e:	613b      	str	r3, [r7, #16]
	di = 3 - (r << 1);             //判断下个点位置的标志
 8006c10:	78fb      	ldrb	r3, [r7, #3]
 8006c12:	005b      	lsls	r3, r3, #1
 8006c14:	f1c3 0303 	rsb	r3, r3, #3
 8006c18:	60fb      	str	r3, [r7, #12]
	while (a <= b) {
 8006c1a:	e07f      	b.n	8006d1c <LCD_Draw_Circle+0x126>
		LCD_DrawPoint(x0 + a, y0 - b);             //5
 8006c1c:	697b      	ldr	r3, [r7, #20]
 8006c1e:	b29a      	uxth	r2, r3
 8006c20:	88fb      	ldrh	r3, [r7, #6]
 8006c22:	4413      	add	r3, r2
 8006c24:	b298      	uxth	r0, r3
 8006c26:	693b      	ldr	r3, [r7, #16]
 8006c28:	b29b      	uxth	r3, r3
 8006c2a:	88ba      	ldrh	r2, [r7, #4]
 8006c2c:	1ad3      	subs	r3, r2, r3
 8006c2e:	b29b      	uxth	r3, r3
 8006c30:	4619      	mov	r1, r3
 8006c32:	f7fb facb 	bl	80021cc <LCD_DrawPoint>
		LCD_DrawPoint(x0 + b, y0 - a);             //0
 8006c36:	693b      	ldr	r3, [r7, #16]
 8006c38:	b29a      	uxth	r2, r3
 8006c3a:	88fb      	ldrh	r3, [r7, #6]
 8006c3c:	4413      	add	r3, r2
 8006c3e:	b298      	uxth	r0, r3
 8006c40:	697b      	ldr	r3, [r7, #20]
 8006c42:	b29b      	uxth	r3, r3
 8006c44:	88ba      	ldrh	r2, [r7, #4]
 8006c46:	1ad3      	subs	r3, r2, r3
 8006c48:	b29b      	uxth	r3, r3
 8006c4a:	4619      	mov	r1, r3
 8006c4c:	f7fb fabe 	bl	80021cc <LCD_DrawPoint>
		LCD_DrawPoint(x0 + b, y0 + a);             //4
 8006c50:	693b      	ldr	r3, [r7, #16]
 8006c52:	b29a      	uxth	r2, r3
 8006c54:	88fb      	ldrh	r3, [r7, #6]
 8006c56:	4413      	add	r3, r2
 8006c58:	b298      	uxth	r0, r3
 8006c5a:	697b      	ldr	r3, [r7, #20]
 8006c5c:	b29a      	uxth	r2, r3
 8006c5e:	88bb      	ldrh	r3, [r7, #4]
 8006c60:	4413      	add	r3, r2
 8006c62:	b29b      	uxth	r3, r3
 8006c64:	4619      	mov	r1, r3
 8006c66:	f7fb fab1 	bl	80021cc <LCD_DrawPoint>
		LCD_DrawPoint(x0 + a, y0 + b);             //6
 8006c6a:	697b      	ldr	r3, [r7, #20]
 8006c6c:	b29a      	uxth	r2, r3
 8006c6e:	88fb      	ldrh	r3, [r7, #6]
 8006c70:	4413      	add	r3, r2
 8006c72:	b298      	uxth	r0, r3
 8006c74:	693b      	ldr	r3, [r7, #16]
 8006c76:	b29a      	uxth	r2, r3
 8006c78:	88bb      	ldrh	r3, [r7, #4]
 8006c7a:	4413      	add	r3, r2
 8006c7c:	b29b      	uxth	r3, r3
 8006c7e:	4619      	mov	r1, r3
 8006c80:	f7fb faa4 	bl	80021cc <LCD_DrawPoint>
		LCD_DrawPoint(x0 - a, y0 + b);             //1
 8006c84:	697b      	ldr	r3, [r7, #20]
 8006c86:	b29b      	uxth	r3, r3
 8006c88:	88fa      	ldrh	r2, [r7, #6]
 8006c8a:	1ad3      	subs	r3, r2, r3
 8006c8c:	b298      	uxth	r0, r3
 8006c8e:	693b      	ldr	r3, [r7, #16]
 8006c90:	b29a      	uxth	r2, r3
 8006c92:	88bb      	ldrh	r3, [r7, #4]
 8006c94:	4413      	add	r3, r2
 8006c96:	b29b      	uxth	r3, r3
 8006c98:	4619      	mov	r1, r3
 8006c9a:	f7fb fa97 	bl	80021cc <LCD_DrawPoint>
		LCD_DrawPoint(x0 - b, y0 + a);
 8006c9e:	693b      	ldr	r3, [r7, #16]
 8006ca0:	b29b      	uxth	r3, r3
 8006ca2:	88fa      	ldrh	r2, [r7, #6]
 8006ca4:	1ad3      	subs	r3, r2, r3
 8006ca6:	b298      	uxth	r0, r3
 8006ca8:	697b      	ldr	r3, [r7, #20]
 8006caa:	b29a      	uxth	r2, r3
 8006cac:	88bb      	ldrh	r3, [r7, #4]
 8006cae:	4413      	add	r3, r2
 8006cb0:	b29b      	uxth	r3, r3
 8006cb2:	4619      	mov	r1, r3
 8006cb4:	f7fb fa8a 	bl	80021cc <LCD_DrawPoint>
		LCD_DrawPoint(x0 - a, y0 - b);             //2
 8006cb8:	697b      	ldr	r3, [r7, #20]
 8006cba:	b29b      	uxth	r3, r3
 8006cbc:	88fa      	ldrh	r2, [r7, #6]
 8006cbe:	1ad3      	subs	r3, r2, r3
 8006cc0:	b298      	uxth	r0, r3
 8006cc2:	693b      	ldr	r3, [r7, #16]
 8006cc4:	b29b      	uxth	r3, r3
 8006cc6:	88ba      	ldrh	r2, [r7, #4]
 8006cc8:	1ad3      	subs	r3, r2, r3
 8006cca:	b29b      	uxth	r3, r3
 8006ccc:	4619      	mov	r1, r3
 8006cce:	f7fb fa7d 	bl	80021cc <LCD_DrawPoint>
		LCD_DrawPoint(x0 - b, y0 - a);             //7
 8006cd2:	693b      	ldr	r3, [r7, #16]
 8006cd4:	b29b      	uxth	r3, r3
 8006cd6:	88fa      	ldrh	r2, [r7, #6]
 8006cd8:	1ad3      	subs	r3, r2, r3
 8006cda:	b298      	uxth	r0, r3
 8006cdc:	697b      	ldr	r3, [r7, #20]
 8006cde:	b29b      	uxth	r3, r3
 8006ce0:	88ba      	ldrh	r2, [r7, #4]
 8006ce2:	1ad3      	subs	r3, r2, r3
 8006ce4:	b29b      	uxth	r3, r3
 8006ce6:	4619      	mov	r1, r3
 8006ce8:	f7fb fa70 	bl	80021cc <LCD_DrawPoint>
		a++;
 8006cec:	697b      	ldr	r3, [r7, #20]
 8006cee:	3301      	adds	r3, #1
 8006cf0:	617b      	str	r3, [r7, #20]
		//使用Bresenham算法画圆     
		if (di < 0)
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	da06      	bge.n	8006d06 <LCD_Draw_Circle+0x110>
			di += 4 * a + 6;
 8006cf8:	697b      	ldr	r3, [r7, #20]
 8006cfa:	009b      	lsls	r3, r3, #2
 8006cfc:	3306      	adds	r3, #6
 8006cfe:	68fa      	ldr	r2, [r7, #12]
 8006d00:	4413      	add	r3, r2
 8006d02:	60fb      	str	r3, [r7, #12]
 8006d04:	e00a      	b.n	8006d1c <LCD_Draw_Circle+0x126>
		else {
			di += 10 + 4 * (a - b);
 8006d06:	697a      	ldr	r2, [r7, #20]
 8006d08:	693b      	ldr	r3, [r7, #16]
 8006d0a:	1ad3      	subs	r3, r2, r3
 8006d0c:	009b      	lsls	r3, r3, #2
 8006d0e:	330a      	adds	r3, #10
 8006d10:	68fa      	ldr	r2, [r7, #12]
 8006d12:	4413      	add	r3, r2
 8006d14:	60fb      	str	r3, [r7, #12]
			b--;
 8006d16:	693b      	ldr	r3, [r7, #16]
 8006d18:	3b01      	subs	r3, #1
 8006d1a:	613b      	str	r3, [r7, #16]
	while (a <= b) {
 8006d1c:	697a      	ldr	r2, [r7, #20]
 8006d1e:	693b      	ldr	r3, [r7, #16]
 8006d20:	429a      	cmp	r2, r3
 8006d22:	f77f af7b 	ble.w	8006c1c <LCD_Draw_Circle+0x26>
		}
	}
}
 8006d26:	bf00      	nop
 8006d28:	3718      	adds	r7, #24
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	bd80      	pop	{r7, pc}
	...

08006d30 <LCD_ShowChar>:
// num: char to be displayed
// size: font size 12/16/24
// mode: display characters on the displayed content and do not wipe away the displayed content(1)
//       display characters on the displayed content and wipe away the displayed content(0)
void LCD_ShowChar(uint16_t x, uint16_t y, uint8_t num, uint8_t size,
		uint8_t mode) {
 8006d30:	b590      	push	{r4, r7, lr}
 8006d32:	b085      	sub	sp, #20
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	4604      	mov	r4, r0
 8006d38:	4608      	mov	r0, r1
 8006d3a:	4611      	mov	r1, r2
 8006d3c:	461a      	mov	r2, r3
 8006d3e:	4623      	mov	r3, r4
 8006d40:	80fb      	strh	r3, [r7, #6]
 8006d42:	4603      	mov	r3, r0
 8006d44:	80bb      	strh	r3, [r7, #4]
 8006d46:	460b      	mov	r3, r1
 8006d48:	70fb      	strb	r3, [r7, #3]
 8006d4a:	4613      	mov	r3, r2
 8006d4c:	70bb      	strb	r3, [r7, #2]
	uint8_t temp, t1, t;
	uint16_t y0 = y;
 8006d4e:	88bb      	ldrh	r3, [r7, #4]
 8006d50:	817b      	strh	r3, [r7, #10]
	uint8_t csize = (size / 8 + ((size % 8) ? 1 : 0)) * (size / 2);	//得到字体一个字符对应点阵集所占的字节数
 8006d52:	78bb      	ldrb	r3, [r7, #2]
 8006d54:	08db      	lsrs	r3, r3, #3
 8006d56:	b2db      	uxtb	r3, r3
 8006d58:	461a      	mov	r2, r3
 8006d5a:	78bb      	ldrb	r3, [r7, #2]
 8006d5c:	f003 0307 	and.w	r3, r3, #7
 8006d60:	b2db      	uxtb	r3, r3
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	bf14      	ite	ne
 8006d66:	2301      	movne	r3, #1
 8006d68:	2300      	moveq	r3, #0
 8006d6a:	b2db      	uxtb	r3, r3
 8006d6c:	4413      	add	r3, r2
 8006d6e:	b2db      	uxtb	r3, r3
 8006d70:	78ba      	ldrb	r2, [r7, #2]
 8006d72:	0852      	lsrs	r2, r2, #1
 8006d74:	b2d2      	uxtb	r2, r2
 8006d76:	fb02 f303 	mul.w	r3, r2, r3
 8006d7a:	727b      	strb	r3, [r7, #9]
	num = num - ' ';		//得到偏移后的值（ASCII字库是从空格开始取模，所以-' '就是对应字符的字库）
 8006d7c:	78fb      	ldrb	r3, [r7, #3]
 8006d7e:	3b20      	subs	r3, #32
 8006d80:	70fb      	strb	r3, [r7, #3]
	for (t = 0; t < csize; t++) {
 8006d82:	2300      	movs	r3, #0
 8006d84:	737b      	strb	r3, [r7, #13]
 8006d86:	e069      	b.n	8006e5c <LCD_ShowChar+0x12c>
		if (size == 12)
 8006d88:	78bb      	ldrb	r3, [r7, #2]
 8006d8a:	2b0c      	cmp	r3, #12
 8006d8c:	d10b      	bne.n	8006da6 <LCD_ShowChar+0x76>
			temp = asc2_1206[num][t]; 	 	//调用1206字体
 8006d8e:	78fa      	ldrb	r2, [r7, #3]
 8006d90:	7b79      	ldrb	r1, [r7, #13]
 8006d92:	4838      	ldr	r0, [pc, #224]	; (8006e74 <LCD_ShowChar+0x144>)
 8006d94:	4613      	mov	r3, r2
 8006d96:	005b      	lsls	r3, r3, #1
 8006d98:	4413      	add	r3, r2
 8006d9a:	009b      	lsls	r3, r3, #2
 8006d9c:	4403      	add	r3, r0
 8006d9e:	440b      	add	r3, r1
 8006da0:	781b      	ldrb	r3, [r3, #0]
 8006da2:	73fb      	strb	r3, [r7, #15]
 8006da4:	e019      	b.n	8006dda <LCD_ShowChar+0xaa>
		else if (size == 16)
 8006da6:	78bb      	ldrb	r3, [r7, #2]
 8006da8:	2b10      	cmp	r3, #16
 8006daa:	d108      	bne.n	8006dbe <LCD_ShowChar+0x8e>
			temp = asc2_1608[num][t];	//调用1608字体
 8006dac:	78fa      	ldrb	r2, [r7, #3]
 8006dae:	7b7b      	ldrb	r3, [r7, #13]
 8006db0:	4931      	ldr	r1, [pc, #196]	; (8006e78 <LCD_ShowChar+0x148>)
 8006db2:	0112      	lsls	r2, r2, #4
 8006db4:	440a      	add	r2, r1
 8006db6:	4413      	add	r3, r2
 8006db8:	781b      	ldrb	r3, [r3, #0]
 8006dba:	73fb      	strb	r3, [r7, #15]
 8006dbc:	e00d      	b.n	8006dda <LCD_ShowChar+0xaa>
		else if (size == 24)
 8006dbe:	78bb      	ldrb	r3, [r7, #2]
 8006dc0:	2b18      	cmp	r3, #24
 8006dc2:	d150      	bne.n	8006e66 <LCD_ShowChar+0x136>
			temp = asc2_2412[num][t];	//调用2412字体
 8006dc4:	78fa      	ldrb	r2, [r7, #3]
 8006dc6:	7b79      	ldrb	r1, [r7, #13]
 8006dc8:	482c      	ldr	r0, [pc, #176]	; (8006e7c <LCD_ShowChar+0x14c>)
 8006dca:	4613      	mov	r3, r2
 8006dcc:	00db      	lsls	r3, r3, #3
 8006dce:	4413      	add	r3, r2
 8006dd0:	009b      	lsls	r3, r3, #2
 8006dd2:	4403      	add	r3, r0
 8006dd4:	440b      	add	r3, r1
 8006dd6:	781b      	ldrb	r3, [r3, #0]
 8006dd8:	73fb      	strb	r3, [r7, #15]
		else
			return;								//没有的字库
		for (t1 = 0; t1 < 8; t1++) {
 8006dda:	2300      	movs	r3, #0
 8006ddc:	73bb      	strb	r3, [r7, #14]
 8006dde:	e035      	b.n	8006e4c <LCD_ShowChar+0x11c>
			if (temp & 0x80)
 8006de0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	da07      	bge.n	8006df8 <LCD_ShowChar+0xc8>
				LCD_Fast_DrawPoint(x, y, POINT_COLOR);
 8006de8:	4b25      	ldr	r3, [pc, #148]	; (8006e80 <LCD_ShowChar+0x150>)
 8006dea:	881a      	ldrh	r2, [r3, #0]
 8006dec:	88b9      	ldrh	r1, [r7, #4]
 8006dee:	88fb      	ldrh	r3, [r7, #6]
 8006df0:	4618      	mov	r0, r3
 8006df2:	f7fb fa1b 	bl	800222c <LCD_Fast_DrawPoint>
 8006df6:	e00a      	b.n	8006e0e <LCD_ShowChar+0xde>
			else if (mode == 0)
 8006df8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d106      	bne.n	8006e0e <LCD_ShowChar+0xde>
				LCD_Fast_DrawPoint(x, y, BACK_COLOR);
 8006e00:	4b20      	ldr	r3, [pc, #128]	; (8006e84 <LCD_ShowChar+0x154>)
 8006e02:	881a      	ldrh	r2, [r3, #0]
 8006e04:	88b9      	ldrh	r1, [r7, #4]
 8006e06:	88fb      	ldrh	r3, [r7, #6]
 8006e08:	4618      	mov	r0, r3
 8006e0a:	f7fb fa0f 	bl	800222c <LCD_Fast_DrawPoint>
			temp <<= 1;
 8006e0e:	7bfb      	ldrb	r3, [r7, #15]
 8006e10:	005b      	lsls	r3, r3, #1
 8006e12:	73fb      	strb	r3, [r7, #15]
			y++;
 8006e14:	88bb      	ldrh	r3, [r7, #4]
 8006e16:	3301      	adds	r3, #1
 8006e18:	80bb      	strh	r3, [r7, #4]
			if (y >= lcddev.height)
 8006e1a:	4b1b      	ldr	r3, [pc, #108]	; (8006e88 <LCD_ShowChar+0x158>)
 8006e1c:	885b      	ldrh	r3, [r3, #2]
 8006e1e:	88ba      	ldrh	r2, [r7, #4]
 8006e20:	429a      	cmp	r2, r3
 8006e22:	d222      	bcs.n	8006e6a <LCD_ShowChar+0x13a>
				return;		//超区域了
			if ((y - y0) == size) {
 8006e24:	88ba      	ldrh	r2, [r7, #4]
 8006e26:	897b      	ldrh	r3, [r7, #10]
 8006e28:	1ad2      	subs	r2, r2, r3
 8006e2a:	78bb      	ldrb	r3, [r7, #2]
 8006e2c:	429a      	cmp	r2, r3
 8006e2e:	d10a      	bne.n	8006e46 <LCD_ShowChar+0x116>
				y = y0;
 8006e30:	897b      	ldrh	r3, [r7, #10]
 8006e32:	80bb      	strh	r3, [r7, #4]
				x++;
 8006e34:	88fb      	ldrh	r3, [r7, #6]
 8006e36:	3301      	adds	r3, #1
 8006e38:	80fb      	strh	r3, [r7, #6]
				if (x >= lcddev.width)
 8006e3a:	4b13      	ldr	r3, [pc, #76]	; (8006e88 <LCD_ShowChar+0x158>)
 8006e3c:	881b      	ldrh	r3, [r3, #0]
 8006e3e:	88fa      	ldrh	r2, [r7, #6]
 8006e40:	429a      	cmp	r2, r3
 8006e42:	d307      	bcc.n	8006e54 <LCD_ShowChar+0x124>
					return;	//超区域了
 8006e44:	e012      	b.n	8006e6c <LCD_ShowChar+0x13c>
		for (t1 = 0; t1 < 8; t1++) {
 8006e46:	7bbb      	ldrb	r3, [r7, #14]
 8006e48:	3301      	adds	r3, #1
 8006e4a:	73bb      	strb	r3, [r7, #14]
 8006e4c:	7bbb      	ldrb	r3, [r7, #14]
 8006e4e:	2b07      	cmp	r3, #7
 8006e50:	d9c6      	bls.n	8006de0 <LCD_ShowChar+0xb0>
 8006e52:	e000      	b.n	8006e56 <LCD_ShowChar+0x126>
				break;
 8006e54:	bf00      	nop
	for (t = 0; t < csize; t++) {
 8006e56:	7b7b      	ldrb	r3, [r7, #13]
 8006e58:	3301      	adds	r3, #1
 8006e5a:	737b      	strb	r3, [r7, #13]
 8006e5c:	7b7a      	ldrb	r2, [r7, #13]
 8006e5e:	7a7b      	ldrb	r3, [r7, #9]
 8006e60:	429a      	cmp	r2, r3
 8006e62:	d391      	bcc.n	8006d88 <LCD_ShowChar+0x58>
 8006e64:	e002      	b.n	8006e6c <LCD_ShowChar+0x13c>
			return;								//没有的字库
 8006e66:	bf00      	nop
 8006e68:	e000      	b.n	8006e6c <LCD_ShowChar+0x13c>
				return;		//超区域了
 8006e6a:	bf00      	nop
			}
		}
	}
}
 8006e6c:	3714      	adds	r7, #20
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	bd90      	pop	{r4, r7, pc}
 8006e72:	bf00      	nop
 8006e74:	0800a9a8 	.word	0x0800a9a8
 8006e78:	0800ae1c 	.word	0x0800ae1c
 8006e7c:	0800b40c 	.word	0x0800b40c
 8006e80:	200000ac 	.word	0x200000ac
 8006e84:	20000014 	.word	0x20000014
 8006e88:	200000bc 	.word	0x200000bc

08006e8c <LCD_Pow>:
//m^n函数
//返回值:m^n次方.
uint32_t LCD_Pow(uint8_t m, uint8_t n) {
 8006e8c:	b480      	push	{r7}
 8006e8e:	b085      	sub	sp, #20
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	4603      	mov	r3, r0
 8006e94:	460a      	mov	r2, r1
 8006e96:	71fb      	strb	r3, [r7, #7]
 8006e98:	4613      	mov	r3, r2
 8006e9a:	71bb      	strb	r3, [r7, #6]
	uint32_t result = 1;
 8006e9c:	2301      	movs	r3, #1
 8006e9e:	60fb      	str	r3, [r7, #12]
	while (n--)
 8006ea0:	e004      	b.n	8006eac <LCD_Pow+0x20>
		result *= m;
 8006ea2:	79fa      	ldrb	r2, [r7, #7]
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	fb02 f303 	mul.w	r3, r2, r3
 8006eaa:	60fb      	str	r3, [r7, #12]
	while (n--)
 8006eac:	79bb      	ldrb	r3, [r7, #6]
 8006eae:	1e5a      	subs	r2, r3, #1
 8006eb0:	71ba      	strb	r2, [r7, #6]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d1f5      	bne.n	8006ea2 <LCD_Pow+0x16>
	return result;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
}
 8006eb8:	4618      	mov	r0, r3
 8006eba:	3714      	adds	r7, #20
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	bc80      	pop	{r7}
 8006ec0:	4770      	bx	lr
	...

08006ec4 <LCD_ShowxNum>:
//mode:
//[7]:0 without leading zeros; 1 with leading zeros.
//[6:1]: reserve
//[0]: similar as it in LCD_ShowChar, 0 for wipe away and 1 for opposite
void LCD_ShowxNum(uint16_t x, uint16_t y, uint32_t num, uint8_t len,
		uint8_t size, uint8_t mode) {
 8006ec4:	b590      	push	{r4, r7, lr}
 8006ec6:	b089      	sub	sp, #36	; 0x24
 8006ec8:	af02      	add	r7, sp, #8
 8006eca:	60ba      	str	r2, [r7, #8]
 8006ecc:	461a      	mov	r2, r3
 8006ece:	4603      	mov	r3, r0
 8006ed0:	81fb      	strh	r3, [r7, #14]
 8006ed2:	460b      	mov	r3, r1
 8006ed4:	81bb      	strh	r3, [r7, #12]
 8006ed6:	4613      	mov	r3, r2
 8006ed8:	71fb      	strb	r3, [r7, #7]
	uint8_t t, temp;
	uint8_t enshow = 0;
 8006eda:	2300      	movs	r3, #0
 8006edc:	75bb      	strb	r3, [r7, #22]
	for (t = 0; t < len; t++) {
 8006ede:	2300      	movs	r3, #0
 8006ee0:	75fb      	strb	r3, [r7, #23]
 8006ee2:	e07e      	b.n	8006fe2 <LCD_ShowxNum+0x11e>
		temp = (num / LCD_Pow(10, len - t - 1)) % 10;
 8006ee4:	79fa      	ldrb	r2, [r7, #7]
 8006ee6:	7dfb      	ldrb	r3, [r7, #23]
 8006ee8:	1ad3      	subs	r3, r2, r3
 8006eea:	b2db      	uxtb	r3, r3
 8006eec:	3b01      	subs	r3, #1
 8006eee:	b2db      	uxtb	r3, r3
 8006ef0:	4619      	mov	r1, r3
 8006ef2:	200a      	movs	r0, #10
 8006ef4:	f7ff ffca 	bl	8006e8c <LCD_Pow>
 8006ef8:	4602      	mov	r2, r0
 8006efa:	68bb      	ldr	r3, [r7, #8]
 8006efc:	fbb3 f1f2 	udiv	r1, r3, r2
 8006f00:	4b3c      	ldr	r3, [pc, #240]	; (8006ff4 <LCD_ShowxNum+0x130>)
 8006f02:	fba3 2301 	umull	r2, r3, r3, r1
 8006f06:	08da      	lsrs	r2, r3, #3
 8006f08:	4613      	mov	r3, r2
 8006f0a:	009b      	lsls	r3, r3, #2
 8006f0c:	4413      	add	r3, r2
 8006f0e:	005b      	lsls	r3, r3, #1
 8006f10:	1aca      	subs	r2, r1, r3
 8006f12:	4613      	mov	r3, r2
 8006f14:	757b      	strb	r3, [r7, #21]
		if (enshow == 0 && t < (len - 1)) {
 8006f16:	7dbb      	ldrb	r3, [r7, #22]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d143      	bne.n	8006fa4 <LCD_ShowxNum+0xe0>
 8006f1c:	7dfa      	ldrb	r2, [r7, #23]
 8006f1e:	79fb      	ldrb	r3, [r7, #7]
 8006f20:	3b01      	subs	r3, #1
 8006f22:	429a      	cmp	r2, r3
 8006f24:	da3e      	bge.n	8006fa4 <LCD_ShowxNum+0xe0>
			if (temp == 0) {
 8006f26:	7d7b      	ldrb	r3, [r7, #21]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d139      	bne.n	8006fa0 <LCD_ShowxNum+0xdc>
				if (mode & 0X80)
 8006f2c:	f997 302c 	ldrsb.w	r3, [r7, #44]	; 0x2c
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	da1a      	bge.n	8006f6a <LCD_ShowxNum+0xa6>
					LCD_ShowChar(x + (size / 2) * t, y, '0', size, mode & 0X01);
 8006f34:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006f38:	085b      	lsrs	r3, r3, #1
 8006f3a:	b2db      	uxtb	r3, r3
 8006f3c:	b29b      	uxth	r3, r3
 8006f3e:	7dfa      	ldrb	r2, [r7, #23]
 8006f40:	b292      	uxth	r2, r2
 8006f42:	fb02 f303 	mul.w	r3, r2, r3
 8006f46:	b29a      	uxth	r2, r3
 8006f48:	89fb      	ldrh	r3, [r7, #14]
 8006f4a:	4413      	add	r3, r2
 8006f4c:	b298      	uxth	r0, r3
 8006f4e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006f52:	f003 0301 	and.w	r3, r3, #1
 8006f56:	b2db      	uxtb	r3, r3
 8006f58:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8006f5c:	89b9      	ldrh	r1, [r7, #12]
 8006f5e:	9300      	str	r3, [sp, #0]
 8006f60:	4613      	mov	r3, r2
 8006f62:	2230      	movs	r2, #48	; 0x30
 8006f64:	f7ff fee4 	bl	8006d30 <LCD_ShowChar>
				else
					LCD_ShowChar(x + (size / 2) * t, y, ' ', size, mode & 0X01);
				continue;
 8006f68:	e038      	b.n	8006fdc <LCD_ShowxNum+0x118>
					LCD_ShowChar(x + (size / 2) * t, y, ' ', size, mode & 0X01);
 8006f6a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006f6e:	085b      	lsrs	r3, r3, #1
 8006f70:	b2db      	uxtb	r3, r3
 8006f72:	b29b      	uxth	r3, r3
 8006f74:	7dfa      	ldrb	r2, [r7, #23]
 8006f76:	b292      	uxth	r2, r2
 8006f78:	fb02 f303 	mul.w	r3, r2, r3
 8006f7c:	b29a      	uxth	r2, r3
 8006f7e:	89fb      	ldrh	r3, [r7, #14]
 8006f80:	4413      	add	r3, r2
 8006f82:	b298      	uxth	r0, r3
 8006f84:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006f88:	f003 0301 	and.w	r3, r3, #1
 8006f8c:	b2db      	uxtb	r3, r3
 8006f8e:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8006f92:	89b9      	ldrh	r1, [r7, #12]
 8006f94:	9300      	str	r3, [sp, #0]
 8006f96:	4613      	mov	r3, r2
 8006f98:	2220      	movs	r2, #32
 8006f9a:	f7ff fec9 	bl	8006d30 <LCD_ShowChar>
				continue;
 8006f9e:	e01d      	b.n	8006fdc <LCD_ShowxNum+0x118>
			} else
				enshow = 1;
 8006fa0:	2301      	movs	r3, #1
 8006fa2:	75bb      	strb	r3, [r7, #22]

		}
		LCD_ShowChar(x + (size / 2) * t, y, temp + '0', size, mode & 0X01);
 8006fa4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006fa8:	085b      	lsrs	r3, r3, #1
 8006faa:	b2db      	uxtb	r3, r3
 8006fac:	b29b      	uxth	r3, r3
 8006fae:	7dfa      	ldrb	r2, [r7, #23]
 8006fb0:	b292      	uxth	r2, r2
 8006fb2:	fb02 f303 	mul.w	r3, r2, r3
 8006fb6:	b29a      	uxth	r2, r3
 8006fb8:	89fb      	ldrh	r3, [r7, #14]
 8006fba:	4413      	add	r3, r2
 8006fbc:	b298      	uxth	r0, r3
 8006fbe:	7d7b      	ldrb	r3, [r7, #21]
 8006fc0:	3330      	adds	r3, #48	; 0x30
 8006fc2:	b2da      	uxtb	r2, r3
 8006fc4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006fc8:	f003 0301 	and.w	r3, r3, #1
 8006fcc:	b2db      	uxtb	r3, r3
 8006fce:	f897 4028 	ldrb.w	r4, [r7, #40]	; 0x28
 8006fd2:	89b9      	ldrh	r1, [r7, #12]
 8006fd4:	9300      	str	r3, [sp, #0]
 8006fd6:	4623      	mov	r3, r4
 8006fd8:	f7ff feaa 	bl	8006d30 <LCD_ShowChar>
	for (t = 0; t < len; t++) {
 8006fdc:	7dfb      	ldrb	r3, [r7, #23]
 8006fde:	3301      	adds	r3, #1
 8006fe0:	75fb      	strb	r3, [r7, #23]
 8006fe2:	7dfa      	ldrb	r2, [r7, #23]
 8006fe4:	79fb      	ldrb	r3, [r7, #7]
 8006fe6:	429a      	cmp	r2, r3
 8006fe8:	f4ff af7c 	bcc.w	8006ee4 <LCD_ShowxNum+0x20>
	}
}
 8006fec:	bf00      	nop
 8006fee:	371c      	adds	r7, #28
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	bd90      	pop	{r4, r7, pc}
 8006ff4:	cccccccd 	.word	0xcccccccd

08006ff8 <LCD_ShowString>:
// x,y: starting coordinate
// width, height: display area size
// size: font size // x,y: starting coordinate
// *p: string
void LCD_ShowString(uint16_t x, uint16_t y, uint16_t width, uint16_t height,
		uint8_t size, uint8_t *p) {
 8006ff8:	b590      	push	{r4, r7, lr}
 8006ffa:	b087      	sub	sp, #28
 8006ffc:	af02      	add	r7, sp, #8
 8006ffe:	4604      	mov	r4, r0
 8007000:	4608      	mov	r0, r1
 8007002:	4611      	mov	r1, r2
 8007004:	461a      	mov	r2, r3
 8007006:	4623      	mov	r3, r4
 8007008:	80fb      	strh	r3, [r7, #6]
 800700a:	4603      	mov	r3, r0
 800700c:	80bb      	strh	r3, [r7, #4]
 800700e:	460b      	mov	r3, r1
 8007010:	807b      	strh	r3, [r7, #2]
 8007012:	4613      	mov	r3, r2
 8007014:	803b      	strh	r3, [r7, #0]
	uint8_t x0 = x;
 8007016:	88fb      	ldrh	r3, [r7, #6]
 8007018:	73fb      	strb	r3, [r7, #15]
	width += x;
 800701a:	887a      	ldrh	r2, [r7, #2]
 800701c:	88fb      	ldrh	r3, [r7, #6]
 800701e:	4413      	add	r3, r2
 8007020:	807b      	strh	r3, [r7, #2]
	height += y;
 8007022:	883a      	ldrh	r2, [r7, #0]
 8007024:	88bb      	ldrh	r3, [r7, #4]
 8007026:	4413      	add	r3, r2
 8007028:	803b      	strh	r3, [r7, #0]
	while ((*p <= '~') && (*p >= ' '))	//判断是不是非法字符!
 800702a:	e025      	b.n	8007078 <LCD_ShowString+0x80>
	{
		if (x >= width) {
 800702c:	88fa      	ldrh	r2, [r7, #6]
 800702e:	887b      	ldrh	r3, [r7, #2]
 8007030:	429a      	cmp	r2, r3
 8007032:	d307      	bcc.n	8007044 <LCD_ShowString+0x4c>
			x = x0;
 8007034:	7bfb      	ldrb	r3, [r7, #15]
 8007036:	80fb      	strh	r3, [r7, #6]
			y += size;
 8007038:	f897 3020 	ldrb.w	r3, [r7, #32]
 800703c:	b29a      	uxth	r2, r3
 800703e:	88bb      	ldrh	r3, [r7, #4]
 8007040:	4413      	add	r3, r2
 8007042:	80bb      	strh	r3, [r7, #4]
		}
		if (y >= height)
 8007044:	88ba      	ldrh	r2, [r7, #4]
 8007046:	883b      	ldrh	r3, [r7, #0]
 8007048:	429a      	cmp	r2, r3
 800704a:	d21e      	bcs.n	800708a <LCD_ShowString+0x92>
			break;	//退出
		LCD_ShowChar(x, y, *p, size, 0);
 800704c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800704e:	781a      	ldrb	r2, [r3, #0]
 8007050:	f897 4020 	ldrb.w	r4, [r7, #32]
 8007054:	88b9      	ldrh	r1, [r7, #4]
 8007056:	88f8      	ldrh	r0, [r7, #6]
 8007058:	2300      	movs	r3, #0
 800705a:	9300      	str	r3, [sp, #0]
 800705c:	4623      	mov	r3, r4
 800705e:	f7ff fe67 	bl	8006d30 <LCD_ShowChar>
		x += size / 2;
 8007062:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007066:	085b      	lsrs	r3, r3, #1
 8007068:	b2db      	uxtb	r3, r3
 800706a:	b29a      	uxth	r2, r3
 800706c:	88fb      	ldrh	r3, [r7, #6]
 800706e:	4413      	add	r3, r2
 8007070:	80fb      	strh	r3, [r7, #6]
		p++;
 8007072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007074:	3301      	adds	r3, #1
 8007076:	627b      	str	r3, [r7, #36]	; 0x24
	while ((*p <= '~') && (*p >= ' '))	//判断是不是非法字符!
 8007078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800707a:	781b      	ldrb	r3, [r3, #0]
 800707c:	2b7e      	cmp	r3, #126	; 0x7e
 800707e:	d805      	bhi.n	800708c <LCD_ShowString+0x94>
 8007080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007082:	781b      	ldrb	r3, [r3, #0]
 8007084:	2b1f      	cmp	r3, #31
 8007086:	d8d1      	bhi.n	800702c <LCD_ShowString+0x34>
	}
}
 8007088:	e000      	b.n	800708c <LCD_ShowString+0x94>
			break;	//退出
 800708a:	bf00      	nop
}
 800708c:	bf00      	nop
 800708e:	3714      	adds	r7, #20
 8007090:	46bd      	mov	sp, r7
 8007092:	bd90      	pop	{r4, r7, pc}

08007094 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007094:	b580      	push	{r7, lr}
 8007096:	b084      	sub	sp, #16
 8007098:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800709a:	f001 f9c3 	bl	8008424 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800709e:	f000 f8ff 	bl	80072a0 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  LCD_Init();
 80070a2:	f7fb fd09 	bl	8002ab8 <LCD_Init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80070a6:	f000 f9af 	bl	8007408 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80070aa:	f000 f983 	bl	80073b4 <MX_USART1_UART_Init>
  MX_RTC_Init();
 80070ae:	f000 f957 	bl	8007360 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  int TIME = 60;
 80070b2:	233c      	movs	r3, #60	; 0x3c
 80070b4:	60fb      	str	r3, [r7, #12]
  int INTERVAL = 10;
 80070b6:	230a      	movs	r3, #10
 80070b8:	60bb      	str	r3, [r7, #8]
  int current_timestamp;
  all_init();
 80070ba:	f000 fa53 	bl	8007564 <all_init>
  draw_all_through_struct(TIME);
 80070be:	68f8      	ldr	r0, [r7, #12]
 80070c0:	f000 fa2c 	bl	800751c <draw_all_through_struct>
  HAL_Delay(500);
 80070c4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80070c8:	f001 fa0e 	bl	80084e8 <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(interface.level == 0){
 80070cc:	4b6a      	ldr	r3, [pc, #424]	; (8007278 <main+0x1e4>)
 80070ce:	f8d3 333c 	ldr.w	r3, [r3, #828]	; 0x33c
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d118      	bne.n	8007108 <main+0x74>
		  HAL_RTC_GetTime(&hrtc, &stimestructure, RTC_FORMAT_BIN);
 80070d6:	2200      	movs	r2, #0
 80070d8:	4968      	ldr	r1, [pc, #416]	; (800727c <main+0x1e8>)
 80070da:	4869      	ldr	r0, [pc, #420]	; (8007280 <main+0x1ec>)
 80070dc:	f002 fb00 	bl	80096e0 <HAL_RTC_GetTime>
		  interface.start_timestamp = stimestructure.Hours * 3600 + stimestructure.Minutes * 60 + stimestructure.Seconds;
 80070e0:	4b66      	ldr	r3, [pc, #408]	; (800727c <main+0x1e8>)
 80070e2:	781b      	ldrb	r3, [r3, #0]
 80070e4:	461a      	mov	r2, r3
 80070e6:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80070ea:	fb03 f202 	mul.w	r2, r3, r2
 80070ee:	4b63      	ldr	r3, [pc, #396]	; (800727c <main+0x1e8>)
 80070f0:	785b      	ldrb	r3, [r3, #1]
 80070f2:	4619      	mov	r1, r3
 80070f4:	460b      	mov	r3, r1
 80070f6:	011b      	lsls	r3, r3, #4
 80070f8:	1a5b      	subs	r3, r3, r1
 80070fa:	009b      	lsls	r3, r3, #2
 80070fc:	4413      	add	r3, r2
 80070fe:	4a5f      	ldr	r2, [pc, #380]	; (800727c <main+0x1e8>)
 8007100:	7892      	ldrb	r2, [r2, #2]
 8007102:	4413      	add	r3, r2
 8007104:	4a5c      	ldr	r2, [pc, #368]	; (8007278 <main+0x1e4>)
 8007106:	6013      	str	r3, [r2, #0]
	  }
	  while(1){
		  HAL_RTC_GetTime(&hrtc, &stimestructure, RTC_FORMAT_BIN);
 8007108:	2200      	movs	r2, #0
 800710a:	495c      	ldr	r1, [pc, #368]	; (800727c <main+0x1e8>)
 800710c:	485c      	ldr	r0, [pc, #368]	; (8007280 <main+0x1ec>)
 800710e:	f002 fae7 	bl	80096e0 <HAL_RTC_GetTime>
		  current_timestamp = stimestructure.Hours * 3600 + stimestructure.Minutes * 60 + stimestructure.Seconds;
 8007112:	4b5a      	ldr	r3, [pc, #360]	; (800727c <main+0x1e8>)
 8007114:	781b      	ldrb	r3, [r3, #0]
 8007116:	461a      	mov	r2, r3
 8007118:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800711c:	fb03 f202 	mul.w	r2, r3, r2
 8007120:	4b56      	ldr	r3, [pc, #344]	; (800727c <main+0x1e8>)
 8007122:	785b      	ldrb	r3, [r3, #1]
 8007124:	4619      	mov	r1, r3
 8007126:	460b      	mov	r3, r1
 8007128:	011b      	lsls	r3, r3, #4
 800712a:	1a5b      	subs	r3, r3, r1
 800712c:	009b      	lsls	r3, r3, #2
 800712e:	4413      	add	r3, r2
 8007130:	4a52      	ldr	r2, [pc, #328]	; (800727c <main+0x1e8>)
 8007132:	7892      	ldrb	r2, [r2, #2]
 8007134:	4413      	add	r3, r2
 8007136:	607b      	str	r3, [r7, #4]
		  if(interface.life == 0 || current_timestamp - interface.start_timestamp >= TIME){break;}
 8007138:	4b4f      	ldr	r3, [pc, #316]	; (8007278 <main+0x1e4>)
 800713a:	691b      	ldr	r3, [r3, #16]
 800713c:	2b00      	cmp	r3, #0
 800713e:	d05d      	beq.n	80071fc <main+0x168>
 8007140:	4b4d      	ldr	r3, [pc, #308]	; (8007278 <main+0x1e4>)
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	687a      	ldr	r2, [r7, #4]
 8007146:	1ad3      	subs	r3, r2, r3
 8007148:	68fa      	ldr	r2, [r7, #12]
 800714a:	429a      	cmp	r2, r3
 800714c:	dd56      	ble.n	80071fc <main+0x168>
		  if(interface.score !=0 && interface.score % INTERVAL == 0 && interface.level < 3 && interface.level != interface.score/INTERVAL){
 800714e:	4b4a      	ldr	r3, [pc, #296]	; (8007278 <main+0x1e4>)
 8007150:	685b      	ldr	r3, [r3, #4]
 8007152:	2b00      	cmp	r3, #0
 8007154:	d022      	beq.n	800719c <main+0x108>
 8007156:	4b48      	ldr	r3, [pc, #288]	; (8007278 <main+0x1e4>)
 8007158:	685b      	ldr	r3, [r3, #4]
 800715a:	68ba      	ldr	r2, [r7, #8]
 800715c:	fb93 f2f2 	sdiv	r2, r3, r2
 8007160:	68b9      	ldr	r1, [r7, #8]
 8007162:	fb01 f202 	mul.w	r2, r1, r2
 8007166:	1a9b      	subs	r3, r3, r2
 8007168:	2b00      	cmp	r3, #0
 800716a:	d117      	bne.n	800719c <main+0x108>
 800716c:	4b42      	ldr	r3, [pc, #264]	; (8007278 <main+0x1e4>)
 800716e:	f8d3 333c 	ldr.w	r3, [r3, #828]	; 0x33c
 8007172:	2b02      	cmp	r3, #2
 8007174:	dc12      	bgt.n	800719c <main+0x108>
 8007176:	4b40      	ldr	r3, [pc, #256]	; (8007278 <main+0x1e4>)
 8007178:	f8d3 233c 	ldr.w	r2, [r3, #828]	; 0x33c
 800717c:	4b3e      	ldr	r3, [pc, #248]	; (8007278 <main+0x1e4>)
 800717e:	6859      	ldr	r1, [r3, #4]
 8007180:	68bb      	ldr	r3, [r7, #8]
 8007182:	fb91 f3f3 	sdiv	r3, r1, r3
 8007186:	429a      	cmp	r2, r3
 8007188:	d008      	beq.n	800719c <main+0x108>
			  interface.level = interface.score/INTERVAL;
 800718a:	4b3b      	ldr	r3, [pc, #236]	; (8007278 <main+0x1e4>)
 800718c:	685a      	ldr	r2, [r3, #4]
 800718e:	68bb      	ldr	r3, [r7, #8]
 8007190:	fb92 f3f3 	sdiv	r3, r2, r3
 8007194:	4a38      	ldr	r2, [pc, #224]	; (8007278 <main+0x1e4>)
 8007196:	f8c2 333c 	str.w	r3, [r2, #828]	; 0x33c
			  //clear_all_enemy_plane(interface.my_plane,interface.enemy_planes);
			  //interface.boss[0] = 1;
			  break;
 800719a:	e02f      	b.n	80071fc <main+0x168>
		  }

		  switch_my_act(interface.my_plane,interface.my_buttles);
 800719c:	4939      	ldr	r1, [pc, #228]	; (8007284 <main+0x1f0>)
 800719e:	483a      	ldr	r0, [pc, #232]	; (8007288 <main+0x1f4>)
 80071a0:	f000 fc3a 	bl	8007a18 <switch_my_act>
		  update_my_buttles(interface.my_buttles);
 80071a4:	4837      	ldr	r0, [pc, #220]	; (8007284 <main+0x1f0>)
 80071a6:	f000 fcf5 	bl	8007b94 <update_my_buttles>

		  if(interface.boss[0] == 0){
 80071aa:	4b33      	ldr	r3, [pc, #204]	; (8007278 <main+0x1e4>)
 80071ac:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d118      	bne.n	80071e6 <main+0x152>
			  update_enemy_planes(interface.level, interface.enemy_planes);
 80071b4:	4b30      	ldr	r3, [pc, #192]	; (8007278 <main+0x1e4>)
 80071b6:	f8d3 333c 	ldr.w	r3, [r3, #828]	; 0x33c
 80071ba:	4934      	ldr	r1, [pc, #208]	; (800728c <main+0x1f8>)
 80071bc:	4618      	mov	r0, r3
 80071be:	f000 fd4d 	bl	8007c5c <update_enemy_planes>
			  generate_enemy_planes(interface.level,interface.enemy_planes);
 80071c2:	4b2d      	ldr	r3, [pc, #180]	; (8007278 <main+0x1e4>)
 80071c4:	f8d3 333c 	ldr.w	r3, [r3, #828]	; 0x33c
 80071c8:	4930      	ldr	r1, [pc, #192]	; (800728c <main+0x1f8>)
 80071ca:	4618      	mov	r0, r3
 80071cc:	f000 fb8c 	bl	80078e8 <generate_enemy_planes>
			  check_my_plane_to_enemy_plane_collide(&(interface.score),&(interface.life),	interface.my_plane,interface.enemy_planes);
 80071d0:	4b2e      	ldr	r3, [pc, #184]	; (800728c <main+0x1f8>)
 80071d2:	4a2d      	ldr	r2, [pc, #180]	; (8007288 <main+0x1f4>)
 80071d4:	492e      	ldr	r1, [pc, #184]	; (8007290 <main+0x1fc>)
 80071d6:	482f      	ldr	r0, [pc, #188]	; (8007294 <main+0x200>)
 80071d8:	f000 fdd4 	bl	8007d84 <check_my_plane_to_enemy_plane_collide>
			  check_my_buttles_to_enemy_plane_collide(&(interface.score),	interface.my_buttles, interface.enemy_planes);
 80071dc:	4a2b      	ldr	r2, [pc, #172]	; (800728c <main+0x1f8>)
 80071de:	4929      	ldr	r1, [pc, #164]	; (8007284 <main+0x1f0>)
 80071e0:	482c      	ldr	r0, [pc, #176]	; (8007294 <main+0x200>)
 80071e2:	f000 fe89 	bl	8007ef8 <check_my_buttles_to_enemy_plane_collide>
		  }

		  draw_all_through_struct(current_timestamp - interface.start_timestamp);
 80071e6:	4b24      	ldr	r3, [pc, #144]	; (8007278 <main+0x1e4>)
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	687a      	ldr	r2, [r7, #4]
 80071ec:	1ad3      	subs	r3, r2, r3
 80071ee:	4618      	mov	r0, r3
 80071f0:	f000 f994 	bl	800751c <draw_all_through_struct>
		  HAL_Delay(15);
 80071f4:	200f      	movs	r0, #15
 80071f6:	f001 f977 	bl	80084e8 <HAL_Delay>
		  HAL_RTC_GetTime(&hrtc, &stimestructure, RTC_FORMAT_BIN);
 80071fa:	e785      	b.n	8007108 <main+0x74>
	  }

	  if(interface.life && current_timestamp - interface.start_timestamp < TIME){
 80071fc:	4b1e      	ldr	r3, [pc, #120]	; (8007278 <main+0x1e4>)
 80071fe:	691b      	ldr	r3, [r3, #16]
 8007200:	2b00      	cmp	r3, #0
 8007202:	d01e      	beq.n	8007242 <main+0x1ae>
 8007204:	4b1c      	ldr	r3, [pc, #112]	; (8007278 <main+0x1e4>)
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	687a      	ldr	r2, [r7, #4]
 800720a:	1ad3      	subs	r3, r2, r3
 800720c:	68fa      	ldr	r2, [r7, #12]
 800720e:	429a      	cmp	r2, r3
 8007210:	dd17      	ble.n	8007242 <main+0x1ae>
		  draw_new_level(interface.level);
 8007212:	4b19      	ldr	r3, [pc, #100]	; (8007278 <main+0x1e4>)
 8007214:	f8d3 333c 	ldr.w	r3, [r3, #828]	; 0x33c
 8007218:	4618      	mov	r0, r3
 800721a:	f7f9 fef1 	bl	8001000 <draw_new_level>
		  KEY0_or_POWER_to_skip();
 800721e:	f001 f86d 	bl	80082fc <KEY0_or_POWER_to_skip>
		  LCD_Clear(GRAY);
 8007222:	f248 4030 	movw	r0, #33840	; 0x8430
 8007226:	f7ff fb75 	bl	8006914 <LCD_Clear>
		  init_interface_info_new_level();
 800722a:	f000 fa9d 	bl	8007768 <init_interface_info_new_level>
		  init_play_interface();
 800722e:	f7f9 fec3 	bl	8000fb8 <init_play_interface>

		  draw_all_through_struct(current_timestamp - interface.start_timestamp);
 8007232:	4b11      	ldr	r3, [pc, #68]	; (8007278 <main+0x1e4>)
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	687a      	ldr	r2, [r7, #4]
 8007238:	1ad3      	subs	r3, r2, r3
 800723a:	4618      	mov	r0, r3
 800723c:	f000 f96e 	bl	800751c <draw_all_through_struct>
 8007240:	e015      	b.n	800726e <main+0x1da>
	  } else {
		  draw_end(&(interface.score),&(interface.score_2),&(interface.score_3));
 8007242:	4a15      	ldr	r2, [pc, #84]	; (8007298 <main+0x204>)
 8007244:	4915      	ldr	r1, [pc, #84]	; (800729c <main+0x208>)
 8007246:	4813      	ldr	r0, [pc, #76]	; (8007294 <main+0x200>)
 8007248:	f7f9 ff02 	bl	8001050 <draw_end>
		  KEY0_or_POWER_to_skip();
 800724c:	f001 f856 	bl	80082fc <KEY0_or_POWER_to_skip>

		  //初始界面初始�?????
		  draw_start_page();
 8007250:	f7f9 fe84 	bl	8000f5c <draw_start_page>
		  KEY0_or_POWER_to_skip();
 8007254:	f001 f852 	bl	80082fc <KEY0_or_POWER_to_skip>
		  LCD_Clear(GRAY);
 8007258:	f248 4030 	movw	r0, #33840	; 0x8430
 800725c:	f7ff fb5a 	bl	8006914 <LCD_Clear>

		  //游玩界面数据初始�?????
		  init_interface_info_second_time();
 8007260:	f000 fa16 	bl	8007690 <init_interface_info_second_time>
		  init_play_interface();
 8007264:	f7f9 fea8 	bl	8000fb8 <init_play_interface>

		  draw_all_through_struct(TIME);
 8007268:	68f8      	ldr	r0, [r7, #12]
 800726a:	f000 f957 	bl	800751c <draw_all_through_struct>
	  }
	  //游玩界面初始�?????

	  HAL_Delay(500);
 800726e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007272:	f001 f939 	bl	80084e8 <HAL_Delay>
	  if(interface.level == 0){
 8007276:	e729      	b.n	80070cc <main+0x38>
 8007278:	200000d0 	.word	0x200000d0
 800727c:	200000cc 	.word	0x200000cc
 8007280:	20000e0c 	.word	0x20000e0c
 8007284:	200000ec 	.word	0x200000ec
 8007288:	200000e4 	.word	0x200000e4
 800728c:	2000041c 	.word	0x2000041c
 8007290:	200000e0 	.word	0x200000e0
 8007294:	200000d4 	.word	0x200000d4
 8007298:	200000dc 	.word	0x200000dc
 800729c:	200000d8 	.word	0x200000d8

080072a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80072a0:	b580      	push	{r7, lr}
 80072a2:	b096      	sub	sp, #88	; 0x58
 80072a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80072a6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80072aa:	2228      	movs	r2, #40	; 0x28
 80072ac:	2100      	movs	r1, #0
 80072ae:	4618      	mov	r0, r3
 80072b0:	f002 fec4 	bl	800a03c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80072b4:	f107 031c 	add.w	r3, r7, #28
 80072b8:	2200      	movs	r2, #0
 80072ba:	601a      	str	r2, [r3, #0]
 80072bc:	605a      	str	r2, [r3, #4]
 80072be:	609a      	str	r2, [r3, #8]
 80072c0:	60da      	str	r2, [r3, #12]
 80072c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80072c4:	1d3b      	adds	r3, r7, #4
 80072c6:	2200      	movs	r2, #0
 80072c8:	601a      	str	r2, [r3, #0]
 80072ca:	605a      	str	r2, [r3, #4]
 80072cc:	609a      	str	r2, [r3, #8]
 80072ce:	60da      	str	r2, [r3, #12]
 80072d0:	611a      	str	r2, [r3, #16]
 80072d2:	615a      	str	r2, [r3, #20]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 80072d4:	2305      	movs	r3, #5
 80072d6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80072d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80072dc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80072de:	2300      	movs	r3, #0
 80072e0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80072e2:	2301      	movs	r3, #1
 80072e4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80072e6:	2301      	movs	r3, #1
 80072e8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80072ea:	2302      	movs	r3, #2
 80072ec:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80072ee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80072f2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80072f4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80072f8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80072fa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80072fe:	4618      	mov	r0, r3
 8007300:	f001 fb9e 	bl	8008a40 <HAL_RCC_OscConfig>
 8007304:	4603      	mov	r3, r0
 8007306:	2b00      	cmp	r3, #0
 8007308:	d001      	beq.n	800730e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800730a:	f000 fa8b 	bl	8007824 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800730e:	230f      	movs	r3, #15
 8007310:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007312:	2302      	movs	r3, #2
 8007314:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007316:	2300      	movs	r3, #0
 8007318:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800731a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800731e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8007320:	2300      	movs	r3, #0
 8007322:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8007324:	f107 031c 	add.w	r3, r7, #28
 8007328:	2102      	movs	r1, #2
 800732a:	4618      	mov	r0, r3
 800732c:	f001 fe08 	bl	8008f40 <HAL_RCC_ClockConfig>
 8007330:	4603      	mov	r3, r0
 8007332:	2b00      	cmp	r3, #0
 8007334:	d001      	beq.n	800733a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8007336:	f000 fa75 	bl	8007824 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800733a:	2301      	movs	r3, #1
 800733c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800733e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007342:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8007344:	1d3b      	adds	r3, r7, #4
 8007346:	4618      	mov	r0, r3
 8007348:	f001 ff96 	bl	8009278 <HAL_RCCEx_PeriphCLKConfig>
 800734c:	4603      	mov	r3, r0
 800734e:	2b00      	cmp	r3, #0
 8007350:	d001      	beq.n	8007356 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8007352:	f000 fa67 	bl	8007824 <Error_Handler>
  }
}
 8007356:	bf00      	nop
 8007358:	3758      	adds	r7, #88	; 0x58
 800735a:	46bd      	mov	sp, r7
 800735c:	bd80      	pop	{r7, pc}
	...

08007360 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8007360:	b580      	push	{r7, lr}
 8007362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 8007364:	4b0f      	ldr	r3, [pc, #60]	; (80073a4 <MX_RTC_Init+0x44>)
 8007366:	4a10      	ldr	r2, [pc, #64]	; (80073a8 <MX_RTC_Init+0x48>)
 8007368:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 800736a:	4b0e      	ldr	r3, [pc, #56]	; (80073a4 <MX_RTC_Init+0x44>)
 800736c:	f04f 32ff 	mov.w	r2, #4294967295
 8007370:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 8007372:	4b0c      	ldr	r3, [pc, #48]	; (80073a4 <MX_RTC_Init+0x44>)
 8007374:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007378:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800737a:	480a      	ldr	r0, [pc, #40]	; (80073a4 <MX_RTC_Init+0x44>)
 800737c:	f002 f91a 	bl	80095b4 <HAL_RTC_Init>
 8007380:	4603      	mov	r3, r0
 8007382:	2b00      	cmp	r3, #0
 8007384:	d001      	beq.n	800738a <MX_RTC_Init+0x2a>
  {
    Error_Handler();
 8007386:	f000 fa4d 	bl	8007824 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_SET);
 800738a:	2201      	movs	r2, #1
 800738c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007390:	4806      	ldr	r0, [pc, #24]	; (80073ac <MX_RTC_Init+0x4c>)
 8007392:	f001 fb30 	bl	80089f6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8007396:	2201      	movs	r2, #1
 8007398:	2104      	movs	r1, #4
 800739a:	4805      	ldr	r0, [pc, #20]	; (80073b0 <MX_RTC_Init+0x50>)
 800739c:	f001 fb2b 	bl	80089f6 <HAL_GPIO_WritePin>
  /* USER CODE END RTC_Init 2 */

}
 80073a0:	bf00      	nop
 80073a2:	bd80      	pop	{r7, pc}
 80073a4:	20000e0c 	.word	0x20000e0c
 80073a8:	40002800 	.word	0x40002800
 80073ac:	40010800 	.word	0x40010800
 80073b0:	40011400 	.word	0x40011400

080073b4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80073b4:	b580      	push	{r7, lr}
 80073b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80073b8:	4b11      	ldr	r3, [pc, #68]	; (8007400 <MX_USART1_UART_Init+0x4c>)
 80073ba:	4a12      	ldr	r2, [pc, #72]	; (8007404 <MX_USART1_UART_Init+0x50>)
 80073bc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80073be:	4b10      	ldr	r3, [pc, #64]	; (8007400 <MX_USART1_UART_Init+0x4c>)
 80073c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80073c4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80073c6:	4b0e      	ldr	r3, [pc, #56]	; (8007400 <MX_USART1_UART_Init+0x4c>)
 80073c8:	2200      	movs	r2, #0
 80073ca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80073cc:	4b0c      	ldr	r3, [pc, #48]	; (8007400 <MX_USART1_UART_Init+0x4c>)
 80073ce:	2200      	movs	r2, #0
 80073d0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80073d2:	4b0b      	ldr	r3, [pc, #44]	; (8007400 <MX_USART1_UART_Init+0x4c>)
 80073d4:	2200      	movs	r2, #0
 80073d6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80073d8:	4b09      	ldr	r3, [pc, #36]	; (8007400 <MX_USART1_UART_Init+0x4c>)
 80073da:	220c      	movs	r2, #12
 80073dc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80073de:	4b08      	ldr	r3, [pc, #32]	; (8007400 <MX_USART1_UART_Init+0x4c>)
 80073e0:	2200      	movs	r2, #0
 80073e2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80073e4:	4b06      	ldr	r3, [pc, #24]	; (8007400 <MX_USART1_UART_Init+0x4c>)
 80073e6:	2200      	movs	r2, #0
 80073e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80073ea:	4805      	ldr	r0, [pc, #20]	; (8007400 <MX_USART1_UART_Init+0x4c>)
 80073ec:	f002 fcd4 	bl	8009d98 <HAL_UART_Init>
 80073f0:	4603      	mov	r3, r0
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d001      	beq.n	80073fa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80073f6:	f000 fa15 	bl	8007824 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80073fa:	bf00      	nop
 80073fc:	bd80      	pop	{r7, pc}
 80073fe:	bf00      	nop
 8007400:	20000dcc 	.word	0x20000dcc
 8007404:	40013800 	.word	0x40013800

08007408 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8007408:	b580      	push	{r7, lr}
 800740a:	b088      	sub	sp, #32
 800740c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800740e:	f107 0310 	add.w	r3, r7, #16
 8007412:	2200      	movs	r2, #0
 8007414:	601a      	str	r2, [r3, #0]
 8007416:	605a      	str	r2, [r3, #4]
 8007418:	609a      	str	r2, [r3, #8]
 800741a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800741c:	4b3a      	ldr	r3, [pc, #232]	; (8007508 <MX_GPIO_Init+0x100>)
 800741e:	699b      	ldr	r3, [r3, #24]
 8007420:	4a39      	ldr	r2, [pc, #228]	; (8007508 <MX_GPIO_Init+0x100>)
 8007422:	f043 0310 	orr.w	r3, r3, #16
 8007426:	6193      	str	r3, [r2, #24]
 8007428:	4b37      	ldr	r3, [pc, #220]	; (8007508 <MX_GPIO_Init+0x100>)
 800742a:	699b      	ldr	r3, [r3, #24]
 800742c:	f003 0310 	and.w	r3, r3, #16
 8007430:	60fb      	str	r3, [r7, #12]
 8007432:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8007434:	4b34      	ldr	r3, [pc, #208]	; (8007508 <MX_GPIO_Init+0x100>)
 8007436:	699b      	ldr	r3, [r3, #24]
 8007438:	4a33      	ldr	r2, [pc, #204]	; (8007508 <MX_GPIO_Init+0x100>)
 800743a:	f043 0320 	orr.w	r3, r3, #32
 800743e:	6193      	str	r3, [r2, #24]
 8007440:	4b31      	ldr	r3, [pc, #196]	; (8007508 <MX_GPIO_Init+0x100>)
 8007442:	699b      	ldr	r3, [r3, #24]
 8007444:	f003 0320 	and.w	r3, r3, #32
 8007448:	60bb      	str	r3, [r7, #8]
 800744a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800744c:	4b2e      	ldr	r3, [pc, #184]	; (8007508 <MX_GPIO_Init+0x100>)
 800744e:	699b      	ldr	r3, [r3, #24]
 8007450:	4a2d      	ldr	r2, [pc, #180]	; (8007508 <MX_GPIO_Init+0x100>)
 8007452:	f043 0304 	orr.w	r3, r3, #4
 8007456:	6193      	str	r3, [r2, #24]
 8007458:	4b2b      	ldr	r3, [pc, #172]	; (8007508 <MX_GPIO_Init+0x100>)
 800745a:	699b      	ldr	r3, [r3, #24]
 800745c:	f003 0304 	and.w	r3, r3, #4
 8007460:	607b      	str	r3, [r7, #4]
 8007462:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_SET);
 8007464:	2201      	movs	r2, #1
 8007466:	f44f 7180 	mov.w	r1, #256	; 0x100
 800746a:	4828      	ldr	r0, [pc, #160]	; (800750c <MX_GPIO_Init+0x104>)
 800746c:	f001 fac3 	bl	80089f6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8007470:	2201      	movs	r2, #1
 8007472:	2104      	movs	r1, #4
 8007474:	4826      	ldr	r0, [pc, #152]	; (8007510 <MX_GPIO_Init+0x108>)
 8007476:	f001 fabe 	bl	80089f6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : KEY_WK_Pin */
  GPIO_InitStruct.Pin = KEY_WK_Pin;
 800747a:	2301      	movs	r3, #1
 800747c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800747e:	4b25      	ldr	r3, [pc, #148]	; (8007514 <MX_GPIO_Init+0x10c>)
 8007480:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8007482:	2302      	movs	r3, #2
 8007484:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(KEY_WK_GPIO_Port, &GPIO_InitStruct);
 8007486:	f107 0310 	add.w	r3, r7, #16
 800748a:	4619      	mov	r1, r3
 800748c:	481f      	ldr	r0, [pc, #124]	; (800750c <MX_GPIO_Init+0x104>)
 800748e:	f001 f931 	bl	80086f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : KEY0_Pin */
  GPIO_InitStruct.Pin = KEY0_Pin;
 8007492:	2320      	movs	r3, #32
 8007494:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8007496:	4b1f      	ldr	r3, [pc, #124]	; (8007514 <MX_GPIO_Init+0x10c>)
 8007498:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800749a:	2301      	movs	r3, #1
 800749c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(KEY0_GPIO_Port, &GPIO_InitStruct);
 800749e:	f107 0310 	add.w	r3, r7, #16
 80074a2:	4619      	mov	r1, r3
 80074a4:	481c      	ldr	r0, [pc, #112]	; (8007518 <MX_GPIO_Init+0x110>)
 80074a6:	f001 f925 	bl	80086f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED0_Pin */
  GPIO_InitStruct.Pin = LED0_Pin;
 80074aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80074ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80074b0:	2301      	movs	r3, #1
 80074b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80074b4:	2300      	movs	r3, #0
 80074b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80074b8:	2302      	movs	r3, #2
 80074ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED0_GPIO_Port, &GPIO_InitStruct);
 80074bc:	f107 0310 	add.w	r3, r7, #16
 80074c0:	4619      	mov	r1, r3
 80074c2:	4812      	ldr	r0, [pc, #72]	; (800750c <MX_GPIO_Init+0x104>)
 80074c4:	f001 f916 	bl	80086f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : KEY1_Pin */
  GPIO_InitStruct.Pin = KEY1_Pin;
 80074c8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80074cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80074ce:	4b11      	ldr	r3, [pc, #68]	; (8007514 <MX_GPIO_Init+0x10c>)
 80074d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80074d2:	2301      	movs	r3, #1
 80074d4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(KEY1_GPIO_Port, &GPIO_InitStruct);
 80074d6:	f107 0310 	add.w	r3, r7, #16
 80074da:	4619      	mov	r1, r3
 80074dc:	480b      	ldr	r0, [pc, #44]	; (800750c <MX_GPIO_Init+0x104>)
 80074de:	f001 f909 	bl	80086f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 80074e2:	2304      	movs	r3, #4
 80074e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80074e6:	2301      	movs	r3, #1
 80074e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80074ea:	2300      	movs	r3, #0
 80074ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80074ee:	2302      	movs	r3, #2
 80074f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 80074f2:	f107 0310 	add.w	r3, r7, #16
 80074f6:	4619      	mov	r1, r3
 80074f8:	4805      	ldr	r0, [pc, #20]	; (8007510 <MX_GPIO_Init+0x108>)
 80074fa:	f001 f8fb 	bl	80086f4 <HAL_GPIO_Init>

}
 80074fe:	bf00      	nop
 8007500:	3720      	adds	r7, #32
 8007502:	46bd      	mov	sp, r7
 8007504:	bd80      	pop	{r7, pc}
 8007506:	bf00      	nop
 8007508:	40021000 	.word	0x40021000
 800750c:	40010800 	.word	0x40010800
 8007510:	40011400 	.word	0x40011400
 8007514:	10110000 	.word	0x10110000
 8007518:	40011000 	.word	0x40011000

0800751c <draw_all_through_struct>:

/* USER CODE BEGIN 4 */
void draw_all_through_struct(int limit){
 800751c:	b580      	push	{r7, lr}
 800751e:	b086      	sub	sp, #24
 8007520:	af04      	add	r7, sp, #16
 8007522:	6078      	str	r0, [r7, #4]
	draw_play_all(interface.score,interface.life,	interface.my_plane,interface.my_buttles,	interface.boss,	interface.enemy_planes,interface.enemy_buttles, limit);
 8007524:	4b09      	ldr	r3, [pc, #36]	; (800754c <draw_all_through_struct+0x30>)
 8007526:	6858      	ldr	r0, [r3, #4]
 8007528:	4b08      	ldr	r3, [pc, #32]	; (800754c <draw_all_through_struct+0x30>)
 800752a:	6919      	ldr	r1, [r3, #16]
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	9303      	str	r3, [sp, #12]
 8007530:	4b07      	ldr	r3, [pc, #28]	; (8007550 <draw_all_through_struct+0x34>)
 8007532:	9302      	str	r3, [sp, #8]
 8007534:	4b07      	ldr	r3, [pc, #28]	; (8007554 <draw_all_through_struct+0x38>)
 8007536:	9301      	str	r3, [sp, #4]
 8007538:	4b07      	ldr	r3, [pc, #28]	; (8007558 <draw_all_through_struct+0x3c>)
 800753a:	9300      	str	r3, [sp, #0]
 800753c:	4b07      	ldr	r3, [pc, #28]	; (800755c <draw_all_through_struct+0x40>)
 800753e:	4a08      	ldr	r2, [pc, #32]	; (8007560 <draw_all_through_struct+0x44>)
 8007540:	f7f9 ff68 	bl	8001414 <draw_play_all>
}
 8007544:	bf00      	nop
 8007546:	3708      	adds	r7, #8
 8007548:	46bd      	mov	sp, r7
 800754a:	bd80      	pop	{r7, pc}
 800754c:	200000d0 	.word	0x200000d0
 8007550:	2000046c 	.word	0x2000046c
 8007554:	2000041c 	.word	0x2000041c
 8007558:	20000410 	.word	0x20000410
 800755c:	200000ec 	.word	0x200000ec
 8007560:	200000e4 	.word	0x200000e4

08007564 <all_init>:


void all_init(void){
 8007564:	b580      	push	{r7, lr}
 8007566:	af00      	add	r7, sp, #0
 	LCD_Init();
 8007568:	f7fb faa6 	bl	8002ab8 <LCD_Init>
	BACK_COLOR=GRAY;
 800756c:	4b0c      	ldr	r3, [pc, #48]	; (80075a0 <all_init+0x3c>)
 800756e:	f248 4230 	movw	r2, #33840	; 0x8430
 8007572:	801a      	strh	r2, [r3, #0]

	POINT_COLOR=BLACK;//设置字体为黑�????
 8007574:	4b0b      	ldr	r3, [pc, #44]	; (80075a4 <all_init+0x40>)
 8007576:	2200      	movs	r2, #0
 8007578:	801a      	strh	r2, [r3, #0]
	LCD_Clear(GRAY);
 800757a:	f248 4030 	movw	r0, #33840	; 0x8430
 800757e:	f7ff f9c9 	bl	8006914 <LCD_Clear>

	//初始界面初始�????
	draw_start_page();
 8007582:	f7f9 fceb 	bl	8000f5c <draw_start_page>
	KEY0_or_POWER_to_skip();
 8007586:	f000 feb9 	bl	80082fc <KEY0_or_POWER_to_skip>
	LCD_Clear(GRAY);
 800758a:	f248 4030 	movw	r0, #33840	; 0x8430
 800758e:	f7ff f9c1 	bl	8006914 <LCD_Clear>

	//游玩界面数据初始�????
	init_interface_info();
 8007592:	f000 f809 	bl	80075a8 <init_interface_info>

	init_play_interface();
 8007596:	f7f9 fd0f 	bl	8000fb8 <init_play_interface>
}
 800759a:	bf00      	nop
 800759c:	bd80      	pop	{r7, pc}
 800759e:	bf00      	nop
 80075a0:	20000014 	.word	0x20000014
 80075a4:	200000ac 	.word	0x200000ac

080075a8 <init_interface_info>:



void init_interface_info(void){
 80075a8:	b480      	push	{r7}
 80075aa:	b083      	sub	sp, #12
 80075ac:	af00      	add	r7, sp, #0
	int i=0;
 80075ae:	2300      	movs	r3, #0
 80075b0:	607b      	str	r3, [r7, #4]

	interface.score = 0;
 80075b2:	4b36      	ldr	r3, [pc, #216]	; (800768c <init_interface_info+0xe4>)
 80075b4:	2200      	movs	r2, #0
 80075b6:	605a      	str	r2, [r3, #4]
	interface.score_2 = 0;
 80075b8:	4b34      	ldr	r3, [pc, #208]	; (800768c <init_interface_info+0xe4>)
 80075ba:	2200      	movs	r2, #0
 80075bc:	609a      	str	r2, [r3, #8]
	interface.score_3 = 0;
 80075be:	4b33      	ldr	r3, [pc, #204]	; (800768c <init_interface_info+0xe4>)
 80075c0:	2200      	movs	r2, #0
 80075c2:	60da      	str	r2, [r3, #12]

	interface.life = 3;
 80075c4:	4b31      	ldr	r3, [pc, #196]	; (800768c <init_interface_info+0xe4>)
 80075c6:	2203      	movs	r2, #3
 80075c8:	611a      	str	r2, [r3, #16]

	interface.my_plane[0] = 120;	interface.my_plane[1] = 290;
 80075ca:	4b30      	ldr	r3, [pc, #192]	; (800768c <init_interface_info+0xe4>)
 80075cc:	2278      	movs	r2, #120	; 0x78
 80075ce:	615a      	str	r2, [r3, #20]
 80075d0:	4b2e      	ldr	r3, [pc, #184]	; (800768c <init_interface_info+0xe4>)
 80075d2:	f44f 7291 	mov.w	r2, #290	; 0x122
 80075d6:	619a      	str	r2, [r3, #24]

	for(i=0; i<my_buttle_max; i++){
 80075d8:	2300      	movs	r3, #0
 80075da:	607b      	str	r3, [r7, #4]
 80075dc:	e00f      	b.n	80075fe <init_interface_info+0x56>
		interface.my_buttles[i][0] = 0;
 80075de:	4a2b      	ldr	r2, [pc, #172]	; (800768c <init_interface_info+0xe4>)
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	3303      	adds	r3, #3
 80075e4:	00db      	lsls	r3, r3, #3
 80075e6:	4413      	add	r3, r2
 80075e8:	2200      	movs	r2, #0
 80075ea:	605a      	str	r2, [r3, #4]
		interface.my_buttles[i][1] = 0;
 80075ec:	4a27      	ldr	r2, [pc, #156]	; (800768c <init_interface_info+0xe4>)
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	00db      	lsls	r3, r3, #3
 80075f2:	4413      	add	r3, r2
 80075f4:	2200      	movs	r2, #0
 80075f6:	621a      	str	r2, [r3, #32]
	for(i=0; i<my_buttle_max; i++){
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	3301      	adds	r3, #1
 80075fc:	607b      	str	r3, [r7, #4]
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	2b63      	cmp	r3, #99	; 0x63
 8007602:	ddec      	ble.n	80075de <init_interface_info+0x36>
	}

	interface.level = 0;
 8007604:	4b21      	ldr	r3, [pc, #132]	; (800768c <init_interface_info+0xe4>)
 8007606:	2200      	movs	r2, #0
 8007608:	f8c3 233c 	str.w	r2, [r3, #828]	; 0x33c
	interface.boss[0] = 0;	 interface.boss[1] = 0;
 800760c:	4b1f      	ldr	r3, [pc, #124]	; (800768c <init_interface_info+0xe4>)
 800760e:	2200      	movs	r2, #0
 8007610:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
 8007614:	4b1d      	ldr	r3, [pc, #116]	; (800768c <init_interface_info+0xe4>)
 8007616:	2200      	movs	r2, #0
 8007618:	f8c3 2344 	str.w	r2, [r3, #836]	; 0x344
	interface.boss_life = 0;
 800761c:	4b1b      	ldr	r3, [pc, #108]	; (800768c <init_interface_info+0xe4>)
 800761e:	2200      	movs	r2, #0
 8007620:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348

	for(i=0; i<enemy_plane_max; i++){
 8007624:	2300      	movs	r3, #0
 8007626:	607b      	str	r3, [r7, #4]
 8007628:	e010      	b.n	800764c <init_interface_info+0xa4>
		interface.enemy_planes[i][0] = 0;
 800762a:	4a18      	ldr	r2, [pc, #96]	; (800768c <init_interface_info+0xe4>)
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	3369      	adds	r3, #105	; 0x69
 8007630:	00db      	lsls	r3, r3, #3
 8007632:	4413      	add	r3, r2
 8007634:	2200      	movs	r2, #0
 8007636:	605a      	str	r2, [r3, #4]
		interface.enemy_planes[i][1] = 0;
 8007638:	4a14      	ldr	r2, [pc, #80]	; (800768c <init_interface_info+0xe4>)
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	00db      	lsls	r3, r3, #3
 800763e:	4413      	add	r3, r2
 8007640:	2200      	movs	r2, #0
 8007642:	f8c3 2350 	str.w	r2, [r3, #848]	; 0x350
	for(i=0; i<enemy_plane_max; i++){
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	3301      	adds	r3, #1
 800764a:	607b      	str	r3, [r7, #4]
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	2b09      	cmp	r3, #9
 8007650:	ddeb      	ble.n	800762a <init_interface_info+0x82>
	}

	for(i=0; i<enemy_buttle_max; i++){
 8007652:	2300      	movs	r3, #0
 8007654:	607b      	str	r3, [r7, #4]
 8007656:	e010      	b.n	800767a <init_interface_info+0xd2>
		interface.enemy_buttles[i][0] = 0;
 8007658:	4a0c      	ldr	r2, [pc, #48]	; (800768c <init_interface_info+0xe4>)
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	3373      	adds	r3, #115	; 0x73
 800765e:	00db      	lsls	r3, r3, #3
 8007660:	4413      	add	r3, r2
 8007662:	2200      	movs	r2, #0
 8007664:	605a      	str	r2, [r3, #4]
		interface.enemy_buttles[i][1] = 0;
 8007666:	4a09      	ldr	r2, [pc, #36]	; (800768c <init_interface_info+0xe4>)
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	00db      	lsls	r3, r3, #3
 800766c:	4413      	add	r3, r2
 800766e:	2200      	movs	r2, #0
 8007670:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
	for(i=0; i<enemy_buttle_max; i++){
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	3301      	adds	r3, #1
 8007678:	607b      	str	r3, [r7, #4]
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8007680:	dbea      	blt.n	8007658 <init_interface_info+0xb0>
	}
}
 8007682:	bf00      	nop
 8007684:	370c      	adds	r7, #12
 8007686:	46bd      	mov	sp, r7
 8007688:	bc80      	pop	{r7}
 800768a:	4770      	bx	lr
 800768c:	200000d0 	.word	0x200000d0

08007690 <init_interface_info_second_time>:

void init_interface_info_second_time(void){
 8007690:	b480      	push	{r7}
 8007692:	b083      	sub	sp, #12
 8007694:	af00      	add	r7, sp, #0
	int i=0;
 8007696:	2300      	movs	r3, #0
 8007698:	607b      	str	r3, [r7, #4]

	interface.life = 3;
 800769a:	4b32      	ldr	r3, [pc, #200]	; (8007764 <init_interface_info_second_time+0xd4>)
 800769c:	2203      	movs	r2, #3
 800769e:	611a      	str	r2, [r3, #16]

	interface.my_plane[0] = 120;	interface.my_plane[1] = 290;
 80076a0:	4b30      	ldr	r3, [pc, #192]	; (8007764 <init_interface_info_second_time+0xd4>)
 80076a2:	2278      	movs	r2, #120	; 0x78
 80076a4:	615a      	str	r2, [r3, #20]
 80076a6:	4b2f      	ldr	r3, [pc, #188]	; (8007764 <init_interface_info_second_time+0xd4>)
 80076a8:	f44f 7291 	mov.w	r2, #290	; 0x122
 80076ac:	619a      	str	r2, [r3, #24]

	for(i=0; i<my_buttle_max; i++){
 80076ae:	2300      	movs	r3, #0
 80076b0:	607b      	str	r3, [r7, #4]
 80076b2:	e00f      	b.n	80076d4 <init_interface_info_second_time+0x44>
		interface.my_buttles[i][0] = 0;
 80076b4:	4a2b      	ldr	r2, [pc, #172]	; (8007764 <init_interface_info_second_time+0xd4>)
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	3303      	adds	r3, #3
 80076ba:	00db      	lsls	r3, r3, #3
 80076bc:	4413      	add	r3, r2
 80076be:	2200      	movs	r2, #0
 80076c0:	605a      	str	r2, [r3, #4]
		interface.my_buttles[i][1] = 0;
 80076c2:	4a28      	ldr	r2, [pc, #160]	; (8007764 <init_interface_info_second_time+0xd4>)
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	00db      	lsls	r3, r3, #3
 80076c8:	4413      	add	r3, r2
 80076ca:	2200      	movs	r2, #0
 80076cc:	621a      	str	r2, [r3, #32]
	for(i=0; i<my_buttle_max; i++){
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	3301      	adds	r3, #1
 80076d2:	607b      	str	r3, [r7, #4]
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2b63      	cmp	r3, #99	; 0x63
 80076d8:	ddec      	ble.n	80076b4 <init_interface_info_second_time+0x24>
	}

	interface.level = 0;
 80076da:	4b22      	ldr	r3, [pc, #136]	; (8007764 <init_interface_info_second_time+0xd4>)
 80076dc:	2200      	movs	r2, #0
 80076de:	f8c3 233c 	str.w	r2, [r3, #828]	; 0x33c
	interface.boss[0] = 0;	 interface.boss[1] = 0;
 80076e2:	4b20      	ldr	r3, [pc, #128]	; (8007764 <init_interface_info_second_time+0xd4>)
 80076e4:	2200      	movs	r2, #0
 80076e6:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
 80076ea:	4b1e      	ldr	r3, [pc, #120]	; (8007764 <init_interface_info_second_time+0xd4>)
 80076ec:	2200      	movs	r2, #0
 80076ee:	f8c3 2344 	str.w	r2, [r3, #836]	; 0x344
	interface.boss_life = 0;
 80076f2:	4b1c      	ldr	r3, [pc, #112]	; (8007764 <init_interface_info_second_time+0xd4>)
 80076f4:	2200      	movs	r2, #0
 80076f6:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348

	for(i=0; i<enemy_plane_max; i++){
 80076fa:	2300      	movs	r3, #0
 80076fc:	607b      	str	r3, [r7, #4]
 80076fe:	e010      	b.n	8007722 <init_interface_info_second_time+0x92>
		interface.enemy_planes[i][0] = 0;
 8007700:	4a18      	ldr	r2, [pc, #96]	; (8007764 <init_interface_info_second_time+0xd4>)
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	3369      	adds	r3, #105	; 0x69
 8007706:	00db      	lsls	r3, r3, #3
 8007708:	4413      	add	r3, r2
 800770a:	2200      	movs	r2, #0
 800770c:	605a      	str	r2, [r3, #4]
		interface.enemy_planes[i][1] = 0;
 800770e:	4a15      	ldr	r2, [pc, #84]	; (8007764 <init_interface_info_second_time+0xd4>)
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	00db      	lsls	r3, r3, #3
 8007714:	4413      	add	r3, r2
 8007716:	2200      	movs	r2, #0
 8007718:	f8c3 2350 	str.w	r2, [r3, #848]	; 0x350
	for(i=0; i<enemy_plane_max; i++){
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	3301      	adds	r3, #1
 8007720:	607b      	str	r3, [r7, #4]
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	2b09      	cmp	r3, #9
 8007726:	ddeb      	ble.n	8007700 <init_interface_info_second_time+0x70>
	}

	for(i=0; i<enemy_buttle_max; i++){
 8007728:	2300      	movs	r3, #0
 800772a:	607b      	str	r3, [r7, #4]
 800772c:	e010      	b.n	8007750 <init_interface_info_second_time+0xc0>
		interface.enemy_buttles[i][0] = 0;
 800772e:	4a0d      	ldr	r2, [pc, #52]	; (8007764 <init_interface_info_second_time+0xd4>)
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	3373      	adds	r3, #115	; 0x73
 8007734:	00db      	lsls	r3, r3, #3
 8007736:	4413      	add	r3, r2
 8007738:	2200      	movs	r2, #0
 800773a:	605a      	str	r2, [r3, #4]
		interface.enemy_buttles[i][1] = 0;
 800773c:	4a09      	ldr	r2, [pc, #36]	; (8007764 <init_interface_info_second_time+0xd4>)
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	00db      	lsls	r3, r3, #3
 8007742:	4413      	add	r3, r2
 8007744:	2200      	movs	r2, #0
 8007746:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
	for(i=0; i<enemy_buttle_max; i++){
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	3301      	adds	r3, #1
 800774e:	607b      	str	r3, [r7, #4]
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8007756:	dbea      	blt.n	800772e <init_interface_info_second_time+0x9e>
	}
}
 8007758:	bf00      	nop
 800775a:	370c      	adds	r7, #12
 800775c:	46bd      	mov	sp, r7
 800775e:	bc80      	pop	{r7}
 8007760:	4770      	bx	lr
 8007762:	bf00      	nop
 8007764:	200000d0 	.word	0x200000d0

08007768 <init_interface_info_new_level>:

void init_interface_info_new_level(void){
 8007768:	b480      	push	{r7}
 800776a:	b083      	sub	sp, #12
 800776c:	af00      	add	r7, sp, #0
	int i = 0;
 800776e:	2300      	movs	r3, #0
 8007770:	607b      	str	r3, [r7, #4]
	for(i=0; i<my_buttle_max; i++){
 8007772:	2300      	movs	r3, #0
 8007774:	607b      	str	r3, [r7, #4]
 8007776:	e00f      	b.n	8007798 <init_interface_info_new_level+0x30>
			interface.my_buttles[i][0] = 0;
 8007778:	4a29      	ldr	r2, [pc, #164]	; (8007820 <init_interface_info_new_level+0xb8>)
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	3303      	adds	r3, #3
 800777e:	00db      	lsls	r3, r3, #3
 8007780:	4413      	add	r3, r2
 8007782:	2200      	movs	r2, #0
 8007784:	605a      	str	r2, [r3, #4]
			interface.my_buttles[i][1] = 0;
 8007786:	4a26      	ldr	r2, [pc, #152]	; (8007820 <init_interface_info_new_level+0xb8>)
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	00db      	lsls	r3, r3, #3
 800778c:	4413      	add	r3, r2
 800778e:	2200      	movs	r2, #0
 8007790:	621a      	str	r2, [r3, #32]
	for(i=0; i<my_buttle_max; i++){
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	3301      	adds	r3, #1
 8007796:	607b      	str	r3, [r7, #4]
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2b63      	cmp	r3, #99	; 0x63
 800779c:	ddec      	ble.n	8007778 <init_interface_info_new_level+0x10>
	}

	interface.boss[0] = 0;	 interface.boss[1] = 0;
 800779e:	4b20      	ldr	r3, [pc, #128]	; (8007820 <init_interface_info_new_level+0xb8>)
 80077a0:	2200      	movs	r2, #0
 80077a2:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
 80077a6:	4b1e      	ldr	r3, [pc, #120]	; (8007820 <init_interface_info_new_level+0xb8>)
 80077a8:	2200      	movs	r2, #0
 80077aa:	f8c3 2344 	str.w	r2, [r3, #836]	; 0x344
	interface.boss_life = 0;
 80077ae:	4b1c      	ldr	r3, [pc, #112]	; (8007820 <init_interface_info_new_level+0xb8>)
 80077b0:	2200      	movs	r2, #0
 80077b2:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348

	for(i=0; i<enemy_plane_max; i++){
 80077b6:	2300      	movs	r3, #0
 80077b8:	607b      	str	r3, [r7, #4]
 80077ba:	e010      	b.n	80077de <init_interface_info_new_level+0x76>
		interface.enemy_planes[i][0] = 0;
 80077bc:	4a18      	ldr	r2, [pc, #96]	; (8007820 <init_interface_info_new_level+0xb8>)
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	3369      	adds	r3, #105	; 0x69
 80077c2:	00db      	lsls	r3, r3, #3
 80077c4:	4413      	add	r3, r2
 80077c6:	2200      	movs	r2, #0
 80077c8:	605a      	str	r2, [r3, #4]
		interface.enemy_planes[i][1] = 0;
 80077ca:	4a15      	ldr	r2, [pc, #84]	; (8007820 <init_interface_info_new_level+0xb8>)
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	00db      	lsls	r3, r3, #3
 80077d0:	4413      	add	r3, r2
 80077d2:	2200      	movs	r2, #0
 80077d4:	f8c3 2350 	str.w	r2, [r3, #848]	; 0x350
	for(i=0; i<enemy_plane_max; i++){
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	3301      	adds	r3, #1
 80077dc:	607b      	str	r3, [r7, #4]
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	2b09      	cmp	r3, #9
 80077e2:	ddeb      	ble.n	80077bc <init_interface_info_new_level+0x54>
	}

	for(i=0; i<enemy_buttle_max; i++){
 80077e4:	2300      	movs	r3, #0
 80077e6:	607b      	str	r3, [r7, #4]
 80077e8:	e010      	b.n	800780c <init_interface_info_new_level+0xa4>
		interface.enemy_buttles[i][0] = 0;
 80077ea:	4a0d      	ldr	r2, [pc, #52]	; (8007820 <init_interface_info_new_level+0xb8>)
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	3373      	adds	r3, #115	; 0x73
 80077f0:	00db      	lsls	r3, r3, #3
 80077f2:	4413      	add	r3, r2
 80077f4:	2200      	movs	r2, #0
 80077f6:	605a      	str	r2, [r3, #4]
		interface.enemy_buttles[i][1] = 0;
 80077f8:	4a09      	ldr	r2, [pc, #36]	; (8007820 <init_interface_info_new_level+0xb8>)
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	00db      	lsls	r3, r3, #3
 80077fe:	4413      	add	r3, r2
 8007800:	2200      	movs	r2, #0
 8007802:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
	for(i=0; i<enemy_buttle_max; i++){
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	3301      	adds	r3, #1
 800780a:	607b      	str	r3, [r7, #4]
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8007812:	dbea      	blt.n	80077ea <init_interface_info_new_level+0x82>
	}
}
 8007814:	bf00      	nop
 8007816:	370c      	adds	r7, #12
 8007818:	46bd      	mov	sp, r7
 800781a:	bc80      	pop	{r7}
 800781c:	4770      	bx	lr
 800781e:	bf00      	nop
 8007820:	200000d0 	.word	0x200000d0

08007824 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007824:	b480      	push	{r7}
 8007826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8007828:	bf00      	nop
 800782a:	46bd      	mov	sp, r7
 800782c:	bc80      	pop	{r7}
 800782e:	4770      	bx	lr

08007830 <check_overlap>:
int left_limit = 2;
int right_limit = 238;
int up_limit = 42;
int down_limit = 318;

int check_overlap(int x, int y, int bound, int enemy_planes[10][2]){
 8007830:	b580      	push	{r7, lr}
 8007832:	b086      	sub	sp, #24
 8007834:	af00      	add	r7, sp, #0
 8007836:	60f8      	str	r0, [r7, #12]
 8007838:	60b9      	str	r1, [r7, #8]
 800783a:	607a      	str	r2, [r7, #4]
 800783c:	603b      	str	r3, [r7, #0]
	int i = 0;
 800783e:	2300      	movs	r3, #0
 8007840:	617b      	str	r3, [r7, #20]
	for(i = 0; i < bound*3; i++){
 8007842:	2300      	movs	r3, #0
 8007844:	617b      	str	r3, [r7, #20]
 8007846:	e041      	b.n	80078cc <check_overlap+0x9c>
		if(enemy_planes[i][0] != 0 && (abs(enemy_planes[i][0]-x) <= 20 && abs(enemy_planes[i][1]-y) <= 30)){
 8007848:	697b      	ldr	r3, [r7, #20]
 800784a:	00db      	lsls	r3, r3, #3
 800784c:	683a      	ldr	r2, [r7, #0]
 800784e:	4413      	add	r3, r2
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	2b00      	cmp	r3, #0
 8007854:	d037      	beq.n	80078c6 <check_overlap+0x96>
 8007856:	697b      	ldr	r3, [r7, #20]
 8007858:	00db      	lsls	r3, r3, #3
 800785a:	683a      	ldr	r2, [r7, #0]
 800785c:	4413      	add	r3, r2
 800785e:	681a      	ldr	r2, [r3, #0]
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	1ad3      	subs	r3, r2, r3
 8007864:	f113 0f14 	cmn.w	r3, #20
 8007868:	db2d      	blt.n	80078c6 <check_overlap+0x96>
 800786a:	697b      	ldr	r3, [r7, #20]
 800786c:	00db      	lsls	r3, r3, #3
 800786e:	683a      	ldr	r2, [r7, #0]
 8007870:	4413      	add	r3, r2
 8007872:	681a      	ldr	r2, [r3, #0]
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	1ad3      	subs	r3, r2, r3
 8007878:	2b14      	cmp	r3, #20
 800787a:	dc24      	bgt.n	80078c6 <check_overlap+0x96>
 800787c:	697b      	ldr	r3, [r7, #20]
 800787e:	00db      	lsls	r3, r3, #3
 8007880:	683a      	ldr	r2, [r7, #0]
 8007882:	4413      	add	r3, r2
 8007884:	685a      	ldr	r2, [r3, #4]
 8007886:	68bb      	ldr	r3, [r7, #8]
 8007888:	1ad3      	subs	r3, r2, r3
 800788a:	f113 0f1e 	cmn.w	r3, #30
 800788e:	db1a      	blt.n	80078c6 <check_overlap+0x96>
 8007890:	697b      	ldr	r3, [r7, #20]
 8007892:	00db      	lsls	r3, r3, #3
 8007894:	683a      	ldr	r2, [r7, #0]
 8007896:	4413      	add	r3, r2
 8007898:	685a      	ldr	r2, [r3, #4]
 800789a:	68bb      	ldr	r3, [r7, #8]
 800789c:	1ad3      	subs	r3, r2, r3
 800789e:	2b1e      	cmp	r3, #30
 80078a0:	dc11      	bgt.n	80078c6 <check_overlap+0x96>
			HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 80078a2:	2200      	movs	r2, #0
 80078a4:	2104      	movs	r1, #4
 80078a6:	480f      	ldr	r0, [pc, #60]	; (80078e4 <check_overlap+0xb4>)
 80078a8:	f001 f8a5 	bl	80089f6 <HAL_GPIO_WritePin>
			HAL_Delay(80);
 80078ac:	2050      	movs	r0, #80	; 0x50
 80078ae:	f000 fe1b 	bl	80084e8 <HAL_Delay>
			HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 80078b2:	2201      	movs	r2, #1
 80078b4:	2104      	movs	r1, #4
 80078b6:	480b      	ldr	r0, [pc, #44]	; (80078e4 <check_overlap+0xb4>)
 80078b8:	f001 f89d 	bl	80089f6 <HAL_GPIO_WritePin>
			HAL_Delay(80);
 80078bc:	2050      	movs	r0, #80	; 0x50
 80078be:	f000 fe13 	bl	80084e8 <HAL_Delay>
			return 1;
 80078c2:	2301      	movs	r3, #1
 80078c4:	e00a      	b.n	80078dc <check_overlap+0xac>
	for(i = 0; i < bound*3; i++){
 80078c6:	697b      	ldr	r3, [r7, #20]
 80078c8:	3301      	adds	r3, #1
 80078ca:	617b      	str	r3, [r7, #20]
 80078cc:	687a      	ldr	r2, [r7, #4]
 80078ce:	4613      	mov	r3, r2
 80078d0:	005b      	lsls	r3, r3, #1
 80078d2:	4413      	add	r3, r2
 80078d4:	697a      	ldr	r2, [r7, #20]
 80078d6:	429a      	cmp	r2, r3
 80078d8:	dbb6      	blt.n	8007848 <check_overlap+0x18>
		}
	}
	return 0;
 80078da:	2300      	movs	r3, #0
}
 80078dc:	4618      	mov	r0, r3
 80078de:	3718      	adds	r7, #24
 80078e0:	46bd      	mov	sp, r7
 80078e2:	bd80      	pop	{r7, pc}
 80078e4:	40011400 	.word	0x40011400

080078e8 <generate_enemy_planes>:

//敌人数 <= 关卡 * 3,
//一次只生成一个飞机
//生成飞机概率 => 对应关卡
void generate_enemy_planes(int level, int enemy_planes[10][2]){
 80078e8:	b580      	push	{r7, lr}
 80078ea:	b088      	sub	sp, #32
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
 80078f0:	6039      	str	r1, [r7, #0]
	int i = 0;
 80078f2:	2300      	movs	r3, #0
 80078f4:	61fb      	str	r3, [r7, #28]
	int possibility_range = 0;
 80078f6:	2300      	movs	r3, #0
 80078f8:	61bb      	str	r3, [r7, #24]
	
	if(level == 0){
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d102      	bne.n	8007906 <generate_enemy_planes+0x1e>
		possibility_range = 3;
 8007900:	2303      	movs	r3, #3
 8007902:	61bb      	str	r3, [r7, #24]
 8007904:	e00d      	b.n	8007922 <generate_enemy_planes+0x3a>
	}else if(level == 1){
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	2b01      	cmp	r3, #1
 800790a:	d102      	bne.n	8007912 <generate_enemy_planes+0x2a>
		possibility_range = 4;
 800790c:	2304      	movs	r3, #4
 800790e:	61bb      	str	r3, [r7, #24]
 8007910:	e007      	b.n	8007922 <generate_enemy_planes+0x3a>
	}else if(level == 2){
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	2b02      	cmp	r3, #2
 8007916:	d102      	bne.n	800791e <generate_enemy_planes+0x36>
		possibility_range = 5;
 8007918:	2305      	movs	r3, #5
 800791a:	61bb      	str	r3, [r7, #24]
 800791c:	e001      	b.n	8007922 <generate_enemy_planes+0x3a>
	}else{
		possibility_range = 6;
 800791e:	2306      	movs	r3, #6
 8007920:	61bb      	str	r3, [r7, #24]
	}
		
	for(i=0; i<10; i++){
 8007922:	2300      	movs	r3, #0
 8007924:	61fb      	str	r3, [r7, #28]
 8007926:	e069      	b.n	80079fc <generate_enemy_planes+0x114>
		if(enemy_planes[i][0] == 0){
 8007928:	69fb      	ldr	r3, [r7, #28]
 800792a:	00db      	lsls	r3, r3, #3
 800792c:	683a      	ldr	r2, [r7, #0]
 800792e:	4413      	add	r3, r2
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	2b00      	cmp	r3, #0
 8007934:	d15f      	bne.n	80079f6 <generate_enemy_planes+0x10e>
			if(i < (level+1)*3){
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	1c5a      	adds	r2, r3, #1
 800793a:	4613      	mov	r3, r2
 800793c:	005b      	lsls	r3, r3, #1
 800793e:	4413      	add	r3, r2
 8007940:	69fa      	ldr	r2, [r7, #28]
 8007942:	429a      	cmp	r2, r3
 8007944:	da5e      	bge.n	8007a04 <generate_enemy_planes+0x11c>
				if(rand()%100 < possibility_range){
 8007946:	f002 fb81 	bl	800a04c <rand>
 800794a:	4602      	mov	r2, r0
 800794c:	4b30      	ldr	r3, [pc, #192]	; (8007a10 <generate_enemy_planes+0x128>)
 800794e:	fb83 1302 	smull	r1, r3, r3, r2
 8007952:	1159      	asrs	r1, r3, #5
 8007954:	17d3      	asrs	r3, r2, #31
 8007956:	1acb      	subs	r3, r1, r3
 8007958:	2164      	movs	r1, #100	; 0x64
 800795a:	fb01 f303 	mul.w	r3, r1, r3
 800795e:	1ad3      	subs	r3, r2, r3
 8007960:	69ba      	ldr	r2, [r7, #24]
 8007962:	429a      	cmp	r2, r3
 8007964:	dd4e      	ble.n	8007a04 <generate_enemy_planes+0x11c>
					int x = rand()%217 + 11;
 8007966:	f002 fb71 	bl	800a04c <rand>
 800796a:	4601      	mov	r1, r0
 800796c:	4b29      	ldr	r3, [pc, #164]	; (8007a14 <generate_enemy_planes+0x12c>)
 800796e:	fb83 2301 	smull	r2, r3, r3, r1
 8007972:	440b      	add	r3, r1
 8007974:	11da      	asrs	r2, r3, #7
 8007976:	17cb      	asrs	r3, r1, #31
 8007978:	1ad2      	subs	r2, r2, r3
 800797a:	4613      	mov	r3, r2
 800797c:	00db      	lsls	r3, r3, #3
 800797e:	1a9b      	subs	r3, r3, r2
 8007980:	015a      	lsls	r2, r3, #5
 8007982:	1ad2      	subs	r2, r2, r3
 8007984:	1a8a      	subs	r2, r1, r2
 8007986:	f102 030b 	add.w	r3, r2, #11
 800798a:	617b      	str	r3, [r7, #20]
					int y = 61;
 800798c:	233d      	movs	r3, #61	; 0x3d
 800798e:	60fb      	str	r3, [r7, #12]
					int count = 0;
 8007990:	2300      	movs	r3, #0
 8007992:	613b      	str	r3, [r7, #16]
					while(check_overlap(x, y, level+1, enemy_planes) == 1 && count < 3){
 8007994:	e015      	b.n	80079c2 <generate_enemy_planes+0xda>
						x = rand()%217 + 11;
 8007996:	f002 fb59 	bl	800a04c <rand>
 800799a:	4601      	mov	r1, r0
 800799c:	4b1d      	ldr	r3, [pc, #116]	; (8007a14 <generate_enemy_planes+0x12c>)
 800799e:	fb83 2301 	smull	r2, r3, r3, r1
 80079a2:	440b      	add	r3, r1
 80079a4:	11da      	asrs	r2, r3, #7
 80079a6:	17cb      	asrs	r3, r1, #31
 80079a8:	1ad2      	subs	r2, r2, r3
 80079aa:	4613      	mov	r3, r2
 80079ac:	00db      	lsls	r3, r3, #3
 80079ae:	1a9b      	subs	r3, r3, r2
 80079b0:	015a      	lsls	r2, r3, #5
 80079b2:	1ad2      	subs	r2, r2, r3
 80079b4:	1a8a      	subs	r2, r1, r2
 80079b6:	f102 030b 	add.w	r3, r2, #11
 80079ba:	617b      	str	r3, [r7, #20]
						count++;
 80079bc:	693b      	ldr	r3, [r7, #16]
 80079be:	3301      	adds	r3, #1
 80079c0:	613b      	str	r3, [r7, #16]
					while(check_overlap(x, y, level+1, enemy_planes) == 1 && count < 3){
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	1c5a      	adds	r2, r3, #1
 80079c6:	683b      	ldr	r3, [r7, #0]
 80079c8:	68f9      	ldr	r1, [r7, #12]
 80079ca:	6978      	ldr	r0, [r7, #20]
 80079cc:	f7ff ff30 	bl	8007830 <check_overlap>
 80079d0:	4603      	mov	r3, r0
 80079d2:	2b01      	cmp	r3, #1
 80079d4:	d102      	bne.n	80079dc <generate_enemy_planes+0xf4>
 80079d6:	693b      	ldr	r3, [r7, #16]
 80079d8:	2b02      	cmp	r3, #2
 80079da:	dddc      	ble.n	8007996 <generate_enemy_planes+0xae>
					}
					enemy_planes[i][0] = x;
 80079dc:	69fb      	ldr	r3, [r7, #28]
 80079de:	00db      	lsls	r3, r3, #3
 80079e0:	683a      	ldr	r2, [r7, #0]
 80079e2:	4413      	add	r3, r2
 80079e4:	697a      	ldr	r2, [r7, #20]
 80079e6:	601a      	str	r2, [r3, #0]
					enemy_planes[i][1] = y;
 80079e8:	69fb      	ldr	r3, [r7, #28]
 80079ea:	00db      	lsls	r3, r3, #3
 80079ec:	683a      	ldr	r2, [r7, #0]
 80079ee:	4413      	add	r3, r2
 80079f0:	68fa      	ldr	r2, [r7, #12]
 80079f2:	605a      	str	r2, [r3, #4]
//					enemy_planes[i][0] = rand()%217 + 11;
//					enemy_planes[i][1] = 61;
				}
			}
			break;
 80079f4:	e006      	b.n	8007a04 <generate_enemy_planes+0x11c>
	for(i=0; i<10; i++){
 80079f6:	69fb      	ldr	r3, [r7, #28]
 80079f8:	3301      	adds	r3, #1
 80079fa:	61fb      	str	r3, [r7, #28]
 80079fc:	69fb      	ldr	r3, [r7, #28]
 80079fe:	2b09      	cmp	r3, #9
 8007a00:	dd92      	ble.n	8007928 <generate_enemy_planes+0x40>
		}
	}
}
 8007a02:	e000      	b.n	8007a06 <generate_enemy_planes+0x11e>
			break;
 8007a04:	bf00      	nop
}
 8007a06:	bf00      	nop
 8007a08:	3720      	adds	r7, #32
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	bd80      	pop	{r7, pc}
 8007a0e:	bf00      	nop
 8007a10:	51eb851f 	.word	0x51eb851f
 8007a14:	97012e03 	.word	0x97012e03

08007a18 <switch_my_act>:

void switch_my_act(int my_plane[2],int my_buttles[100][2]){
 8007a18:	b590      	push	{r4, r7, lr}
 8007a1a:	b087      	sub	sp, #28
 8007a1c:	af02      	add	r7, sp, #8
 8007a1e:	6078      	str	r0, [r7, #4]
 8007a20:	6039      	str	r1, [r7, #0]
	int i=0;
 8007a22:	2300      	movs	r3, #0
 8007a24:	60fb      	str	r3, [r7, #12]
	
	if(HAL_GPIO_ReadPin(KEY1_GPIO_Port, KEY1_Pin) == GPIO_PIN_RESET){
 8007a26:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007a2a:	4855      	ldr	r0, [pc, #340]	; (8007b80 <switch_my_act+0x168>)
 8007a2c:	f000 ffcc 	bl	80089c8 <HAL_GPIO_ReadPin>
 8007a30:	4603      	mov	r3, r0
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d129      	bne.n	8007a8a <switch_my_act+0x72>
		LCD_Fill(my_plane[0]-20,my_plane[1]-20,	my_plane[0]+20,my_plane[1]+30,BACK_COLOR);
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	b29b      	uxth	r3, r3
 8007a3c:	3b14      	subs	r3, #20
 8007a3e:	b298      	uxth	r0, r3
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	3304      	adds	r3, #4
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	b29b      	uxth	r3, r3
 8007a48:	3b14      	subs	r3, #20
 8007a4a:	b299      	uxth	r1, r3
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	b29b      	uxth	r3, r3
 8007a52:	3314      	adds	r3, #20
 8007a54:	b29a      	uxth	r2, r3
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	3304      	adds	r3, #4
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	b29b      	uxth	r3, r3
 8007a5e:	331e      	adds	r3, #30
 8007a60:	b29c      	uxth	r4, r3
 8007a62:	4b48      	ldr	r3, [pc, #288]	; (8007b84 <switch_my_act+0x16c>)
 8007a64:	881b      	ldrh	r3, [r3, #0]
 8007a66:	9300      	str	r3, [sp, #0]
 8007a68:	4623      	mov	r3, r4
 8007a6a:	f7fe ffb5 	bl	80069d8 <LCD_Fill>
		if(my_plane[0]-10 > left_limit){
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	f1a3 020a 	sub.w	r2, r3, #10
 8007a76:	4b44      	ldr	r3, [pc, #272]	; (8007b88 <switch_my_act+0x170>)
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	429a      	cmp	r2, r3
 8007a7c:	dd7b      	ble.n	8007b76 <switch_my_act+0x15e>
			my_plane[0] = my_plane[0]-3;
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	1eda      	subs	r2, r3, #3
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	601a      	str	r2, [r3, #0]
				//print_num(190,220,i);
				break;
			}
		}
	}
}
 8007a88:	e075      	b.n	8007b76 <switch_my_act+0x15e>
	}else if(HAL_GPIO_ReadPin(KEY0_GPIO_Port, KEY0_Pin) == GPIO_PIN_RESET){
 8007a8a:	2120      	movs	r1, #32
 8007a8c:	483f      	ldr	r0, [pc, #252]	; (8007b8c <switch_my_act+0x174>)
 8007a8e:	f000 ff9b 	bl	80089c8 <HAL_GPIO_ReadPin>
 8007a92:	4603      	mov	r3, r0
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d129      	bne.n	8007aec <switch_my_act+0xd4>
		LCD_Fill(my_plane[0]-20,my_plane[1]-20,	my_plane[0]+20,my_plane[1]+30,BACK_COLOR);
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	b29b      	uxth	r3, r3
 8007a9e:	3b14      	subs	r3, #20
 8007aa0:	b298      	uxth	r0, r3
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	3304      	adds	r3, #4
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	b29b      	uxth	r3, r3
 8007aaa:	3b14      	subs	r3, #20
 8007aac:	b299      	uxth	r1, r3
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	b29b      	uxth	r3, r3
 8007ab4:	3314      	adds	r3, #20
 8007ab6:	b29a      	uxth	r2, r3
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	3304      	adds	r3, #4
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	b29b      	uxth	r3, r3
 8007ac0:	331e      	adds	r3, #30
 8007ac2:	b29c      	uxth	r4, r3
 8007ac4:	4b2f      	ldr	r3, [pc, #188]	; (8007b84 <switch_my_act+0x16c>)
 8007ac6:	881b      	ldrh	r3, [r3, #0]
 8007ac8:	9300      	str	r3, [sp, #0]
 8007aca:	4623      	mov	r3, r4
 8007acc:	f7fe ff84 	bl	80069d8 <LCD_Fill>
		if(my_plane[0]+10 < right_limit){
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	f103 020a 	add.w	r2, r3, #10
 8007ad8:	4b2d      	ldr	r3, [pc, #180]	; (8007b90 <switch_my_act+0x178>)
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	429a      	cmp	r2, r3
 8007ade:	da4a      	bge.n	8007b76 <switch_my_act+0x15e>
			my_plane[0] = my_plane[0]+3;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	1cda      	adds	r2, r3, #3
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	601a      	str	r2, [r3, #0]
}
 8007aea:	e044      	b.n	8007b76 <switch_my_act+0x15e>
	}else if(HAL_GPIO_ReadPin(KEY_WK_GPIO_Port, KEY_WK_Pin) == GPIO_PIN_SET){
 8007aec:	2101      	movs	r1, #1
 8007aee:	4824      	ldr	r0, [pc, #144]	; (8007b80 <switch_my_act+0x168>)
 8007af0:	f000 ff6a 	bl	80089c8 <HAL_GPIO_ReadPin>
 8007af4:	4603      	mov	r3, r0
 8007af6:	2b01      	cmp	r3, #1
 8007af8:	d13d      	bne.n	8007b76 <switch_my_act+0x15e>
		LCD_Fill(my_plane[0]-20,my_plane[1]-20,	my_plane[0]+20,my_plane[1]+30,BACK_COLOR);
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	b29b      	uxth	r3, r3
 8007b00:	3b14      	subs	r3, #20
 8007b02:	b298      	uxth	r0, r3
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	3304      	adds	r3, #4
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	b29b      	uxth	r3, r3
 8007b0c:	3b14      	subs	r3, #20
 8007b0e:	b299      	uxth	r1, r3
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	b29b      	uxth	r3, r3
 8007b16:	3314      	adds	r3, #20
 8007b18:	b29a      	uxth	r2, r3
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	3304      	adds	r3, #4
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	b29b      	uxth	r3, r3
 8007b22:	331e      	adds	r3, #30
 8007b24:	b29c      	uxth	r4, r3
 8007b26:	4b17      	ldr	r3, [pc, #92]	; (8007b84 <switch_my_act+0x16c>)
 8007b28:	881b      	ldrh	r3, [r3, #0]
 8007b2a:	9300      	str	r3, [sp, #0]
 8007b2c:	4623      	mov	r3, r4
 8007b2e:	f7fe ff53 	bl	80069d8 <LCD_Fill>
		for(i=0; i<100; i++){
 8007b32:	2300      	movs	r3, #0
 8007b34:	60fb      	str	r3, [r7, #12]
 8007b36:	e01b      	b.n	8007b70 <switch_my_act+0x158>
			if(my_buttles[i][0] == 0){
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	00db      	lsls	r3, r3, #3
 8007b3c:	683a      	ldr	r2, [r7, #0]
 8007b3e:	4413      	add	r3, r2
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d111      	bne.n	8007b6a <switch_my_act+0x152>
				my_buttles[i][0] = my_plane[0];
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	00db      	lsls	r3, r3, #3
 8007b4a:	683a      	ldr	r2, [r7, #0]
 8007b4c:	4413      	add	r3, r2
 8007b4e:	687a      	ldr	r2, [r7, #4]
 8007b50:	6812      	ldr	r2, [r2, #0]
 8007b52:	601a      	str	r2, [r3, #0]
				my_buttles[i][1] = my_plane[1]-22;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	3304      	adds	r3, #4
 8007b58:	681a      	ldr	r2, [r3, #0]
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	00db      	lsls	r3, r3, #3
 8007b5e:	6839      	ldr	r1, [r7, #0]
 8007b60:	440b      	add	r3, r1
 8007b62:	3a16      	subs	r2, #22
 8007b64:	605a      	str	r2, [r3, #4]
				break;
 8007b66:	bf00      	nop
}
 8007b68:	e005      	b.n	8007b76 <switch_my_act+0x15e>
		for(i=0; i<100; i++){
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	3301      	adds	r3, #1
 8007b6e:	60fb      	str	r3, [r7, #12]
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	2b63      	cmp	r3, #99	; 0x63
 8007b74:	dde0      	ble.n	8007b38 <switch_my_act+0x120>
}
 8007b76:	bf00      	nop
 8007b78:	3714      	adds	r7, #20
 8007b7a:	46bd      	mov	sp, r7
 8007b7c:	bd90      	pop	{r4, r7, pc}
 8007b7e:	bf00      	nop
 8007b80:	40010800 	.word	0x40010800
 8007b84:	20000014 	.word	0x20000014
 8007b88:	20000018 	.word	0x20000018
 8007b8c:	40011000 	.word	0x40011000
 8007b90:	2000001c 	.word	0x2000001c

08007b94 <update_my_buttles>:

void update_my_buttles(int my_buttles[100][2]){
 8007b94:	b590      	push	{r4, r7, lr}
 8007b96:	b087      	sub	sp, #28
 8007b98:	af02      	add	r7, sp, #8
 8007b9a:	6078      	str	r0, [r7, #4]
	int i=0;
 8007b9c:	2300      	movs	r3, #0
 8007b9e:	60fb      	str	r3, [r7, #12]
	
	for(i=0; i<100; i++){
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	60fb      	str	r3, [r7, #12]
 8007ba4:	e04e      	b.n	8007c44 <update_my_buttles+0xb0>
		if(my_buttles[i][0] != 0){
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	00db      	lsls	r3, r3, #3
 8007baa:	687a      	ldr	r2, [r7, #4]
 8007bac:	4413      	add	r3, r2
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d044      	beq.n	8007c3e <update_my_buttles+0xaa>
			// 清除之前所画
			LCD_Fill(my_buttles[i][0]-1,my_buttles[i][1]-1,	my_buttles[i][0]+1,my_buttles[i][1]+1,BACK_COLOR);
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	00db      	lsls	r3, r3, #3
 8007bb8:	687a      	ldr	r2, [r7, #4]
 8007bba:	4413      	add	r3, r2
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	b29b      	uxth	r3, r3
 8007bc0:	3b01      	subs	r3, #1
 8007bc2:	b298      	uxth	r0, r3
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	00db      	lsls	r3, r3, #3
 8007bc8:	687a      	ldr	r2, [r7, #4]
 8007bca:	4413      	add	r3, r2
 8007bcc:	685b      	ldr	r3, [r3, #4]
 8007bce:	b29b      	uxth	r3, r3
 8007bd0:	3b01      	subs	r3, #1
 8007bd2:	b299      	uxth	r1, r3
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	00db      	lsls	r3, r3, #3
 8007bd8:	687a      	ldr	r2, [r7, #4]
 8007bda:	4413      	add	r3, r2
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	b29b      	uxth	r3, r3
 8007be0:	3301      	adds	r3, #1
 8007be2:	b29c      	uxth	r4, r3
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	00db      	lsls	r3, r3, #3
 8007be8:	687a      	ldr	r2, [r7, #4]
 8007bea:	4413      	add	r3, r2
 8007bec:	685b      	ldr	r3, [r3, #4]
 8007bee:	b29b      	uxth	r3, r3
 8007bf0:	3301      	adds	r3, #1
 8007bf2:	b29a      	uxth	r2, r3
 8007bf4:	4b18      	ldr	r3, [pc, #96]	; (8007c58 <update_my_buttles+0xc4>)
 8007bf6:	881b      	ldrh	r3, [r3, #0]
 8007bf8:	9300      	str	r3, [sp, #0]
 8007bfa:	4613      	mov	r3, r2
 8007bfc:	4622      	mov	r2, r4
 8007bfe:	f7fe feeb 	bl	80069d8 <LCD_Fill>
			
			my_buttles[i][1] = my_buttles[i][1] - 3;
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	00db      	lsls	r3, r3, #3
 8007c06:	687a      	ldr	r2, [r7, #4]
 8007c08:	4413      	add	r3, r2
 8007c0a:	685a      	ldr	r2, [r3, #4]
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	00db      	lsls	r3, r3, #3
 8007c10:	6879      	ldr	r1, [r7, #4]
 8007c12:	440b      	add	r3, r1
 8007c14:	3a03      	subs	r2, #3
 8007c16:	605a      	str	r2, [r3, #4]
			
			// 边界销毁
			if(my_buttles[i][1] < 42){				
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	00db      	lsls	r3, r3, #3
 8007c1c:	687a      	ldr	r2, [r7, #4]
 8007c1e:	4413      	add	r3, r2
 8007c20:	685b      	ldr	r3, [r3, #4]
 8007c22:	2b29      	cmp	r3, #41	; 0x29
 8007c24:	dc0b      	bgt.n	8007c3e <update_my_buttles+0xaa>
				my_buttles[i][0] = 0;
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	00db      	lsls	r3, r3, #3
 8007c2a:	687a      	ldr	r2, [r7, #4]
 8007c2c:	4413      	add	r3, r2
 8007c2e:	2200      	movs	r2, #0
 8007c30:	601a      	str	r2, [r3, #0]
				my_buttles[i][1] = 0;
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	00db      	lsls	r3, r3, #3
 8007c36:	687a      	ldr	r2, [r7, #4]
 8007c38:	4413      	add	r3, r2
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	605a      	str	r2, [r3, #4]
	for(i=0; i<100; i++){
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	3301      	adds	r3, #1
 8007c42:	60fb      	str	r3, [r7, #12]
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	2b63      	cmp	r3, #99	; 0x63
 8007c48:	ddad      	ble.n	8007ba6 <update_my_buttles+0x12>
			}
		}
	}
	// 后续数组前移 ？
	arrange_my_buttles(my_buttles);
 8007c4a:	6878      	ldr	r0, [r7, #4]
 8007c4c:	f000 fb68 	bl	8008320 <arrange_my_buttles>
}
 8007c50:	bf00      	nop
 8007c52:	3714      	adds	r7, #20
 8007c54:	46bd      	mov	sp, r7
 8007c56:	bd90      	pop	{r4, r7, pc}
 8007c58:	20000014 	.word	0x20000014

08007c5c <update_enemy_planes>:

void update_enemy_planes(int level, int enemy_planes[10][2]){
 8007c5c:	b590      	push	{r4, r7, lr}
 8007c5e:	b087      	sub	sp, #28
 8007c60:	af02      	add	r7, sp, #8
 8007c62:	6078      	str	r0, [r7, #4]
 8007c64:	6039      	str	r1, [r7, #0]
	int i=0;
 8007c66:	2300      	movs	r3, #0
 8007c68:	60fb      	str	r3, [r7, #12]
	
	for(i=0; i<10; i++){
 8007c6a:	2300      	movs	r3, #0
 8007c6c:	60fb      	str	r3, [r7, #12]
 8007c6e:	e07c      	b.n	8007d6a <update_enemy_planes+0x10e>
		if(enemy_planes[i][0] != 0){
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	00db      	lsls	r3, r3, #3
 8007c74:	683a      	ldr	r2, [r7, #0]
 8007c76:	4413      	add	r3, r2
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d072      	beq.n	8007d64 <update_enemy_planes+0x108>
			// 清除之前所画
			LCD_Fill(enemy_planes[i][0]-10,enemy_planes[i][1]-20,	enemy_planes[i][0]+10,enemy_planes[i][1]+20,BACK_COLOR);
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	00db      	lsls	r3, r3, #3
 8007c82:	683a      	ldr	r2, [r7, #0]
 8007c84:	4413      	add	r3, r2
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	b29b      	uxth	r3, r3
 8007c8a:	3b0a      	subs	r3, #10
 8007c8c:	b298      	uxth	r0, r3
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	00db      	lsls	r3, r3, #3
 8007c92:	683a      	ldr	r2, [r7, #0]
 8007c94:	4413      	add	r3, r2
 8007c96:	685b      	ldr	r3, [r3, #4]
 8007c98:	b29b      	uxth	r3, r3
 8007c9a:	3b14      	subs	r3, #20
 8007c9c:	b299      	uxth	r1, r3
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	00db      	lsls	r3, r3, #3
 8007ca2:	683a      	ldr	r2, [r7, #0]
 8007ca4:	4413      	add	r3, r2
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	b29b      	uxth	r3, r3
 8007caa:	330a      	adds	r3, #10
 8007cac:	b29c      	uxth	r4, r3
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	00db      	lsls	r3, r3, #3
 8007cb2:	683a      	ldr	r2, [r7, #0]
 8007cb4:	4413      	add	r3, r2
 8007cb6:	685b      	ldr	r3, [r3, #4]
 8007cb8:	b29b      	uxth	r3, r3
 8007cba:	3314      	adds	r3, #20
 8007cbc:	b29a      	uxth	r2, r3
 8007cbe:	4b30      	ldr	r3, [pc, #192]	; (8007d80 <update_enemy_planes+0x124>)
 8007cc0:	881b      	ldrh	r3, [r3, #0]
 8007cc2:	9300      	str	r3, [sp, #0]
 8007cc4:	4613      	mov	r3, r2
 8007cc6:	4622      	mov	r2, r4
 8007cc8:	f7fe fe86 	bl	80069d8 <LCD_Fill>
			
			if(level == 0){
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d10b      	bne.n	8007cea <update_enemy_planes+0x8e>
				enemy_planes[i][1] = enemy_planes[i][1] + 1;
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	00db      	lsls	r3, r3, #3
 8007cd6:	683a      	ldr	r2, [r7, #0]
 8007cd8:	4413      	add	r3, r2
 8007cda:	685a      	ldr	r2, [r3, #4]
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	00db      	lsls	r3, r3, #3
 8007ce0:	6839      	ldr	r1, [r7, #0]
 8007ce2:	440b      	add	r3, r1
 8007ce4:	3201      	adds	r2, #1
 8007ce6:	605a      	str	r2, [r3, #4]
 8007ce8:	e028      	b.n	8007d3c <update_enemy_planes+0xe0>
			}else if(level == 1){
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	2b01      	cmp	r3, #1
 8007cee:	d10b      	bne.n	8007d08 <update_enemy_planes+0xac>
				enemy_planes[i][1] = enemy_planes[i][1] + 2;
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	00db      	lsls	r3, r3, #3
 8007cf4:	683a      	ldr	r2, [r7, #0]
 8007cf6:	4413      	add	r3, r2
 8007cf8:	685a      	ldr	r2, [r3, #4]
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	00db      	lsls	r3, r3, #3
 8007cfe:	6839      	ldr	r1, [r7, #0]
 8007d00:	440b      	add	r3, r1
 8007d02:	3202      	adds	r2, #2
 8007d04:	605a      	str	r2, [r3, #4]
 8007d06:	e019      	b.n	8007d3c <update_enemy_planes+0xe0>
			}else if(level == 2){
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	2b02      	cmp	r3, #2
 8007d0c:	d10b      	bne.n	8007d26 <update_enemy_planes+0xca>
				enemy_planes[i][1] = enemy_planes[i][1] + 3;
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	00db      	lsls	r3, r3, #3
 8007d12:	683a      	ldr	r2, [r7, #0]
 8007d14:	4413      	add	r3, r2
 8007d16:	685a      	ldr	r2, [r3, #4]
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	00db      	lsls	r3, r3, #3
 8007d1c:	6839      	ldr	r1, [r7, #0]
 8007d1e:	440b      	add	r3, r1
 8007d20:	3203      	adds	r2, #3
 8007d22:	605a      	str	r2, [r3, #4]
 8007d24:	e00a      	b.n	8007d3c <update_enemy_planes+0xe0>
			}else{
				enemy_planes[i][1] = enemy_planes[i][1] + 4;
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	00db      	lsls	r3, r3, #3
 8007d2a:	683a      	ldr	r2, [r7, #0]
 8007d2c:	4413      	add	r3, r2
 8007d2e:	685a      	ldr	r2, [r3, #4]
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	00db      	lsls	r3, r3, #3
 8007d34:	6839      	ldr	r1, [r7, #0]
 8007d36:	440b      	add	r3, r1
 8007d38:	3204      	adds	r2, #4
 8007d3a:	605a      	str	r2, [r3, #4]
			}
			
			// 边界销毁
			if(enemy_planes[i][1] > 298){			
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	00db      	lsls	r3, r3, #3
 8007d40:	683a      	ldr	r2, [r7, #0]
 8007d42:	4413      	add	r3, r2
 8007d44:	685b      	ldr	r3, [r3, #4]
 8007d46:	f5b3 7f95 	cmp.w	r3, #298	; 0x12a
 8007d4a:	dd0b      	ble.n	8007d64 <update_enemy_planes+0x108>
				enemy_planes[i][0] = 0;
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	00db      	lsls	r3, r3, #3
 8007d50:	683a      	ldr	r2, [r7, #0]
 8007d52:	4413      	add	r3, r2
 8007d54:	2200      	movs	r2, #0
 8007d56:	601a      	str	r2, [r3, #0]
				enemy_planes[i][1] = 0;
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	00db      	lsls	r3, r3, #3
 8007d5c:	683a      	ldr	r2, [r7, #0]
 8007d5e:	4413      	add	r3, r2
 8007d60:	2200      	movs	r2, #0
 8007d62:	605a      	str	r2, [r3, #4]
	for(i=0; i<10; i++){
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	3301      	adds	r3, #1
 8007d68:	60fb      	str	r3, [r7, #12]
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	2b09      	cmp	r3, #9
 8007d6e:	f77f af7f 	ble.w	8007c70 <update_enemy_planes+0x14>
			}
		}
	}
	// 后续数组前移 ？
	arrange_enemy_planes(enemy_planes);
 8007d72:	6838      	ldr	r0, [r7, #0]
 8007d74:	f000 fb02 	bl	800837c <arrange_enemy_planes>
}
 8007d78:	bf00      	nop
 8007d7a:	3714      	adds	r7, #20
 8007d7c:	46bd      	mov	sp, r7
 8007d7e:	bd90      	pop	{r4, r7, pc}
 8007d80:	20000014 	.word	0x20000014

08007d84 <check_my_plane_to_enemy_plane_collide>:

void check_my_plane_to_enemy_plane_collide(int *score, int *life, int my_plane[2], int enemy_planes[10][2]){
 8007d84:	b590      	push	{r4, r7, lr}
 8007d86:	b089      	sub	sp, #36	; 0x24
 8007d88:	af02      	add	r7, sp, #8
 8007d8a:	60f8      	str	r0, [r7, #12]
 8007d8c:	60b9      	str	r1, [r7, #8]
 8007d8e:	607a      	str	r2, [r7, #4]
 8007d90:	603b      	str	r3, [r7, #0]
	int i=0;
 8007d92:	2300      	movs	r3, #0
 8007d94:	617b      	str	r3, [r7, #20]
	int temp=0;
 8007d96:	2300      	movs	r3, #0
 8007d98:	613b      	str	r3, [r7, #16]
	
	for(i=0; i<10; i++){
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	617b      	str	r3, [r7, #20]
 8007d9e:	e09d      	b.n	8007edc <check_my_plane_to_enemy_plane_collide+0x158>
		if(enemy_planes[i][0] != 0){
 8007da0:	697b      	ldr	r3, [r7, #20]
 8007da2:	00db      	lsls	r3, r3, #3
 8007da4:	683a      	ldr	r2, [r7, #0]
 8007da6:	4413      	add	r3, r2
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	f000 8093 	beq.w	8007ed6 <check_my_plane_to_enemy_plane_collide+0x152>
			// 碰撞检测
			if(abs(enemy_planes[i][0] - my_plane[0]) <= 20){
 8007db0:	697b      	ldr	r3, [r7, #20]
 8007db2:	00db      	lsls	r3, r3, #3
 8007db4:	683a      	ldr	r2, [r7, #0]
 8007db6:	4413      	add	r3, r2
 8007db8:	681a      	ldr	r2, [r3, #0]
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	1ad3      	subs	r3, r2, r3
 8007dc0:	f113 0f14 	cmn.w	r3, #20
 8007dc4:	f2c0 8087 	blt.w	8007ed6 <check_my_plane_to_enemy_plane_collide+0x152>
 8007dc8:	697b      	ldr	r3, [r7, #20]
 8007dca:	00db      	lsls	r3, r3, #3
 8007dcc:	683a      	ldr	r2, [r7, #0]
 8007dce:	4413      	add	r3, r2
 8007dd0:	681a      	ldr	r2, [r3, #0]
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	1ad3      	subs	r3, r2, r3
 8007dd8:	2b14      	cmp	r3, #20
 8007dda:	dc7c      	bgt.n	8007ed6 <check_my_plane_to_enemy_plane_collide+0x152>
				if(abs(enemy_planes[i][1] - my_plane[1]) <= 40){
 8007ddc:	697b      	ldr	r3, [r7, #20]
 8007dde:	00db      	lsls	r3, r3, #3
 8007de0:	683a      	ldr	r2, [r7, #0]
 8007de2:	4413      	add	r3, r2
 8007de4:	685a      	ldr	r2, [r3, #4]
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	3304      	adds	r3, #4
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	1ad3      	subs	r3, r2, r3
 8007dee:	f113 0f28 	cmn.w	r3, #40	; 0x28
 8007df2:	db70      	blt.n	8007ed6 <check_my_plane_to_enemy_plane_collide+0x152>
 8007df4:	697b      	ldr	r3, [r7, #20]
 8007df6:	00db      	lsls	r3, r3, #3
 8007df8:	683a      	ldr	r2, [r7, #0]
 8007dfa:	4413      	add	r3, r2
 8007dfc:	685a      	ldr	r2, [r3, #4]
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	3304      	adds	r3, #4
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	1ad3      	subs	r3, r2, r3
 8007e06:	2b28      	cmp	r3, #40	; 0x28
 8007e08:	dc65      	bgt.n	8007ed6 <check_my_plane_to_enemy_plane_collide+0x152>
					LCD_Fill(my_plane[0]-10,my_plane[1]-20,	my_plane[0]+10,my_plane[1]+20,BACK_COLOR);
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	b29b      	uxth	r3, r3
 8007e10:	3b0a      	subs	r3, #10
 8007e12:	b298      	uxth	r0, r3
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	3304      	adds	r3, #4
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	b29b      	uxth	r3, r3
 8007e1c:	3b14      	subs	r3, #20
 8007e1e:	b299      	uxth	r1, r3
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	b29b      	uxth	r3, r3
 8007e26:	330a      	adds	r3, #10
 8007e28:	b29a      	uxth	r2, r3
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	3304      	adds	r3, #4
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	b29b      	uxth	r3, r3
 8007e32:	3314      	adds	r3, #20
 8007e34:	b29c      	uxth	r4, r3
 8007e36:	4b2f      	ldr	r3, [pc, #188]	; (8007ef4 <check_my_plane_to_enemy_plane_collide+0x170>)
 8007e38:	881b      	ldrh	r3, [r3, #0]
 8007e3a:	9300      	str	r3, [sp, #0]
 8007e3c:	4623      	mov	r3, r4
 8007e3e:	f7fe fdcb 	bl	80069d8 <LCD_Fill>
					LCD_Fill(enemy_planes[i][0]-10,enemy_planes[i][1]-20,	enemy_planes[i][0]+10,enemy_planes[i][1]+20,BACK_COLOR);
 8007e42:	697b      	ldr	r3, [r7, #20]
 8007e44:	00db      	lsls	r3, r3, #3
 8007e46:	683a      	ldr	r2, [r7, #0]
 8007e48:	4413      	add	r3, r2
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	b29b      	uxth	r3, r3
 8007e4e:	3b0a      	subs	r3, #10
 8007e50:	b298      	uxth	r0, r3
 8007e52:	697b      	ldr	r3, [r7, #20]
 8007e54:	00db      	lsls	r3, r3, #3
 8007e56:	683a      	ldr	r2, [r7, #0]
 8007e58:	4413      	add	r3, r2
 8007e5a:	685b      	ldr	r3, [r3, #4]
 8007e5c:	b29b      	uxth	r3, r3
 8007e5e:	3b14      	subs	r3, #20
 8007e60:	b299      	uxth	r1, r3
 8007e62:	697b      	ldr	r3, [r7, #20]
 8007e64:	00db      	lsls	r3, r3, #3
 8007e66:	683a      	ldr	r2, [r7, #0]
 8007e68:	4413      	add	r3, r2
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	b29b      	uxth	r3, r3
 8007e6e:	330a      	adds	r3, #10
 8007e70:	b29c      	uxth	r4, r3
 8007e72:	697b      	ldr	r3, [r7, #20]
 8007e74:	00db      	lsls	r3, r3, #3
 8007e76:	683a      	ldr	r2, [r7, #0]
 8007e78:	4413      	add	r3, r2
 8007e7a:	685b      	ldr	r3, [r3, #4]
 8007e7c:	b29b      	uxth	r3, r3
 8007e7e:	3314      	adds	r3, #20
 8007e80:	b29a      	uxth	r2, r3
 8007e82:	4b1c      	ldr	r3, [pc, #112]	; (8007ef4 <check_my_plane_to_enemy_plane_collide+0x170>)
 8007e84:	881b      	ldrh	r3, [r3, #0]
 8007e86:	9300      	str	r3, [sp, #0]
 8007e88:	4613      	mov	r3, r2
 8007e8a:	4622      	mov	r2, r4
 8007e8c:	f7fe fda4 	bl	80069d8 <LCD_Fill>
					
					my_plane[0] = 120;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	2278      	movs	r2, #120	; 0x78
 8007e94:	601a      	str	r2, [r3, #0]
					my_plane[1] = 290;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	3304      	adds	r3, #4
 8007e9a:	f44f 7291 	mov.w	r2, #290	; 0x122
 8007e9e:	601a      	str	r2, [r3, #0]
					
					enemy_planes[i][0] = 0;
 8007ea0:	697b      	ldr	r3, [r7, #20]
 8007ea2:	00db      	lsls	r3, r3, #3
 8007ea4:	683a      	ldr	r2, [r7, #0]
 8007ea6:	4413      	add	r3, r2
 8007ea8:	2200      	movs	r2, #0
 8007eaa:	601a      	str	r2, [r3, #0]
					enemy_planes[i][1] = 0;
 8007eac:	697b      	ldr	r3, [r7, #20]
 8007eae:	00db      	lsls	r3, r3, #3
 8007eb0:	683a      	ldr	r2, [r7, #0]
 8007eb2:	4413      	add	r3, r2
 8007eb4:	2200      	movs	r2, #0
 8007eb6:	605a      	str	r2, [r3, #4]
					
					temp = (*score);
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	613b      	str	r3, [r7, #16]
					(*score) = temp+1;
 8007ebe:	693b      	ldr	r3, [r7, #16]
 8007ec0:	1c5a      	adds	r2, r3, #1
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	601a      	str	r2, [r3, #0]
					
					temp = (*life);
 8007ec6:	68bb      	ldr	r3, [r7, #8]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	613b      	str	r3, [r7, #16]
					(*life) = temp-1;
 8007ecc:	693b      	ldr	r3, [r7, #16]
 8007ece:	1e5a      	subs	r2, r3, #1
 8007ed0:	68bb      	ldr	r3, [r7, #8]
 8007ed2:	601a      	str	r2, [r3, #0]
					break;
 8007ed4:	e006      	b.n	8007ee4 <check_my_plane_to_enemy_plane_collide+0x160>
	for(i=0; i<10; i++){
 8007ed6:	697b      	ldr	r3, [r7, #20]
 8007ed8:	3301      	adds	r3, #1
 8007eda:	617b      	str	r3, [r7, #20]
 8007edc:	697b      	ldr	r3, [r7, #20]
 8007ede:	2b09      	cmp	r3, #9
 8007ee0:	f77f af5e 	ble.w	8007da0 <check_my_plane_to_enemy_plane_collide+0x1c>
				}
			}
		}
	}
	// 由于敌方飞机有生成间隔，所以在一帧内碰撞最多只会存在一次  敌方飞机间隔(最少为3) > 每帧运动像素(1) ？
	arrange_enemy_planes(enemy_planes);
 8007ee4:	6838      	ldr	r0, [r7, #0]
 8007ee6:	f000 fa49 	bl	800837c <arrange_enemy_planes>
}
 8007eea:	bf00      	nop
 8007eec:	371c      	adds	r7, #28
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	bd90      	pop	{r4, r7, pc}
 8007ef2:	bf00      	nop
 8007ef4:	20000014 	.word	0x20000014

08007ef8 <check_my_buttles_to_enemy_plane_collide>:

void check_my_buttles_to_enemy_plane_collide(int *score, int my_buttles[100][2], int enemy_planes[10][2]){
 8007ef8:	b590      	push	{r4, r7, lr}
 8007efa:	b08b      	sub	sp, #44	; 0x2c
 8007efc:	af02      	add	r7, sp, #8
 8007efe:	60f8      	str	r0, [r7, #12]
 8007f00:	60b9      	str	r1, [r7, #8]
 8007f02:	607a      	str	r2, [r7, #4]
	int i=0;
 8007f04:	2300      	movs	r3, #0
 8007f06:	61fb      	str	r3, [r7, #28]
	int j=0;
 8007f08:	2300      	movs	r3, #0
 8007f0a:	61bb      	str	r3, [r7, #24]
	int temp=0;
 8007f0c:	2300      	movs	r3, #0
 8007f0e:	617b      	str	r3, [r7, #20]
	
	for(i=0; i<10; i++){
 8007f10:	2300      	movs	r3, #0
 8007f12:	61fb      	str	r3, [r7, #28]
 8007f14:	e0b7      	b.n	8008086 <check_my_buttles_to_enemy_plane_collide+0x18e>
		if(enemy_planes[i][0] != 0){
 8007f16:	69fb      	ldr	r3, [r7, #28]
 8007f18:	00db      	lsls	r3, r3, #3
 8007f1a:	687a      	ldr	r2, [r7, #4]
 8007f1c:	4413      	add	r3, r2
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	f000 80ad 	beq.w	8008080 <check_my_buttles_to_enemy_plane_collide+0x188>
			for(j=0; j<100; j++){
 8007f26:	2300      	movs	r3, #0
 8007f28:	61bb      	str	r3, [r7, #24]
 8007f2a:	e0a2      	b.n	8008072 <check_my_buttles_to_enemy_plane_collide+0x17a>
				// 碰撞检测
				if(abs(my_buttles[j][0] - enemy_planes[i][0]) <= 12){
 8007f2c:	69bb      	ldr	r3, [r7, #24]
 8007f2e:	00db      	lsls	r3, r3, #3
 8007f30:	68ba      	ldr	r2, [r7, #8]
 8007f32:	4413      	add	r3, r2
 8007f34:	681a      	ldr	r2, [r3, #0]
 8007f36:	69fb      	ldr	r3, [r7, #28]
 8007f38:	00db      	lsls	r3, r3, #3
 8007f3a:	6879      	ldr	r1, [r7, #4]
 8007f3c:	440b      	add	r3, r1
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	1ad3      	subs	r3, r2, r3
 8007f42:	f113 0f0c 	cmn.w	r3, #12
 8007f46:	f2c0 8091 	blt.w	800806c <check_my_buttles_to_enemy_plane_collide+0x174>
 8007f4a:	69bb      	ldr	r3, [r7, #24]
 8007f4c:	00db      	lsls	r3, r3, #3
 8007f4e:	68ba      	ldr	r2, [r7, #8]
 8007f50:	4413      	add	r3, r2
 8007f52:	681a      	ldr	r2, [r3, #0]
 8007f54:	69fb      	ldr	r3, [r7, #28]
 8007f56:	00db      	lsls	r3, r3, #3
 8007f58:	6879      	ldr	r1, [r7, #4]
 8007f5a:	440b      	add	r3, r1
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	1ad3      	subs	r3, r2, r3
 8007f60:	2b0c      	cmp	r3, #12
 8007f62:	f300 8083 	bgt.w	800806c <check_my_buttles_to_enemy_plane_collide+0x174>
					if(abs(my_buttles[j][1] - enemy_planes[i][1]) <= 22){
 8007f66:	69bb      	ldr	r3, [r7, #24]
 8007f68:	00db      	lsls	r3, r3, #3
 8007f6a:	68ba      	ldr	r2, [r7, #8]
 8007f6c:	4413      	add	r3, r2
 8007f6e:	685a      	ldr	r2, [r3, #4]
 8007f70:	69fb      	ldr	r3, [r7, #28]
 8007f72:	00db      	lsls	r3, r3, #3
 8007f74:	6879      	ldr	r1, [r7, #4]
 8007f76:	440b      	add	r3, r1
 8007f78:	685b      	ldr	r3, [r3, #4]
 8007f7a:	1ad3      	subs	r3, r2, r3
 8007f7c:	f113 0f16 	cmn.w	r3, #22
 8007f80:	db74      	blt.n	800806c <check_my_buttles_to_enemy_plane_collide+0x174>
 8007f82:	69bb      	ldr	r3, [r7, #24]
 8007f84:	00db      	lsls	r3, r3, #3
 8007f86:	68ba      	ldr	r2, [r7, #8]
 8007f88:	4413      	add	r3, r2
 8007f8a:	685a      	ldr	r2, [r3, #4]
 8007f8c:	69fb      	ldr	r3, [r7, #28]
 8007f8e:	00db      	lsls	r3, r3, #3
 8007f90:	6879      	ldr	r1, [r7, #4]
 8007f92:	440b      	add	r3, r1
 8007f94:	685b      	ldr	r3, [r3, #4]
 8007f96:	1ad3      	subs	r3, r2, r3
 8007f98:	2b16      	cmp	r3, #22
 8007f9a:	dc67      	bgt.n	800806c <check_my_buttles_to_enemy_plane_collide+0x174>
						LCD_Fill(enemy_planes[i][0]-10,enemy_planes[i][1]-20,	enemy_planes[i][0]+10,enemy_planes[i][1]+20,BACK_COLOR);
 8007f9c:	69fb      	ldr	r3, [r7, #28]
 8007f9e:	00db      	lsls	r3, r3, #3
 8007fa0:	687a      	ldr	r2, [r7, #4]
 8007fa2:	4413      	add	r3, r2
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	b29b      	uxth	r3, r3
 8007fa8:	3b0a      	subs	r3, #10
 8007faa:	b298      	uxth	r0, r3
 8007fac:	69fb      	ldr	r3, [r7, #28]
 8007fae:	00db      	lsls	r3, r3, #3
 8007fb0:	687a      	ldr	r2, [r7, #4]
 8007fb2:	4413      	add	r3, r2
 8007fb4:	685b      	ldr	r3, [r3, #4]
 8007fb6:	b29b      	uxth	r3, r3
 8007fb8:	3b14      	subs	r3, #20
 8007fba:	b299      	uxth	r1, r3
 8007fbc:	69fb      	ldr	r3, [r7, #28]
 8007fbe:	00db      	lsls	r3, r3, #3
 8007fc0:	687a      	ldr	r2, [r7, #4]
 8007fc2:	4413      	add	r3, r2
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	b29b      	uxth	r3, r3
 8007fc8:	330a      	adds	r3, #10
 8007fca:	b29c      	uxth	r4, r3
 8007fcc:	69fb      	ldr	r3, [r7, #28]
 8007fce:	00db      	lsls	r3, r3, #3
 8007fd0:	687a      	ldr	r2, [r7, #4]
 8007fd2:	4413      	add	r3, r2
 8007fd4:	685b      	ldr	r3, [r3, #4]
 8007fd6:	b29b      	uxth	r3, r3
 8007fd8:	3314      	adds	r3, #20
 8007fda:	b29a      	uxth	r2, r3
 8007fdc:	4b2f      	ldr	r3, [pc, #188]	; (800809c <check_my_buttles_to_enemy_plane_collide+0x1a4>)
 8007fde:	881b      	ldrh	r3, [r3, #0]
 8007fe0:	9300      	str	r3, [sp, #0]
 8007fe2:	4613      	mov	r3, r2
 8007fe4:	4622      	mov	r2, r4
 8007fe6:	f7fe fcf7 	bl	80069d8 <LCD_Fill>
					
						my_buttles[j][0] = 0;
 8007fea:	69bb      	ldr	r3, [r7, #24]
 8007fec:	00db      	lsls	r3, r3, #3
 8007fee:	68ba      	ldr	r2, [r7, #8]
 8007ff0:	4413      	add	r3, r2
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	601a      	str	r2, [r3, #0]
						my_buttles[j][1] = 0;
 8007ff6:	69bb      	ldr	r3, [r7, #24]
 8007ff8:	00db      	lsls	r3, r3, #3
 8007ffa:	68ba      	ldr	r2, [r7, #8]
 8007ffc:	4413      	add	r3, r2
 8007ffe:	2200      	movs	r2, #0
 8008000:	605a      	str	r2, [r3, #4]
						
						enemy_planes[i][0] = 0;
 8008002:	69fb      	ldr	r3, [r7, #28]
 8008004:	00db      	lsls	r3, r3, #3
 8008006:	687a      	ldr	r2, [r7, #4]
 8008008:	4413      	add	r3, r2
 800800a:	2200      	movs	r2, #0
 800800c:	601a      	str	r2, [r3, #0]
						enemy_planes[i][1] = 0;
 800800e:	69fb      	ldr	r3, [r7, #28]
 8008010:	00db      	lsls	r3, r3, #3
 8008012:	687a      	ldr	r2, [r7, #4]
 8008014:	4413      	add	r3, r2
 8008016:	2200      	movs	r2, #0
 8008018:	605a      	str	r2, [r3, #4]
						
						temp = (*score);
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	617b      	str	r3, [r7, #20]
						(*score) = temp+1;
 8008020:	697b      	ldr	r3, [r7, #20]
 8008022:	1c5a      	adds	r2, r3, #1
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	601a      	str	r2, [r3, #0]

						HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_RESET);
 8008028:	2200      	movs	r2, #0
 800802a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800802e:	481c      	ldr	r0, [pc, #112]	; (80080a0 <check_my_buttles_to_enemy_plane_collide+0x1a8>)
 8008030:	f000 fce1 	bl	80089f6 <HAL_GPIO_WritePin>
						HAL_Delay(80);
 8008034:	2050      	movs	r0, #80	; 0x50
 8008036:	f000 fa57 	bl	80084e8 <HAL_Delay>
						HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_SET);
 800803a:	2201      	movs	r2, #1
 800803c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008040:	4817      	ldr	r0, [pc, #92]	; (80080a0 <check_my_buttles_to_enemy_plane_collide+0x1a8>)
 8008042:	f000 fcd8 	bl	80089f6 <HAL_GPIO_WritePin>
						HAL_Delay(80);
 8008046:	2050      	movs	r0, #80	; 0x50
 8008048:	f000 fa4e 	bl	80084e8 <HAL_Delay>
						HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_RESET);
 800804c:	2200      	movs	r2, #0
 800804e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008052:	4813      	ldr	r0, [pc, #76]	; (80080a0 <check_my_buttles_to_enemy_plane_collide+0x1a8>)
 8008054:	f000 fccf 	bl	80089f6 <HAL_GPIO_WritePin>
						HAL_Delay(80);
 8008058:	2050      	movs	r0, #80	; 0x50
 800805a:	f000 fa45 	bl	80084e8 <HAL_Delay>
						HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_SET);
 800805e:	2201      	movs	r2, #1
 8008060:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008064:	480e      	ldr	r0, [pc, #56]	; (80080a0 <check_my_buttles_to_enemy_plane_collide+0x1a8>)
 8008066:	f000 fcc6 	bl	80089f6 <HAL_GPIO_WritePin>
						break;
 800806a:	e006      	b.n	800807a <check_my_buttles_to_enemy_plane_collide+0x182>
			for(j=0; j<100; j++){
 800806c:	69bb      	ldr	r3, [r7, #24]
 800806e:	3301      	adds	r3, #1
 8008070:	61bb      	str	r3, [r7, #24]
 8008072:	69bb      	ldr	r3, [r7, #24]
 8008074:	2b63      	cmp	r3, #99	; 0x63
 8008076:	f77f af59 	ble.w	8007f2c <check_my_buttles_to_enemy_plane_collide+0x34>
					}
				}
			}
			//飞机只可能碰撞一个 ？
			arrange_enemy_planes(enemy_planes);
 800807a:	6878      	ldr	r0, [r7, #4]
 800807c:	f000 f97e 	bl	800837c <arrange_enemy_planes>
	for(i=0; i<10; i++){
 8008080:	69fb      	ldr	r3, [r7, #28]
 8008082:	3301      	adds	r3, #1
 8008084:	61fb      	str	r3, [r7, #28]
 8008086:	69fb      	ldr	r3, [r7, #28]
 8008088:	2b09      	cmp	r3, #9
 800808a:	f77f af44 	ble.w	8007f16 <check_my_buttles_to_enemy_plane_collide+0x1e>
		}
	}
	//这里因为 碰撞一次 后就退出了，所以子弹只在第一次发现碰撞时被销毁
	//即使可以有两个子弹满足碰撞条件 => 子弹高度 3 < 每帧相对运动像素(3+1)，但只碰撞第一个 ？
	arrange_my_buttles(my_buttles);
 800808e:	68b8      	ldr	r0, [r7, #8]
 8008090:	f000 f946 	bl	8008320 <arrange_my_buttles>
}
 8008094:	bf00      	nop
 8008096:	3724      	adds	r7, #36	; 0x24
 8008098:	46bd      	mov	sp, r7
 800809a:	bd90      	pop	{r4, r7, pc}
 800809c:	20000014 	.word	0x20000014
 80080a0:	40010800 	.word	0x40010800

080080a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80080a4:	b480      	push	{r7}
 80080a6:	b085      	sub	sp, #20
 80080a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80080aa:	4b15      	ldr	r3, [pc, #84]	; (8008100 <HAL_MspInit+0x5c>)
 80080ac:	699b      	ldr	r3, [r3, #24]
 80080ae:	4a14      	ldr	r2, [pc, #80]	; (8008100 <HAL_MspInit+0x5c>)
 80080b0:	f043 0301 	orr.w	r3, r3, #1
 80080b4:	6193      	str	r3, [r2, #24]
 80080b6:	4b12      	ldr	r3, [pc, #72]	; (8008100 <HAL_MspInit+0x5c>)
 80080b8:	699b      	ldr	r3, [r3, #24]
 80080ba:	f003 0301 	and.w	r3, r3, #1
 80080be:	60bb      	str	r3, [r7, #8]
 80080c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80080c2:	4b0f      	ldr	r3, [pc, #60]	; (8008100 <HAL_MspInit+0x5c>)
 80080c4:	69db      	ldr	r3, [r3, #28]
 80080c6:	4a0e      	ldr	r2, [pc, #56]	; (8008100 <HAL_MspInit+0x5c>)
 80080c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80080cc:	61d3      	str	r3, [r2, #28]
 80080ce:	4b0c      	ldr	r3, [pc, #48]	; (8008100 <HAL_MspInit+0x5c>)
 80080d0:	69db      	ldr	r3, [r3, #28]
 80080d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80080d6:	607b      	str	r3, [r7, #4]
 80080d8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80080da:	4b0a      	ldr	r3, [pc, #40]	; (8008104 <HAL_MspInit+0x60>)
 80080dc:	685b      	ldr	r3, [r3, #4]
 80080de:	60fb      	str	r3, [r7, #12]
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80080e6:	60fb      	str	r3, [r7, #12]
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80080ee:	60fb      	str	r3, [r7, #12]
 80080f0:	4a04      	ldr	r2, [pc, #16]	; (8008104 <HAL_MspInit+0x60>)
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80080f6:	bf00      	nop
 80080f8:	3714      	adds	r7, #20
 80080fa:	46bd      	mov	sp, r7
 80080fc:	bc80      	pop	{r7}
 80080fe:	4770      	bx	lr
 8008100:	40021000 	.word	0x40021000
 8008104:	40010000 	.word	0x40010000

08008108 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8008108:	b580      	push	{r7, lr}
 800810a:	b084      	sub	sp, #16
 800810c:	af00      	add	r7, sp, #0
 800810e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	4a0b      	ldr	r2, [pc, #44]	; (8008144 <HAL_RTC_MspInit+0x3c>)
 8008116:	4293      	cmp	r3, r2
 8008118:	d110      	bne.n	800813c <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 800811a:	f000 fc85 	bl	8008a28 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 800811e:	4b0a      	ldr	r3, [pc, #40]	; (8008148 <HAL_RTC_MspInit+0x40>)
 8008120:	69db      	ldr	r3, [r3, #28]
 8008122:	4a09      	ldr	r2, [pc, #36]	; (8008148 <HAL_RTC_MspInit+0x40>)
 8008124:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008128:	61d3      	str	r3, [r2, #28]
 800812a:	4b07      	ldr	r3, [pc, #28]	; (8008148 <HAL_RTC_MspInit+0x40>)
 800812c:	69db      	ldr	r3, [r3, #28]
 800812e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008132:	60fb      	str	r3, [r7, #12]
 8008134:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8008136:	4b05      	ldr	r3, [pc, #20]	; (800814c <HAL_RTC_MspInit+0x44>)
 8008138:	2201      	movs	r2, #1
 800813a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800813c:	bf00      	nop
 800813e:	3710      	adds	r7, #16
 8008140:	46bd      	mov	sp, r7
 8008142:	bd80      	pop	{r7, pc}
 8008144:	40002800 	.word	0x40002800
 8008148:	40021000 	.word	0x40021000
 800814c:	4242043c 	.word	0x4242043c

08008150 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8008150:	b580      	push	{r7, lr}
 8008152:	b088      	sub	sp, #32
 8008154:	af00      	add	r7, sp, #0
 8008156:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008158:	f107 0310 	add.w	r3, r7, #16
 800815c:	2200      	movs	r2, #0
 800815e:	601a      	str	r2, [r3, #0]
 8008160:	605a      	str	r2, [r3, #4]
 8008162:	609a      	str	r2, [r3, #8]
 8008164:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	4a1c      	ldr	r2, [pc, #112]	; (80081dc <HAL_UART_MspInit+0x8c>)
 800816c:	4293      	cmp	r3, r2
 800816e:	d131      	bne.n	80081d4 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8008170:	4b1b      	ldr	r3, [pc, #108]	; (80081e0 <HAL_UART_MspInit+0x90>)
 8008172:	699b      	ldr	r3, [r3, #24]
 8008174:	4a1a      	ldr	r2, [pc, #104]	; (80081e0 <HAL_UART_MspInit+0x90>)
 8008176:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800817a:	6193      	str	r3, [r2, #24]
 800817c:	4b18      	ldr	r3, [pc, #96]	; (80081e0 <HAL_UART_MspInit+0x90>)
 800817e:	699b      	ldr	r3, [r3, #24]
 8008180:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008184:	60fb      	str	r3, [r7, #12]
 8008186:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008188:	4b15      	ldr	r3, [pc, #84]	; (80081e0 <HAL_UART_MspInit+0x90>)
 800818a:	699b      	ldr	r3, [r3, #24]
 800818c:	4a14      	ldr	r2, [pc, #80]	; (80081e0 <HAL_UART_MspInit+0x90>)
 800818e:	f043 0304 	orr.w	r3, r3, #4
 8008192:	6193      	str	r3, [r2, #24]
 8008194:	4b12      	ldr	r3, [pc, #72]	; (80081e0 <HAL_UART_MspInit+0x90>)
 8008196:	699b      	ldr	r3, [r3, #24]
 8008198:	f003 0304 	and.w	r3, r3, #4
 800819c:	60bb      	str	r3, [r7, #8]
 800819e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80081a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80081a4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80081a6:	2302      	movs	r3, #2
 80081a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80081aa:	2303      	movs	r3, #3
 80081ac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80081ae:	f107 0310 	add.w	r3, r7, #16
 80081b2:	4619      	mov	r1, r3
 80081b4:	480b      	ldr	r0, [pc, #44]	; (80081e4 <HAL_UART_MspInit+0x94>)
 80081b6:	f000 fa9d 	bl	80086f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80081ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80081be:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80081c0:	2300      	movs	r3, #0
 80081c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80081c4:	2300      	movs	r3, #0
 80081c6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80081c8:	f107 0310 	add.w	r3, r7, #16
 80081cc:	4619      	mov	r1, r3
 80081ce:	4805      	ldr	r0, [pc, #20]	; (80081e4 <HAL_UART_MspInit+0x94>)
 80081d0:	f000 fa90 	bl	80086f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80081d4:	bf00      	nop
 80081d6:	3720      	adds	r7, #32
 80081d8:	46bd      	mov	sp, r7
 80081da:	bd80      	pop	{r7, pc}
 80081dc:	40013800 	.word	0x40013800
 80081e0:	40021000 	.word	0x40021000
 80081e4:	40010800 	.word	0x40010800

080081e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80081e8:	b480      	push	{r7}
 80081ea:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80081ec:	bf00      	nop
 80081ee:	46bd      	mov	sp, r7
 80081f0:	bc80      	pop	{r7}
 80081f2:	4770      	bx	lr

080081f4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80081f4:	b480      	push	{r7}
 80081f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80081f8:	e7fe      	b.n	80081f8 <HardFault_Handler+0x4>

080081fa <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80081fa:	b480      	push	{r7}
 80081fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80081fe:	e7fe      	b.n	80081fe <MemManage_Handler+0x4>

08008200 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008200:	b480      	push	{r7}
 8008202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008204:	e7fe      	b.n	8008204 <BusFault_Handler+0x4>

08008206 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008206:	b480      	push	{r7}
 8008208:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800820a:	e7fe      	b.n	800820a <UsageFault_Handler+0x4>

0800820c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800820c:	b480      	push	{r7}
 800820e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8008210:	bf00      	nop
 8008212:	46bd      	mov	sp, r7
 8008214:	bc80      	pop	{r7}
 8008216:	4770      	bx	lr

08008218 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008218:	b480      	push	{r7}
 800821a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800821c:	bf00      	nop
 800821e:	46bd      	mov	sp, r7
 8008220:	bc80      	pop	{r7}
 8008222:	4770      	bx	lr

08008224 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008224:	b480      	push	{r7}
 8008226:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008228:	bf00      	nop
 800822a:	46bd      	mov	sp, r7
 800822c:	bc80      	pop	{r7}
 800822e:	4770      	bx	lr

08008230 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008230:	b580      	push	{r7, lr}
 8008232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008234:	f000 f93c 	bl	80084b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008238:	bf00      	nop
 800823a:	bd80      	pop	{r7, pc}

0800823c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800823c:	b580      	push	{r7, lr}
 800823e:	b084      	sub	sp, #16
 8008240:	af00      	add	r7, sp, #0
 8008242:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8008244:	4b11      	ldr	r3, [pc, #68]	; (800828c <_sbrk+0x50>)
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	2b00      	cmp	r3, #0
 800824a:	d102      	bne.n	8008252 <_sbrk+0x16>
		heap_end = &end;
 800824c:	4b0f      	ldr	r3, [pc, #60]	; (800828c <_sbrk+0x50>)
 800824e:	4a10      	ldr	r2, [pc, #64]	; (8008290 <_sbrk+0x54>)
 8008250:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8008252:	4b0e      	ldr	r3, [pc, #56]	; (800828c <_sbrk+0x50>)
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8008258:	4b0c      	ldr	r3, [pc, #48]	; (800828c <_sbrk+0x50>)
 800825a:	681a      	ldr	r2, [r3, #0]
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	4413      	add	r3, r2
 8008260:	466a      	mov	r2, sp
 8008262:	4293      	cmp	r3, r2
 8008264:	d907      	bls.n	8008276 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8008266:	f001 febf 	bl	8009fe8 <__errno>
 800826a:	4602      	mov	r2, r0
 800826c:	230c      	movs	r3, #12
 800826e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8008270:	f04f 33ff 	mov.w	r3, #4294967295
 8008274:	e006      	b.n	8008284 <_sbrk+0x48>
	}

	heap_end += incr;
 8008276:	4b05      	ldr	r3, [pc, #20]	; (800828c <_sbrk+0x50>)
 8008278:	681a      	ldr	r2, [r3, #0]
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	4413      	add	r3, r2
 800827e:	4a03      	ldr	r2, [pc, #12]	; (800828c <_sbrk+0x50>)
 8008280:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8008282:	68fb      	ldr	r3, [r7, #12]
}
 8008284:	4618      	mov	r0, r3
 8008286:	3710      	adds	r7, #16
 8008288:	46bd      	mov	sp, r7
 800828a:	bd80      	pop	{r7, pc}
 800828c:	200000b0 	.word	0x200000b0
 8008290:	20000e28 	.word	0x20000e28

08008294 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8008294:	b480      	push	{r7}
 8008296:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8008298:	4b15      	ldr	r3, [pc, #84]	; (80082f0 <SystemInit+0x5c>)
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	4a14      	ldr	r2, [pc, #80]	; (80082f0 <SystemInit+0x5c>)
 800829e:	f043 0301 	orr.w	r3, r3, #1
 80082a2:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80082a4:	4b12      	ldr	r3, [pc, #72]	; (80082f0 <SystemInit+0x5c>)
 80082a6:	685a      	ldr	r2, [r3, #4]
 80082a8:	4911      	ldr	r1, [pc, #68]	; (80082f0 <SystemInit+0x5c>)
 80082aa:	4b12      	ldr	r3, [pc, #72]	; (80082f4 <SystemInit+0x60>)
 80082ac:	4013      	ands	r3, r2
 80082ae:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80082b0:	4b0f      	ldr	r3, [pc, #60]	; (80082f0 <SystemInit+0x5c>)
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	4a0e      	ldr	r2, [pc, #56]	; (80082f0 <SystemInit+0x5c>)
 80082b6:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80082ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80082be:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80082c0:	4b0b      	ldr	r3, [pc, #44]	; (80082f0 <SystemInit+0x5c>)
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	4a0a      	ldr	r2, [pc, #40]	; (80082f0 <SystemInit+0x5c>)
 80082c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80082ca:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80082cc:	4b08      	ldr	r3, [pc, #32]	; (80082f0 <SystemInit+0x5c>)
 80082ce:	685b      	ldr	r3, [r3, #4]
 80082d0:	4a07      	ldr	r2, [pc, #28]	; (80082f0 <SystemInit+0x5c>)
 80082d2:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80082d6:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80082d8:	4b05      	ldr	r3, [pc, #20]	; (80082f0 <SystemInit+0x5c>)
 80082da:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80082de:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80082e0:	4b05      	ldr	r3, [pc, #20]	; (80082f8 <SystemInit+0x64>)
 80082e2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80082e6:	609a      	str	r2, [r3, #8]
#endif 
}
 80082e8:	bf00      	nop
 80082ea:	46bd      	mov	sp, r7
 80082ec:	bc80      	pop	{r7}
 80082ee:	4770      	bx	lr
 80082f0:	40021000 	.word	0x40021000
 80082f4:	f8ff0000 	.word	0xf8ff0000
 80082f8:	e000ed00 	.word	0xe000ed00

080082fc <KEY0_or_POWER_to_skip>:
#include "util.h"

#define KEY0_Pin GPIO_PIN_5
#define KEY0_GPIO_Port GPIOC

void KEY0_or_POWER_to_skip(void){
 80082fc:	b580      	push	{r7, lr}
 80082fe:	af00      	add	r7, sp, #0
	while(1){
		if(HAL_GPIO_ReadPin(KEY0_GPIO_Port, KEY0_Pin) == GPIO_PIN_RESET){break;}
 8008300:	2120      	movs	r1, #32
 8008302:	4806      	ldr	r0, [pc, #24]	; (800831c <KEY0_or_POWER_to_skip+0x20>)
 8008304:	f000 fb60 	bl	80089c8 <HAL_GPIO_ReadPin>
 8008308:	4603      	mov	r3, r0
 800830a:	2b00      	cmp	r3, #0
 800830c:	d003      	beq.n	8008316 <KEY0_or_POWER_to_skip+0x1a>
		else{HAL_Delay(10);}
 800830e:	200a      	movs	r0, #10
 8008310:	f000 f8ea 	bl	80084e8 <HAL_Delay>
		if(HAL_GPIO_ReadPin(KEY0_GPIO_Port, KEY0_Pin) == GPIO_PIN_RESET){break;}
 8008314:	e7f4      	b.n	8008300 <KEY0_or_POWER_to_skip+0x4>
 8008316:	bf00      	nop
	}
}
 8008318:	bf00      	nop
 800831a:	bd80      	pop	{r7, pc}
 800831c:	40011000 	.word	0x40011000

08008320 <arrange_my_buttles>:

// 数组前移
void arrange_my_buttles(int my_buttles[100][2]){
 8008320:	b480      	push	{r7}
 8008322:	b085      	sub	sp, #20
 8008324:	af00      	add	r7, sp, #0
 8008326:	6078      	str	r0, [r7, #4]
	int i=0;
 8008328:	2300      	movs	r3, #0
 800832a:	60fb      	str	r3, [r7, #12]
	if(my_buttles[0][0] == 0){
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	2b00      	cmp	r3, #0
 8008332:	d11e      	bne.n	8008372 <arrange_my_buttles+0x52>
		for(i=0; i<99; i++){
 8008334:	2300      	movs	r3, #0
 8008336:	60fb      	str	r3, [r7, #12]
 8008338:	e018      	b.n	800836c <arrange_my_buttles+0x4c>
			my_buttles[i][0] = my_buttles[i+1][0];
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	3301      	adds	r3, #1
 800833e:	00db      	lsls	r3, r3, #3
 8008340:	687a      	ldr	r2, [r7, #4]
 8008342:	441a      	add	r2, r3
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	00db      	lsls	r3, r3, #3
 8008348:	6879      	ldr	r1, [r7, #4]
 800834a:	440b      	add	r3, r1
 800834c:	6812      	ldr	r2, [r2, #0]
 800834e:	601a      	str	r2, [r3, #0]
			my_buttles[i][1] = my_buttles[i+1][1];
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	3301      	adds	r3, #1
 8008354:	00db      	lsls	r3, r3, #3
 8008356:	687a      	ldr	r2, [r7, #4]
 8008358:	441a      	add	r2, r3
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	00db      	lsls	r3, r3, #3
 800835e:	6879      	ldr	r1, [r7, #4]
 8008360:	440b      	add	r3, r1
 8008362:	6852      	ldr	r2, [r2, #4]
 8008364:	605a      	str	r2, [r3, #4]
		for(i=0; i<99; i++){
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	3301      	adds	r3, #1
 800836a:	60fb      	str	r3, [r7, #12]
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	2b62      	cmp	r3, #98	; 0x62
 8008370:	dde3      	ble.n	800833a <arrange_my_buttles+0x1a>
		}
	}
}
 8008372:	bf00      	nop
 8008374:	3714      	adds	r7, #20
 8008376:	46bd      	mov	sp, r7
 8008378:	bc80      	pop	{r7}
 800837a:	4770      	bx	lr

0800837c <arrange_enemy_planes>:

// 数组前移
void arrange_enemy_planes(int enemy_planes[10][2]){
 800837c:	b480      	push	{r7}
 800837e:	b085      	sub	sp, #20
 8008380:	af00      	add	r7, sp, #0
 8008382:	6078      	str	r0, [r7, #4]
	int i=0;
 8008384:	2300      	movs	r3, #0
 8008386:	60fb      	str	r3, [r7, #12]
	if(enemy_planes[0][0] == 0){
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	2b00      	cmp	r3, #0
 800838e:	d11e      	bne.n	80083ce <arrange_enemy_planes+0x52>
		for(i=0; i<9; i++){
 8008390:	2300      	movs	r3, #0
 8008392:	60fb      	str	r3, [r7, #12]
 8008394:	e018      	b.n	80083c8 <arrange_enemy_planes+0x4c>
			enemy_planes[i][0] = enemy_planes[i+1][0];
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	3301      	adds	r3, #1
 800839a:	00db      	lsls	r3, r3, #3
 800839c:	687a      	ldr	r2, [r7, #4]
 800839e:	441a      	add	r2, r3
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	00db      	lsls	r3, r3, #3
 80083a4:	6879      	ldr	r1, [r7, #4]
 80083a6:	440b      	add	r3, r1
 80083a8:	6812      	ldr	r2, [r2, #0]
 80083aa:	601a      	str	r2, [r3, #0]
			enemy_planes[i][1] = enemy_planes[i+1][1];
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	3301      	adds	r3, #1
 80083b0:	00db      	lsls	r3, r3, #3
 80083b2:	687a      	ldr	r2, [r7, #4]
 80083b4:	441a      	add	r2, r3
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	00db      	lsls	r3, r3, #3
 80083ba:	6879      	ldr	r1, [r7, #4]
 80083bc:	440b      	add	r3, r1
 80083be:	6852      	ldr	r2, [r2, #4]
 80083c0:	605a      	str	r2, [r3, #4]
		for(i=0; i<9; i++){
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	3301      	adds	r3, #1
 80083c6:	60fb      	str	r3, [r7, #12]
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	2b08      	cmp	r3, #8
 80083cc:	dde3      	ble.n	8008396 <arrange_enemy_planes+0x1a>
		}
	}
}
 80083ce:	bf00      	nop
 80083d0:	3714      	adds	r7, #20
 80083d2:	46bd      	mov	sp, r7
 80083d4:	bc80      	pop	{r7}
 80083d6:	4770      	bx	lr

080083d8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80083d8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80083da:	e003      	b.n	80083e4 <LoopCopyDataInit>

080083dc <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80083dc:	4b0b      	ldr	r3, [pc, #44]	; (800840c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80083de:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80083e0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80083e2:	3104      	adds	r1, #4

080083e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80083e4:	480a      	ldr	r0, [pc, #40]	; (8008410 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80083e6:	4b0b      	ldr	r3, [pc, #44]	; (8008414 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80083e8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80083ea:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80083ec:	d3f6      	bcc.n	80083dc <CopyDataInit>
  ldr r2, =_sbss
 80083ee:	4a0a      	ldr	r2, [pc, #40]	; (8008418 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80083f0:	e002      	b.n	80083f8 <LoopFillZerobss>

080083f2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80083f2:	2300      	movs	r3, #0
  str r3, [r2], #4
 80083f4:	f842 3b04 	str.w	r3, [r2], #4

080083f8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80083f8:	4b08      	ldr	r3, [pc, #32]	; (800841c <LoopFillZerobss+0x24>)
  cmp r2, r3
 80083fa:	429a      	cmp	r2, r3
  bcc FillZerobss
 80083fc:	d3f9      	bcc.n	80083f2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80083fe:	f7ff ff49 	bl	8008294 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8008402:	f001 fdf7 	bl	8009ff4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8008406:	f7fe fe45 	bl	8007094 <main>
  bx lr
 800840a:	4770      	bx	lr
  ldr r3, =_sidata
 800840c:	0800c1bc 	.word	0x0800c1bc
  ldr r0, =_sdata
 8008410:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8008414:	20000090 	.word	0x20000090
  ldr r2, =_sbss
 8008418:	20000090 	.word	0x20000090
  ldr r3, = _ebss
 800841c:	20000e28 	.word	0x20000e28

08008420 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8008420:	e7fe      	b.n	8008420 <ADC1_2_IRQHandler>
	...

08008424 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008424:	b580      	push	{r7, lr}
 8008426:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008428:	4b08      	ldr	r3, [pc, #32]	; (800844c <HAL_Init+0x28>)
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	4a07      	ldr	r2, [pc, #28]	; (800844c <HAL_Init+0x28>)
 800842e:	f043 0310 	orr.w	r3, r3, #16
 8008432:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008434:	2003      	movs	r0, #3
 8008436:	f000 f929 	bl	800868c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800843a:	2000      	movs	r0, #0
 800843c:	f000 f808 	bl	8008450 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8008440:	f7ff fe30 	bl	80080a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8008444:	2300      	movs	r3, #0
}
 8008446:	4618      	mov	r0, r3
 8008448:	bd80      	pop	{r7, pc}
 800844a:	bf00      	nop
 800844c:	40022000 	.word	0x40022000

08008450 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008450:	b580      	push	{r7, lr}
 8008452:	b082      	sub	sp, #8
 8008454:	af00      	add	r7, sp, #0
 8008456:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8008458:	4b12      	ldr	r3, [pc, #72]	; (80084a4 <HAL_InitTick+0x54>)
 800845a:	681a      	ldr	r2, [r3, #0]
 800845c:	4b12      	ldr	r3, [pc, #72]	; (80084a8 <HAL_InitTick+0x58>)
 800845e:	781b      	ldrb	r3, [r3, #0]
 8008460:	4619      	mov	r1, r3
 8008462:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008466:	fbb3 f3f1 	udiv	r3, r3, r1
 800846a:	fbb2 f3f3 	udiv	r3, r2, r3
 800846e:	4618      	mov	r0, r3
 8008470:	f000 f933 	bl	80086da <HAL_SYSTICK_Config>
 8008474:	4603      	mov	r3, r0
 8008476:	2b00      	cmp	r3, #0
 8008478:	d001      	beq.n	800847e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800847a:	2301      	movs	r3, #1
 800847c:	e00e      	b.n	800849c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	2b0f      	cmp	r3, #15
 8008482:	d80a      	bhi.n	800849a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008484:	2200      	movs	r2, #0
 8008486:	6879      	ldr	r1, [r7, #4]
 8008488:	f04f 30ff 	mov.w	r0, #4294967295
 800848c:	f000 f909 	bl	80086a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8008490:	4a06      	ldr	r2, [pc, #24]	; (80084ac <HAL_InitTick+0x5c>)
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8008496:	2300      	movs	r3, #0
 8008498:	e000      	b.n	800849c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800849a:	2301      	movs	r3, #1
}
 800849c:	4618      	mov	r0, r3
 800849e:	3708      	adds	r7, #8
 80084a0:	46bd      	mov	sp, r7
 80084a2:	bd80      	pop	{r7, pc}
 80084a4:	20000020 	.word	0x20000020
 80084a8:	20000028 	.word	0x20000028
 80084ac:	20000024 	.word	0x20000024

080084b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80084b0:	b480      	push	{r7}
 80084b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80084b4:	4b05      	ldr	r3, [pc, #20]	; (80084cc <HAL_IncTick+0x1c>)
 80084b6:	781b      	ldrb	r3, [r3, #0]
 80084b8:	461a      	mov	r2, r3
 80084ba:	4b05      	ldr	r3, [pc, #20]	; (80084d0 <HAL_IncTick+0x20>)
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	4413      	add	r3, r2
 80084c0:	4a03      	ldr	r2, [pc, #12]	; (80084d0 <HAL_IncTick+0x20>)
 80084c2:	6013      	str	r3, [r2, #0]
}
 80084c4:	bf00      	nop
 80084c6:	46bd      	mov	sp, r7
 80084c8:	bc80      	pop	{r7}
 80084ca:	4770      	bx	lr
 80084cc:	20000028 	.word	0x20000028
 80084d0:	20000e20 	.word	0x20000e20

080084d4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80084d4:	b480      	push	{r7}
 80084d6:	af00      	add	r7, sp, #0
  return uwTick;
 80084d8:	4b02      	ldr	r3, [pc, #8]	; (80084e4 <HAL_GetTick+0x10>)
 80084da:	681b      	ldr	r3, [r3, #0]
}
 80084dc:	4618      	mov	r0, r3
 80084de:	46bd      	mov	sp, r7
 80084e0:	bc80      	pop	{r7}
 80084e2:	4770      	bx	lr
 80084e4:	20000e20 	.word	0x20000e20

080084e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80084e8:	b580      	push	{r7, lr}
 80084ea:	b084      	sub	sp, #16
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80084f0:	f7ff fff0 	bl	80084d4 <HAL_GetTick>
 80084f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008500:	d005      	beq.n	800850e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8008502:	4b09      	ldr	r3, [pc, #36]	; (8008528 <HAL_Delay+0x40>)
 8008504:	781b      	ldrb	r3, [r3, #0]
 8008506:	461a      	mov	r2, r3
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	4413      	add	r3, r2
 800850c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800850e:	bf00      	nop
 8008510:	f7ff ffe0 	bl	80084d4 <HAL_GetTick>
 8008514:	4602      	mov	r2, r0
 8008516:	68bb      	ldr	r3, [r7, #8]
 8008518:	1ad3      	subs	r3, r2, r3
 800851a:	68fa      	ldr	r2, [r7, #12]
 800851c:	429a      	cmp	r2, r3
 800851e:	d8f7      	bhi.n	8008510 <HAL_Delay+0x28>
  {
  }
}
 8008520:	bf00      	nop
 8008522:	3710      	adds	r7, #16
 8008524:	46bd      	mov	sp, r7
 8008526:	bd80      	pop	{r7, pc}
 8008528:	20000028 	.word	0x20000028

0800852c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800852c:	b480      	push	{r7}
 800852e:	b085      	sub	sp, #20
 8008530:	af00      	add	r7, sp, #0
 8008532:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	f003 0307 	and.w	r3, r3, #7
 800853a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800853c:	4b0c      	ldr	r3, [pc, #48]	; (8008570 <__NVIC_SetPriorityGrouping+0x44>)
 800853e:	68db      	ldr	r3, [r3, #12]
 8008540:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008542:	68ba      	ldr	r2, [r7, #8]
 8008544:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008548:	4013      	ands	r3, r2
 800854a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008550:	68bb      	ldr	r3, [r7, #8]
 8008552:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008554:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8008558:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800855c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800855e:	4a04      	ldr	r2, [pc, #16]	; (8008570 <__NVIC_SetPriorityGrouping+0x44>)
 8008560:	68bb      	ldr	r3, [r7, #8]
 8008562:	60d3      	str	r3, [r2, #12]
}
 8008564:	bf00      	nop
 8008566:	3714      	adds	r7, #20
 8008568:	46bd      	mov	sp, r7
 800856a:	bc80      	pop	{r7}
 800856c:	4770      	bx	lr
 800856e:	bf00      	nop
 8008570:	e000ed00 	.word	0xe000ed00

08008574 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8008574:	b480      	push	{r7}
 8008576:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008578:	4b04      	ldr	r3, [pc, #16]	; (800858c <__NVIC_GetPriorityGrouping+0x18>)
 800857a:	68db      	ldr	r3, [r3, #12]
 800857c:	0a1b      	lsrs	r3, r3, #8
 800857e:	f003 0307 	and.w	r3, r3, #7
}
 8008582:	4618      	mov	r0, r3
 8008584:	46bd      	mov	sp, r7
 8008586:	bc80      	pop	{r7}
 8008588:	4770      	bx	lr
 800858a:	bf00      	nop
 800858c:	e000ed00 	.word	0xe000ed00

08008590 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008590:	b480      	push	{r7}
 8008592:	b083      	sub	sp, #12
 8008594:	af00      	add	r7, sp, #0
 8008596:	4603      	mov	r3, r0
 8008598:	6039      	str	r1, [r7, #0]
 800859a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800859c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	db0a      	blt.n	80085ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80085a4:	683b      	ldr	r3, [r7, #0]
 80085a6:	b2da      	uxtb	r2, r3
 80085a8:	490c      	ldr	r1, [pc, #48]	; (80085dc <__NVIC_SetPriority+0x4c>)
 80085aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80085ae:	0112      	lsls	r2, r2, #4
 80085b0:	b2d2      	uxtb	r2, r2
 80085b2:	440b      	add	r3, r1
 80085b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80085b8:	e00a      	b.n	80085d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80085ba:	683b      	ldr	r3, [r7, #0]
 80085bc:	b2da      	uxtb	r2, r3
 80085be:	4908      	ldr	r1, [pc, #32]	; (80085e0 <__NVIC_SetPriority+0x50>)
 80085c0:	79fb      	ldrb	r3, [r7, #7]
 80085c2:	f003 030f 	and.w	r3, r3, #15
 80085c6:	3b04      	subs	r3, #4
 80085c8:	0112      	lsls	r2, r2, #4
 80085ca:	b2d2      	uxtb	r2, r2
 80085cc:	440b      	add	r3, r1
 80085ce:	761a      	strb	r2, [r3, #24]
}
 80085d0:	bf00      	nop
 80085d2:	370c      	adds	r7, #12
 80085d4:	46bd      	mov	sp, r7
 80085d6:	bc80      	pop	{r7}
 80085d8:	4770      	bx	lr
 80085da:	bf00      	nop
 80085dc:	e000e100 	.word	0xe000e100
 80085e0:	e000ed00 	.word	0xe000ed00

080085e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80085e4:	b480      	push	{r7}
 80085e6:	b089      	sub	sp, #36	; 0x24
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	60f8      	str	r0, [r7, #12]
 80085ec:	60b9      	str	r1, [r7, #8]
 80085ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	f003 0307 	and.w	r3, r3, #7
 80085f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80085f8:	69fb      	ldr	r3, [r7, #28]
 80085fa:	f1c3 0307 	rsb	r3, r3, #7
 80085fe:	2b04      	cmp	r3, #4
 8008600:	bf28      	it	cs
 8008602:	2304      	movcs	r3, #4
 8008604:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008606:	69fb      	ldr	r3, [r7, #28]
 8008608:	3304      	adds	r3, #4
 800860a:	2b06      	cmp	r3, #6
 800860c:	d902      	bls.n	8008614 <NVIC_EncodePriority+0x30>
 800860e:	69fb      	ldr	r3, [r7, #28]
 8008610:	3b03      	subs	r3, #3
 8008612:	e000      	b.n	8008616 <NVIC_EncodePriority+0x32>
 8008614:	2300      	movs	r3, #0
 8008616:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008618:	f04f 32ff 	mov.w	r2, #4294967295
 800861c:	69bb      	ldr	r3, [r7, #24]
 800861e:	fa02 f303 	lsl.w	r3, r2, r3
 8008622:	43da      	mvns	r2, r3
 8008624:	68bb      	ldr	r3, [r7, #8]
 8008626:	401a      	ands	r2, r3
 8008628:	697b      	ldr	r3, [r7, #20]
 800862a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800862c:	f04f 31ff 	mov.w	r1, #4294967295
 8008630:	697b      	ldr	r3, [r7, #20]
 8008632:	fa01 f303 	lsl.w	r3, r1, r3
 8008636:	43d9      	mvns	r1, r3
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800863c:	4313      	orrs	r3, r2
         );
}
 800863e:	4618      	mov	r0, r3
 8008640:	3724      	adds	r7, #36	; 0x24
 8008642:	46bd      	mov	sp, r7
 8008644:	bc80      	pop	{r7}
 8008646:	4770      	bx	lr

08008648 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008648:	b580      	push	{r7, lr}
 800864a:	b082      	sub	sp, #8
 800864c:	af00      	add	r7, sp, #0
 800864e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	3b01      	subs	r3, #1
 8008654:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008658:	d301      	bcc.n	800865e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800865a:	2301      	movs	r3, #1
 800865c:	e00f      	b.n	800867e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800865e:	4a0a      	ldr	r2, [pc, #40]	; (8008688 <SysTick_Config+0x40>)
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	3b01      	subs	r3, #1
 8008664:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008666:	210f      	movs	r1, #15
 8008668:	f04f 30ff 	mov.w	r0, #4294967295
 800866c:	f7ff ff90 	bl	8008590 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008670:	4b05      	ldr	r3, [pc, #20]	; (8008688 <SysTick_Config+0x40>)
 8008672:	2200      	movs	r2, #0
 8008674:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008676:	4b04      	ldr	r3, [pc, #16]	; (8008688 <SysTick_Config+0x40>)
 8008678:	2207      	movs	r2, #7
 800867a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800867c:	2300      	movs	r3, #0
}
 800867e:	4618      	mov	r0, r3
 8008680:	3708      	adds	r7, #8
 8008682:	46bd      	mov	sp, r7
 8008684:	bd80      	pop	{r7, pc}
 8008686:	bf00      	nop
 8008688:	e000e010 	.word	0xe000e010

0800868c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800868c:	b580      	push	{r7, lr}
 800868e:	b082      	sub	sp, #8
 8008690:	af00      	add	r7, sp, #0
 8008692:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008694:	6878      	ldr	r0, [r7, #4]
 8008696:	f7ff ff49 	bl	800852c <__NVIC_SetPriorityGrouping>
}
 800869a:	bf00      	nop
 800869c:	3708      	adds	r7, #8
 800869e:	46bd      	mov	sp, r7
 80086a0:	bd80      	pop	{r7, pc}

080086a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80086a2:	b580      	push	{r7, lr}
 80086a4:	b086      	sub	sp, #24
 80086a6:	af00      	add	r7, sp, #0
 80086a8:	4603      	mov	r3, r0
 80086aa:	60b9      	str	r1, [r7, #8]
 80086ac:	607a      	str	r2, [r7, #4]
 80086ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80086b0:	2300      	movs	r3, #0
 80086b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80086b4:	f7ff ff5e 	bl	8008574 <__NVIC_GetPriorityGrouping>
 80086b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80086ba:	687a      	ldr	r2, [r7, #4]
 80086bc:	68b9      	ldr	r1, [r7, #8]
 80086be:	6978      	ldr	r0, [r7, #20]
 80086c0:	f7ff ff90 	bl	80085e4 <NVIC_EncodePriority>
 80086c4:	4602      	mov	r2, r0
 80086c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80086ca:	4611      	mov	r1, r2
 80086cc:	4618      	mov	r0, r3
 80086ce:	f7ff ff5f 	bl	8008590 <__NVIC_SetPriority>
}
 80086d2:	bf00      	nop
 80086d4:	3718      	adds	r7, #24
 80086d6:	46bd      	mov	sp, r7
 80086d8:	bd80      	pop	{r7, pc}

080086da <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80086da:	b580      	push	{r7, lr}
 80086dc:	b082      	sub	sp, #8
 80086de:	af00      	add	r7, sp, #0
 80086e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80086e2:	6878      	ldr	r0, [r7, #4]
 80086e4:	f7ff ffb0 	bl	8008648 <SysTick_Config>
 80086e8:	4603      	mov	r3, r0
}
 80086ea:	4618      	mov	r0, r3
 80086ec:	3708      	adds	r7, #8
 80086ee:	46bd      	mov	sp, r7
 80086f0:	bd80      	pop	{r7, pc}
	...

080086f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80086f4:	b480      	push	{r7}
 80086f6:	b08b      	sub	sp, #44	; 0x2c
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	6078      	str	r0, [r7, #4]
 80086fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80086fe:	2300      	movs	r3, #0
 8008700:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8008702:	2300      	movs	r3, #0
 8008704:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008706:	e133      	b.n	8008970 <HAL_GPIO_Init+0x27c>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8008708:	2201      	movs	r2, #1
 800870a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800870c:	fa02 f303 	lsl.w	r3, r2, r3
 8008710:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008712:	683b      	ldr	r3, [r7, #0]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	69fa      	ldr	r2, [r7, #28]
 8008718:	4013      	ands	r3, r2
 800871a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800871c:	69ba      	ldr	r2, [r7, #24]
 800871e:	69fb      	ldr	r3, [r7, #28]
 8008720:	429a      	cmp	r2, r3
 8008722:	f040 8122 	bne.w	800896a <HAL_GPIO_Init+0x276>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8008726:	683b      	ldr	r3, [r7, #0]
 8008728:	685b      	ldr	r3, [r3, #4]
 800872a:	2b12      	cmp	r3, #18
 800872c:	d034      	beq.n	8008798 <HAL_GPIO_Init+0xa4>
 800872e:	2b12      	cmp	r3, #18
 8008730:	d80d      	bhi.n	800874e <HAL_GPIO_Init+0x5a>
 8008732:	2b02      	cmp	r3, #2
 8008734:	d02b      	beq.n	800878e <HAL_GPIO_Init+0x9a>
 8008736:	2b02      	cmp	r3, #2
 8008738:	d804      	bhi.n	8008744 <HAL_GPIO_Init+0x50>
 800873a:	2b00      	cmp	r3, #0
 800873c:	d031      	beq.n	80087a2 <HAL_GPIO_Init+0xae>
 800873e:	2b01      	cmp	r3, #1
 8008740:	d01c      	beq.n	800877c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8008742:	e048      	b.n	80087d6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8008744:	2b03      	cmp	r3, #3
 8008746:	d043      	beq.n	80087d0 <HAL_GPIO_Init+0xdc>
 8008748:	2b11      	cmp	r3, #17
 800874a:	d01b      	beq.n	8008784 <HAL_GPIO_Init+0x90>
          break;
 800874c:	e043      	b.n	80087d6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800874e:	4a8f      	ldr	r2, [pc, #572]	; (800898c <HAL_GPIO_Init+0x298>)
 8008750:	4293      	cmp	r3, r2
 8008752:	d026      	beq.n	80087a2 <HAL_GPIO_Init+0xae>
 8008754:	4a8d      	ldr	r2, [pc, #564]	; (800898c <HAL_GPIO_Init+0x298>)
 8008756:	4293      	cmp	r3, r2
 8008758:	d806      	bhi.n	8008768 <HAL_GPIO_Init+0x74>
 800875a:	4a8d      	ldr	r2, [pc, #564]	; (8008990 <HAL_GPIO_Init+0x29c>)
 800875c:	4293      	cmp	r3, r2
 800875e:	d020      	beq.n	80087a2 <HAL_GPIO_Init+0xae>
 8008760:	4a8c      	ldr	r2, [pc, #560]	; (8008994 <HAL_GPIO_Init+0x2a0>)
 8008762:	4293      	cmp	r3, r2
 8008764:	d01d      	beq.n	80087a2 <HAL_GPIO_Init+0xae>
          break;
 8008766:	e036      	b.n	80087d6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8008768:	4a8b      	ldr	r2, [pc, #556]	; (8008998 <HAL_GPIO_Init+0x2a4>)
 800876a:	4293      	cmp	r3, r2
 800876c:	d019      	beq.n	80087a2 <HAL_GPIO_Init+0xae>
 800876e:	4a8b      	ldr	r2, [pc, #556]	; (800899c <HAL_GPIO_Init+0x2a8>)
 8008770:	4293      	cmp	r3, r2
 8008772:	d016      	beq.n	80087a2 <HAL_GPIO_Init+0xae>
 8008774:	4a8a      	ldr	r2, [pc, #552]	; (80089a0 <HAL_GPIO_Init+0x2ac>)
 8008776:	4293      	cmp	r3, r2
 8008778:	d013      	beq.n	80087a2 <HAL_GPIO_Init+0xae>
          break;
 800877a:	e02c      	b.n	80087d6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800877c:	683b      	ldr	r3, [r7, #0]
 800877e:	68db      	ldr	r3, [r3, #12]
 8008780:	623b      	str	r3, [r7, #32]
          break;
 8008782:	e028      	b.n	80087d6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8008784:	683b      	ldr	r3, [r7, #0]
 8008786:	68db      	ldr	r3, [r3, #12]
 8008788:	3304      	adds	r3, #4
 800878a:	623b      	str	r3, [r7, #32]
          break;
 800878c:	e023      	b.n	80087d6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800878e:	683b      	ldr	r3, [r7, #0]
 8008790:	68db      	ldr	r3, [r3, #12]
 8008792:	3308      	adds	r3, #8
 8008794:	623b      	str	r3, [r7, #32]
          break;
 8008796:	e01e      	b.n	80087d6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8008798:	683b      	ldr	r3, [r7, #0]
 800879a:	68db      	ldr	r3, [r3, #12]
 800879c:	330c      	adds	r3, #12
 800879e:	623b      	str	r3, [r7, #32]
          break;
 80087a0:	e019      	b.n	80087d6 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80087a2:	683b      	ldr	r3, [r7, #0]
 80087a4:	689b      	ldr	r3, [r3, #8]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d102      	bne.n	80087b0 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80087aa:	2304      	movs	r3, #4
 80087ac:	623b      	str	r3, [r7, #32]
          break;
 80087ae:	e012      	b.n	80087d6 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80087b0:	683b      	ldr	r3, [r7, #0]
 80087b2:	689b      	ldr	r3, [r3, #8]
 80087b4:	2b01      	cmp	r3, #1
 80087b6:	d105      	bne.n	80087c4 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80087b8:	2308      	movs	r3, #8
 80087ba:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	69fa      	ldr	r2, [r7, #28]
 80087c0:	611a      	str	r2, [r3, #16]
          break;
 80087c2:	e008      	b.n	80087d6 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80087c4:	2308      	movs	r3, #8
 80087c6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	69fa      	ldr	r2, [r7, #28]
 80087cc:	615a      	str	r2, [r3, #20]
          break;
 80087ce:	e002      	b.n	80087d6 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80087d0:	2300      	movs	r3, #0
 80087d2:	623b      	str	r3, [r7, #32]
          break;
 80087d4:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80087d6:	69bb      	ldr	r3, [r7, #24]
 80087d8:	2bff      	cmp	r3, #255	; 0xff
 80087da:	d801      	bhi.n	80087e0 <HAL_GPIO_Init+0xec>
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	e001      	b.n	80087e4 <HAL_GPIO_Init+0xf0>
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	3304      	adds	r3, #4
 80087e4:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80087e6:	69bb      	ldr	r3, [r7, #24]
 80087e8:	2bff      	cmp	r3, #255	; 0xff
 80087ea:	d802      	bhi.n	80087f2 <HAL_GPIO_Init+0xfe>
 80087ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087ee:	009b      	lsls	r3, r3, #2
 80087f0:	e002      	b.n	80087f8 <HAL_GPIO_Init+0x104>
 80087f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087f4:	3b08      	subs	r3, #8
 80087f6:	009b      	lsls	r3, r3, #2
 80087f8:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80087fa:	697b      	ldr	r3, [r7, #20]
 80087fc:	681a      	ldr	r2, [r3, #0]
 80087fe:	210f      	movs	r1, #15
 8008800:	693b      	ldr	r3, [r7, #16]
 8008802:	fa01 f303 	lsl.w	r3, r1, r3
 8008806:	43db      	mvns	r3, r3
 8008808:	401a      	ands	r2, r3
 800880a:	6a39      	ldr	r1, [r7, #32]
 800880c:	693b      	ldr	r3, [r7, #16]
 800880e:	fa01 f303 	lsl.w	r3, r1, r3
 8008812:	431a      	orrs	r2, r3
 8008814:	697b      	ldr	r3, [r7, #20]
 8008816:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8008818:	683b      	ldr	r3, [r7, #0]
 800881a:	685b      	ldr	r3, [r3, #4]
 800881c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008820:	2b00      	cmp	r3, #0
 8008822:	f000 80a2 	beq.w	800896a <HAL_GPIO_Init+0x276>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8008826:	4b5f      	ldr	r3, [pc, #380]	; (80089a4 <HAL_GPIO_Init+0x2b0>)
 8008828:	699b      	ldr	r3, [r3, #24]
 800882a:	4a5e      	ldr	r2, [pc, #376]	; (80089a4 <HAL_GPIO_Init+0x2b0>)
 800882c:	f043 0301 	orr.w	r3, r3, #1
 8008830:	6193      	str	r3, [r2, #24]
 8008832:	4b5c      	ldr	r3, [pc, #368]	; (80089a4 <HAL_GPIO_Init+0x2b0>)
 8008834:	699b      	ldr	r3, [r3, #24]
 8008836:	f003 0301 	and.w	r3, r3, #1
 800883a:	60bb      	str	r3, [r7, #8]
 800883c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800883e:	4a5a      	ldr	r2, [pc, #360]	; (80089a8 <HAL_GPIO_Init+0x2b4>)
 8008840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008842:	089b      	lsrs	r3, r3, #2
 8008844:	3302      	adds	r3, #2
 8008846:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800884a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800884c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800884e:	f003 0303 	and.w	r3, r3, #3
 8008852:	009b      	lsls	r3, r3, #2
 8008854:	220f      	movs	r2, #15
 8008856:	fa02 f303 	lsl.w	r3, r2, r3
 800885a:	43db      	mvns	r3, r3
 800885c:	68fa      	ldr	r2, [r7, #12]
 800885e:	4013      	ands	r3, r2
 8008860:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	4a51      	ldr	r2, [pc, #324]	; (80089ac <HAL_GPIO_Init+0x2b8>)
 8008866:	4293      	cmp	r3, r2
 8008868:	d01f      	beq.n	80088aa <HAL_GPIO_Init+0x1b6>
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	4a50      	ldr	r2, [pc, #320]	; (80089b0 <HAL_GPIO_Init+0x2bc>)
 800886e:	4293      	cmp	r3, r2
 8008870:	d019      	beq.n	80088a6 <HAL_GPIO_Init+0x1b2>
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	4a4f      	ldr	r2, [pc, #316]	; (80089b4 <HAL_GPIO_Init+0x2c0>)
 8008876:	4293      	cmp	r3, r2
 8008878:	d013      	beq.n	80088a2 <HAL_GPIO_Init+0x1ae>
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	4a4e      	ldr	r2, [pc, #312]	; (80089b8 <HAL_GPIO_Init+0x2c4>)
 800887e:	4293      	cmp	r3, r2
 8008880:	d00d      	beq.n	800889e <HAL_GPIO_Init+0x1aa>
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	4a4d      	ldr	r2, [pc, #308]	; (80089bc <HAL_GPIO_Init+0x2c8>)
 8008886:	4293      	cmp	r3, r2
 8008888:	d007      	beq.n	800889a <HAL_GPIO_Init+0x1a6>
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	4a4c      	ldr	r2, [pc, #304]	; (80089c0 <HAL_GPIO_Init+0x2cc>)
 800888e:	4293      	cmp	r3, r2
 8008890:	d101      	bne.n	8008896 <HAL_GPIO_Init+0x1a2>
 8008892:	2305      	movs	r3, #5
 8008894:	e00a      	b.n	80088ac <HAL_GPIO_Init+0x1b8>
 8008896:	2306      	movs	r3, #6
 8008898:	e008      	b.n	80088ac <HAL_GPIO_Init+0x1b8>
 800889a:	2304      	movs	r3, #4
 800889c:	e006      	b.n	80088ac <HAL_GPIO_Init+0x1b8>
 800889e:	2303      	movs	r3, #3
 80088a0:	e004      	b.n	80088ac <HAL_GPIO_Init+0x1b8>
 80088a2:	2302      	movs	r3, #2
 80088a4:	e002      	b.n	80088ac <HAL_GPIO_Init+0x1b8>
 80088a6:	2301      	movs	r3, #1
 80088a8:	e000      	b.n	80088ac <HAL_GPIO_Init+0x1b8>
 80088aa:	2300      	movs	r3, #0
 80088ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80088ae:	f002 0203 	and.w	r2, r2, #3
 80088b2:	0092      	lsls	r2, r2, #2
 80088b4:	4093      	lsls	r3, r2
 80088b6:	68fa      	ldr	r2, [r7, #12]
 80088b8:	4313      	orrs	r3, r2
 80088ba:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80088bc:	493a      	ldr	r1, [pc, #232]	; (80089a8 <HAL_GPIO_Init+0x2b4>)
 80088be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088c0:	089b      	lsrs	r3, r3, #2
 80088c2:	3302      	adds	r3, #2
 80088c4:	68fa      	ldr	r2, [r7, #12]
 80088c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80088ca:	683b      	ldr	r3, [r7, #0]
 80088cc:	685b      	ldr	r3, [r3, #4]
 80088ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d006      	beq.n	80088e4 <HAL_GPIO_Init+0x1f0>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80088d6:	4b3b      	ldr	r3, [pc, #236]	; (80089c4 <HAL_GPIO_Init+0x2d0>)
 80088d8:	681a      	ldr	r2, [r3, #0]
 80088da:	493a      	ldr	r1, [pc, #232]	; (80089c4 <HAL_GPIO_Init+0x2d0>)
 80088dc:	69bb      	ldr	r3, [r7, #24]
 80088de:	4313      	orrs	r3, r2
 80088e0:	600b      	str	r3, [r1, #0]
 80088e2:	e006      	b.n	80088f2 <HAL_GPIO_Init+0x1fe>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80088e4:	4b37      	ldr	r3, [pc, #220]	; (80089c4 <HAL_GPIO_Init+0x2d0>)
 80088e6:	681a      	ldr	r2, [r3, #0]
 80088e8:	69bb      	ldr	r3, [r7, #24]
 80088ea:	43db      	mvns	r3, r3
 80088ec:	4935      	ldr	r1, [pc, #212]	; (80089c4 <HAL_GPIO_Init+0x2d0>)
 80088ee:	4013      	ands	r3, r2
 80088f0:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80088f2:	683b      	ldr	r3, [r7, #0]
 80088f4:	685b      	ldr	r3, [r3, #4]
 80088f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d006      	beq.n	800890c <HAL_GPIO_Init+0x218>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80088fe:	4b31      	ldr	r3, [pc, #196]	; (80089c4 <HAL_GPIO_Init+0x2d0>)
 8008900:	685a      	ldr	r2, [r3, #4]
 8008902:	4930      	ldr	r1, [pc, #192]	; (80089c4 <HAL_GPIO_Init+0x2d0>)
 8008904:	69bb      	ldr	r3, [r7, #24]
 8008906:	4313      	orrs	r3, r2
 8008908:	604b      	str	r3, [r1, #4]
 800890a:	e006      	b.n	800891a <HAL_GPIO_Init+0x226>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800890c:	4b2d      	ldr	r3, [pc, #180]	; (80089c4 <HAL_GPIO_Init+0x2d0>)
 800890e:	685a      	ldr	r2, [r3, #4]
 8008910:	69bb      	ldr	r3, [r7, #24]
 8008912:	43db      	mvns	r3, r3
 8008914:	492b      	ldr	r1, [pc, #172]	; (80089c4 <HAL_GPIO_Init+0x2d0>)
 8008916:	4013      	ands	r3, r2
 8008918:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800891a:	683b      	ldr	r3, [r7, #0]
 800891c:	685b      	ldr	r3, [r3, #4]
 800891e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008922:	2b00      	cmp	r3, #0
 8008924:	d006      	beq.n	8008934 <HAL_GPIO_Init+0x240>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8008926:	4b27      	ldr	r3, [pc, #156]	; (80089c4 <HAL_GPIO_Init+0x2d0>)
 8008928:	689a      	ldr	r2, [r3, #8]
 800892a:	4926      	ldr	r1, [pc, #152]	; (80089c4 <HAL_GPIO_Init+0x2d0>)
 800892c:	69bb      	ldr	r3, [r7, #24]
 800892e:	4313      	orrs	r3, r2
 8008930:	608b      	str	r3, [r1, #8]
 8008932:	e006      	b.n	8008942 <HAL_GPIO_Init+0x24e>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8008934:	4b23      	ldr	r3, [pc, #140]	; (80089c4 <HAL_GPIO_Init+0x2d0>)
 8008936:	689a      	ldr	r2, [r3, #8]
 8008938:	69bb      	ldr	r3, [r7, #24]
 800893a:	43db      	mvns	r3, r3
 800893c:	4921      	ldr	r1, [pc, #132]	; (80089c4 <HAL_GPIO_Init+0x2d0>)
 800893e:	4013      	ands	r3, r2
 8008940:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8008942:	683b      	ldr	r3, [r7, #0]
 8008944:	685b      	ldr	r3, [r3, #4]
 8008946:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800894a:	2b00      	cmp	r3, #0
 800894c:	d006      	beq.n	800895c <HAL_GPIO_Init+0x268>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800894e:	4b1d      	ldr	r3, [pc, #116]	; (80089c4 <HAL_GPIO_Init+0x2d0>)
 8008950:	68da      	ldr	r2, [r3, #12]
 8008952:	491c      	ldr	r1, [pc, #112]	; (80089c4 <HAL_GPIO_Init+0x2d0>)
 8008954:	69bb      	ldr	r3, [r7, #24]
 8008956:	4313      	orrs	r3, r2
 8008958:	60cb      	str	r3, [r1, #12]
 800895a:	e006      	b.n	800896a <HAL_GPIO_Init+0x276>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800895c:	4b19      	ldr	r3, [pc, #100]	; (80089c4 <HAL_GPIO_Init+0x2d0>)
 800895e:	68da      	ldr	r2, [r3, #12]
 8008960:	69bb      	ldr	r3, [r7, #24]
 8008962:	43db      	mvns	r3, r3
 8008964:	4917      	ldr	r1, [pc, #92]	; (80089c4 <HAL_GPIO_Init+0x2d0>)
 8008966:	4013      	ands	r3, r2
 8008968:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800896a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800896c:	3301      	adds	r3, #1
 800896e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008970:	683b      	ldr	r3, [r7, #0]
 8008972:	681a      	ldr	r2, [r3, #0]
 8008974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008976:	fa22 f303 	lsr.w	r3, r2, r3
 800897a:	2b00      	cmp	r3, #0
 800897c:	f47f aec4 	bne.w	8008708 <HAL_GPIO_Init+0x14>
  }
}
 8008980:	bf00      	nop
 8008982:	372c      	adds	r7, #44	; 0x2c
 8008984:	46bd      	mov	sp, r7
 8008986:	bc80      	pop	{r7}
 8008988:	4770      	bx	lr
 800898a:	bf00      	nop
 800898c:	10210000 	.word	0x10210000
 8008990:	10110000 	.word	0x10110000
 8008994:	10120000 	.word	0x10120000
 8008998:	10310000 	.word	0x10310000
 800899c:	10320000 	.word	0x10320000
 80089a0:	10220000 	.word	0x10220000
 80089a4:	40021000 	.word	0x40021000
 80089a8:	40010000 	.word	0x40010000
 80089ac:	40010800 	.word	0x40010800
 80089b0:	40010c00 	.word	0x40010c00
 80089b4:	40011000 	.word	0x40011000
 80089b8:	40011400 	.word	0x40011400
 80089bc:	40011800 	.word	0x40011800
 80089c0:	40011c00 	.word	0x40011c00
 80089c4:	40010400 	.word	0x40010400

080089c8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80089c8:	b480      	push	{r7}
 80089ca:	b085      	sub	sp, #20
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	6078      	str	r0, [r7, #4]
 80089d0:	460b      	mov	r3, r1
 80089d2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	689a      	ldr	r2, [r3, #8]
 80089d8:	887b      	ldrh	r3, [r7, #2]
 80089da:	4013      	ands	r3, r2
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d002      	beq.n	80089e6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80089e0:	2301      	movs	r3, #1
 80089e2:	73fb      	strb	r3, [r7, #15]
 80089e4:	e001      	b.n	80089ea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80089e6:	2300      	movs	r3, #0
 80089e8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80089ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80089ec:	4618      	mov	r0, r3
 80089ee:	3714      	adds	r7, #20
 80089f0:	46bd      	mov	sp, r7
 80089f2:	bc80      	pop	{r7}
 80089f4:	4770      	bx	lr

080089f6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80089f6:	b480      	push	{r7}
 80089f8:	b083      	sub	sp, #12
 80089fa:	af00      	add	r7, sp, #0
 80089fc:	6078      	str	r0, [r7, #4]
 80089fe:	460b      	mov	r3, r1
 8008a00:	807b      	strh	r3, [r7, #2]
 8008a02:	4613      	mov	r3, r2
 8008a04:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008a06:	787b      	ldrb	r3, [r7, #1]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d003      	beq.n	8008a14 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008a0c:	887a      	ldrh	r2, [r7, #2]
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8008a12:	e003      	b.n	8008a1c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8008a14:	887b      	ldrh	r3, [r7, #2]
 8008a16:	041a      	lsls	r2, r3, #16
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	611a      	str	r2, [r3, #16]
}
 8008a1c:	bf00      	nop
 8008a1e:	370c      	adds	r7, #12
 8008a20:	46bd      	mov	sp, r7
 8008a22:	bc80      	pop	{r7}
 8008a24:	4770      	bx	lr
	...

08008a28 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8008a28:	b480      	push	{r7}
 8008a2a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8008a2c:	4b03      	ldr	r3, [pc, #12]	; (8008a3c <HAL_PWR_EnableBkUpAccess+0x14>)
 8008a2e:	2201      	movs	r2, #1
 8008a30:	601a      	str	r2, [r3, #0]
}
 8008a32:	bf00      	nop
 8008a34:	46bd      	mov	sp, r7
 8008a36:	bc80      	pop	{r7}
 8008a38:	4770      	bx	lr
 8008a3a:	bf00      	nop
 8008a3c:	420e0020 	.word	0x420e0020

08008a40 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008a40:	b580      	push	{r7, lr}
 8008a42:	b086      	sub	sp, #24
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d101      	bne.n	8008a52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008a4e:	2301      	movs	r3, #1
 8008a50:	e26c      	b.n	8008f2c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	f003 0301 	and.w	r3, r3, #1
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	f000 8087 	beq.w	8008b6e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008a60:	4b92      	ldr	r3, [pc, #584]	; (8008cac <HAL_RCC_OscConfig+0x26c>)
 8008a62:	685b      	ldr	r3, [r3, #4]
 8008a64:	f003 030c 	and.w	r3, r3, #12
 8008a68:	2b04      	cmp	r3, #4
 8008a6a:	d00c      	beq.n	8008a86 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8008a6c:	4b8f      	ldr	r3, [pc, #572]	; (8008cac <HAL_RCC_OscConfig+0x26c>)
 8008a6e:	685b      	ldr	r3, [r3, #4]
 8008a70:	f003 030c 	and.w	r3, r3, #12
 8008a74:	2b08      	cmp	r3, #8
 8008a76:	d112      	bne.n	8008a9e <HAL_RCC_OscConfig+0x5e>
 8008a78:	4b8c      	ldr	r3, [pc, #560]	; (8008cac <HAL_RCC_OscConfig+0x26c>)
 8008a7a:	685b      	ldr	r3, [r3, #4]
 8008a7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008a80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008a84:	d10b      	bne.n	8008a9e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008a86:	4b89      	ldr	r3, [pc, #548]	; (8008cac <HAL_RCC_OscConfig+0x26c>)
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d06c      	beq.n	8008b6c <HAL_RCC_OscConfig+0x12c>
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	685b      	ldr	r3, [r3, #4]
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d168      	bne.n	8008b6c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8008a9a:	2301      	movs	r3, #1
 8008a9c:	e246      	b.n	8008f2c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	685b      	ldr	r3, [r3, #4]
 8008aa2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008aa6:	d106      	bne.n	8008ab6 <HAL_RCC_OscConfig+0x76>
 8008aa8:	4b80      	ldr	r3, [pc, #512]	; (8008cac <HAL_RCC_OscConfig+0x26c>)
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	4a7f      	ldr	r2, [pc, #508]	; (8008cac <HAL_RCC_OscConfig+0x26c>)
 8008aae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008ab2:	6013      	str	r3, [r2, #0]
 8008ab4:	e02e      	b.n	8008b14 <HAL_RCC_OscConfig+0xd4>
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	685b      	ldr	r3, [r3, #4]
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d10c      	bne.n	8008ad8 <HAL_RCC_OscConfig+0x98>
 8008abe:	4b7b      	ldr	r3, [pc, #492]	; (8008cac <HAL_RCC_OscConfig+0x26c>)
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	4a7a      	ldr	r2, [pc, #488]	; (8008cac <HAL_RCC_OscConfig+0x26c>)
 8008ac4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008ac8:	6013      	str	r3, [r2, #0]
 8008aca:	4b78      	ldr	r3, [pc, #480]	; (8008cac <HAL_RCC_OscConfig+0x26c>)
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	4a77      	ldr	r2, [pc, #476]	; (8008cac <HAL_RCC_OscConfig+0x26c>)
 8008ad0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008ad4:	6013      	str	r3, [r2, #0]
 8008ad6:	e01d      	b.n	8008b14 <HAL_RCC_OscConfig+0xd4>
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	685b      	ldr	r3, [r3, #4]
 8008adc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008ae0:	d10c      	bne.n	8008afc <HAL_RCC_OscConfig+0xbc>
 8008ae2:	4b72      	ldr	r3, [pc, #456]	; (8008cac <HAL_RCC_OscConfig+0x26c>)
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	4a71      	ldr	r2, [pc, #452]	; (8008cac <HAL_RCC_OscConfig+0x26c>)
 8008ae8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008aec:	6013      	str	r3, [r2, #0]
 8008aee:	4b6f      	ldr	r3, [pc, #444]	; (8008cac <HAL_RCC_OscConfig+0x26c>)
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	4a6e      	ldr	r2, [pc, #440]	; (8008cac <HAL_RCC_OscConfig+0x26c>)
 8008af4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008af8:	6013      	str	r3, [r2, #0]
 8008afa:	e00b      	b.n	8008b14 <HAL_RCC_OscConfig+0xd4>
 8008afc:	4b6b      	ldr	r3, [pc, #428]	; (8008cac <HAL_RCC_OscConfig+0x26c>)
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	4a6a      	ldr	r2, [pc, #424]	; (8008cac <HAL_RCC_OscConfig+0x26c>)
 8008b02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008b06:	6013      	str	r3, [r2, #0]
 8008b08:	4b68      	ldr	r3, [pc, #416]	; (8008cac <HAL_RCC_OscConfig+0x26c>)
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	4a67      	ldr	r2, [pc, #412]	; (8008cac <HAL_RCC_OscConfig+0x26c>)
 8008b0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008b12:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	685b      	ldr	r3, [r3, #4]
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d013      	beq.n	8008b44 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008b1c:	f7ff fcda 	bl	80084d4 <HAL_GetTick>
 8008b20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008b22:	e008      	b.n	8008b36 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008b24:	f7ff fcd6 	bl	80084d4 <HAL_GetTick>
 8008b28:	4602      	mov	r2, r0
 8008b2a:	693b      	ldr	r3, [r7, #16]
 8008b2c:	1ad3      	subs	r3, r2, r3
 8008b2e:	2b64      	cmp	r3, #100	; 0x64
 8008b30:	d901      	bls.n	8008b36 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8008b32:	2303      	movs	r3, #3
 8008b34:	e1fa      	b.n	8008f2c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008b36:	4b5d      	ldr	r3, [pc, #372]	; (8008cac <HAL_RCC_OscConfig+0x26c>)
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d0f0      	beq.n	8008b24 <HAL_RCC_OscConfig+0xe4>
 8008b42:	e014      	b.n	8008b6e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008b44:	f7ff fcc6 	bl	80084d4 <HAL_GetTick>
 8008b48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008b4a:	e008      	b.n	8008b5e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008b4c:	f7ff fcc2 	bl	80084d4 <HAL_GetTick>
 8008b50:	4602      	mov	r2, r0
 8008b52:	693b      	ldr	r3, [r7, #16]
 8008b54:	1ad3      	subs	r3, r2, r3
 8008b56:	2b64      	cmp	r3, #100	; 0x64
 8008b58:	d901      	bls.n	8008b5e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8008b5a:	2303      	movs	r3, #3
 8008b5c:	e1e6      	b.n	8008f2c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008b5e:	4b53      	ldr	r3, [pc, #332]	; (8008cac <HAL_RCC_OscConfig+0x26c>)
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d1f0      	bne.n	8008b4c <HAL_RCC_OscConfig+0x10c>
 8008b6a:	e000      	b.n	8008b6e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008b6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	f003 0302 	and.w	r3, r3, #2
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d063      	beq.n	8008c42 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008b7a:	4b4c      	ldr	r3, [pc, #304]	; (8008cac <HAL_RCC_OscConfig+0x26c>)
 8008b7c:	685b      	ldr	r3, [r3, #4]
 8008b7e:	f003 030c 	and.w	r3, r3, #12
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d00b      	beq.n	8008b9e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8008b86:	4b49      	ldr	r3, [pc, #292]	; (8008cac <HAL_RCC_OscConfig+0x26c>)
 8008b88:	685b      	ldr	r3, [r3, #4]
 8008b8a:	f003 030c 	and.w	r3, r3, #12
 8008b8e:	2b08      	cmp	r3, #8
 8008b90:	d11c      	bne.n	8008bcc <HAL_RCC_OscConfig+0x18c>
 8008b92:	4b46      	ldr	r3, [pc, #280]	; (8008cac <HAL_RCC_OscConfig+0x26c>)
 8008b94:	685b      	ldr	r3, [r3, #4]
 8008b96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d116      	bne.n	8008bcc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008b9e:	4b43      	ldr	r3, [pc, #268]	; (8008cac <HAL_RCC_OscConfig+0x26c>)
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	f003 0302 	and.w	r3, r3, #2
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d005      	beq.n	8008bb6 <HAL_RCC_OscConfig+0x176>
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	691b      	ldr	r3, [r3, #16]
 8008bae:	2b01      	cmp	r3, #1
 8008bb0:	d001      	beq.n	8008bb6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8008bb2:	2301      	movs	r3, #1
 8008bb4:	e1ba      	b.n	8008f2c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008bb6:	4b3d      	ldr	r3, [pc, #244]	; (8008cac <HAL_RCC_OscConfig+0x26c>)
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	695b      	ldr	r3, [r3, #20]
 8008bc2:	00db      	lsls	r3, r3, #3
 8008bc4:	4939      	ldr	r1, [pc, #228]	; (8008cac <HAL_RCC_OscConfig+0x26c>)
 8008bc6:	4313      	orrs	r3, r2
 8008bc8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008bca:	e03a      	b.n	8008c42 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	691b      	ldr	r3, [r3, #16]
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d020      	beq.n	8008c16 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008bd4:	4b36      	ldr	r3, [pc, #216]	; (8008cb0 <HAL_RCC_OscConfig+0x270>)
 8008bd6:	2201      	movs	r2, #1
 8008bd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008bda:	f7ff fc7b 	bl	80084d4 <HAL_GetTick>
 8008bde:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008be0:	e008      	b.n	8008bf4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008be2:	f7ff fc77 	bl	80084d4 <HAL_GetTick>
 8008be6:	4602      	mov	r2, r0
 8008be8:	693b      	ldr	r3, [r7, #16]
 8008bea:	1ad3      	subs	r3, r2, r3
 8008bec:	2b02      	cmp	r3, #2
 8008bee:	d901      	bls.n	8008bf4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8008bf0:	2303      	movs	r3, #3
 8008bf2:	e19b      	b.n	8008f2c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008bf4:	4b2d      	ldr	r3, [pc, #180]	; (8008cac <HAL_RCC_OscConfig+0x26c>)
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	f003 0302 	and.w	r3, r3, #2
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d0f0      	beq.n	8008be2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008c00:	4b2a      	ldr	r3, [pc, #168]	; (8008cac <HAL_RCC_OscConfig+0x26c>)
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	695b      	ldr	r3, [r3, #20]
 8008c0c:	00db      	lsls	r3, r3, #3
 8008c0e:	4927      	ldr	r1, [pc, #156]	; (8008cac <HAL_RCC_OscConfig+0x26c>)
 8008c10:	4313      	orrs	r3, r2
 8008c12:	600b      	str	r3, [r1, #0]
 8008c14:	e015      	b.n	8008c42 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008c16:	4b26      	ldr	r3, [pc, #152]	; (8008cb0 <HAL_RCC_OscConfig+0x270>)
 8008c18:	2200      	movs	r2, #0
 8008c1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008c1c:	f7ff fc5a 	bl	80084d4 <HAL_GetTick>
 8008c20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008c22:	e008      	b.n	8008c36 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008c24:	f7ff fc56 	bl	80084d4 <HAL_GetTick>
 8008c28:	4602      	mov	r2, r0
 8008c2a:	693b      	ldr	r3, [r7, #16]
 8008c2c:	1ad3      	subs	r3, r2, r3
 8008c2e:	2b02      	cmp	r3, #2
 8008c30:	d901      	bls.n	8008c36 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8008c32:	2303      	movs	r3, #3
 8008c34:	e17a      	b.n	8008f2c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008c36:	4b1d      	ldr	r3, [pc, #116]	; (8008cac <HAL_RCC_OscConfig+0x26c>)
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	f003 0302 	and.w	r3, r3, #2
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d1f0      	bne.n	8008c24 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	f003 0308 	and.w	r3, r3, #8
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d03a      	beq.n	8008cc4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	699b      	ldr	r3, [r3, #24]
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d019      	beq.n	8008c8a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008c56:	4b17      	ldr	r3, [pc, #92]	; (8008cb4 <HAL_RCC_OscConfig+0x274>)
 8008c58:	2201      	movs	r2, #1
 8008c5a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008c5c:	f7ff fc3a 	bl	80084d4 <HAL_GetTick>
 8008c60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008c62:	e008      	b.n	8008c76 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008c64:	f7ff fc36 	bl	80084d4 <HAL_GetTick>
 8008c68:	4602      	mov	r2, r0
 8008c6a:	693b      	ldr	r3, [r7, #16]
 8008c6c:	1ad3      	subs	r3, r2, r3
 8008c6e:	2b02      	cmp	r3, #2
 8008c70:	d901      	bls.n	8008c76 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8008c72:	2303      	movs	r3, #3
 8008c74:	e15a      	b.n	8008f2c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008c76:	4b0d      	ldr	r3, [pc, #52]	; (8008cac <HAL_RCC_OscConfig+0x26c>)
 8008c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c7a:	f003 0302 	and.w	r3, r3, #2
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d0f0      	beq.n	8008c64 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8008c82:	2001      	movs	r0, #1
 8008c84:	f000 fada 	bl	800923c <RCC_Delay>
 8008c88:	e01c      	b.n	8008cc4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008c8a:	4b0a      	ldr	r3, [pc, #40]	; (8008cb4 <HAL_RCC_OscConfig+0x274>)
 8008c8c:	2200      	movs	r2, #0
 8008c8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008c90:	f7ff fc20 	bl	80084d4 <HAL_GetTick>
 8008c94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008c96:	e00f      	b.n	8008cb8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008c98:	f7ff fc1c 	bl	80084d4 <HAL_GetTick>
 8008c9c:	4602      	mov	r2, r0
 8008c9e:	693b      	ldr	r3, [r7, #16]
 8008ca0:	1ad3      	subs	r3, r2, r3
 8008ca2:	2b02      	cmp	r3, #2
 8008ca4:	d908      	bls.n	8008cb8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8008ca6:	2303      	movs	r3, #3
 8008ca8:	e140      	b.n	8008f2c <HAL_RCC_OscConfig+0x4ec>
 8008caa:	bf00      	nop
 8008cac:	40021000 	.word	0x40021000
 8008cb0:	42420000 	.word	0x42420000
 8008cb4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008cb8:	4b9e      	ldr	r3, [pc, #632]	; (8008f34 <HAL_RCC_OscConfig+0x4f4>)
 8008cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cbc:	f003 0302 	and.w	r3, r3, #2
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d1e9      	bne.n	8008c98 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	f003 0304 	and.w	r3, r3, #4
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	f000 80a6 	beq.w	8008e1e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008cd2:	2300      	movs	r3, #0
 8008cd4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008cd6:	4b97      	ldr	r3, [pc, #604]	; (8008f34 <HAL_RCC_OscConfig+0x4f4>)
 8008cd8:	69db      	ldr	r3, [r3, #28]
 8008cda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d10d      	bne.n	8008cfe <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008ce2:	4b94      	ldr	r3, [pc, #592]	; (8008f34 <HAL_RCC_OscConfig+0x4f4>)
 8008ce4:	69db      	ldr	r3, [r3, #28]
 8008ce6:	4a93      	ldr	r2, [pc, #588]	; (8008f34 <HAL_RCC_OscConfig+0x4f4>)
 8008ce8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008cec:	61d3      	str	r3, [r2, #28]
 8008cee:	4b91      	ldr	r3, [pc, #580]	; (8008f34 <HAL_RCC_OscConfig+0x4f4>)
 8008cf0:	69db      	ldr	r3, [r3, #28]
 8008cf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008cf6:	60bb      	str	r3, [r7, #8]
 8008cf8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008cfa:	2301      	movs	r3, #1
 8008cfc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008cfe:	4b8e      	ldr	r3, [pc, #568]	; (8008f38 <HAL_RCC_OscConfig+0x4f8>)
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d118      	bne.n	8008d3c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008d0a:	4b8b      	ldr	r3, [pc, #556]	; (8008f38 <HAL_RCC_OscConfig+0x4f8>)
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	4a8a      	ldr	r2, [pc, #552]	; (8008f38 <HAL_RCC_OscConfig+0x4f8>)
 8008d10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008d14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008d16:	f7ff fbdd 	bl	80084d4 <HAL_GetTick>
 8008d1a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008d1c:	e008      	b.n	8008d30 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008d1e:	f7ff fbd9 	bl	80084d4 <HAL_GetTick>
 8008d22:	4602      	mov	r2, r0
 8008d24:	693b      	ldr	r3, [r7, #16]
 8008d26:	1ad3      	subs	r3, r2, r3
 8008d28:	2b64      	cmp	r3, #100	; 0x64
 8008d2a:	d901      	bls.n	8008d30 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8008d2c:	2303      	movs	r3, #3
 8008d2e:	e0fd      	b.n	8008f2c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008d30:	4b81      	ldr	r3, [pc, #516]	; (8008f38 <HAL_RCC_OscConfig+0x4f8>)
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d0f0      	beq.n	8008d1e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	68db      	ldr	r3, [r3, #12]
 8008d40:	2b01      	cmp	r3, #1
 8008d42:	d106      	bne.n	8008d52 <HAL_RCC_OscConfig+0x312>
 8008d44:	4b7b      	ldr	r3, [pc, #492]	; (8008f34 <HAL_RCC_OscConfig+0x4f4>)
 8008d46:	6a1b      	ldr	r3, [r3, #32]
 8008d48:	4a7a      	ldr	r2, [pc, #488]	; (8008f34 <HAL_RCC_OscConfig+0x4f4>)
 8008d4a:	f043 0301 	orr.w	r3, r3, #1
 8008d4e:	6213      	str	r3, [r2, #32]
 8008d50:	e02d      	b.n	8008dae <HAL_RCC_OscConfig+0x36e>
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	68db      	ldr	r3, [r3, #12]
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d10c      	bne.n	8008d74 <HAL_RCC_OscConfig+0x334>
 8008d5a:	4b76      	ldr	r3, [pc, #472]	; (8008f34 <HAL_RCC_OscConfig+0x4f4>)
 8008d5c:	6a1b      	ldr	r3, [r3, #32]
 8008d5e:	4a75      	ldr	r2, [pc, #468]	; (8008f34 <HAL_RCC_OscConfig+0x4f4>)
 8008d60:	f023 0301 	bic.w	r3, r3, #1
 8008d64:	6213      	str	r3, [r2, #32]
 8008d66:	4b73      	ldr	r3, [pc, #460]	; (8008f34 <HAL_RCC_OscConfig+0x4f4>)
 8008d68:	6a1b      	ldr	r3, [r3, #32]
 8008d6a:	4a72      	ldr	r2, [pc, #456]	; (8008f34 <HAL_RCC_OscConfig+0x4f4>)
 8008d6c:	f023 0304 	bic.w	r3, r3, #4
 8008d70:	6213      	str	r3, [r2, #32]
 8008d72:	e01c      	b.n	8008dae <HAL_RCC_OscConfig+0x36e>
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	68db      	ldr	r3, [r3, #12]
 8008d78:	2b05      	cmp	r3, #5
 8008d7a:	d10c      	bne.n	8008d96 <HAL_RCC_OscConfig+0x356>
 8008d7c:	4b6d      	ldr	r3, [pc, #436]	; (8008f34 <HAL_RCC_OscConfig+0x4f4>)
 8008d7e:	6a1b      	ldr	r3, [r3, #32]
 8008d80:	4a6c      	ldr	r2, [pc, #432]	; (8008f34 <HAL_RCC_OscConfig+0x4f4>)
 8008d82:	f043 0304 	orr.w	r3, r3, #4
 8008d86:	6213      	str	r3, [r2, #32]
 8008d88:	4b6a      	ldr	r3, [pc, #424]	; (8008f34 <HAL_RCC_OscConfig+0x4f4>)
 8008d8a:	6a1b      	ldr	r3, [r3, #32]
 8008d8c:	4a69      	ldr	r2, [pc, #420]	; (8008f34 <HAL_RCC_OscConfig+0x4f4>)
 8008d8e:	f043 0301 	orr.w	r3, r3, #1
 8008d92:	6213      	str	r3, [r2, #32]
 8008d94:	e00b      	b.n	8008dae <HAL_RCC_OscConfig+0x36e>
 8008d96:	4b67      	ldr	r3, [pc, #412]	; (8008f34 <HAL_RCC_OscConfig+0x4f4>)
 8008d98:	6a1b      	ldr	r3, [r3, #32]
 8008d9a:	4a66      	ldr	r2, [pc, #408]	; (8008f34 <HAL_RCC_OscConfig+0x4f4>)
 8008d9c:	f023 0301 	bic.w	r3, r3, #1
 8008da0:	6213      	str	r3, [r2, #32]
 8008da2:	4b64      	ldr	r3, [pc, #400]	; (8008f34 <HAL_RCC_OscConfig+0x4f4>)
 8008da4:	6a1b      	ldr	r3, [r3, #32]
 8008da6:	4a63      	ldr	r2, [pc, #396]	; (8008f34 <HAL_RCC_OscConfig+0x4f4>)
 8008da8:	f023 0304 	bic.w	r3, r3, #4
 8008dac:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	68db      	ldr	r3, [r3, #12]
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d015      	beq.n	8008de2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008db6:	f7ff fb8d 	bl	80084d4 <HAL_GetTick>
 8008dba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008dbc:	e00a      	b.n	8008dd4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008dbe:	f7ff fb89 	bl	80084d4 <HAL_GetTick>
 8008dc2:	4602      	mov	r2, r0
 8008dc4:	693b      	ldr	r3, [r7, #16]
 8008dc6:	1ad3      	subs	r3, r2, r3
 8008dc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8008dcc:	4293      	cmp	r3, r2
 8008dce:	d901      	bls.n	8008dd4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8008dd0:	2303      	movs	r3, #3
 8008dd2:	e0ab      	b.n	8008f2c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008dd4:	4b57      	ldr	r3, [pc, #348]	; (8008f34 <HAL_RCC_OscConfig+0x4f4>)
 8008dd6:	6a1b      	ldr	r3, [r3, #32]
 8008dd8:	f003 0302 	and.w	r3, r3, #2
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d0ee      	beq.n	8008dbe <HAL_RCC_OscConfig+0x37e>
 8008de0:	e014      	b.n	8008e0c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008de2:	f7ff fb77 	bl	80084d4 <HAL_GetTick>
 8008de6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008de8:	e00a      	b.n	8008e00 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008dea:	f7ff fb73 	bl	80084d4 <HAL_GetTick>
 8008dee:	4602      	mov	r2, r0
 8008df0:	693b      	ldr	r3, [r7, #16]
 8008df2:	1ad3      	subs	r3, r2, r3
 8008df4:	f241 3288 	movw	r2, #5000	; 0x1388
 8008df8:	4293      	cmp	r3, r2
 8008dfa:	d901      	bls.n	8008e00 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8008dfc:	2303      	movs	r3, #3
 8008dfe:	e095      	b.n	8008f2c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008e00:	4b4c      	ldr	r3, [pc, #304]	; (8008f34 <HAL_RCC_OscConfig+0x4f4>)
 8008e02:	6a1b      	ldr	r3, [r3, #32]
 8008e04:	f003 0302 	and.w	r3, r3, #2
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d1ee      	bne.n	8008dea <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8008e0c:	7dfb      	ldrb	r3, [r7, #23]
 8008e0e:	2b01      	cmp	r3, #1
 8008e10:	d105      	bne.n	8008e1e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008e12:	4b48      	ldr	r3, [pc, #288]	; (8008f34 <HAL_RCC_OscConfig+0x4f4>)
 8008e14:	69db      	ldr	r3, [r3, #28]
 8008e16:	4a47      	ldr	r2, [pc, #284]	; (8008f34 <HAL_RCC_OscConfig+0x4f4>)
 8008e18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008e1c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	69db      	ldr	r3, [r3, #28]
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	f000 8081 	beq.w	8008f2a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008e28:	4b42      	ldr	r3, [pc, #264]	; (8008f34 <HAL_RCC_OscConfig+0x4f4>)
 8008e2a:	685b      	ldr	r3, [r3, #4]
 8008e2c:	f003 030c 	and.w	r3, r3, #12
 8008e30:	2b08      	cmp	r3, #8
 8008e32:	d061      	beq.n	8008ef8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	69db      	ldr	r3, [r3, #28]
 8008e38:	2b02      	cmp	r3, #2
 8008e3a:	d146      	bne.n	8008eca <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008e3c:	4b3f      	ldr	r3, [pc, #252]	; (8008f3c <HAL_RCC_OscConfig+0x4fc>)
 8008e3e:	2200      	movs	r2, #0
 8008e40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008e42:	f7ff fb47 	bl	80084d4 <HAL_GetTick>
 8008e46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008e48:	e008      	b.n	8008e5c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008e4a:	f7ff fb43 	bl	80084d4 <HAL_GetTick>
 8008e4e:	4602      	mov	r2, r0
 8008e50:	693b      	ldr	r3, [r7, #16]
 8008e52:	1ad3      	subs	r3, r2, r3
 8008e54:	2b02      	cmp	r3, #2
 8008e56:	d901      	bls.n	8008e5c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8008e58:	2303      	movs	r3, #3
 8008e5a:	e067      	b.n	8008f2c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008e5c:	4b35      	ldr	r3, [pc, #212]	; (8008f34 <HAL_RCC_OscConfig+0x4f4>)
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d1f0      	bne.n	8008e4a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	6a1b      	ldr	r3, [r3, #32]
 8008e6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008e70:	d108      	bne.n	8008e84 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8008e72:	4b30      	ldr	r3, [pc, #192]	; (8008f34 <HAL_RCC_OscConfig+0x4f4>)
 8008e74:	685b      	ldr	r3, [r3, #4]
 8008e76:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	689b      	ldr	r3, [r3, #8]
 8008e7e:	492d      	ldr	r1, [pc, #180]	; (8008f34 <HAL_RCC_OscConfig+0x4f4>)
 8008e80:	4313      	orrs	r3, r2
 8008e82:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008e84:	4b2b      	ldr	r3, [pc, #172]	; (8008f34 <HAL_RCC_OscConfig+0x4f4>)
 8008e86:	685b      	ldr	r3, [r3, #4]
 8008e88:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	6a19      	ldr	r1, [r3, #32]
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e94:	430b      	orrs	r3, r1
 8008e96:	4927      	ldr	r1, [pc, #156]	; (8008f34 <HAL_RCC_OscConfig+0x4f4>)
 8008e98:	4313      	orrs	r3, r2
 8008e9a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008e9c:	4b27      	ldr	r3, [pc, #156]	; (8008f3c <HAL_RCC_OscConfig+0x4fc>)
 8008e9e:	2201      	movs	r2, #1
 8008ea0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008ea2:	f7ff fb17 	bl	80084d4 <HAL_GetTick>
 8008ea6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8008ea8:	e008      	b.n	8008ebc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008eaa:	f7ff fb13 	bl	80084d4 <HAL_GetTick>
 8008eae:	4602      	mov	r2, r0
 8008eb0:	693b      	ldr	r3, [r7, #16]
 8008eb2:	1ad3      	subs	r3, r2, r3
 8008eb4:	2b02      	cmp	r3, #2
 8008eb6:	d901      	bls.n	8008ebc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8008eb8:	2303      	movs	r3, #3
 8008eba:	e037      	b.n	8008f2c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8008ebc:	4b1d      	ldr	r3, [pc, #116]	; (8008f34 <HAL_RCC_OscConfig+0x4f4>)
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d0f0      	beq.n	8008eaa <HAL_RCC_OscConfig+0x46a>
 8008ec8:	e02f      	b.n	8008f2a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008eca:	4b1c      	ldr	r3, [pc, #112]	; (8008f3c <HAL_RCC_OscConfig+0x4fc>)
 8008ecc:	2200      	movs	r2, #0
 8008ece:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008ed0:	f7ff fb00 	bl	80084d4 <HAL_GetTick>
 8008ed4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008ed6:	e008      	b.n	8008eea <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008ed8:	f7ff fafc 	bl	80084d4 <HAL_GetTick>
 8008edc:	4602      	mov	r2, r0
 8008ede:	693b      	ldr	r3, [r7, #16]
 8008ee0:	1ad3      	subs	r3, r2, r3
 8008ee2:	2b02      	cmp	r3, #2
 8008ee4:	d901      	bls.n	8008eea <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8008ee6:	2303      	movs	r3, #3
 8008ee8:	e020      	b.n	8008f2c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008eea:	4b12      	ldr	r3, [pc, #72]	; (8008f34 <HAL_RCC_OscConfig+0x4f4>)
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d1f0      	bne.n	8008ed8 <HAL_RCC_OscConfig+0x498>
 8008ef6:	e018      	b.n	8008f2a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	69db      	ldr	r3, [r3, #28]
 8008efc:	2b01      	cmp	r3, #1
 8008efe:	d101      	bne.n	8008f04 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8008f00:	2301      	movs	r3, #1
 8008f02:	e013      	b.n	8008f2c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8008f04:	4b0b      	ldr	r3, [pc, #44]	; (8008f34 <HAL_RCC_OscConfig+0x4f4>)
 8008f06:	685b      	ldr	r3, [r3, #4]
 8008f08:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	6a1b      	ldr	r3, [r3, #32]
 8008f14:	429a      	cmp	r2, r3
 8008f16:	d106      	bne.n	8008f26 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008f22:	429a      	cmp	r2, r3
 8008f24:	d001      	beq.n	8008f2a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8008f26:	2301      	movs	r3, #1
 8008f28:	e000      	b.n	8008f2c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8008f2a:	2300      	movs	r3, #0
}
 8008f2c:	4618      	mov	r0, r3
 8008f2e:	3718      	adds	r7, #24
 8008f30:	46bd      	mov	sp, r7
 8008f32:	bd80      	pop	{r7, pc}
 8008f34:	40021000 	.word	0x40021000
 8008f38:	40007000 	.word	0x40007000
 8008f3c:	42420060 	.word	0x42420060

08008f40 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008f40:	b580      	push	{r7, lr}
 8008f42:	b084      	sub	sp, #16
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	6078      	str	r0, [r7, #4]
 8008f48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d101      	bne.n	8008f54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008f50:	2301      	movs	r3, #1
 8008f52:	e0d0      	b.n	80090f6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008f54:	4b6a      	ldr	r3, [pc, #424]	; (8009100 <HAL_RCC_ClockConfig+0x1c0>)
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	f003 0307 	and.w	r3, r3, #7
 8008f5c:	683a      	ldr	r2, [r7, #0]
 8008f5e:	429a      	cmp	r2, r3
 8008f60:	d910      	bls.n	8008f84 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008f62:	4b67      	ldr	r3, [pc, #412]	; (8009100 <HAL_RCC_ClockConfig+0x1c0>)
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	f023 0207 	bic.w	r2, r3, #7
 8008f6a:	4965      	ldr	r1, [pc, #404]	; (8009100 <HAL_RCC_ClockConfig+0x1c0>)
 8008f6c:	683b      	ldr	r3, [r7, #0]
 8008f6e:	4313      	orrs	r3, r2
 8008f70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008f72:	4b63      	ldr	r3, [pc, #396]	; (8009100 <HAL_RCC_ClockConfig+0x1c0>)
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	f003 0307 	and.w	r3, r3, #7
 8008f7a:	683a      	ldr	r2, [r7, #0]
 8008f7c:	429a      	cmp	r2, r3
 8008f7e:	d001      	beq.n	8008f84 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8008f80:	2301      	movs	r3, #1
 8008f82:	e0b8      	b.n	80090f6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	f003 0302 	and.w	r3, r3, #2
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d020      	beq.n	8008fd2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	f003 0304 	and.w	r3, r3, #4
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d005      	beq.n	8008fa8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008f9c:	4b59      	ldr	r3, [pc, #356]	; (8009104 <HAL_RCC_ClockConfig+0x1c4>)
 8008f9e:	685b      	ldr	r3, [r3, #4]
 8008fa0:	4a58      	ldr	r2, [pc, #352]	; (8009104 <HAL_RCC_ClockConfig+0x1c4>)
 8008fa2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8008fa6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	f003 0308 	and.w	r3, r3, #8
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d005      	beq.n	8008fc0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008fb4:	4b53      	ldr	r3, [pc, #332]	; (8009104 <HAL_RCC_ClockConfig+0x1c4>)
 8008fb6:	685b      	ldr	r3, [r3, #4]
 8008fb8:	4a52      	ldr	r2, [pc, #328]	; (8009104 <HAL_RCC_ClockConfig+0x1c4>)
 8008fba:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8008fbe:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008fc0:	4b50      	ldr	r3, [pc, #320]	; (8009104 <HAL_RCC_ClockConfig+0x1c4>)
 8008fc2:	685b      	ldr	r3, [r3, #4]
 8008fc4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	689b      	ldr	r3, [r3, #8]
 8008fcc:	494d      	ldr	r1, [pc, #308]	; (8009104 <HAL_RCC_ClockConfig+0x1c4>)
 8008fce:	4313      	orrs	r3, r2
 8008fd0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	f003 0301 	and.w	r3, r3, #1
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d040      	beq.n	8009060 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	685b      	ldr	r3, [r3, #4]
 8008fe2:	2b01      	cmp	r3, #1
 8008fe4:	d107      	bne.n	8008ff6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008fe6:	4b47      	ldr	r3, [pc, #284]	; (8009104 <HAL_RCC_ClockConfig+0x1c4>)
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d115      	bne.n	800901e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008ff2:	2301      	movs	r3, #1
 8008ff4:	e07f      	b.n	80090f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	685b      	ldr	r3, [r3, #4]
 8008ffa:	2b02      	cmp	r3, #2
 8008ffc:	d107      	bne.n	800900e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008ffe:	4b41      	ldr	r3, [pc, #260]	; (8009104 <HAL_RCC_ClockConfig+0x1c4>)
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009006:	2b00      	cmp	r3, #0
 8009008:	d109      	bne.n	800901e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800900a:	2301      	movs	r3, #1
 800900c:	e073      	b.n	80090f6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800900e:	4b3d      	ldr	r3, [pc, #244]	; (8009104 <HAL_RCC_ClockConfig+0x1c4>)
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	f003 0302 	and.w	r3, r3, #2
 8009016:	2b00      	cmp	r3, #0
 8009018:	d101      	bne.n	800901e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800901a:	2301      	movs	r3, #1
 800901c:	e06b      	b.n	80090f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800901e:	4b39      	ldr	r3, [pc, #228]	; (8009104 <HAL_RCC_ClockConfig+0x1c4>)
 8009020:	685b      	ldr	r3, [r3, #4]
 8009022:	f023 0203 	bic.w	r2, r3, #3
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	685b      	ldr	r3, [r3, #4]
 800902a:	4936      	ldr	r1, [pc, #216]	; (8009104 <HAL_RCC_ClockConfig+0x1c4>)
 800902c:	4313      	orrs	r3, r2
 800902e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009030:	f7ff fa50 	bl	80084d4 <HAL_GetTick>
 8009034:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009036:	e00a      	b.n	800904e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009038:	f7ff fa4c 	bl	80084d4 <HAL_GetTick>
 800903c:	4602      	mov	r2, r0
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	1ad3      	subs	r3, r2, r3
 8009042:	f241 3288 	movw	r2, #5000	; 0x1388
 8009046:	4293      	cmp	r3, r2
 8009048:	d901      	bls.n	800904e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800904a:	2303      	movs	r3, #3
 800904c:	e053      	b.n	80090f6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800904e:	4b2d      	ldr	r3, [pc, #180]	; (8009104 <HAL_RCC_ClockConfig+0x1c4>)
 8009050:	685b      	ldr	r3, [r3, #4]
 8009052:	f003 020c 	and.w	r2, r3, #12
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	685b      	ldr	r3, [r3, #4]
 800905a:	009b      	lsls	r3, r3, #2
 800905c:	429a      	cmp	r2, r3
 800905e:	d1eb      	bne.n	8009038 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009060:	4b27      	ldr	r3, [pc, #156]	; (8009100 <HAL_RCC_ClockConfig+0x1c0>)
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	f003 0307 	and.w	r3, r3, #7
 8009068:	683a      	ldr	r2, [r7, #0]
 800906a:	429a      	cmp	r2, r3
 800906c:	d210      	bcs.n	8009090 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800906e:	4b24      	ldr	r3, [pc, #144]	; (8009100 <HAL_RCC_ClockConfig+0x1c0>)
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	f023 0207 	bic.w	r2, r3, #7
 8009076:	4922      	ldr	r1, [pc, #136]	; (8009100 <HAL_RCC_ClockConfig+0x1c0>)
 8009078:	683b      	ldr	r3, [r7, #0]
 800907a:	4313      	orrs	r3, r2
 800907c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800907e:	4b20      	ldr	r3, [pc, #128]	; (8009100 <HAL_RCC_ClockConfig+0x1c0>)
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	f003 0307 	and.w	r3, r3, #7
 8009086:	683a      	ldr	r2, [r7, #0]
 8009088:	429a      	cmp	r2, r3
 800908a:	d001      	beq.n	8009090 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800908c:	2301      	movs	r3, #1
 800908e:	e032      	b.n	80090f6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	f003 0304 	and.w	r3, r3, #4
 8009098:	2b00      	cmp	r3, #0
 800909a:	d008      	beq.n	80090ae <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800909c:	4b19      	ldr	r3, [pc, #100]	; (8009104 <HAL_RCC_ClockConfig+0x1c4>)
 800909e:	685b      	ldr	r3, [r3, #4]
 80090a0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	68db      	ldr	r3, [r3, #12]
 80090a8:	4916      	ldr	r1, [pc, #88]	; (8009104 <HAL_RCC_ClockConfig+0x1c4>)
 80090aa:	4313      	orrs	r3, r2
 80090ac:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	f003 0308 	and.w	r3, r3, #8
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d009      	beq.n	80090ce <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80090ba:	4b12      	ldr	r3, [pc, #72]	; (8009104 <HAL_RCC_ClockConfig+0x1c4>)
 80090bc:	685b      	ldr	r3, [r3, #4]
 80090be:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	691b      	ldr	r3, [r3, #16]
 80090c6:	00db      	lsls	r3, r3, #3
 80090c8:	490e      	ldr	r1, [pc, #56]	; (8009104 <HAL_RCC_ClockConfig+0x1c4>)
 80090ca:	4313      	orrs	r3, r2
 80090cc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80090ce:	f000 f821 	bl	8009114 <HAL_RCC_GetSysClockFreq>
 80090d2:	4601      	mov	r1, r0
 80090d4:	4b0b      	ldr	r3, [pc, #44]	; (8009104 <HAL_RCC_ClockConfig+0x1c4>)
 80090d6:	685b      	ldr	r3, [r3, #4]
 80090d8:	091b      	lsrs	r3, r3, #4
 80090da:	f003 030f 	and.w	r3, r3, #15
 80090de:	4a0a      	ldr	r2, [pc, #40]	; (8009108 <HAL_RCC_ClockConfig+0x1c8>)
 80090e0:	5cd3      	ldrb	r3, [r2, r3]
 80090e2:	fa21 f303 	lsr.w	r3, r1, r3
 80090e6:	4a09      	ldr	r2, [pc, #36]	; (800910c <HAL_RCC_ClockConfig+0x1cc>)
 80090e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80090ea:	4b09      	ldr	r3, [pc, #36]	; (8009110 <HAL_RCC_ClockConfig+0x1d0>)
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	4618      	mov	r0, r3
 80090f0:	f7ff f9ae 	bl	8008450 <HAL_InitTick>

  return HAL_OK;
 80090f4:	2300      	movs	r3, #0
}
 80090f6:	4618      	mov	r0, r3
 80090f8:	3710      	adds	r7, #16
 80090fa:	46bd      	mov	sp, r7
 80090fc:	bd80      	pop	{r7, pc}
 80090fe:	bf00      	nop
 8009100:	40022000 	.word	0x40022000
 8009104:	40021000 	.word	0x40021000
 8009108:	0800c168 	.word	0x0800c168
 800910c:	20000020 	.word	0x20000020
 8009110:	20000024 	.word	0x20000024

08009114 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009114:	b490      	push	{r4, r7}
 8009116:	b08a      	sub	sp, #40	; 0x28
 8009118:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800911a:	4b2a      	ldr	r3, [pc, #168]	; (80091c4 <HAL_RCC_GetSysClockFreq+0xb0>)
 800911c:	1d3c      	adds	r4, r7, #4
 800911e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009120:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8009124:	4b28      	ldr	r3, [pc, #160]	; (80091c8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8009126:	881b      	ldrh	r3, [r3, #0]
 8009128:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800912a:	2300      	movs	r3, #0
 800912c:	61fb      	str	r3, [r7, #28]
 800912e:	2300      	movs	r3, #0
 8009130:	61bb      	str	r3, [r7, #24]
 8009132:	2300      	movs	r3, #0
 8009134:	627b      	str	r3, [r7, #36]	; 0x24
 8009136:	2300      	movs	r3, #0
 8009138:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800913a:	2300      	movs	r3, #0
 800913c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800913e:	4b23      	ldr	r3, [pc, #140]	; (80091cc <HAL_RCC_GetSysClockFreq+0xb8>)
 8009140:	685b      	ldr	r3, [r3, #4]
 8009142:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8009144:	69fb      	ldr	r3, [r7, #28]
 8009146:	f003 030c 	and.w	r3, r3, #12
 800914a:	2b04      	cmp	r3, #4
 800914c:	d002      	beq.n	8009154 <HAL_RCC_GetSysClockFreq+0x40>
 800914e:	2b08      	cmp	r3, #8
 8009150:	d003      	beq.n	800915a <HAL_RCC_GetSysClockFreq+0x46>
 8009152:	e02d      	b.n	80091b0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8009154:	4b1e      	ldr	r3, [pc, #120]	; (80091d0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8009156:	623b      	str	r3, [r7, #32]
      break;
 8009158:	e02d      	b.n	80091b6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800915a:	69fb      	ldr	r3, [r7, #28]
 800915c:	0c9b      	lsrs	r3, r3, #18
 800915e:	f003 030f 	and.w	r3, r3, #15
 8009162:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8009166:	4413      	add	r3, r2
 8009168:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800916c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800916e:	69fb      	ldr	r3, [r7, #28]
 8009170:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009174:	2b00      	cmp	r3, #0
 8009176:	d013      	beq.n	80091a0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8009178:	4b14      	ldr	r3, [pc, #80]	; (80091cc <HAL_RCC_GetSysClockFreq+0xb8>)
 800917a:	685b      	ldr	r3, [r3, #4]
 800917c:	0c5b      	lsrs	r3, r3, #17
 800917e:	f003 0301 	and.w	r3, r3, #1
 8009182:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8009186:	4413      	add	r3, r2
 8009188:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800918c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800918e:	697b      	ldr	r3, [r7, #20]
 8009190:	4a0f      	ldr	r2, [pc, #60]	; (80091d0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8009192:	fb02 f203 	mul.w	r2, r2, r3
 8009196:	69bb      	ldr	r3, [r7, #24]
 8009198:	fbb2 f3f3 	udiv	r3, r2, r3
 800919c:	627b      	str	r3, [r7, #36]	; 0x24
 800919e:	e004      	b.n	80091aa <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80091a0:	697b      	ldr	r3, [r7, #20]
 80091a2:	4a0c      	ldr	r2, [pc, #48]	; (80091d4 <HAL_RCC_GetSysClockFreq+0xc0>)
 80091a4:	fb02 f303 	mul.w	r3, r2, r3
 80091a8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80091aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091ac:	623b      	str	r3, [r7, #32]
      break;
 80091ae:	e002      	b.n	80091b6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80091b0:	4b07      	ldr	r3, [pc, #28]	; (80091d0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80091b2:	623b      	str	r3, [r7, #32]
      break;
 80091b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80091b6:	6a3b      	ldr	r3, [r7, #32]
}
 80091b8:	4618      	mov	r0, r3
 80091ba:	3728      	adds	r7, #40	; 0x28
 80091bc:	46bd      	mov	sp, r7
 80091be:	bc90      	pop	{r4, r7}
 80091c0:	4770      	bx	lr
 80091c2:	bf00      	nop
 80091c4:	0800a980 	.word	0x0800a980
 80091c8:	0800a990 	.word	0x0800a990
 80091cc:	40021000 	.word	0x40021000
 80091d0:	007a1200 	.word	0x007a1200
 80091d4:	003d0900 	.word	0x003d0900

080091d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80091d8:	b480      	push	{r7}
 80091da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80091dc:	4b02      	ldr	r3, [pc, #8]	; (80091e8 <HAL_RCC_GetHCLKFreq+0x10>)
 80091de:	681b      	ldr	r3, [r3, #0]
}
 80091e0:	4618      	mov	r0, r3
 80091e2:	46bd      	mov	sp, r7
 80091e4:	bc80      	pop	{r7}
 80091e6:	4770      	bx	lr
 80091e8:	20000020 	.word	0x20000020

080091ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80091ec:	b580      	push	{r7, lr}
 80091ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80091f0:	f7ff fff2 	bl	80091d8 <HAL_RCC_GetHCLKFreq>
 80091f4:	4601      	mov	r1, r0
 80091f6:	4b05      	ldr	r3, [pc, #20]	; (800920c <HAL_RCC_GetPCLK1Freq+0x20>)
 80091f8:	685b      	ldr	r3, [r3, #4]
 80091fa:	0a1b      	lsrs	r3, r3, #8
 80091fc:	f003 0307 	and.w	r3, r3, #7
 8009200:	4a03      	ldr	r2, [pc, #12]	; (8009210 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009202:	5cd3      	ldrb	r3, [r2, r3]
 8009204:	fa21 f303 	lsr.w	r3, r1, r3
}
 8009208:	4618      	mov	r0, r3
 800920a:	bd80      	pop	{r7, pc}
 800920c:	40021000 	.word	0x40021000
 8009210:	0800c178 	.word	0x0800c178

08009214 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009214:	b580      	push	{r7, lr}
 8009216:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8009218:	f7ff ffde 	bl	80091d8 <HAL_RCC_GetHCLKFreq>
 800921c:	4601      	mov	r1, r0
 800921e:	4b05      	ldr	r3, [pc, #20]	; (8009234 <HAL_RCC_GetPCLK2Freq+0x20>)
 8009220:	685b      	ldr	r3, [r3, #4]
 8009222:	0adb      	lsrs	r3, r3, #11
 8009224:	f003 0307 	and.w	r3, r3, #7
 8009228:	4a03      	ldr	r2, [pc, #12]	; (8009238 <HAL_RCC_GetPCLK2Freq+0x24>)
 800922a:	5cd3      	ldrb	r3, [r2, r3]
 800922c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8009230:	4618      	mov	r0, r3
 8009232:	bd80      	pop	{r7, pc}
 8009234:	40021000 	.word	0x40021000
 8009238:	0800c178 	.word	0x0800c178

0800923c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800923c:	b480      	push	{r7}
 800923e:	b085      	sub	sp, #20
 8009240:	af00      	add	r7, sp, #0
 8009242:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8009244:	4b0a      	ldr	r3, [pc, #40]	; (8009270 <RCC_Delay+0x34>)
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	4a0a      	ldr	r2, [pc, #40]	; (8009274 <RCC_Delay+0x38>)
 800924a:	fba2 2303 	umull	r2, r3, r2, r3
 800924e:	0a5b      	lsrs	r3, r3, #9
 8009250:	687a      	ldr	r2, [r7, #4]
 8009252:	fb02 f303 	mul.w	r3, r2, r3
 8009256:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8009258:	bf00      	nop
  }
  while (Delay --);
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	1e5a      	subs	r2, r3, #1
 800925e:	60fa      	str	r2, [r7, #12]
 8009260:	2b00      	cmp	r3, #0
 8009262:	d1f9      	bne.n	8009258 <RCC_Delay+0x1c>
}
 8009264:	bf00      	nop
 8009266:	3714      	adds	r7, #20
 8009268:	46bd      	mov	sp, r7
 800926a:	bc80      	pop	{r7}
 800926c:	4770      	bx	lr
 800926e:	bf00      	nop
 8009270:	20000020 	.word	0x20000020
 8009274:	10624dd3 	.word	0x10624dd3

08009278 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009278:	b580      	push	{r7, lr}
 800927a:	b086      	sub	sp, #24
 800927c:	af00      	add	r7, sp, #0
 800927e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8009280:	2300      	movs	r3, #0
 8009282:	613b      	str	r3, [r7, #16]
 8009284:	2300      	movs	r3, #0
 8009286:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	f003 0301 	and.w	r3, r3, #1
 8009290:	2b00      	cmp	r3, #0
 8009292:	d07d      	beq.n	8009390 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8009294:	2300      	movs	r3, #0
 8009296:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009298:	4b4f      	ldr	r3, [pc, #316]	; (80093d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800929a:	69db      	ldr	r3, [r3, #28]
 800929c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d10d      	bne.n	80092c0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80092a4:	4b4c      	ldr	r3, [pc, #304]	; (80093d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80092a6:	69db      	ldr	r3, [r3, #28]
 80092a8:	4a4b      	ldr	r2, [pc, #300]	; (80093d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80092aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80092ae:	61d3      	str	r3, [r2, #28]
 80092b0:	4b49      	ldr	r3, [pc, #292]	; (80093d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80092b2:	69db      	ldr	r3, [r3, #28]
 80092b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80092b8:	60bb      	str	r3, [r7, #8]
 80092ba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80092bc:	2301      	movs	r3, #1
 80092be:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80092c0:	4b46      	ldr	r3, [pc, #280]	; (80093dc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d118      	bne.n	80092fe <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80092cc:	4b43      	ldr	r3, [pc, #268]	; (80093dc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	4a42      	ldr	r2, [pc, #264]	; (80093dc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80092d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80092d6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80092d8:	f7ff f8fc 	bl	80084d4 <HAL_GetTick>
 80092dc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80092de:	e008      	b.n	80092f2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80092e0:	f7ff f8f8 	bl	80084d4 <HAL_GetTick>
 80092e4:	4602      	mov	r2, r0
 80092e6:	693b      	ldr	r3, [r7, #16]
 80092e8:	1ad3      	subs	r3, r2, r3
 80092ea:	2b64      	cmp	r3, #100	; 0x64
 80092ec:	d901      	bls.n	80092f2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80092ee:	2303      	movs	r3, #3
 80092f0:	e06d      	b.n	80093ce <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80092f2:	4b3a      	ldr	r3, [pc, #232]	; (80093dc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d0f0      	beq.n	80092e0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80092fe:	4b36      	ldr	r3, [pc, #216]	; (80093d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009300:	6a1b      	ldr	r3, [r3, #32]
 8009302:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009306:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	2b00      	cmp	r3, #0
 800930c:	d02e      	beq.n	800936c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	685b      	ldr	r3, [r3, #4]
 8009312:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009316:	68fa      	ldr	r2, [r7, #12]
 8009318:	429a      	cmp	r2, r3
 800931a:	d027      	beq.n	800936c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800931c:	4b2e      	ldr	r3, [pc, #184]	; (80093d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800931e:	6a1b      	ldr	r3, [r3, #32]
 8009320:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009324:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8009326:	4b2e      	ldr	r3, [pc, #184]	; (80093e0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8009328:	2201      	movs	r2, #1
 800932a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800932c:	4b2c      	ldr	r3, [pc, #176]	; (80093e0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800932e:	2200      	movs	r2, #0
 8009330:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8009332:	4a29      	ldr	r2, [pc, #164]	; (80093d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	f003 0301 	and.w	r3, r3, #1
 800933e:	2b00      	cmp	r3, #0
 8009340:	d014      	beq.n	800936c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009342:	f7ff f8c7 	bl	80084d4 <HAL_GetTick>
 8009346:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009348:	e00a      	b.n	8009360 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800934a:	f7ff f8c3 	bl	80084d4 <HAL_GetTick>
 800934e:	4602      	mov	r2, r0
 8009350:	693b      	ldr	r3, [r7, #16]
 8009352:	1ad3      	subs	r3, r2, r3
 8009354:	f241 3288 	movw	r2, #5000	; 0x1388
 8009358:	4293      	cmp	r3, r2
 800935a:	d901      	bls.n	8009360 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800935c:	2303      	movs	r3, #3
 800935e:	e036      	b.n	80093ce <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009360:	4b1d      	ldr	r3, [pc, #116]	; (80093d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009362:	6a1b      	ldr	r3, [r3, #32]
 8009364:	f003 0302 	and.w	r3, r3, #2
 8009368:	2b00      	cmp	r3, #0
 800936a:	d0ee      	beq.n	800934a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800936c:	4b1a      	ldr	r3, [pc, #104]	; (80093d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800936e:	6a1b      	ldr	r3, [r3, #32]
 8009370:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	685b      	ldr	r3, [r3, #4]
 8009378:	4917      	ldr	r1, [pc, #92]	; (80093d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800937a:	4313      	orrs	r3, r2
 800937c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800937e:	7dfb      	ldrb	r3, [r7, #23]
 8009380:	2b01      	cmp	r3, #1
 8009382:	d105      	bne.n	8009390 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009384:	4b14      	ldr	r3, [pc, #80]	; (80093d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009386:	69db      	ldr	r3, [r3, #28]
 8009388:	4a13      	ldr	r2, [pc, #76]	; (80093d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800938a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800938e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	f003 0302 	and.w	r3, r3, #2
 8009398:	2b00      	cmp	r3, #0
 800939a:	d008      	beq.n	80093ae <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800939c:	4b0e      	ldr	r3, [pc, #56]	; (80093d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800939e:	685b      	ldr	r3, [r3, #4]
 80093a0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	689b      	ldr	r3, [r3, #8]
 80093a8:	490b      	ldr	r1, [pc, #44]	; (80093d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80093aa:	4313      	orrs	r3, r2
 80093ac:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	f003 0310 	and.w	r3, r3, #16
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d008      	beq.n	80093cc <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80093ba:	4b07      	ldr	r3, [pc, #28]	; (80093d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80093bc:	685b      	ldr	r3, [r3, #4]
 80093be:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	695b      	ldr	r3, [r3, #20]
 80093c6:	4904      	ldr	r1, [pc, #16]	; (80093d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80093c8:	4313      	orrs	r3, r2
 80093ca:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80093cc:	2300      	movs	r3, #0
}
 80093ce:	4618      	mov	r0, r3
 80093d0:	3718      	adds	r7, #24
 80093d2:	46bd      	mov	sp, r7
 80093d4:	bd80      	pop	{r7, pc}
 80093d6:	bf00      	nop
 80093d8:	40021000 	.word	0x40021000
 80093dc:	40007000 	.word	0x40007000
 80093e0:	42420440 	.word	0x42420440

080093e4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80093e4:	b590      	push	{r4, r7, lr}
 80093e6:	b08d      	sub	sp, #52	; 0x34
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80093ec:	4b6b      	ldr	r3, [pc, #428]	; (800959c <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 80093ee:	f107 040c 	add.w	r4, r7, #12
 80093f2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80093f4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80093f8:	4b69      	ldr	r3, [pc, #420]	; (80095a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 80093fa:	881b      	ldrh	r3, [r3, #0]
 80093fc:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80093fe:	2300      	movs	r3, #0
 8009400:	627b      	str	r3, [r7, #36]	; 0x24
 8009402:	2300      	movs	r3, #0
 8009404:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009406:	2300      	movs	r3, #0
 8009408:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 800940a:	2300      	movs	r3, #0
 800940c:	61fb      	str	r3, [r7, #28]
 800940e:	2300      	movs	r3, #0
 8009410:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	3b01      	subs	r3, #1
 8009416:	2b0f      	cmp	r3, #15
 8009418:	f200 80b6 	bhi.w	8009588 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 800941c:	a201      	add	r2, pc, #4	; (adr r2, 8009424 <HAL_RCCEx_GetPeriphCLKFreq+0x40>)
 800941e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009422:	bf00      	nop
 8009424:	08009507 	.word	0x08009507
 8009428:	0800956d 	.word	0x0800956d
 800942c:	08009589 	.word	0x08009589
 8009430:	080094f7 	.word	0x080094f7
 8009434:	08009589 	.word	0x08009589
 8009438:	08009589 	.word	0x08009589
 800943c:	08009589 	.word	0x08009589
 8009440:	080094ff 	.word	0x080094ff
 8009444:	08009589 	.word	0x08009589
 8009448:	08009589 	.word	0x08009589
 800944c:	08009589 	.word	0x08009589
 8009450:	08009589 	.word	0x08009589
 8009454:	08009589 	.word	0x08009589
 8009458:	08009589 	.word	0x08009589
 800945c:	08009589 	.word	0x08009589
 8009460:	08009465 	.word	0x08009465
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_USB:
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 8009464:	4b4f      	ldr	r3, [pc, #316]	; (80095a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>)
 8009466:	685b      	ldr	r3, [r3, #4]
 8009468:	61fb      	str	r3, [r7, #28]

      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800946a:	4b4e      	ldr	r3, [pc, #312]	; (80095a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>)
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009472:	2b00      	cmp	r3, #0
 8009474:	f000 808a 	beq.w	800958c <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8009478:	69fb      	ldr	r3, [r7, #28]
 800947a:	0c9b      	lsrs	r3, r3, #18
 800947c:	f003 030f 	and.w	r3, r3, #15
 8009480:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8009484:	4413      	add	r3, r2
 8009486:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800948a:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800948c:	69fb      	ldr	r3, [r7, #28]
 800948e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009492:	2b00      	cmp	r3, #0
 8009494:	d018      	beq.n	80094c8 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8009496:	4b43      	ldr	r3, [pc, #268]	; (80095a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>)
 8009498:	685b      	ldr	r3, [r3, #4]
 800949a:	0c5b      	lsrs	r3, r3, #17
 800949c:	f003 0301 	and.w	r3, r3, #1
 80094a0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80094a4:	4413      	add	r3, r2
 80094a6:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80094aa:	627b      	str	r3, [r7, #36]	; 0x24
          if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
          {
            pllclk = pllclk / 2;
          }
#else
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80094ac:	69fb      	ldr	r3, [r7, #28]
 80094ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d00d      	beq.n	80094d2 <HAL_RCCEx_GetPeriphCLKFreq+0xee>
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80094b6:	4a3c      	ldr	r2, [pc, #240]	; (80095a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>)
 80094b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094ba:	fbb2 f2f3 	udiv	r2, r2, r3
 80094be:	6a3b      	ldr	r3, [r7, #32]
 80094c0:	fb02 f303 	mul.w	r3, r2, r3
 80094c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80094c6:	e004      	b.n	80094d2 <HAL_RCCEx_GetPeriphCLKFreq+0xee>
#endif /* STM32F105xC || STM32F107xC */
        }
        else
        {
          /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80094c8:	6a3b      	ldr	r3, [r7, #32]
 80094ca:	4a38      	ldr	r2, [pc, #224]	; (80095ac <HAL_RCCEx_GetPeriphCLKFreq+0x1c8>)
 80094cc:	fb02 f303 	mul.w	r3, r2, r3
 80094d0:	62fb      	str	r3, [r7, #44]	; 0x2c
          /* Prescaler of 3 selected for USB */
          frequency = (2 * pllclk) / 3;
        }
#else
        /* USBCLK = PLLCLK / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80094d2:	4b34      	ldr	r3, [pc, #208]	; (80095a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>)
 80094d4:	685b      	ldr	r3, [r3, #4]
 80094d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80094da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80094de:	d102      	bne.n	80094e6 <HAL_RCCEx_GetPeriphCLKFreq+0x102>
        {
          /* No prescaler selected for USB */
          frequency = pllclk;
 80094e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094e2:	62bb      	str	r3, [r7, #40]	; 0x28
          /* Prescaler of 1.5 selected for USB */
          frequency = (pllclk * 2) / 3;
        }
#endif
      }
      break;
 80094e4:	e052      	b.n	800958c <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
          frequency = (pllclk * 2) / 3;
 80094e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094e8:	005b      	lsls	r3, r3, #1
 80094ea:	4a31      	ldr	r2, [pc, #196]	; (80095b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cc>)
 80094ec:	fba2 2303 	umull	r2, r3, r2, r3
 80094f0:	085b      	lsrs	r3, r3, #1
 80094f2:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80094f4:	e04a      	b.n	800958c <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
#if defined(STM32F103xE) || defined(STM32F103xG) || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_I2S2:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S2 */
      frequency = HAL_RCC_GetSysClockFreq();
 80094f6:	f7ff fe0d 	bl	8009114 <HAL_RCC_GetSysClockFreq>
 80094fa:	62b8      	str	r0, [r7, #40]	; 0x28
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 80094fc:	e049      	b.n	8009592 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
    }
    case RCC_PERIPHCLK_I2S3:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S3 */
      frequency = HAL_RCC_GetSysClockFreq();
 80094fe:	f7ff fe09 	bl	8009114 <HAL_RCC_GetSysClockFreq>
 8009502:	62b8      	str	r0, [r7, #40]	; 0x28
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8009504:	e045      	b.n	8009592 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
    case RCC_PERIPHCLK_RTC:
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 8009506:	4b27      	ldr	r3, [pc, #156]	; (80095a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>)
 8009508:	6a1b      	ldr	r3, [r3, #32]
 800950a:	61fb      	str	r3, [r7, #28]

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800950c:	69fb      	ldr	r3, [r7, #28]
 800950e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009512:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009516:	d108      	bne.n	800952a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8009518:	69fb      	ldr	r3, [r7, #28]
 800951a:	f003 0302 	and.w	r3, r3, #2
 800951e:	2b00      	cmp	r3, #0
 8009520:	d003      	beq.n	800952a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      {
        frequency = LSE_VALUE;
 8009522:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009526:	62bb      	str	r3, [r7, #40]	; 0x28
 8009528:	e01f      	b.n	800956a <HAL_RCCEx_GetPeriphCLKFreq+0x186>
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800952a:	69fb      	ldr	r3, [r7, #28]
 800952c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009530:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009534:	d109      	bne.n	800954a <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8009536:	4b1b      	ldr	r3, [pc, #108]	; (80095a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>)
 8009538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800953a:	f003 0302 	and.w	r3, r3, #2
 800953e:	2b00      	cmp	r3, #0
 8009540:	d003      	beq.n	800954a <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      {
        frequency = LSI_VALUE;
 8009542:	f649 4340 	movw	r3, #40000	; 0x9c40
 8009546:	62bb      	str	r3, [r7, #40]	; 0x28
 8009548:	e00f      	b.n	800956a <HAL_RCCEx_GetPeriphCLKFreq+0x186>
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800954a:	69fb      	ldr	r3, [r7, #28]
 800954c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009550:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009554:	d11c      	bne.n	8009590 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 8009556:	4b13      	ldr	r3, [pc, #76]	; (80095a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>)
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800955e:	2b00      	cmp	r3, #0
 8009560:	d016      	beq.n	8009590 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
      {
        frequency = HSE_VALUE / 128U;
 8009562:	f24f 4324 	movw	r3, #62500	; 0xf424
 8009566:	62bb      	str	r3, [r7, #40]	; 0x28
      /* Clock not enabled for RTC*/
      else
      {
        /* nothing to do: frequency already initialized to 0U */
      }
      break;
 8009568:	e012      	b.n	8009590 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 800956a:	e011      	b.n	8009590 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
    }
    case RCC_PERIPHCLK_ADC:
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800956c:	f7ff fe52 	bl	8009214 <HAL_RCC_GetPCLK2Freq>
 8009570:	4602      	mov	r2, r0
 8009572:	4b0c      	ldr	r3, [pc, #48]	; (80095a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>)
 8009574:	685b      	ldr	r3, [r3, #4]
 8009576:	0b9b      	lsrs	r3, r3, #14
 8009578:	f003 0303 	and.w	r3, r3, #3
 800957c:	3301      	adds	r3, #1
 800957e:	005b      	lsls	r3, r3, #1
 8009580:	fbb2 f3f3 	udiv	r3, r2, r3
 8009584:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8009586:	e004      	b.n	8009592 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
    }
    default:
    {
      break;
 8009588:	bf00      	nop
 800958a:	e002      	b.n	8009592 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
      break;
 800958c:	bf00      	nop
 800958e:	e000      	b.n	8009592 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
      break;
 8009590:	bf00      	nop
    }
  }
  return (frequency);
 8009592:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8009594:	4618      	mov	r0, r3
 8009596:	3734      	adds	r7, #52	; 0x34
 8009598:	46bd      	mov	sp, r7
 800959a:	bd90      	pop	{r4, r7, pc}
 800959c:	0800a994 	.word	0x0800a994
 80095a0:	0800a9a4 	.word	0x0800a9a4
 80095a4:	40021000 	.word	0x40021000
 80095a8:	007a1200 	.word	0x007a1200
 80095ac:	003d0900 	.word	0x003d0900
 80095b0:	aaaaaaab 	.word	0xaaaaaaab

080095b4 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80095b4:	b580      	push	{r7, lr}
 80095b6:	b084      	sub	sp, #16
 80095b8:	af00      	add	r7, sp, #0
 80095ba:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 80095bc:	2300      	movs	r3, #0
 80095be:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d101      	bne.n	80095ca <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80095c6:	2301      	movs	r3, #1
 80095c8:	e084      	b.n	80096d4 <HAL_RTC_Init+0x120>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	7c5b      	ldrb	r3, [r3, #17]
 80095ce:	b2db      	uxtb	r3, r3
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d105      	bne.n	80095e0 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	2200      	movs	r2, #0
 80095d8:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80095da:	6878      	ldr	r0, [r7, #4]
 80095dc:	f7fe fd94 	bl	8008108 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	2202      	movs	r2, #2
 80095e4:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80095e6:	6878      	ldr	r0, [r7, #4]
 80095e8:	f000 f952 	bl	8009890 <HAL_RTC_WaitForSynchro>
 80095ec:	4603      	mov	r3, r0
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d004      	beq.n	80095fc <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	2204      	movs	r2, #4
 80095f6:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 80095f8:	2301      	movs	r3, #1
 80095fa:	e06b      	b.n	80096d4 <HAL_RTC_Init+0x120>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80095fc:	6878      	ldr	r0, [r7, #4]
 80095fe:	f000 fa0b 	bl	8009a18 <RTC_EnterInitMode>
 8009602:	4603      	mov	r3, r0
 8009604:	2b00      	cmp	r3, #0
 8009606:	d004      	beq.n	8009612 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	2204      	movs	r2, #4
 800960c:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 800960e:	2301      	movs	r3, #1
 8009610:	e060      	b.n	80096d4 <HAL_RTC_Init+0x120>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	685a      	ldr	r2, [r3, #4]
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	f022 0207 	bic.w	r2, r2, #7
 8009620:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	689b      	ldr	r3, [r3, #8]
 8009626:	2b00      	cmp	r3, #0
 8009628:	d005      	beq.n	8009636 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 800962a:	4b2c      	ldr	r3, [pc, #176]	; (80096dc <HAL_RTC_Init+0x128>)
 800962c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800962e:	4a2b      	ldr	r2, [pc, #172]	; (80096dc <HAL_RTC_Init+0x128>)
 8009630:	f023 0301 	bic.w	r3, r3, #1
 8009634:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8009636:	4b29      	ldr	r3, [pc, #164]	; (80096dc <HAL_RTC_Init+0x128>)
 8009638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800963a:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	689b      	ldr	r3, [r3, #8]
 8009642:	4926      	ldr	r1, [pc, #152]	; (80096dc <HAL_RTC_Init+0x128>)
 8009644:	4313      	orrs	r3, r2
 8009646:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	685b      	ldr	r3, [r3, #4]
 800964c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009650:	d003      	beq.n	800965a <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	685b      	ldr	r3, [r3, #4]
 8009656:	60fb      	str	r3, [r7, #12]
 8009658:	e00e      	b.n	8009678 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 800965a:	2001      	movs	r0, #1
 800965c:	f7ff fec2 	bl	80093e4 <HAL_RCCEx_GetPeriphCLKFreq>
 8009660:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	2b00      	cmp	r3, #0
 8009666:	d104      	bne.n	8009672 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	2204      	movs	r2, #4
 800966c:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 800966e:	2301      	movs	r3, #1
 8009670:	e030      	b.n	80096d4 <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	3b01      	subs	r3, #1
 8009676:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	689b      	ldr	r3, [r3, #8]
 800967e:	f023 010f 	bic.w	r1, r3, #15
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	0c1a      	lsrs	r2, r3, #16
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	430a      	orrs	r2, r1
 800968c:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	68db      	ldr	r3, [r3, #12]
 8009694:	0c1b      	lsrs	r3, r3, #16
 8009696:	041b      	lsls	r3, r3, #16
 8009698:	68fa      	ldr	r2, [r7, #12]
 800969a:	b291      	uxth	r1, r2
 800969c:	687a      	ldr	r2, [r7, #4]
 800969e:	6812      	ldr	r2, [r2, #0]
 80096a0:	430b      	orrs	r3, r1
 80096a2:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80096a4:	6878      	ldr	r0, [r7, #4]
 80096a6:	f000 f9df 	bl	8009a68 <RTC_ExitInitMode>
 80096aa:	4603      	mov	r3, r0
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d004      	beq.n	80096ba <HAL_RTC_Init+0x106>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	2204      	movs	r2, #4
 80096b4:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 80096b6:	2301      	movs	r3, #1
 80096b8:	e00c      	b.n	80096d4 <HAL_RTC_Init+0x120>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	2200      	movs	r2, #0
 80096be:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	2201      	movs	r2, #1
 80096c4:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	2201      	movs	r2, #1
 80096ca:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	2201      	movs	r2, #1
 80096d0:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 80096d2:	2300      	movs	r3, #0
  }
}
 80096d4:	4618      	mov	r0, r3
 80096d6:	3710      	adds	r7, #16
 80096d8:	46bd      	mov	sp, r7
 80096da:	bd80      	pop	{r7, pc}
 80096dc:	40006c00 	.word	0x40006c00

080096e0 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80096e0:	b580      	push	{r7, lr}
 80096e2:	b088      	sub	sp, #32
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	60f8      	str	r0, [r7, #12]
 80096e8:	60b9      	str	r1, [r7, #8]
 80096ea:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 80096ec:	2300      	movs	r3, #0
 80096ee:	61bb      	str	r3, [r7, #24]
 80096f0:	2300      	movs	r3, #0
 80096f2:	61fb      	str	r3, [r7, #28]
 80096f4:	2300      	movs	r3, #0
 80096f6:	617b      	str	r3, [r7, #20]
 80096f8:	2300      	movs	r3, #0
 80096fa:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d002      	beq.n	8009708 <HAL_RTC_GetTime+0x28>
 8009702:	68bb      	ldr	r3, [r7, #8]
 8009704:	2b00      	cmp	r3, #0
 8009706:	d101      	bne.n	800970c <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 8009708:	2301      	movs	r3, #1
 800970a:	e0b5      	b.n	8009878 <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	685b      	ldr	r3, [r3, #4]
 8009712:	f003 0304 	and.w	r3, r3, #4
 8009716:	2b00      	cmp	r3, #0
 8009718:	d001      	beq.n	800971e <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 800971a:	2301      	movs	r3, #1
 800971c:	e0ac      	b.n	8009878 <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 800971e:	68f8      	ldr	r0, [r7, #12]
 8009720:	f000 f8e3 	bl	80098ea <RTC_ReadTimeCounter>
 8009724:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8009726:	69bb      	ldr	r3, [r7, #24]
 8009728:	4a55      	ldr	r2, [pc, #340]	; (8009880 <HAL_RTC_GetTime+0x1a0>)
 800972a:	fba2 2303 	umull	r2, r3, r2, r3
 800972e:	0adb      	lsrs	r3, r3, #11
 8009730:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 8009732:	69ba      	ldr	r2, [r7, #24]
 8009734:	4b52      	ldr	r3, [pc, #328]	; (8009880 <HAL_RTC_GetTime+0x1a0>)
 8009736:	fba3 1302 	umull	r1, r3, r3, r2
 800973a:	0adb      	lsrs	r3, r3, #11
 800973c:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8009740:	fb01 f303 	mul.w	r3, r1, r3
 8009744:	1ad3      	subs	r3, r2, r3
 8009746:	4a4f      	ldr	r2, [pc, #316]	; (8009884 <HAL_RTC_GetTime+0x1a4>)
 8009748:	fba2 2303 	umull	r2, r3, r2, r3
 800974c:	095b      	lsrs	r3, r3, #5
 800974e:	b2da      	uxtb	r2, r3
 8009750:	68bb      	ldr	r3, [r7, #8]
 8009752:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 8009754:	69bb      	ldr	r3, [r7, #24]
 8009756:	4a4a      	ldr	r2, [pc, #296]	; (8009880 <HAL_RTC_GetTime+0x1a0>)
 8009758:	fba2 1203 	umull	r1, r2, r2, r3
 800975c:	0ad2      	lsrs	r2, r2, #11
 800975e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8009762:	fb01 f202 	mul.w	r2, r1, r2
 8009766:	1a9a      	subs	r2, r3, r2
 8009768:	4b46      	ldr	r3, [pc, #280]	; (8009884 <HAL_RTC_GetTime+0x1a4>)
 800976a:	fba3 1302 	umull	r1, r3, r3, r2
 800976e:	0959      	lsrs	r1, r3, #5
 8009770:	460b      	mov	r3, r1
 8009772:	011b      	lsls	r3, r3, #4
 8009774:	1a5b      	subs	r3, r3, r1
 8009776:	009b      	lsls	r3, r3, #2
 8009778:	1ad1      	subs	r1, r2, r3
 800977a:	b2ca      	uxtb	r2, r1
 800977c:	68bb      	ldr	r3, [r7, #8]
 800977e:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 8009780:	693b      	ldr	r3, [r7, #16]
 8009782:	2b17      	cmp	r3, #23
 8009784:	d955      	bls.n	8009832 <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 8009786:	693b      	ldr	r3, [r7, #16]
 8009788:	4a3f      	ldr	r2, [pc, #252]	; (8009888 <HAL_RTC_GetTime+0x1a8>)
 800978a:	fba2 2303 	umull	r2, r3, r2, r3
 800978e:	091b      	lsrs	r3, r3, #4
 8009790:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 8009792:	6939      	ldr	r1, [r7, #16]
 8009794:	4b3c      	ldr	r3, [pc, #240]	; (8009888 <HAL_RTC_GetTime+0x1a8>)
 8009796:	fba3 2301 	umull	r2, r3, r3, r1
 800979a:	091a      	lsrs	r2, r3, #4
 800979c:	4613      	mov	r3, r2
 800979e:	005b      	lsls	r3, r3, #1
 80097a0:	4413      	add	r3, r2
 80097a2:	00db      	lsls	r3, r3, #3
 80097a4:	1aca      	subs	r2, r1, r3
 80097a6:	b2d2      	uxtb	r2, r2
 80097a8:	68bb      	ldr	r3, [r7, #8]
 80097aa:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80097ac:	68f8      	ldr	r0, [r7, #12]
 80097ae:	f000 f8f3 	bl	8009998 <RTC_ReadAlarmCounter>
 80097b2:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 80097b4:	69fb      	ldr	r3, [r7, #28]
 80097b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097ba:	d008      	beq.n	80097ce <HAL_RTC_GetTime+0xee>
 80097bc:	69fa      	ldr	r2, [r7, #28]
 80097be:	69bb      	ldr	r3, [r7, #24]
 80097c0:	429a      	cmp	r2, r3
 80097c2:	d904      	bls.n	80097ce <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 80097c4:	69fa      	ldr	r2, [r7, #28]
 80097c6:	69bb      	ldr	r3, [r7, #24]
 80097c8:	1ad3      	subs	r3, r2, r3
 80097ca:	61fb      	str	r3, [r7, #28]
 80097cc:	e002      	b.n	80097d4 <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 80097ce:	f04f 33ff 	mov.w	r3, #4294967295
 80097d2:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 80097d4:	697b      	ldr	r3, [r7, #20]
 80097d6:	4a2d      	ldr	r2, [pc, #180]	; (800988c <HAL_RTC_GetTime+0x1ac>)
 80097d8:	fb02 f303 	mul.w	r3, r2, r3
 80097dc:	69ba      	ldr	r2, [r7, #24]
 80097de:	1ad3      	subs	r3, r2, r3
 80097e0:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80097e2:	69b9      	ldr	r1, [r7, #24]
 80097e4:	68f8      	ldr	r0, [r7, #12]
 80097e6:	f000 f8b0 	bl	800994a <RTC_WriteTimeCounter>
 80097ea:	4603      	mov	r3, r0
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d001      	beq.n	80097f4 <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 80097f0:	2301      	movs	r3, #1
 80097f2:	e041      	b.n	8009878 <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80097f4:	69fb      	ldr	r3, [r7, #28]
 80097f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097fa:	d00c      	beq.n	8009816 <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 80097fc:	69fa      	ldr	r2, [r7, #28]
 80097fe:	69bb      	ldr	r3, [r7, #24]
 8009800:	4413      	add	r3, r2
 8009802:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8009804:	69f9      	ldr	r1, [r7, #28]
 8009806:	68f8      	ldr	r0, [r7, #12]
 8009808:	f000 f8df 	bl	80099ca <RTC_WriteAlarmCounter>
 800980c:	4603      	mov	r3, r0
 800980e:	2b00      	cmp	r3, #0
 8009810:	d00a      	beq.n	8009828 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8009812:	2301      	movs	r3, #1
 8009814:	e030      	b.n	8009878 <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8009816:	69f9      	ldr	r1, [r7, #28]
 8009818:	68f8      	ldr	r0, [r7, #12]
 800981a:	f000 f8d6 	bl	80099ca <RTC_WriteAlarmCounter>
 800981e:	4603      	mov	r3, r0
 8009820:	2b00      	cmp	r3, #0
 8009822:	d001      	beq.n	8009828 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8009824:	2301      	movs	r3, #1
 8009826:	e027      	b.n	8009878 <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 8009828:	6979      	ldr	r1, [r7, #20]
 800982a:	68f8      	ldr	r0, [r7, #12]
 800982c:	f000 f961 	bl	8009af2 <RTC_DateUpdate>
 8009830:	e003      	b.n	800983a <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 8009832:	693b      	ldr	r3, [r7, #16]
 8009834:	b2da      	uxtb	r2, r3
 8009836:	68bb      	ldr	r3, [r7, #8]
 8009838:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	2b00      	cmp	r3, #0
 800983e:	d01a      	beq.n	8009876 <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 8009840:	68bb      	ldr	r3, [r7, #8]
 8009842:	781b      	ldrb	r3, [r3, #0]
 8009844:	4618      	mov	r0, r3
 8009846:	f000 f937 	bl	8009ab8 <RTC_ByteToBcd2>
 800984a:	4603      	mov	r3, r0
 800984c:	461a      	mov	r2, r3
 800984e:	68bb      	ldr	r3, [r7, #8]
 8009850:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 8009852:	68bb      	ldr	r3, [r7, #8]
 8009854:	785b      	ldrb	r3, [r3, #1]
 8009856:	4618      	mov	r0, r3
 8009858:	f000 f92e 	bl	8009ab8 <RTC_ByteToBcd2>
 800985c:	4603      	mov	r3, r0
 800985e:	461a      	mov	r2, r3
 8009860:	68bb      	ldr	r3, [r7, #8]
 8009862:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 8009864:	68bb      	ldr	r3, [r7, #8]
 8009866:	789b      	ldrb	r3, [r3, #2]
 8009868:	4618      	mov	r0, r3
 800986a:	f000 f925 	bl	8009ab8 <RTC_ByteToBcd2>
 800986e:	4603      	mov	r3, r0
 8009870:	461a      	mov	r2, r3
 8009872:	68bb      	ldr	r3, [r7, #8]
 8009874:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8009876:	2300      	movs	r3, #0
}
 8009878:	4618      	mov	r0, r3
 800987a:	3720      	adds	r7, #32
 800987c:	46bd      	mov	sp, r7
 800987e:	bd80      	pop	{r7, pc}
 8009880:	91a2b3c5 	.word	0x91a2b3c5
 8009884:	88888889 	.word	0x88888889
 8009888:	aaaaaaab 	.word	0xaaaaaaab
 800988c:	00015180 	.word	0x00015180

08009890 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8009890:	b580      	push	{r7, lr}
 8009892:	b084      	sub	sp, #16
 8009894:	af00      	add	r7, sp, #0
 8009896:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009898:	2300      	movs	r3, #0
 800989a:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d101      	bne.n	80098a6 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 80098a2:	2301      	movs	r3, #1
 80098a4:	e01d      	b.n	80098e2 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	685a      	ldr	r2, [r3, #4]
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	f022 0208 	bic.w	r2, r2, #8
 80098b4:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 80098b6:	f7fe fe0d 	bl	80084d4 <HAL_GetTick>
 80098ba:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 80098bc:	e009      	b.n	80098d2 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80098be:	f7fe fe09 	bl	80084d4 <HAL_GetTick>
 80098c2:	4602      	mov	r2, r0
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	1ad3      	subs	r3, r2, r3
 80098c8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80098cc:	d901      	bls.n	80098d2 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 80098ce:	2303      	movs	r3, #3
 80098d0:	e007      	b.n	80098e2 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	685b      	ldr	r3, [r3, #4]
 80098d8:	f003 0308 	and.w	r3, r3, #8
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d0ee      	beq.n	80098be <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 80098e0:	2300      	movs	r3, #0
}
 80098e2:	4618      	mov	r0, r3
 80098e4:	3710      	adds	r7, #16
 80098e6:	46bd      	mov	sp, r7
 80098e8:	bd80      	pop	{r7, pc}

080098ea <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 80098ea:	b480      	push	{r7}
 80098ec:	b087      	sub	sp, #28
 80098ee:	af00      	add	r7, sp, #0
 80098f0:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 80098f2:	2300      	movs	r3, #0
 80098f4:	827b      	strh	r3, [r7, #18]
 80098f6:	2300      	movs	r3, #0
 80098f8:	823b      	strh	r3, [r7, #16]
 80098fa:	2300      	movs	r3, #0
 80098fc:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 80098fe:	2300      	movs	r3, #0
 8009900:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	699b      	ldr	r3, [r3, #24]
 8009908:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	69db      	ldr	r3, [r3, #28]
 8009910:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	699b      	ldr	r3, [r3, #24]
 8009918:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 800991a:	8a7a      	ldrh	r2, [r7, #18]
 800991c:	8a3b      	ldrh	r3, [r7, #16]
 800991e:	429a      	cmp	r2, r3
 8009920:	d008      	beq.n	8009934 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8009922:	8a3b      	ldrh	r3, [r7, #16]
 8009924:	041a      	lsls	r2, r3, #16
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	69db      	ldr	r3, [r3, #28]
 800992c:	b29b      	uxth	r3, r3
 800992e:	4313      	orrs	r3, r2
 8009930:	617b      	str	r3, [r7, #20]
 8009932:	e004      	b.n	800993e <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8009934:	8a7b      	ldrh	r3, [r7, #18]
 8009936:	041a      	lsls	r2, r3, #16
 8009938:	89fb      	ldrh	r3, [r7, #14]
 800993a:	4313      	orrs	r3, r2
 800993c:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 800993e:	697b      	ldr	r3, [r7, #20]
}
 8009940:	4618      	mov	r0, r3
 8009942:	371c      	adds	r7, #28
 8009944:	46bd      	mov	sp, r7
 8009946:	bc80      	pop	{r7}
 8009948:	4770      	bx	lr

0800994a <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 800994a:	b580      	push	{r7, lr}
 800994c:	b084      	sub	sp, #16
 800994e:	af00      	add	r7, sp, #0
 8009950:	6078      	str	r0, [r7, #4]
 8009952:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009954:	2300      	movs	r3, #0
 8009956:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8009958:	6878      	ldr	r0, [r7, #4]
 800995a:	f000 f85d 	bl	8009a18 <RTC_EnterInitMode>
 800995e:	4603      	mov	r3, r0
 8009960:	2b00      	cmp	r3, #0
 8009962:	d002      	beq.n	800996a <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8009964:	2301      	movs	r3, #1
 8009966:	73fb      	strb	r3, [r7, #15]
 8009968:	e011      	b.n	800998e <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	683a      	ldr	r2, [r7, #0]
 8009970:	0c12      	lsrs	r2, r2, #16
 8009972:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	683a      	ldr	r2, [r7, #0]
 800997a:	b292      	uxth	r2, r2
 800997c:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 800997e:	6878      	ldr	r0, [r7, #4]
 8009980:	f000 f872 	bl	8009a68 <RTC_ExitInitMode>
 8009984:	4603      	mov	r3, r0
 8009986:	2b00      	cmp	r3, #0
 8009988:	d001      	beq.n	800998e <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 800998a:	2301      	movs	r3, #1
 800998c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800998e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009990:	4618      	mov	r0, r3
 8009992:	3710      	adds	r7, #16
 8009994:	46bd      	mov	sp, r7
 8009996:	bd80      	pop	{r7, pc}

08009998 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8009998:	b480      	push	{r7}
 800999a:	b085      	sub	sp, #20
 800999c:	af00      	add	r7, sp, #0
 800999e:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 80099a0:	2300      	movs	r3, #0
 80099a2:	81fb      	strh	r3, [r7, #14]
 80099a4:	2300      	movs	r3, #0
 80099a6:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	6a1b      	ldr	r3, [r3, #32]
 80099ae:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099b6:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 80099b8:	89fb      	ldrh	r3, [r7, #14]
 80099ba:	041a      	lsls	r2, r3, #16
 80099bc:	89bb      	ldrh	r3, [r7, #12]
 80099be:	4313      	orrs	r3, r2
}
 80099c0:	4618      	mov	r0, r3
 80099c2:	3714      	adds	r7, #20
 80099c4:	46bd      	mov	sp, r7
 80099c6:	bc80      	pop	{r7}
 80099c8:	4770      	bx	lr

080099ca <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 80099ca:	b580      	push	{r7, lr}
 80099cc:	b084      	sub	sp, #16
 80099ce:	af00      	add	r7, sp, #0
 80099d0:	6078      	str	r0, [r7, #4]
 80099d2:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80099d4:	2300      	movs	r3, #0
 80099d6:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80099d8:	6878      	ldr	r0, [r7, #4]
 80099da:	f000 f81d 	bl	8009a18 <RTC_EnterInitMode>
 80099de:	4603      	mov	r3, r0
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d002      	beq.n	80099ea <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 80099e4:	2301      	movs	r3, #1
 80099e6:	73fb      	strb	r3, [r7, #15]
 80099e8:	e011      	b.n	8009a0e <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	683a      	ldr	r2, [r7, #0]
 80099f0:	0c12      	lsrs	r2, r2, #16
 80099f2:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	683a      	ldr	r2, [r7, #0]
 80099fa:	b292      	uxth	r2, r2
 80099fc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80099fe:	6878      	ldr	r0, [r7, #4]
 8009a00:	f000 f832 	bl	8009a68 <RTC_ExitInitMode>
 8009a04:	4603      	mov	r3, r0
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d001      	beq.n	8009a0e <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 8009a0a:	2301      	movs	r3, #1
 8009a0c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8009a0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a10:	4618      	mov	r0, r3
 8009a12:	3710      	adds	r7, #16
 8009a14:	46bd      	mov	sp, r7
 8009a16:	bd80      	pop	{r7, pc}

08009a18 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8009a18:	b580      	push	{r7, lr}
 8009a1a:	b084      	sub	sp, #16
 8009a1c:	af00      	add	r7, sp, #0
 8009a1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009a20:	2300      	movs	r3, #0
 8009a22:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8009a24:	f7fe fd56 	bl	80084d4 <HAL_GetTick>
 8009a28:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8009a2a:	e009      	b.n	8009a40 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8009a2c:	f7fe fd52 	bl	80084d4 <HAL_GetTick>
 8009a30:	4602      	mov	r2, r0
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	1ad3      	subs	r3, r2, r3
 8009a36:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009a3a:	d901      	bls.n	8009a40 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8009a3c:	2303      	movs	r3, #3
 8009a3e:	e00f      	b.n	8009a60 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	685b      	ldr	r3, [r3, #4]
 8009a46:	f003 0320 	and.w	r3, r3, #32
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d0ee      	beq.n	8009a2c <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	685a      	ldr	r2, [r3, #4]
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	f042 0210 	orr.w	r2, r2, #16
 8009a5c:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8009a5e:	2300      	movs	r3, #0
}
 8009a60:	4618      	mov	r0, r3
 8009a62:	3710      	adds	r7, #16
 8009a64:	46bd      	mov	sp, r7
 8009a66:	bd80      	pop	{r7, pc}

08009a68 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8009a68:	b580      	push	{r7, lr}
 8009a6a:	b084      	sub	sp, #16
 8009a6c:	af00      	add	r7, sp, #0
 8009a6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009a70:	2300      	movs	r3, #0
 8009a72:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	685a      	ldr	r2, [r3, #4]
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	f022 0210 	bic.w	r2, r2, #16
 8009a82:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8009a84:	f7fe fd26 	bl	80084d4 <HAL_GetTick>
 8009a88:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8009a8a:	e009      	b.n	8009aa0 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8009a8c:	f7fe fd22 	bl	80084d4 <HAL_GetTick>
 8009a90:	4602      	mov	r2, r0
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	1ad3      	subs	r3, r2, r3
 8009a96:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009a9a:	d901      	bls.n	8009aa0 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8009a9c:	2303      	movs	r3, #3
 8009a9e:	e007      	b.n	8009ab0 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	685b      	ldr	r3, [r3, #4]
 8009aa6:	f003 0320 	and.w	r3, r3, #32
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d0ee      	beq.n	8009a8c <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8009aae:	2300      	movs	r3, #0
}
 8009ab0:	4618      	mov	r0, r3
 8009ab2:	3710      	adds	r7, #16
 8009ab4:	46bd      	mov	sp, r7
 8009ab6:	bd80      	pop	{r7, pc}

08009ab8 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8009ab8:	b480      	push	{r7}
 8009aba:	b085      	sub	sp, #20
 8009abc:	af00      	add	r7, sp, #0
 8009abe:	4603      	mov	r3, r0
 8009ac0:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8009ac2:	2300      	movs	r3, #0
 8009ac4:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 8009ac6:	e005      	b.n	8009ad4 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	3301      	adds	r3, #1
 8009acc:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8009ace:	79fb      	ldrb	r3, [r7, #7]
 8009ad0:	3b0a      	subs	r3, #10
 8009ad2:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 8009ad4:	79fb      	ldrb	r3, [r7, #7]
 8009ad6:	2b09      	cmp	r3, #9
 8009ad8:	d8f6      	bhi.n	8009ac8 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	b2db      	uxtb	r3, r3
 8009ade:	011b      	lsls	r3, r3, #4
 8009ae0:	b2da      	uxtb	r2, r3
 8009ae2:	79fb      	ldrb	r3, [r7, #7]
 8009ae4:	4313      	orrs	r3, r2
 8009ae6:	b2db      	uxtb	r3, r3
}
 8009ae8:	4618      	mov	r0, r3
 8009aea:	3714      	adds	r7, #20
 8009aec:	46bd      	mov	sp, r7
 8009aee:	bc80      	pop	{r7}
 8009af0:	4770      	bx	lr

08009af2 <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 8009af2:	b580      	push	{r7, lr}
 8009af4:	b086      	sub	sp, #24
 8009af6:	af00      	add	r7, sp, #0
 8009af8:	6078      	str	r0, [r7, #4]
 8009afa:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 8009afc:	2300      	movs	r3, #0
 8009afe:	617b      	str	r3, [r7, #20]
 8009b00:	2300      	movs	r3, #0
 8009b02:	613b      	str	r3, [r7, #16]
 8009b04:	2300      	movs	r3, #0
 8009b06:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 8009b08:	2300      	movs	r3, #0
 8009b0a:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	7bdb      	ldrb	r3, [r3, #15]
 8009b10:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	7b5b      	ldrb	r3, [r3, #13]
 8009b16:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	7b9b      	ldrb	r3, [r3, #14]
 8009b1c:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 8009b1e:	2300      	movs	r3, #0
 8009b20:	60bb      	str	r3, [r7, #8]
 8009b22:	e06f      	b.n	8009c04 <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 8009b24:	693b      	ldr	r3, [r7, #16]
 8009b26:	2b01      	cmp	r3, #1
 8009b28:	d011      	beq.n	8009b4e <RTC_DateUpdate+0x5c>
 8009b2a:	693b      	ldr	r3, [r7, #16]
 8009b2c:	2b03      	cmp	r3, #3
 8009b2e:	d00e      	beq.n	8009b4e <RTC_DateUpdate+0x5c>
 8009b30:	693b      	ldr	r3, [r7, #16]
 8009b32:	2b05      	cmp	r3, #5
 8009b34:	d00b      	beq.n	8009b4e <RTC_DateUpdate+0x5c>
 8009b36:	693b      	ldr	r3, [r7, #16]
 8009b38:	2b07      	cmp	r3, #7
 8009b3a:	d008      	beq.n	8009b4e <RTC_DateUpdate+0x5c>
 8009b3c:	693b      	ldr	r3, [r7, #16]
 8009b3e:	2b08      	cmp	r3, #8
 8009b40:	d005      	beq.n	8009b4e <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 8009b42:	693b      	ldr	r3, [r7, #16]
 8009b44:	2b0a      	cmp	r3, #10
 8009b46:	d002      	beq.n	8009b4e <RTC_DateUpdate+0x5c>
 8009b48:	693b      	ldr	r3, [r7, #16]
 8009b4a:	2b0c      	cmp	r3, #12
 8009b4c:	d117      	bne.n	8009b7e <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	2b1e      	cmp	r3, #30
 8009b52:	d803      	bhi.n	8009b5c <RTC_DateUpdate+0x6a>
      {
        day++;
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	3301      	adds	r3, #1
 8009b58:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8009b5a:	e050      	b.n	8009bfe <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 8009b5c:	693b      	ldr	r3, [r7, #16]
 8009b5e:	2b0c      	cmp	r3, #12
 8009b60:	d005      	beq.n	8009b6e <RTC_DateUpdate+0x7c>
        {
          month++;
 8009b62:	693b      	ldr	r3, [r7, #16]
 8009b64:	3301      	adds	r3, #1
 8009b66:	613b      	str	r3, [r7, #16]
          day = 1U;
 8009b68:	2301      	movs	r3, #1
 8009b6a:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8009b6c:	e047      	b.n	8009bfe <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 8009b6e:	2301      	movs	r3, #1
 8009b70:	613b      	str	r3, [r7, #16]
          day = 1U;
 8009b72:	2301      	movs	r3, #1
 8009b74:	60fb      	str	r3, [r7, #12]
          year++;
 8009b76:	697b      	ldr	r3, [r7, #20]
 8009b78:	3301      	adds	r3, #1
 8009b7a:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 8009b7c:	e03f      	b.n	8009bfe <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 8009b7e:	693b      	ldr	r3, [r7, #16]
 8009b80:	2b04      	cmp	r3, #4
 8009b82:	d008      	beq.n	8009b96 <RTC_DateUpdate+0xa4>
 8009b84:	693b      	ldr	r3, [r7, #16]
 8009b86:	2b06      	cmp	r3, #6
 8009b88:	d005      	beq.n	8009b96 <RTC_DateUpdate+0xa4>
 8009b8a:	693b      	ldr	r3, [r7, #16]
 8009b8c:	2b09      	cmp	r3, #9
 8009b8e:	d002      	beq.n	8009b96 <RTC_DateUpdate+0xa4>
 8009b90:	693b      	ldr	r3, [r7, #16]
 8009b92:	2b0b      	cmp	r3, #11
 8009b94:	d10c      	bne.n	8009bb0 <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	2b1d      	cmp	r3, #29
 8009b9a:	d803      	bhi.n	8009ba4 <RTC_DateUpdate+0xb2>
      {
        day++;
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	3301      	adds	r3, #1
 8009ba0:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8009ba2:	e02c      	b.n	8009bfe <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 8009ba4:	693b      	ldr	r3, [r7, #16]
 8009ba6:	3301      	adds	r3, #1
 8009ba8:	613b      	str	r3, [r7, #16]
        day = 1U;
 8009baa:	2301      	movs	r3, #1
 8009bac:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8009bae:	e026      	b.n	8009bfe <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 8009bb0:	693b      	ldr	r3, [r7, #16]
 8009bb2:	2b02      	cmp	r3, #2
 8009bb4:	d123      	bne.n	8009bfe <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	2b1b      	cmp	r3, #27
 8009bba:	d803      	bhi.n	8009bc4 <RTC_DateUpdate+0xd2>
      {
        day++;
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	3301      	adds	r3, #1
 8009bc0:	60fb      	str	r3, [r7, #12]
 8009bc2:	e01c      	b.n	8009bfe <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	2b1c      	cmp	r3, #28
 8009bc8:	d111      	bne.n	8009bee <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 8009bca:	697b      	ldr	r3, [r7, #20]
 8009bcc:	b29b      	uxth	r3, r3
 8009bce:	4618      	mov	r0, r3
 8009bd0:	f000 f838 	bl	8009c44 <RTC_IsLeapYear>
 8009bd4:	4603      	mov	r3, r0
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d003      	beq.n	8009be2 <RTC_DateUpdate+0xf0>
        {
          day++;
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	3301      	adds	r3, #1
 8009bde:	60fb      	str	r3, [r7, #12]
 8009be0:	e00d      	b.n	8009bfe <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 8009be2:	693b      	ldr	r3, [r7, #16]
 8009be4:	3301      	adds	r3, #1
 8009be6:	613b      	str	r3, [r7, #16]
          day = 1U;
 8009be8:	2301      	movs	r3, #1
 8009bea:	60fb      	str	r3, [r7, #12]
 8009bec:	e007      	b.n	8009bfe <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	2b1d      	cmp	r3, #29
 8009bf2:	d104      	bne.n	8009bfe <RTC_DateUpdate+0x10c>
      {
        month++;
 8009bf4:	693b      	ldr	r3, [r7, #16]
 8009bf6:	3301      	adds	r3, #1
 8009bf8:	613b      	str	r3, [r7, #16]
        day = 1U;
 8009bfa:	2301      	movs	r3, #1
 8009bfc:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 8009bfe:	68bb      	ldr	r3, [r7, #8]
 8009c00:	3301      	adds	r3, #1
 8009c02:	60bb      	str	r3, [r7, #8]
 8009c04:	68ba      	ldr	r2, [r7, #8]
 8009c06:	683b      	ldr	r3, [r7, #0]
 8009c08:	429a      	cmp	r2, r3
 8009c0a:	d38b      	bcc.n	8009b24 <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 8009c0c:	697b      	ldr	r3, [r7, #20]
 8009c0e:	b2da      	uxtb	r2, r3
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 8009c14:	693b      	ldr	r3, [r7, #16]
 8009c16:	b2da      	uxtb	r2, r3
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	b2da      	uxtb	r2, r3
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 8009c24:	693b      	ldr	r3, [r7, #16]
 8009c26:	b2db      	uxtb	r3, r3
 8009c28:	68fa      	ldr	r2, [r7, #12]
 8009c2a:	b2d2      	uxtb	r2, r2
 8009c2c:	4619      	mov	r1, r3
 8009c2e:	6978      	ldr	r0, [r7, #20]
 8009c30:	f000 f83a 	bl	8009ca8 <RTC_WeekDayNum>
 8009c34:	4603      	mov	r3, r0
 8009c36:	461a      	mov	r2, r3
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	731a      	strb	r2, [r3, #12]
}
 8009c3c:	bf00      	nop
 8009c3e:	3718      	adds	r7, #24
 8009c40:	46bd      	mov	sp, r7
 8009c42:	bd80      	pop	{r7, pc}

08009c44 <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 8009c44:	b480      	push	{r7}
 8009c46:	b083      	sub	sp, #12
 8009c48:	af00      	add	r7, sp, #0
 8009c4a:	4603      	mov	r3, r0
 8009c4c:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 8009c4e:	88fb      	ldrh	r3, [r7, #6]
 8009c50:	f003 0303 	and.w	r3, r3, #3
 8009c54:	b29b      	uxth	r3, r3
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d001      	beq.n	8009c5e <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 8009c5a:	2300      	movs	r3, #0
 8009c5c:	e01d      	b.n	8009c9a <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 8009c5e:	88fb      	ldrh	r3, [r7, #6]
 8009c60:	4a10      	ldr	r2, [pc, #64]	; (8009ca4 <RTC_IsLeapYear+0x60>)
 8009c62:	fba2 1203 	umull	r1, r2, r2, r3
 8009c66:	0952      	lsrs	r2, r2, #5
 8009c68:	2164      	movs	r1, #100	; 0x64
 8009c6a:	fb01 f202 	mul.w	r2, r1, r2
 8009c6e:	1a9b      	subs	r3, r3, r2
 8009c70:	b29b      	uxth	r3, r3
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d001      	beq.n	8009c7a <RTC_IsLeapYear+0x36>
  {
    return 1U;
 8009c76:	2301      	movs	r3, #1
 8009c78:	e00f      	b.n	8009c9a <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 8009c7a:	88fb      	ldrh	r3, [r7, #6]
 8009c7c:	4a09      	ldr	r2, [pc, #36]	; (8009ca4 <RTC_IsLeapYear+0x60>)
 8009c7e:	fba2 1203 	umull	r1, r2, r2, r3
 8009c82:	09d2      	lsrs	r2, r2, #7
 8009c84:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8009c88:	fb01 f202 	mul.w	r2, r1, r2
 8009c8c:	1a9b      	subs	r3, r3, r2
 8009c8e:	b29b      	uxth	r3, r3
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d101      	bne.n	8009c98 <RTC_IsLeapYear+0x54>
  {
    return 1U;
 8009c94:	2301      	movs	r3, #1
 8009c96:	e000      	b.n	8009c9a <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 8009c98:	2300      	movs	r3, #0
  }
}
 8009c9a:	4618      	mov	r0, r3
 8009c9c:	370c      	adds	r7, #12
 8009c9e:	46bd      	mov	sp, r7
 8009ca0:	bc80      	pop	{r7}
 8009ca2:	4770      	bx	lr
 8009ca4:	51eb851f 	.word	0x51eb851f

08009ca8 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8009ca8:	b480      	push	{r7}
 8009caa:	b085      	sub	sp, #20
 8009cac:	af00      	add	r7, sp, #0
 8009cae:	6078      	str	r0, [r7, #4]
 8009cb0:	460b      	mov	r3, r1
 8009cb2:	70fb      	strb	r3, [r7, #3]
 8009cb4:	4613      	mov	r3, r2
 8009cb6:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8009cb8:	2300      	movs	r3, #0
 8009cba:	60bb      	str	r3, [r7, #8]
 8009cbc:	2300      	movs	r3, #0
 8009cbe:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8009cc6:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8009cc8:	78fb      	ldrb	r3, [r7, #3]
 8009cca:	2b02      	cmp	r3, #2
 8009ccc:	d82d      	bhi.n	8009d2a <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8009cce:	78fa      	ldrb	r2, [r7, #3]
 8009cd0:	4613      	mov	r3, r2
 8009cd2:	005b      	lsls	r3, r3, #1
 8009cd4:	4413      	add	r3, r2
 8009cd6:	00db      	lsls	r3, r3, #3
 8009cd8:	1a9b      	subs	r3, r3, r2
 8009cda:	4a2c      	ldr	r2, [pc, #176]	; (8009d8c <RTC_WeekDayNum+0xe4>)
 8009cdc:	fba2 2303 	umull	r2, r3, r2, r3
 8009ce0:	085a      	lsrs	r2, r3, #1
 8009ce2:	78bb      	ldrb	r3, [r7, #2]
 8009ce4:	441a      	add	r2, r3
 8009ce6:	68bb      	ldr	r3, [r7, #8]
 8009ce8:	441a      	add	r2, r3
 8009cea:	68bb      	ldr	r3, [r7, #8]
 8009cec:	3b01      	subs	r3, #1
 8009cee:	089b      	lsrs	r3, r3, #2
 8009cf0:	441a      	add	r2, r3
 8009cf2:	68bb      	ldr	r3, [r7, #8]
 8009cf4:	3b01      	subs	r3, #1
 8009cf6:	4926      	ldr	r1, [pc, #152]	; (8009d90 <RTC_WeekDayNum+0xe8>)
 8009cf8:	fba1 1303 	umull	r1, r3, r1, r3
 8009cfc:	095b      	lsrs	r3, r3, #5
 8009cfe:	1ad2      	subs	r2, r2, r3
 8009d00:	68bb      	ldr	r3, [r7, #8]
 8009d02:	3b01      	subs	r3, #1
 8009d04:	4922      	ldr	r1, [pc, #136]	; (8009d90 <RTC_WeekDayNum+0xe8>)
 8009d06:	fba1 1303 	umull	r1, r3, r1, r3
 8009d0a:	09db      	lsrs	r3, r3, #7
 8009d0c:	4413      	add	r3, r2
 8009d0e:	1d1a      	adds	r2, r3, #4
 8009d10:	4b20      	ldr	r3, [pc, #128]	; (8009d94 <RTC_WeekDayNum+0xec>)
 8009d12:	fba3 1302 	umull	r1, r3, r3, r2
 8009d16:	1ad1      	subs	r1, r2, r3
 8009d18:	0849      	lsrs	r1, r1, #1
 8009d1a:	440b      	add	r3, r1
 8009d1c:	0899      	lsrs	r1, r3, #2
 8009d1e:	460b      	mov	r3, r1
 8009d20:	00db      	lsls	r3, r3, #3
 8009d22:	1a5b      	subs	r3, r3, r1
 8009d24:	1ad3      	subs	r3, r2, r3
 8009d26:	60fb      	str	r3, [r7, #12]
 8009d28:	e029      	b.n	8009d7e <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8009d2a:	78fa      	ldrb	r2, [r7, #3]
 8009d2c:	4613      	mov	r3, r2
 8009d2e:	005b      	lsls	r3, r3, #1
 8009d30:	4413      	add	r3, r2
 8009d32:	00db      	lsls	r3, r3, #3
 8009d34:	1a9b      	subs	r3, r3, r2
 8009d36:	4a15      	ldr	r2, [pc, #84]	; (8009d8c <RTC_WeekDayNum+0xe4>)
 8009d38:	fba2 2303 	umull	r2, r3, r2, r3
 8009d3c:	085a      	lsrs	r2, r3, #1
 8009d3e:	78bb      	ldrb	r3, [r7, #2]
 8009d40:	441a      	add	r2, r3
 8009d42:	68bb      	ldr	r3, [r7, #8]
 8009d44:	441a      	add	r2, r3
 8009d46:	68bb      	ldr	r3, [r7, #8]
 8009d48:	089b      	lsrs	r3, r3, #2
 8009d4a:	441a      	add	r2, r3
 8009d4c:	68bb      	ldr	r3, [r7, #8]
 8009d4e:	4910      	ldr	r1, [pc, #64]	; (8009d90 <RTC_WeekDayNum+0xe8>)
 8009d50:	fba1 1303 	umull	r1, r3, r1, r3
 8009d54:	095b      	lsrs	r3, r3, #5
 8009d56:	1ad2      	subs	r2, r2, r3
 8009d58:	68bb      	ldr	r3, [r7, #8]
 8009d5a:	490d      	ldr	r1, [pc, #52]	; (8009d90 <RTC_WeekDayNum+0xe8>)
 8009d5c:	fba1 1303 	umull	r1, r3, r1, r3
 8009d60:	09db      	lsrs	r3, r3, #7
 8009d62:	4413      	add	r3, r2
 8009d64:	1c9a      	adds	r2, r3, #2
 8009d66:	4b0b      	ldr	r3, [pc, #44]	; (8009d94 <RTC_WeekDayNum+0xec>)
 8009d68:	fba3 1302 	umull	r1, r3, r3, r2
 8009d6c:	1ad1      	subs	r1, r2, r3
 8009d6e:	0849      	lsrs	r1, r1, #1
 8009d70:	440b      	add	r3, r1
 8009d72:	0899      	lsrs	r1, r3, #2
 8009d74:	460b      	mov	r3, r1
 8009d76:	00db      	lsls	r3, r3, #3
 8009d78:	1a5b      	subs	r3, r3, r1
 8009d7a:	1ad3      	subs	r3, r2, r3
 8009d7c:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	b2db      	uxtb	r3, r3
}
 8009d82:	4618      	mov	r0, r3
 8009d84:	3714      	adds	r7, #20
 8009d86:	46bd      	mov	sp, r7
 8009d88:	bc80      	pop	{r7}
 8009d8a:	4770      	bx	lr
 8009d8c:	38e38e39 	.word	0x38e38e39
 8009d90:	51eb851f 	.word	0x51eb851f
 8009d94:	24924925 	.word	0x24924925

08009d98 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009d98:	b580      	push	{r7, lr}
 8009d9a:	b082      	sub	sp, #8
 8009d9c:	af00      	add	r7, sp, #0
 8009d9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d101      	bne.n	8009daa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009da6:	2301      	movs	r3, #1
 8009da8:	e03f      	b.n	8009e2a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8009db0:	b2db      	uxtb	r3, r3
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d106      	bne.n	8009dc4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	2200      	movs	r2, #0
 8009dba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009dbe:	6878      	ldr	r0, [r7, #4]
 8009dc0:	f7fe f9c6 	bl	8008150 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	2224      	movs	r2, #36	; 0x24
 8009dc8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	68da      	ldr	r2, [r3, #12]
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009dda:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009ddc:	6878      	ldr	r0, [r7, #4]
 8009dde:	f000 f829 	bl	8009e34 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	691a      	ldr	r2, [r3, #16]
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009df0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	695a      	ldr	r2, [r3, #20]
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009e00:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	68da      	ldr	r2, [r3, #12]
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009e10:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	2200      	movs	r2, #0
 8009e16:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	2220      	movs	r2, #32
 8009e1c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	2220      	movs	r2, #32
 8009e24:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8009e28:	2300      	movs	r3, #0
}
 8009e2a:	4618      	mov	r0, r3
 8009e2c:	3708      	adds	r7, #8
 8009e2e:	46bd      	mov	sp, r7
 8009e30:	bd80      	pop	{r7, pc}
	...

08009e34 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009e34:	b580      	push	{r7, lr}
 8009e36:	b084      	sub	sp, #16
 8009e38:	af00      	add	r7, sp, #0
 8009e3a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	691b      	ldr	r3, [r3, #16]
 8009e42:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	68da      	ldr	r2, [r3, #12]
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	430a      	orrs	r2, r1
 8009e50:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	689a      	ldr	r2, [r3, #8]
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	691b      	ldr	r3, [r3, #16]
 8009e5a:	431a      	orrs	r2, r3
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	695b      	ldr	r3, [r3, #20]
 8009e60:	4313      	orrs	r3, r2
 8009e62:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	68db      	ldr	r3, [r3, #12]
 8009e6a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8009e6e:	f023 030c 	bic.w	r3, r3, #12
 8009e72:	687a      	ldr	r2, [r7, #4]
 8009e74:	6812      	ldr	r2, [r2, #0]
 8009e76:	68f9      	ldr	r1, [r7, #12]
 8009e78:	430b      	orrs	r3, r1
 8009e7a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	695b      	ldr	r3, [r3, #20]
 8009e82:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	699a      	ldr	r2, [r3, #24]
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	430a      	orrs	r2, r1
 8009e90:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	4a52      	ldr	r2, [pc, #328]	; (8009fe0 <UART_SetConfig+0x1ac>)
 8009e98:	4293      	cmp	r3, r2
 8009e9a:	d14e      	bne.n	8009f3a <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8009e9c:	f7ff f9ba 	bl	8009214 <HAL_RCC_GetPCLK2Freq>
 8009ea0:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009ea2:	68ba      	ldr	r2, [r7, #8]
 8009ea4:	4613      	mov	r3, r2
 8009ea6:	009b      	lsls	r3, r3, #2
 8009ea8:	4413      	add	r3, r2
 8009eaa:	009a      	lsls	r2, r3, #2
 8009eac:	441a      	add	r2, r3
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	685b      	ldr	r3, [r3, #4]
 8009eb2:	009b      	lsls	r3, r3, #2
 8009eb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8009eb8:	4a4a      	ldr	r2, [pc, #296]	; (8009fe4 <UART_SetConfig+0x1b0>)
 8009eba:	fba2 2303 	umull	r2, r3, r2, r3
 8009ebe:	095b      	lsrs	r3, r3, #5
 8009ec0:	0119      	lsls	r1, r3, #4
 8009ec2:	68ba      	ldr	r2, [r7, #8]
 8009ec4:	4613      	mov	r3, r2
 8009ec6:	009b      	lsls	r3, r3, #2
 8009ec8:	4413      	add	r3, r2
 8009eca:	009a      	lsls	r2, r3, #2
 8009ecc:	441a      	add	r2, r3
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	685b      	ldr	r3, [r3, #4]
 8009ed2:	009b      	lsls	r3, r3, #2
 8009ed4:	fbb2 f2f3 	udiv	r2, r2, r3
 8009ed8:	4b42      	ldr	r3, [pc, #264]	; (8009fe4 <UART_SetConfig+0x1b0>)
 8009eda:	fba3 0302 	umull	r0, r3, r3, r2
 8009ede:	095b      	lsrs	r3, r3, #5
 8009ee0:	2064      	movs	r0, #100	; 0x64
 8009ee2:	fb00 f303 	mul.w	r3, r0, r3
 8009ee6:	1ad3      	subs	r3, r2, r3
 8009ee8:	011b      	lsls	r3, r3, #4
 8009eea:	3332      	adds	r3, #50	; 0x32
 8009eec:	4a3d      	ldr	r2, [pc, #244]	; (8009fe4 <UART_SetConfig+0x1b0>)
 8009eee:	fba2 2303 	umull	r2, r3, r2, r3
 8009ef2:	095b      	lsrs	r3, r3, #5
 8009ef4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009ef8:	4419      	add	r1, r3
 8009efa:	68ba      	ldr	r2, [r7, #8]
 8009efc:	4613      	mov	r3, r2
 8009efe:	009b      	lsls	r3, r3, #2
 8009f00:	4413      	add	r3, r2
 8009f02:	009a      	lsls	r2, r3, #2
 8009f04:	441a      	add	r2, r3
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	685b      	ldr	r3, [r3, #4]
 8009f0a:	009b      	lsls	r3, r3, #2
 8009f0c:	fbb2 f2f3 	udiv	r2, r2, r3
 8009f10:	4b34      	ldr	r3, [pc, #208]	; (8009fe4 <UART_SetConfig+0x1b0>)
 8009f12:	fba3 0302 	umull	r0, r3, r3, r2
 8009f16:	095b      	lsrs	r3, r3, #5
 8009f18:	2064      	movs	r0, #100	; 0x64
 8009f1a:	fb00 f303 	mul.w	r3, r0, r3
 8009f1e:	1ad3      	subs	r3, r2, r3
 8009f20:	011b      	lsls	r3, r3, #4
 8009f22:	3332      	adds	r3, #50	; 0x32
 8009f24:	4a2f      	ldr	r2, [pc, #188]	; (8009fe4 <UART_SetConfig+0x1b0>)
 8009f26:	fba2 2303 	umull	r2, r3, r2, r3
 8009f2a:	095b      	lsrs	r3, r3, #5
 8009f2c:	f003 020f 	and.w	r2, r3, #15
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	440a      	add	r2, r1
 8009f36:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8009f38:	e04d      	b.n	8009fd6 <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8009f3a:	f7ff f957 	bl	80091ec <HAL_RCC_GetPCLK1Freq>
 8009f3e:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009f40:	68ba      	ldr	r2, [r7, #8]
 8009f42:	4613      	mov	r3, r2
 8009f44:	009b      	lsls	r3, r3, #2
 8009f46:	4413      	add	r3, r2
 8009f48:	009a      	lsls	r2, r3, #2
 8009f4a:	441a      	add	r2, r3
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	685b      	ldr	r3, [r3, #4]
 8009f50:	009b      	lsls	r3, r3, #2
 8009f52:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f56:	4a23      	ldr	r2, [pc, #140]	; (8009fe4 <UART_SetConfig+0x1b0>)
 8009f58:	fba2 2303 	umull	r2, r3, r2, r3
 8009f5c:	095b      	lsrs	r3, r3, #5
 8009f5e:	0119      	lsls	r1, r3, #4
 8009f60:	68ba      	ldr	r2, [r7, #8]
 8009f62:	4613      	mov	r3, r2
 8009f64:	009b      	lsls	r3, r3, #2
 8009f66:	4413      	add	r3, r2
 8009f68:	009a      	lsls	r2, r3, #2
 8009f6a:	441a      	add	r2, r3
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	685b      	ldr	r3, [r3, #4]
 8009f70:	009b      	lsls	r3, r3, #2
 8009f72:	fbb2 f2f3 	udiv	r2, r2, r3
 8009f76:	4b1b      	ldr	r3, [pc, #108]	; (8009fe4 <UART_SetConfig+0x1b0>)
 8009f78:	fba3 0302 	umull	r0, r3, r3, r2
 8009f7c:	095b      	lsrs	r3, r3, #5
 8009f7e:	2064      	movs	r0, #100	; 0x64
 8009f80:	fb00 f303 	mul.w	r3, r0, r3
 8009f84:	1ad3      	subs	r3, r2, r3
 8009f86:	011b      	lsls	r3, r3, #4
 8009f88:	3332      	adds	r3, #50	; 0x32
 8009f8a:	4a16      	ldr	r2, [pc, #88]	; (8009fe4 <UART_SetConfig+0x1b0>)
 8009f8c:	fba2 2303 	umull	r2, r3, r2, r3
 8009f90:	095b      	lsrs	r3, r3, #5
 8009f92:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009f96:	4419      	add	r1, r3
 8009f98:	68ba      	ldr	r2, [r7, #8]
 8009f9a:	4613      	mov	r3, r2
 8009f9c:	009b      	lsls	r3, r3, #2
 8009f9e:	4413      	add	r3, r2
 8009fa0:	009a      	lsls	r2, r3, #2
 8009fa2:	441a      	add	r2, r3
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	685b      	ldr	r3, [r3, #4]
 8009fa8:	009b      	lsls	r3, r3, #2
 8009faa:	fbb2 f2f3 	udiv	r2, r2, r3
 8009fae:	4b0d      	ldr	r3, [pc, #52]	; (8009fe4 <UART_SetConfig+0x1b0>)
 8009fb0:	fba3 0302 	umull	r0, r3, r3, r2
 8009fb4:	095b      	lsrs	r3, r3, #5
 8009fb6:	2064      	movs	r0, #100	; 0x64
 8009fb8:	fb00 f303 	mul.w	r3, r0, r3
 8009fbc:	1ad3      	subs	r3, r2, r3
 8009fbe:	011b      	lsls	r3, r3, #4
 8009fc0:	3332      	adds	r3, #50	; 0x32
 8009fc2:	4a08      	ldr	r2, [pc, #32]	; (8009fe4 <UART_SetConfig+0x1b0>)
 8009fc4:	fba2 2303 	umull	r2, r3, r2, r3
 8009fc8:	095b      	lsrs	r3, r3, #5
 8009fca:	f003 020f 	and.w	r2, r3, #15
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	440a      	add	r2, r1
 8009fd4:	609a      	str	r2, [r3, #8]
}
 8009fd6:	bf00      	nop
 8009fd8:	3710      	adds	r7, #16
 8009fda:	46bd      	mov	sp, r7
 8009fdc:	bd80      	pop	{r7, pc}
 8009fde:	bf00      	nop
 8009fe0:	40013800 	.word	0x40013800
 8009fe4:	51eb851f 	.word	0x51eb851f

08009fe8 <__errno>:
 8009fe8:	4b01      	ldr	r3, [pc, #4]	; (8009ff0 <__errno+0x8>)
 8009fea:	6818      	ldr	r0, [r3, #0]
 8009fec:	4770      	bx	lr
 8009fee:	bf00      	nop
 8009ff0:	2000002c 	.word	0x2000002c

08009ff4 <__libc_init_array>:
 8009ff4:	b570      	push	{r4, r5, r6, lr}
 8009ff6:	2500      	movs	r5, #0
 8009ff8:	4e0c      	ldr	r6, [pc, #48]	; (800a02c <__libc_init_array+0x38>)
 8009ffa:	4c0d      	ldr	r4, [pc, #52]	; (800a030 <__libc_init_array+0x3c>)
 8009ffc:	1ba4      	subs	r4, r4, r6
 8009ffe:	10a4      	asrs	r4, r4, #2
 800a000:	42a5      	cmp	r5, r4
 800a002:	d109      	bne.n	800a018 <__libc_init_array+0x24>
 800a004:	f000 fc70 	bl	800a8e8 <_init>
 800a008:	2500      	movs	r5, #0
 800a00a:	4e0a      	ldr	r6, [pc, #40]	; (800a034 <__libc_init_array+0x40>)
 800a00c:	4c0a      	ldr	r4, [pc, #40]	; (800a038 <__libc_init_array+0x44>)
 800a00e:	1ba4      	subs	r4, r4, r6
 800a010:	10a4      	asrs	r4, r4, #2
 800a012:	42a5      	cmp	r5, r4
 800a014:	d105      	bne.n	800a022 <__libc_init_array+0x2e>
 800a016:	bd70      	pop	{r4, r5, r6, pc}
 800a018:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a01c:	4798      	blx	r3
 800a01e:	3501      	adds	r5, #1
 800a020:	e7ee      	b.n	800a000 <__libc_init_array+0xc>
 800a022:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a026:	4798      	blx	r3
 800a028:	3501      	adds	r5, #1
 800a02a:	e7f2      	b.n	800a012 <__libc_init_array+0x1e>
 800a02c:	0800c1b4 	.word	0x0800c1b4
 800a030:	0800c1b4 	.word	0x0800c1b4
 800a034:	0800c1b4 	.word	0x0800c1b4
 800a038:	0800c1b8 	.word	0x0800c1b8

0800a03c <memset>:
 800a03c:	4603      	mov	r3, r0
 800a03e:	4402      	add	r2, r0
 800a040:	4293      	cmp	r3, r2
 800a042:	d100      	bne.n	800a046 <memset+0xa>
 800a044:	4770      	bx	lr
 800a046:	f803 1b01 	strb.w	r1, [r3], #1
 800a04a:	e7f9      	b.n	800a040 <memset+0x4>

0800a04c <rand>:
 800a04c:	b538      	push	{r3, r4, r5, lr}
 800a04e:	4b13      	ldr	r3, [pc, #76]	; (800a09c <rand+0x50>)
 800a050:	681c      	ldr	r4, [r3, #0]
 800a052:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a054:	b97b      	cbnz	r3, 800a076 <rand+0x2a>
 800a056:	2018      	movs	r0, #24
 800a058:	f000 f84c 	bl	800a0f4 <malloc>
 800a05c:	4a10      	ldr	r2, [pc, #64]	; (800a0a0 <rand+0x54>)
 800a05e:	4b11      	ldr	r3, [pc, #68]	; (800a0a4 <rand+0x58>)
 800a060:	63a0      	str	r0, [r4, #56]	; 0x38
 800a062:	e9c0 2300 	strd	r2, r3, [r0]
 800a066:	4b10      	ldr	r3, [pc, #64]	; (800a0a8 <rand+0x5c>)
 800a068:	2201      	movs	r2, #1
 800a06a:	6083      	str	r3, [r0, #8]
 800a06c:	230b      	movs	r3, #11
 800a06e:	8183      	strh	r3, [r0, #12]
 800a070:	2300      	movs	r3, #0
 800a072:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800a076:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800a078:	480c      	ldr	r0, [pc, #48]	; (800a0ac <rand+0x60>)
 800a07a:	690a      	ldr	r2, [r1, #16]
 800a07c:	694b      	ldr	r3, [r1, #20]
 800a07e:	4350      	muls	r0, r2
 800a080:	4c0b      	ldr	r4, [pc, #44]	; (800a0b0 <rand+0x64>)
 800a082:	fb04 0003 	mla	r0, r4, r3, r0
 800a086:	fba2 2304 	umull	r2, r3, r2, r4
 800a08a:	4403      	add	r3, r0
 800a08c:	1c54      	adds	r4, r2, #1
 800a08e:	f143 0500 	adc.w	r5, r3, #0
 800a092:	e9c1 4504 	strd	r4, r5, [r1, #16]
 800a096:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 800a09a:	bd38      	pop	{r3, r4, r5, pc}
 800a09c:	2000002c 	.word	0x2000002c
 800a0a0:	abcd330e 	.word	0xabcd330e
 800a0a4:	e66d1234 	.word	0xe66d1234
 800a0a8:	0005deec 	.word	0x0005deec
 800a0ac:	5851f42d 	.word	0x5851f42d
 800a0b0:	4c957f2d 	.word	0x4c957f2d

0800a0b4 <siprintf>:
 800a0b4:	b40e      	push	{r1, r2, r3}
 800a0b6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a0ba:	b500      	push	{lr}
 800a0bc:	b09c      	sub	sp, #112	; 0x70
 800a0be:	ab1d      	add	r3, sp, #116	; 0x74
 800a0c0:	9002      	str	r0, [sp, #8]
 800a0c2:	9006      	str	r0, [sp, #24]
 800a0c4:	9107      	str	r1, [sp, #28]
 800a0c6:	9104      	str	r1, [sp, #16]
 800a0c8:	4808      	ldr	r0, [pc, #32]	; (800a0ec <siprintf+0x38>)
 800a0ca:	4909      	ldr	r1, [pc, #36]	; (800a0f0 <siprintf+0x3c>)
 800a0cc:	f853 2b04 	ldr.w	r2, [r3], #4
 800a0d0:	9105      	str	r1, [sp, #20]
 800a0d2:	6800      	ldr	r0, [r0, #0]
 800a0d4:	a902      	add	r1, sp, #8
 800a0d6:	9301      	str	r3, [sp, #4]
 800a0d8:	f000 f914 	bl	800a304 <_svfiprintf_r>
 800a0dc:	2200      	movs	r2, #0
 800a0de:	9b02      	ldr	r3, [sp, #8]
 800a0e0:	701a      	strb	r2, [r3, #0]
 800a0e2:	b01c      	add	sp, #112	; 0x70
 800a0e4:	f85d eb04 	ldr.w	lr, [sp], #4
 800a0e8:	b003      	add	sp, #12
 800a0ea:	4770      	bx	lr
 800a0ec:	2000002c 	.word	0x2000002c
 800a0f0:	ffff0208 	.word	0xffff0208

0800a0f4 <malloc>:
 800a0f4:	4b02      	ldr	r3, [pc, #8]	; (800a100 <malloc+0xc>)
 800a0f6:	4601      	mov	r1, r0
 800a0f8:	6818      	ldr	r0, [r3, #0]
 800a0fa:	f000 b84f 	b.w	800a19c <_malloc_r>
 800a0fe:	bf00      	nop
 800a100:	2000002c 	.word	0x2000002c

0800a104 <_free_r>:
 800a104:	b538      	push	{r3, r4, r5, lr}
 800a106:	4605      	mov	r5, r0
 800a108:	2900      	cmp	r1, #0
 800a10a:	d043      	beq.n	800a194 <_free_r+0x90>
 800a10c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a110:	1f0c      	subs	r4, r1, #4
 800a112:	2b00      	cmp	r3, #0
 800a114:	bfb8      	it	lt
 800a116:	18e4      	addlt	r4, r4, r3
 800a118:	f000 fbb6 	bl	800a888 <__malloc_lock>
 800a11c:	4a1e      	ldr	r2, [pc, #120]	; (800a198 <_free_r+0x94>)
 800a11e:	6813      	ldr	r3, [r2, #0]
 800a120:	4610      	mov	r0, r2
 800a122:	b933      	cbnz	r3, 800a132 <_free_r+0x2e>
 800a124:	6063      	str	r3, [r4, #4]
 800a126:	6014      	str	r4, [r2, #0]
 800a128:	4628      	mov	r0, r5
 800a12a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a12e:	f000 bbac 	b.w	800a88a <__malloc_unlock>
 800a132:	42a3      	cmp	r3, r4
 800a134:	d90b      	bls.n	800a14e <_free_r+0x4a>
 800a136:	6821      	ldr	r1, [r4, #0]
 800a138:	1862      	adds	r2, r4, r1
 800a13a:	4293      	cmp	r3, r2
 800a13c:	bf01      	itttt	eq
 800a13e:	681a      	ldreq	r2, [r3, #0]
 800a140:	685b      	ldreq	r3, [r3, #4]
 800a142:	1852      	addeq	r2, r2, r1
 800a144:	6022      	streq	r2, [r4, #0]
 800a146:	6063      	str	r3, [r4, #4]
 800a148:	6004      	str	r4, [r0, #0]
 800a14a:	e7ed      	b.n	800a128 <_free_r+0x24>
 800a14c:	4613      	mov	r3, r2
 800a14e:	685a      	ldr	r2, [r3, #4]
 800a150:	b10a      	cbz	r2, 800a156 <_free_r+0x52>
 800a152:	42a2      	cmp	r2, r4
 800a154:	d9fa      	bls.n	800a14c <_free_r+0x48>
 800a156:	6819      	ldr	r1, [r3, #0]
 800a158:	1858      	adds	r0, r3, r1
 800a15a:	42a0      	cmp	r0, r4
 800a15c:	d10b      	bne.n	800a176 <_free_r+0x72>
 800a15e:	6820      	ldr	r0, [r4, #0]
 800a160:	4401      	add	r1, r0
 800a162:	1858      	adds	r0, r3, r1
 800a164:	4282      	cmp	r2, r0
 800a166:	6019      	str	r1, [r3, #0]
 800a168:	d1de      	bne.n	800a128 <_free_r+0x24>
 800a16a:	6810      	ldr	r0, [r2, #0]
 800a16c:	6852      	ldr	r2, [r2, #4]
 800a16e:	4401      	add	r1, r0
 800a170:	6019      	str	r1, [r3, #0]
 800a172:	605a      	str	r2, [r3, #4]
 800a174:	e7d8      	b.n	800a128 <_free_r+0x24>
 800a176:	d902      	bls.n	800a17e <_free_r+0x7a>
 800a178:	230c      	movs	r3, #12
 800a17a:	602b      	str	r3, [r5, #0]
 800a17c:	e7d4      	b.n	800a128 <_free_r+0x24>
 800a17e:	6820      	ldr	r0, [r4, #0]
 800a180:	1821      	adds	r1, r4, r0
 800a182:	428a      	cmp	r2, r1
 800a184:	bf01      	itttt	eq
 800a186:	6811      	ldreq	r1, [r2, #0]
 800a188:	6852      	ldreq	r2, [r2, #4]
 800a18a:	1809      	addeq	r1, r1, r0
 800a18c:	6021      	streq	r1, [r4, #0]
 800a18e:	6062      	str	r2, [r4, #4]
 800a190:	605c      	str	r4, [r3, #4]
 800a192:	e7c9      	b.n	800a128 <_free_r+0x24>
 800a194:	bd38      	pop	{r3, r4, r5, pc}
 800a196:	bf00      	nop
 800a198:	200000b4 	.word	0x200000b4

0800a19c <_malloc_r>:
 800a19c:	b570      	push	{r4, r5, r6, lr}
 800a19e:	1ccd      	adds	r5, r1, #3
 800a1a0:	f025 0503 	bic.w	r5, r5, #3
 800a1a4:	3508      	adds	r5, #8
 800a1a6:	2d0c      	cmp	r5, #12
 800a1a8:	bf38      	it	cc
 800a1aa:	250c      	movcc	r5, #12
 800a1ac:	2d00      	cmp	r5, #0
 800a1ae:	4606      	mov	r6, r0
 800a1b0:	db01      	blt.n	800a1b6 <_malloc_r+0x1a>
 800a1b2:	42a9      	cmp	r1, r5
 800a1b4:	d903      	bls.n	800a1be <_malloc_r+0x22>
 800a1b6:	230c      	movs	r3, #12
 800a1b8:	6033      	str	r3, [r6, #0]
 800a1ba:	2000      	movs	r0, #0
 800a1bc:	bd70      	pop	{r4, r5, r6, pc}
 800a1be:	f000 fb63 	bl	800a888 <__malloc_lock>
 800a1c2:	4a21      	ldr	r2, [pc, #132]	; (800a248 <_malloc_r+0xac>)
 800a1c4:	6814      	ldr	r4, [r2, #0]
 800a1c6:	4621      	mov	r1, r4
 800a1c8:	b991      	cbnz	r1, 800a1f0 <_malloc_r+0x54>
 800a1ca:	4c20      	ldr	r4, [pc, #128]	; (800a24c <_malloc_r+0xb0>)
 800a1cc:	6823      	ldr	r3, [r4, #0]
 800a1ce:	b91b      	cbnz	r3, 800a1d8 <_malloc_r+0x3c>
 800a1d0:	4630      	mov	r0, r6
 800a1d2:	f000 fb17 	bl	800a804 <_sbrk_r>
 800a1d6:	6020      	str	r0, [r4, #0]
 800a1d8:	4629      	mov	r1, r5
 800a1da:	4630      	mov	r0, r6
 800a1dc:	f000 fb12 	bl	800a804 <_sbrk_r>
 800a1e0:	1c43      	adds	r3, r0, #1
 800a1e2:	d124      	bne.n	800a22e <_malloc_r+0x92>
 800a1e4:	230c      	movs	r3, #12
 800a1e6:	4630      	mov	r0, r6
 800a1e8:	6033      	str	r3, [r6, #0]
 800a1ea:	f000 fb4e 	bl	800a88a <__malloc_unlock>
 800a1ee:	e7e4      	b.n	800a1ba <_malloc_r+0x1e>
 800a1f0:	680b      	ldr	r3, [r1, #0]
 800a1f2:	1b5b      	subs	r3, r3, r5
 800a1f4:	d418      	bmi.n	800a228 <_malloc_r+0x8c>
 800a1f6:	2b0b      	cmp	r3, #11
 800a1f8:	d90f      	bls.n	800a21a <_malloc_r+0x7e>
 800a1fa:	600b      	str	r3, [r1, #0]
 800a1fc:	18cc      	adds	r4, r1, r3
 800a1fe:	50cd      	str	r5, [r1, r3]
 800a200:	4630      	mov	r0, r6
 800a202:	f000 fb42 	bl	800a88a <__malloc_unlock>
 800a206:	f104 000b 	add.w	r0, r4, #11
 800a20a:	1d23      	adds	r3, r4, #4
 800a20c:	f020 0007 	bic.w	r0, r0, #7
 800a210:	1ac3      	subs	r3, r0, r3
 800a212:	d0d3      	beq.n	800a1bc <_malloc_r+0x20>
 800a214:	425a      	negs	r2, r3
 800a216:	50e2      	str	r2, [r4, r3]
 800a218:	e7d0      	b.n	800a1bc <_malloc_r+0x20>
 800a21a:	684b      	ldr	r3, [r1, #4]
 800a21c:	428c      	cmp	r4, r1
 800a21e:	bf16      	itet	ne
 800a220:	6063      	strne	r3, [r4, #4]
 800a222:	6013      	streq	r3, [r2, #0]
 800a224:	460c      	movne	r4, r1
 800a226:	e7eb      	b.n	800a200 <_malloc_r+0x64>
 800a228:	460c      	mov	r4, r1
 800a22a:	6849      	ldr	r1, [r1, #4]
 800a22c:	e7cc      	b.n	800a1c8 <_malloc_r+0x2c>
 800a22e:	1cc4      	adds	r4, r0, #3
 800a230:	f024 0403 	bic.w	r4, r4, #3
 800a234:	42a0      	cmp	r0, r4
 800a236:	d005      	beq.n	800a244 <_malloc_r+0xa8>
 800a238:	1a21      	subs	r1, r4, r0
 800a23a:	4630      	mov	r0, r6
 800a23c:	f000 fae2 	bl	800a804 <_sbrk_r>
 800a240:	3001      	adds	r0, #1
 800a242:	d0cf      	beq.n	800a1e4 <_malloc_r+0x48>
 800a244:	6025      	str	r5, [r4, #0]
 800a246:	e7db      	b.n	800a200 <_malloc_r+0x64>
 800a248:	200000b4 	.word	0x200000b4
 800a24c:	200000b8 	.word	0x200000b8

0800a250 <__ssputs_r>:
 800a250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a254:	688e      	ldr	r6, [r1, #8]
 800a256:	4682      	mov	sl, r0
 800a258:	429e      	cmp	r6, r3
 800a25a:	460c      	mov	r4, r1
 800a25c:	4690      	mov	r8, r2
 800a25e:	4699      	mov	r9, r3
 800a260:	d837      	bhi.n	800a2d2 <__ssputs_r+0x82>
 800a262:	898a      	ldrh	r2, [r1, #12]
 800a264:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a268:	d031      	beq.n	800a2ce <__ssputs_r+0x7e>
 800a26a:	2302      	movs	r3, #2
 800a26c:	6825      	ldr	r5, [r4, #0]
 800a26e:	6909      	ldr	r1, [r1, #16]
 800a270:	1a6f      	subs	r7, r5, r1
 800a272:	6965      	ldr	r5, [r4, #20]
 800a274:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a278:	fb95 f5f3 	sdiv	r5, r5, r3
 800a27c:	f109 0301 	add.w	r3, r9, #1
 800a280:	443b      	add	r3, r7
 800a282:	429d      	cmp	r5, r3
 800a284:	bf38      	it	cc
 800a286:	461d      	movcc	r5, r3
 800a288:	0553      	lsls	r3, r2, #21
 800a28a:	d530      	bpl.n	800a2ee <__ssputs_r+0x9e>
 800a28c:	4629      	mov	r1, r5
 800a28e:	f7ff ff85 	bl	800a19c <_malloc_r>
 800a292:	4606      	mov	r6, r0
 800a294:	b950      	cbnz	r0, 800a2ac <__ssputs_r+0x5c>
 800a296:	230c      	movs	r3, #12
 800a298:	f04f 30ff 	mov.w	r0, #4294967295
 800a29c:	f8ca 3000 	str.w	r3, [sl]
 800a2a0:	89a3      	ldrh	r3, [r4, #12]
 800a2a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a2a6:	81a3      	strh	r3, [r4, #12]
 800a2a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a2ac:	463a      	mov	r2, r7
 800a2ae:	6921      	ldr	r1, [r4, #16]
 800a2b0:	f000 fac6 	bl	800a840 <memcpy>
 800a2b4:	89a3      	ldrh	r3, [r4, #12]
 800a2b6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a2ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a2be:	81a3      	strh	r3, [r4, #12]
 800a2c0:	6126      	str	r6, [r4, #16]
 800a2c2:	443e      	add	r6, r7
 800a2c4:	6026      	str	r6, [r4, #0]
 800a2c6:	464e      	mov	r6, r9
 800a2c8:	6165      	str	r5, [r4, #20]
 800a2ca:	1bed      	subs	r5, r5, r7
 800a2cc:	60a5      	str	r5, [r4, #8]
 800a2ce:	454e      	cmp	r6, r9
 800a2d0:	d900      	bls.n	800a2d4 <__ssputs_r+0x84>
 800a2d2:	464e      	mov	r6, r9
 800a2d4:	4632      	mov	r2, r6
 800a2d6:	4641      	mov	r1, r8
 800a2d8:	6820      	ldr	r0, [r4, #0]
 800a2da:	f000 fabc 	bl	800a856 <memmove>
 800a2de:	68a3      	ldr	r3, [r4, #8]
 800a2e0:	2000      	movs	r0, #0
 800a2e2:	1b9b      	subs	r3, r3, r6
 800a2e4:	60a3      	str	r3, [r4, #8]
 800a2e6:	6823      	ldr	r3, [r4, #0]
 800a2e8:	441e      	add	r6, r3
 800a2ea:	6026      	str	r6, [r4, #0]
 800a2ec:	e7dc      	b.n	800a2a8 <__ssputs_r+0x58>
 800a2ee:	462a      	mov	r2, r5
 800a2f0:	f000 facc 	bl	800a88c <_realloc_r>
 800a2f4:	4606      	mov	r6, r0
 800a2f6:	2800      	cmp	r0, #0
 800a2f8:	d1e2      	bne.n	800a2c0 <__ssputs_r+0x70>
 800a2fa:	6921      	ldr	r1, [r4, #16]
 800a2fc:	4650      	mov	r0, sl
 800a2fe:	f7ff ff01 	bl	800a104 <_free_r>
 800a302:	e7c8      	b.n	800a296 <__ssputs_r+0x46>

0800a304 <_svfiprintf_r>:
 800a304:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a308:	461d      	mov	r5, r3
 800a30a:	898b      	ldrh	r3, [r1, #12]
 800a30c:	b09d      	sub	sp, #116	; 0x74
 800a30e:	061f      	lsls	r7, r3, #24
 800a310:	4680      	mov	r8, r0
 800a312:	460c      	mov	r4, r1
 800a314:	4616      	mov	r6, r2
 800a316:	d50f      	bpl.n	800a338 <_svfiprintf_r+0x34>
 800a318:	690b      	ldr	r3, [r1, #16]
 800a31a:	b96b      	cbnz	r3, 800a338 <_svfiprintf_r+0x34>
 800a31c:	2140      	movs	r1, #64	; 0x40
 800a31e:	f7ff ff3d 	bl	800a19c <_malloc_r>
 800a322:	6020      	str	r0, [r4, #0]
 800a324:	6120      	str	r0, [r4, #16]
 800a326:	b928      	cbnz	r0, 800a334 <_svfiprintf_r+0x30>
 800a328:	230c      	movs	r3, #12
 800a32a:	f8c8 3000 	str.w	r3, [r8]
 800a32e:	f04f 30ff 	mov.w	r0, #4294967295
 800a332:	e0c8      	b.n	800a4c6 <_svfiprintf_r+0x1c2>
 800a334:	2340      	movs	r3, #64	; 0x40
 800a336:	6163      	str	r3, [r4, #20]
 800a338:	2300      	movs	r3, #0
 800a33a:	9309      	str	r3, [sp, #36]	; 0x24
 800a33c:	2320      	movs	r3, #32
 800a33e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a342:	2330      	movs	r3, #48	; 0x30
 800a344:	f04f 0b01 	mov.w	fp, #1
 800a348:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a34c:	9503      	str	r5, [sp, #12]
 800a34e:	4637      	mov	r7, r6
 800a350:	463d      	mov	r5, r7
 800a352:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a356:	b10b      	cbz	r3, 800a35c <_svfiprintf_r+0x58>
 800a358:	2b25      	cmp	r3, #37	; 0x25
 800a35a:	d13e      	bne.n	800a3da <_svfiprintf_r+0xd6>
 800a35c:	ebb7 0a06 	subs.w	sl, r7, r6
 800a360:	d00b      	beq.n	800a37a <_svfiprintf_r+0x76>
 800a362:	4653      	mov	r3, sl
 800a364:	4632      	mov	r2, r6
 800a366:	4621      	mov	r1, r4
 800a368:	4640      	mov	r0, r8
 800a36a:	f7ff ff71 	bl	800a250 <__ssputs_r>
 800a36e:	3001      	adds	r0, #1
 800a370:	f000 80a4 	beq.w	800a4bc <_svfiprintf_r+0x1b8>
 800a374:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a376:	4453      	add	r3, sl
 800a378:	9309      	str	r3, [sp, #36]	; 0x24
 800a37a:	783b      	ldrb	r3, [r7, #0]
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	f000 809d 	beq.w	800a4bc <_svfiprintf_r+0x1b8>
 800a382:	2300      	movs	r3, #0
 800a384:	f04f 32ff 	mov.w	r2, #4294967295
 800a388:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a38c:	9304      	str	r3, [sp, #16]
 800a38e:	9307      	str	r3, [sp, #28]
 800a390:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a394:	931a      	str	r3, [sp, #104]	; 0x68
 800a396:	462f      	mov	r7, r5
 800a398:	2205      	movs	r2, #5
 800a39a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800a39e:	4850      	ldr	r0, [pc, #320]	; (800a4e0 <_svfiprintf_r+0x1dc>)
 800a3a0:	f000 fa40 	bl	800a824 <memchr>
 800a3a4:	9b04      	ldr	r3, [sp, #16]
 800a3a6:	b9d0      	cbnz	r0, 800a3de <_svfiprintf_r+0xda>
 800a3a8:	06d9      	lsls	r1, r3, #27
 800a3aa:	bf44      	itt	mi
 800a3ac:	2220      	movmi	r2, #32
 800a3ae:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a3b2:	071a      	lsls	r2, r3, #28
 800a3b4:	bf44      	itt	mi
 800a3b6:	222b      	movmi	r2, #43	; 0x2b
 800a3b8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a3bc:	782a      	ldrb	r2, [r5, #0]
 800a3be:	2a2a      	cmp	r2, #42	; 0x2a
 800a3c0:	d015      	beq.n	800a3ee <_svfiprintf_r+0xea>
 800a3c2:	462f      	mov	r7, r5
 800a3c4:	2000      	movs	r0, #0
 800a3c6:	250a      	movs	r5, #10
 800a3c8:	9a07      	ldr	r2, [sp, #28]
 800a3ca:	4639      	mov	r1, r7
 800a3cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a3d0:	3b30      	subs	r3, #48	; 0x30
 800a3d2:	2b09      	cmp	r3, #9
 800a3d4:	d94d      	bls.n	800a472 <_svfiprintf_r+0x16e>
 800a3d6:	b1b8      	cbz	r0, 800a408 <_svfiprintf_r+0x104>
 800a3d8:	e00f      	b.n	800a3fa <_svfiprintf_r+0xf6>
 800a3da:	462f      	mov	r7, r5
 800a3dc:	e7b8      	b.n	800a350 <_svfiprintf_r+0x4c>
 800a3de:	4a40      	ldr	r2, [pc, #256]	; (800a4e0 <_svfiprintf_r+0x1dc>)
 800a3e0:	463d      	mov	r5, r7
 800a3e2:	1a80      	subs	r0, r0, r2
 800a3e4:	fa0b f000 	lsl.w	r0, fp, r0
 800a3e8:	4318      	orrs	r0, r3
 800a3ea:	9004      	str	r0, [sp, #16]
 800a3ec:	e7d3      	b.n	800a396 <_svfiprintf_r+0x92>
 800a3ee:	9a03      	ldr	r2, [sp, #12]
 800a3f0:	1d11      	adds	r1, r2, #4
 800a3f2:	6812      	ldr	r2, [r2, #0]
 800a3f4:	9103      	str	r1, [sp, #12]
 800a3f6:	2a00      	cmp	r2, #0
 800a3f8:	db01      	blt.n	800a3fe <_svfiprintf_r+0xfa>
 800a3fa:	9207      	str	r2, [sp, #28]
 800a3fc:	e004      	b.n	800a408 <_svfiprintf_r+0x104>
 800a3fe:	4252      	negs	r2, r2
 800a400:	f043 0302 	orr.w	r3, r3, #2
 800a404:	9207      	str	r2, [sp, #28]
 800a406:	9304      	str	r3, [sp, #16]
 800a408:	783b      	ldrb	r3, [r7, #0]
 800a40a:	2b2e      	cmp	r3, #46	; 0x2e
 800a40c:	d10c      	bne.n	800a428 <_svfiprintf_r+0x124>
 800a40e:	787b      	ldrb	r3, [r7, #1]
 800a410:	2b2a      	cmp	r3, #42	; 0x2a
 800a412:	d133      	bne.n	800a47c <_svfiprintf_r+0x178>
 800a414:	9b03      	ldr	r3, [sp, #12]
 800a416:	3702      	adds	r7, #2
 800a418:	1d1a      	adds	r2, r3, #4
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	9203      	str	r2, [sp, #12]
 800a41e:	2b00      	cmp	r3, #0
 800a420:	bfb8      	it	lt
 800a422:	f04f 33ff 	movlt.w	r3, #4294967295
 800a426:	9305      	str	r3, [sp, #20]
 800a428:	4d2e      	ldr	r5, [pc, #184]	; (800a4e4 <_svfiprintf_r+0x1e0>)
 800a42a:	2203      	movs	r2, #3
 800a42c:	7839      	ldrb	r1, [r7, #0]
 800a42e:	4628      	mov	r0, r5
 800a430:	f000 f9f8 	bl	800a824 <memchr>
 800a434:	b138      	cbz	r0, 800a446 <_svfiprintf_r+0x142>
 800a436:	2340      	movs	r3, #64	; 0x40
 800a438:	1b40      	subs	r0, r0, r5
 800a43a:	fa03 f000 	lsl.w	r0, r3, r0
 800a43e:	9b04      	ldr	r3, [sp, #16]
 800a440:	3701      	adds	r7, #1
 800a442:	4303      	orrs	r3, r0
 800a444:	9304      	str	r3, [sp, #16]
 800a446:	7839      	ldrb	r1, [r7, #0]
 800a448:	2206      	movs	r2, #6
 800a44a:	4827      	ldr	r0, [pc, #156]	; (800a4e8 <_svfiprintf_r+0x1e4>)
 800a44c:	1c7e      	adds	r6, r7, #1
 800a44e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a452:	f000 f9e7 	bl	800a824 <memchr>
 800a456:	2800      	cmp	r0, #0
 800a458:	d038      	beq.n	800a4cc <_svfiprintf_r+0x1c8>
 800a45a:	4b24      	ldr	r3, [pc, #144]	; (800a4ec <_svfiprintf_r+0x1e8>)
 800a45c:	bb13      	cbnz	r3, 800a4a4 <_svfiprintf_r+0x1a0>
 800a45e:	9b03      	ldr	r3, [sp, #12]
 800a460:	3307      	adds	r3, #7
 800a462:	f023 0307 	bic.w	r3, r3, #7
 800a466:	3308      	adds	r3, #8
 800a468:	9303      	str	r3, [sp, #12]
 800a46a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a46c:	444b      	add	r3, r9
 800a46e:	9309      	str	r3, [sp, #36]	; 0x24
 800a470:	e76d      	b.n	800a34e <_svfiprintf_r+0x4a>
 800a472:	fb05 3202 	mla	r2, r5, r2, r3
 800a476:	2001      	movs	r0, #1
 800a478:	460f      	mov	r7, r1
 800a47a:	e7a6      	b.n	800a3ca <_svfiprintf_r+0xc6>
 800a47c:	2300      	movs	r3, #0
 800a47e:	250a      	movs	r5, #10
 800a480:	4619      	mov	r1, r3
 800a482:	3701      	adds	r7, #1
 800a484:	9305      	str	r3, [sp, #20]
 800a486:	4638      	mov	r0, r7
 800a488:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a48c:	3a30      	subs	r2, #48	; 0x30
 800a48e:	2a09      	cmp	r2, #9
 800a490:	d903      	bls.n	800a49a <_svfiprintf_r+0x196>
 800a492:	2b00      	cmp	r3, #0
 800a494:	d0c8      	beq.n	800a428 <_svfiprintf_r+0x124>
 800a496:	9105      	str	r1, [sp, #20]
 800a498:	e7c6      	b.n	800a428 <_svfiprintf_r+0x124>
 800a49a:	fb05 2101 	mla	r1, r5, r1, r2
 800a49e:	2301      	movs	r3, #1
 800a4a0:	4607      	mov	r7, r0
 800a4a2:	e7f0      	b.n	800a486 <_svfiprintf_r+0x182>
 800a4a4:	ab03      	add	r3, sp, #12
 800a4a6:	9300      	str	r3, [sp, #0]
 800a4a8:	4622      	mov	r2, r4
 800a4aa:	4b11      	ldr	r3, [pc, #68]	; (800a4f0 <_svfiprintf_r+0x1ec>)
 800a4ac:	a904      	add	r1, sp, #16
 800a4ae:	4640      	mov	r0, r8
 800a4b0:	f3af 8000 	nop.w
 800a4b4:	f1b0 3fff 	cmp.w	r0, #4294967295
 800a4b8:	4681      	mov	r9, r0
 800a4ba:	d1d6      	bne.n	800a46a <_svfiprintf_r+0x166>
 800a4bc:	89a3      	ldrh	r3, [r4, #12]
 800a4be:	065b      	lsls	r3, r3, #25
 800a4c0:	f53f af35 	bmi.w	800a32e <_svfiprintf_r+0x2a>
 800a4c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a4c6:	b01d      	add	sp, #116	; 0x74
 800a4c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4cc:	ab03      	add	r3, sp, #12
 800a4ce:	9300      	str	r3, [sp, #0]
 800a4d0:	4622      	mov	r2, r4
 800a4d2:	4b07      	ldr	r3, [pc, #28]	; (800a4f0 <_svfiprintf_r+0x1ec>)
 800a4d4:	a904      	add	r1, sp, #16
 800a4d6:	4640      	mov	r0, r8
 800a4d8:	f000 f882 	bl	800a5e0 <_printf_i>
 800a4dc:	e7ea      	b.n	800a4b4 <_svfiprintf_r+0x1b0>
 800a4de:	bf00      	nop
 800a4e0:	0800c180 	.word	0x0800c180
 800a4e4:	0800c186 	.word	0x0800c186
 800a4e8:	0800c18a 	.word	0x0800c18a
 800a4ec:	00000000 	.word	0x00000000
 800a4f0:	0800a251 	.word	0x0800a251

0800a4f4 <_printf_common>:
 800a4f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a4f8:	4691      	mov	r9, r2
 800a4fa:	461f      	mov	r7, r3
 800a4fc:	688a      	ldr	r2, [r1, #8]
 800a4fe:	690b      	ldr	r3, [r1, #16]
 800a500:	4606      	mov	r6, r0
 800a502:	4293      	cmp	r3, r2
 800a504:	bfb8      	it	lt
 800a506:	4613      	movlt	r3, r2
 800a508:	f8c9 3000 	str.w	r3, [r9]
 800a50c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a510:	460c      	mov	r4, r1
 800a512:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a516:	b112      	cbz	r2, 800a51e <_printf_common+0x2a>
 800a518:	3301      	adds	r3, #1
 800a51a:	f8c9 3000 	str.w	r3, [r9]
 800a51e:	6823      	ldr	r3, [r4, #0]
 800a520:	0699      	lsls	r1, r3, #26
 800a522:	bf42      	ittt	mi
 800a524:	f8d9 3000 	ldrmi.w	r3, [r9]
 800a528:	3302      	addmi	r3, #2
 800a52a:	f8c9 3000 	strmi.w	r3, [r9]
 800a52e:	6825      	ldr	r5, [r4, #0]
 800a530:	f015 0506 	ands.w	r5, r5, #6
 800a534:	d107      	bne.n	800a546 <_printf_common+0x52>
 800a536:	f104 0a19 	add.w	sl, r4, #25
 800a53a:	68e3      	ldr	r3, [r4, #12]
 800a53c:	f8d9 2000 	ldr.w	r2, [r9]
 800a540:	1a9b      	subs	r3, r3, r2
 800a542:	42ab      	cmp	r3, r5
 800a544:	dc29      	bgt.n	800a59a <_printf_common+0xa6>
 800a546:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800a54a:	6822      	ldr	r2, [r4, #0]
 800a54c:	3300      	adds	r3, #0
 800a54e:	bf18      	it	ne
 800a550:	2301      	movne	r3, #1
 800a552:	0692      	lsls	r2, r2, #26
 800a554:	d42e      	bmi.n	800a5b4 <_printf_common+0xc0>
 800a556:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a55a:	4639      	mov	r1, r7
 800a55c:	4630      	mov	r0, r6
 800a55e:	47c0      	blx	r8
 800a560:	3001      	adds	r0, #1
 800a562:	d021      	beq.n	800a5a8 <_printf_common+0xb4>
 800a564:	6823      	ldr	r3, [r4, #0]
 800a566:	68e5      	ldr	r5, [r4, #12]
 800a568:	f003 0306 	and.w	r3, r3, #6
 800a56c:	2b04      	cmp	r3, #4
 800a56e:	bf18      	it	ne
 800a570:	2500      	movne	r5, #0
 800a572:	f8d9 2000 	ldr.w	r2, [r9]
 800a576:	f04f 0900 	mov.w	r9, #0
 800a57a:	bf08      	it	eq
 800a57c:	1aad      	subeq	r5, r5, r2
 800a57e:	68a3      	ldr	r3, [r4, #8]
 800a580:	6922      	ldr	r2, [r4, #16]
 800a582:	bf08      	it	eq
 800a584:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a588:	4293      	cmp	r3, r2
 800a58a:	bfc4      	itt	gt
 800a58c:	1a9b      	subgt	r3, r3, r2
 800a58e:	18ed      	addgt	r5, r5, r3
 800a590:	341a      	adds	r4, #26
 800a592:	454d      	cmp	r5, r9
 800a594:	d11a      	bne.n	800a5cc <_printf_common+0xd8>
 800a596:	2000      	movs	r0, #0
 800a598:	e008      	b.n	800a5ac <_printf_common+0xb8>
 800a59a:	2301      	movs	r3, #1
 800a59c:	4652      	mov	r2, sl
 800a59e:	4639      	mov	r1, r7
 800a5a0:	4630      	mov	r0, r6
 800a5a2:	47c0      	blx	r8
 800a5a4:	3001      	adds	r0, #1
 800a5a6:	d103      	bne.n	800a5b0 <_printf_common+0xbc>
 800a5a8:	f04f 30ff 	mov.w	r0, #4294967295
 800a5ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a5b0:	3501      	adds	r5, #1
 800a5b2:	e7c2      	b.n	800a53a <_printf_common+0x46>
 800a5b4:	2030      	movs	r0, #48	; 0x30
 800a5b6:	18e1      	adds	r1, r4, r3
 800a5b8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a5bc:	1c5a      	adds	r2, r3, #1
 800a5be:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a5c2:	4422      	add	r2, r4
 800a5c4:	3302      	adds	r3, #2
 800a5c6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a5ca:	e7c4      	b.n	800a556 <_printf_common+0x62>
 800a5cc:	2301      	movs	r3, #1
 800a5ce:	4622      	mov	r2, r4
 800a5d0:	4639      	mov	r1, r7
 800a5d2:	4630      	mov	r0, r6
 800a5d4:	47c0      	blx	r8
 800a5d6:	3001      	adds	r0, #1
 800a5d8:	d0e6      	beq.n	800a5a8 <_printf_common+0xb4>
 800a5da:	f109 0901 	add.w	r9, r9, #1
 800a5de:	e7d8      	b.n	800a592 <_printf_common+0x9e>

0800a5e0 <_printf_i>:
 800a5e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a5e4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800a5e8:	460c      	mov	r4, r1
 800a5ea:	7e09      	ldrb	r1, [r1, #24]
 800a5ec:	b085      	sub	sp, #20
 800a5ee:	296e      	cmp	r1, #110	; 0x6e
 800a5f0:	4617      	mov	r7, r2
 800a5f2:	4606      	mov	r6, r0
 800a5f4:	4698      	mov	r8, r3
 800a5f6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a5f8:	f000 80b3 	beq.w	800a762 <_printf_i+0x182>
 800a5fc:	d822      	bhi.n	800a644 <_printf_i+0x64>
 800a5fe:	2963      	cmp	r1, #99	; 0x63
 800a600:	d036      	beq.n	800a670 <_printf_i+0x90>
 800a602:	d80a      	bhi.n	800a61a <_printf_i+0x3a>
 800a604:	2900      	cmp	r1, #0
 800a606:	f000 80b9 	beq.w	800a77c <_printf_i+0x19c>
 800a60a:	2958      	cmp	r1, #88	; 0x58
 800a60c:	f000 8083 	beq.w	800a716 <_printf_i+0x136>
 800a610:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a614:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800a618:	e032      	b.n	800a680 <_printf_i+0xa0>
 800a61a:	2964      	cmp	r1, #100	; 0x64
 800a61c:	d001      	beq.n	800a622 <_printf_i+0x42>
 800a61e:	2969      	cmp	r1, #105	; 0x69
 800a620:	d1f6      	bne.n	800a610 <_printf_i+0x30>
 800a622:	6820      	ldr	r0, [r4, #0]
 800a624:	6813      	ldr	r3, [r2, #0]
 800a626:	0605      	lsls	r5, r0, #24
 800a628:	f103 0104 	add.w	r1, r3, #4
 800a62c:	d52a      	bpl.n	800a684 <_printf_i+0xa4>
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	6011      	str	r1, [r2, #0]
 800a632:	2b00      	cmp	r3, #0
 800a634:	da03      	bge.n	800a63e <_printf_i+0x5e>
 800a636:	222d      	movs	r2, #45	; 0x2d
 800a638:	425b      	negs	r3, r3
 800a63a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800a63e:	486f      	ldr	r0, [pc, #444]	; (800a7fc <_printf_i+0x21c>)
 800a640:	220a      	movs	r2, #10
 800a642:	e039      	b.n	800a6b8 <_printf_i+0xd8>
 800a644:	2973      	cmp	r1, #115	; 0x73
 800a646:	f000 809d 	beq.w	800a784 <_printf_i+0x1a4>
 800a64a:	d808      	bhi.n	800a65e <_printf_i+0x7e>
 800a64c:	296f      	cmp	r1, #111	; 0x6f
 800a64e:	d020      	beq.n	800a692 <_printf_i+0xb2>
 800a650:	2970      	cmp	r1, #112	; 0x70
 800a652:	d1dd      	bne.n	800a610 <_printf_i+0x30>
 800a654:	6823      	ldr	r3, [r4, #0]
 800a656:	f043 0320 	orr.w	r3, r3, #32
 800a65a:	6023      	str	r3, [r4, #0]
 800a65c:	e003      	b.n	800a666 <_printf_i+0x86>
 800a65e:	2975      	cmp	r1, #117	; 0x75
 800a660:	d017      	beq.n	800a692 <_printf_i+0xb2>
 800a662:	2978      	cmp	r1, #120	; 0x78
 800a664:	d1d4      	bne.n	800a610 <_printf_i+0x30>
 800a666:	2378      	movs	r3, #120	; 0x78
 800a668:	4865      	ldr	r0, [pc, #404]	; (800a800 <_printf_i+0x220>)
 800a66a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a66e:	e055      	b.n	800a71c <_printf_i+0x13c>
 800a670:	6813      	ldr	r3, [r2, #0]
 800a672:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a676:	1d19      	adds	r1, r3, #4
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	6011      	str	r1, [r2, #0]
 800a67c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a680:	2301      	movs	r3, #1
 800a682:	e08c      	b.n	800a79e <_printf_i+0x1be>
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a68a:	6011      	str	r1, [r2, #0]
 800a68c:	bf18      	it	ne
 800a68e:	b21b      	sxthne	r3, r3
 800a690:	e7cf      	b.n	800a632 <_printf_i+0x52>
 800a692:	6813      	ldr	r3, [r2, #0]
 800a694:	6825      	ldr	r5, [r4, #0]
 800a696:	1d18      	adds	r0, r3, #4
 800a698:	6010      	str	r0, [r2, #0]
 800a69a:	0628      	lsls	r0, r5, #24
 800a69c:	d501      	bpl.n	800a6a2 <_printf_i+0xc2>
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	e002      	b.n	800a6a8 <_printf_i+0xc8>
 800a6a2:	0668      	lsls	r0, r5, #25
 800a6a4:	d5fb      	bpl.n	800a69e <_printf_i+0xbe>
 800a6a6:	881b      	ldrh	r3, [r3, #0]
 800a6a8:	296f      	cmp	r1, #111	; 0x6f
 800a6aa:	bf14      	ite	ne
 800a6ac:	220a      	movne	r2, #10
 800a6ae:	2208      	moveq	r2, #8
 800a6b0:	4852      	ldr	r0, [pc, #328]	; (800a7fc <_printf_i+0x21c>)
 800a6b2:	2100      	movs	r1, #0
 800a6b4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a6b8:	6865      	ldr	r5, [r4, #4]
 800a6ba:	2d00      	cmp	r5, #0
 800a6bc:	60a5      	str	r5, [r4, #8]
 800a6be:	f2c0 8095 	blt.w	800a7ec <_printf_i+0x20c>
 800a6c2:	6821      	ldr	r1, [r4, #0]
 800a6c4:	f021 0104 	bic.w	r1, r1, #4
 800a6c8:	6021      	str	r1, [r4, #0]
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d13d      	bne.n	800a74a <_printf_i+0x16a>
 800a6ce:	2d00      	cmp	r5, #0
 800a6d0:	f040 808e 	bne.w	800a7f0 <_printf_i+0x210>
 800a6d4:	4665      	mov	r5, ip
 800a6d6:	2a08      	cmp	r2, #8
 800a6d8:	d10b      	bne.n	800a6f2 <_printf_i+0x112>
 800a6da:	6823      	ldr	r3, [r4, #0]
 800a6dc:	07db      	lsls	r3, r3, #31
 800a6de:	d508      	bpl.n	800a6f2 <_printf_i+0x112>
 800a6e0:	6923      	ldr	r3, [r4, #16]
 800a6e2:	6862      	ldr	r2, [r4, #4]
 800a6e4:	429a      	cmp	r2, r3
 800a6e6:	bfde      	ittt	le
 800a6e8:	2330      	movle	r3, #48	; 0x30
 800a6ea:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a6ee:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a6f2:	ebac 0305 	sub.w	r3, ip, r5
 800a6f6:	6123      	str	r3, [r4, #16]
 800a6f8:	f8cd 8000 	str.w	r8, [sp]
 800a6fc:	463b      	mov	r3, r7
 800a6fe:	aa03      	add	r2, sp, #12
 800a700:	4621      	mov	r1, r4
 800a702:	4630      	mov	r0, r6
 800a704:	f7ff fef6 	bl	800a4f4 <_printf_common>
 800a708:	3001      	adds	r0, #1
 800a70a:	d14d      	bne.n	800a7a8 <_printf_i+0x1c8>
 800a70c:	f04f 30ff 	mov.w	r0, #4294967295
 800a710:	b005      	add	sp, #20
 800a712:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a716:	4839      	ldr	r0, [pc, #228]	; (800a7fc <_printf_i+0x21c>)
 800a718:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800a71c:	6813      	ldr	r3, [r2, #0]
 800a71e:	6821      	ldr	r1, [r4, #0]
 800a720:	1d1d      	adds	r5, r3, #4
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	6015      	str	r5, [r2, #0]
 800a726:	060a      	lsls	r2, r1, #24
 800a728:	d50b      	bpl.n	800a742 <_printf_i+0x162>
 800a72a:	07ca      	lsls	r2, r1, #31
 800a72c:	bf44      	itt	mi
 800a72e:	f041 0120 	orrmi.w	r1, r1, #32
 800a732:	6021      	strmi	r1, [r4, #0]
 800a734:	b91b      	cbnz	r3, 800a73e <_printf_i+0x15e>
 800a736:	6822      	ldr	r2, [r4, #0]
 800a738:	f022 0220 	bic.w	r2, r2, #32
 800a73c:	6022      	str	r2, [r4, #0]
 800a73e:	2210      	movs	r2, #16
 800a740:	e7b7      	b.n	800a6b2 <_printf_i+0xd2>
 800a742:	064d      	lsls	r5, r1, #25
 800a744:	bf48      	it	mi
 800a746:	b29b      	uxthmi	r3, r3
 800a748:	e7ef      	b.n	800a72a <_printf_i+0x14a>
 800a74a:	4665      	mov	r5, ip
 800a74c:	fbb3 f1f2 	udiv	r1, r3, r2
 800a750:	fb02 3311 	mls	r3, r2, r1, r3
 800a754:	5cc3      	ldrb	r3, [r0, r3]
 800a756:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800a75a:	460b      	mov	r3, r1
 800a75c:	2900      	cmp	r1, #0
 800a75e:	d1f5      	bne.n	800a74c <_printf_i+0x16c>
 800a760:	e7b9      	b.n	800a6d6 <_printf_i+0xf6>
 800a762:	6813      	ldr	r3, [r2, #0]
 800a764:	6825      	ldr	r5, [r4, #0]
 800a766:	1d18      	adds	r0, r3, #4
 800a768:	6961      	ldr	r1, [r4, #20]
 800a76a:	6010      	str	r0, [r2, #0]
 800a76c:	0628      	lsls	r0, r5, #24
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	d501      	bpl.n	800a776 <_printf_i+0x196>
 800a772:	6019      	str	r1, [r3, #0]
 800a774:	e002      	b.n	800a77c <_printf_i+0x19c>
 800a776:	066a      	lsls	r2, r5, #25
 800a778:	d5fb      	bpl.n	800a772 <_printf_i+0x192>
 800a77a:	8019      	strh	r1, [r3, #0]
 800a77c:	2300      	movs	r3, #0
 800a77e:	4665      	mov	r5, ip
 800a780:	6123      	str	r3, [r4, #16]
 800a782:	e7b9      	b.n	800a6f8 <_printf_i+0x118>
 800a784:	6813      	ldr	r3, [r2, #0]
 800a786:	1d19      	adds	r1, r3, #4
 800a788:	6011      	str	r1, [r2, #0]
 800a78a:	681d      	ldr	r5, [r3, #0]
 800a78c:	6862      	ldr	r2, [r4, #4]
 800a78e:	2100      	movs	r1, #0
 800a790:	4628      	mov	r0, r5
 800a792:	f000 f847 	bl	800a824 <memchr>
 800a796:	b108      	cbz	r0, 800a79c <_printf_i+0x1bc>
 800a798:	1b40      	subs	r0, r0, r5
 800a79a:	6060      	str	r0, [r4, #4]
 800a79c:	6863      	ldr	r3, [r4, #4]
 800a79e:	6123      	str	r3, [r4, #16]
 800a7a0:	2300      	movs	r3, #0
 800a7a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a7a6:	e7a7      	b.n	800a6f8 <_printf_i+0x118>
 800a7a8:	6923      	ldr	r3, [r4, #16]
 800a7aa:	462a      	mov	r2, r5
 800a7ac:	4639      	mov	r1, r7
 800a7ae:	4630      	mov	r0, r6
 800a7b0:	47c0      	blx	r8
 800a7b2:	3001      	adds	r0, #1
 800a7b4:	d0aa      	beq.n	800a70c <_printf_i+0x12c>
 800a7b6:	6823      	ldr	r3, [r4, #0]
 800a7b8:	079b      	lsls	r3, r3, #30
 800a7ba:	d413      	bmi.n	800a7e4 <_printf_i+0x204>
 800a7bc:	68e0      	ldr	r0, [r4, #12]
 800a7be:	9b03      	ldr	r3, [sp, #12]
 800a7c0:	4298      	cmp	r0, r3
 800a7c2:	bfb8      	it	lt
 800a7c4:	4618      	movlt	r0, r3
 800a7c6:	e7a3      	b.n	800a710 <_printf_i+0x130>
 800a7c8:	2301      	movs	r3, #1
 800a7ca:	464a      	mov	r2, r9
 800a7cc:	4639      	mov	r1, r7
 800a7ce:	4630      	mov	r0, r6
 800a7d0:	47c0      	blx	r8
 800a7d2:	3001      	adds	r0, #1
 800a7d4:	d09a      	beq.n	800a70c <_printf_i+0x12c>
 800a7d6:	3501      	adds	r5, #1
 800a7d8:	68e3      	ldr	r3, [r4, #12]
 800a7da:	9a03      	ldr	r2, [sp, #12]
 800a7dc:	1a9b      	subs	r3, r3, r2
 800a7de:	42ab      	cmp	r3, r5
 800a7e0:	dcf2      	bgt.n	800a7c8 <_printf_i+0x1e8>
 800a7e2:	e7eb      	b.n	800a7bc <_printf_i+0x1dc>
 800a7e4:	2500      	movs	r5, #0
 800a7e6:	f104 0919 	add.w	r9, r4, #25
 800a7ea:	e7f5      	b.n	800a7d8 <_printf_i+0x1f8>
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d1ac      	bne.n	800a74a <_printf_i+0x16a>
 800a7f0:	7803      	ldrb	r3, [r0, #0]
 800a7f2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a7f6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a7fa:	e76c      	b.n	800a6d6 <_printf_i+0xf6>
 800a7fc:	0800c191 	.word	0x0800c191
 800a800:	0800c1a2 	.word	0x0800c1a2

0800a804 <_sbrk_r>:
 800a804:	b538      	push	{r3, r4, r5, lr}
 800a806:	2300      	movs	r3, #0
 800a808:	4c05      	ldr	r4, [pc, #20]	; (800a820 <_sbrk_r+0x1c>)
 800a80a:	4605      	mov	r5, r0
 800a80c:	4608      	mov	r0, r1
 800a80e:	6023      	str	r3, [r4, #0]
 800a810:	f7fd fd14 	bl	800823c <_sbrk>
 800a814:	1c43      	adds	r3, r0, #1
 800a816:	d102      	bne.n	800a81e <_sbrk_r+0x1a>
 800a818:	6823      	ldr	r3, [r4, #0]
 800a81a:	b103      	cbz	r3, 800a81e <_sbrk_r+0x1a>
 800a81c:	602b      	str	r3, [r5, #0]
 800a81e:	bd38      	pop	{r3, r4, r5, pc}
 800a820:	20000e24 	.word	0x20000e24

0800a824 <memchr>:
 800a824:	b510      	push	{r4, lr}
 800a826:	b2c9      	uxtb	r1, r1
 800a828:	4402      	add	r2, r0
 800a82a:	4290      	cmp	r0, r2
 800a82c:	4603      	mov	r3, r0
 800a82e:	d101      	bne.n	800a834 <memchr+0x10>
 800a830:	2300      	movs	r3, #0
 800a832:	e003      	b.n	800a83c <memchr+0x18>
 800a834:	781c      	ldrb	r4, [r3, #0]
 800a836:	3001      	adds	r0, #1
 800a838:	428c      	cmp	r4, r1
 800a83a:	d1f6      	bne.n	800a82a <memchr+0x6>
 800a83c:	4618      	mov	r0, r3
 800a83e:	bd10      	pop	{r4, pc}

0800a840 <memcpy>:
 800a840:	b510      	push	{r4, lr}
 800a842:	1e43      	subs	r3, r0, #1
 800a844:	440a      	add	r2, r1
 800a846:	4291      	cmp	r1, r2
 800a848:	d100      	bne.n	800a84c <memcpy+0xc>
 800a84a:	bd10      	pop	{r4, pc}
 800a84c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a850:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a854:	e7f7      	b.n	800a846 <memcpy+0x6>

0800a856 <memmove>:
 800a856:	4288      	cmp	r0, r1
 800a858:	b510      	push	{r4, lr}
 800a85a:	eb01 0302 	add.w	r3, r1, r2
 800a85e:	d807      	bhi.n	800a870 <memmove+0x1a>
 800a860:	1e42      	subs	r2, r0, #1
 800a862:	4299      	cmp	r1, r3
 800a864:	d00a      	beq.n	800a87c <memmove+0x26>
 800a866:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a86a:	f802 4f01 	strb.w	r4, [r2, #1]!
 800a86e:	e7f8      	b.n	800a862 <memmove+0xc>
 800a870:	4283      	cmp	r3, r0
 800a872:	d9f5      	bls.n	800a860 <memmove+0xa>
 800a874:	1881      	adds	r1, r0, r2
 800a876:	1ad2      	subs	r2, r2, r3
 800a878:	42d3      	cmn	r3, r2
 800a87a:	d100      	bne.n	800a87e <memmove+0x28>
 800a87c:	bd10      	pop	{r4, pc}
 800a87e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a882:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800a886:	e7f7      	b.n	800a878 <memmove+0x22>

0800a888 <__malloc_lock>:
 800a888:	4770      	bx	lr

0800a88a <__malloc_unlock>:
 800a88a:	4770      	bx	lr

0800a88c <_realloc_r>:
 800a88c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a88e:	4607      	mov	r7, r0
 800a890:	4614      	mov	r4, r2
 800a892:	460e      	mov	r6, r1
 800a894:	b921      	cbnz	r1, 800a8a0 <_realloc_r+0x14>
 800a896:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a89a:	4611      	mov	r1, r2
 800a89c:	f7ff bc7e 	b.w	800a19c <_malloc_r>
 800a8a0:	b922      	cbnz	r2, 800a8ac <_realloc_r+0x20>
 800a8a2:	f7ff fc2f 	bl	800a104 <_free_r>
 800a8a6:	4625      	mov	r5, r4
 800a8a8:	4628      	mov	r0, r5
 800a8aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a8ac:	f000 f814 	bl	800a8d8 <_malloc_usable_size_r>
 800a8b0:	42a0      	cmp	r0, r4
 800a8b2:	d20f      	bcs.n	800a8d4 <_realloc_r+0x48>
 800a8b4:	4621      	mov	r1, r4
 800a8b6:	4638      	mov	r0, r7
 800a8b8:	f7ff fc70 	bl	800a19c <_malloc_r>
 800a8bc:	4605      	mov	r5, r0
 800a8be:	2800      	cmp	r0, #0
 800a8c0:	d0f2      	beq.n	800a8a8 <_realloc_r+0x1c>
 800a8c2:	4631      	mov	r1, r6
 800a8c4:	4622      	mov	r2, r4
 800a8c6:	f7ff ffbb 	bl	800a840 <memcpy>
 800a8ca:	4631      	mov	r1, r6
 800a8cc:	4638      	mov	r0, r7
 800a8ce:	f7ff fc19 	bl	800a104 <_free_r>
 800a8d2:	e7e9      	b.n	800a8a8 <_realloc_r+0x1c>
 800a8d4:	4635      	mov	r5, r6
 800a8d6:	e7e7      	b.n	800a8a8 <_realloc_r+0x1c>

0800a8d8 <_malloc_usable_size_r>:
 800a8d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a8dc:	1f18      	subs	r0, r3, #4
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	bfbc      	itt	lt
 800a8e2:	580b      	ldrlt	r3, [r1, r0]
 800a8e4:	18c0      	addlt	r0, r0, r3
 800a8e6:	4770      	bx	lr

0800a8e8 <_init>:
 800a8e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8ea:	bf00      	nop
 800a8ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a8ee:	bc08      	pop	{r3}
 800a8f0:	469e      	mov	lr, r3
 800a8f2:	4770      	bx	lr

0800a8f4 <_fini>:
 800a8f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8f6:	bf00      	nop
 800a8f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a8fa:	bc08      	pop	{r3}
 800a8fc:	469e      	mov	lr, r3
 800a8fe:	4770      	bx	lr
