
plane_fight.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a1f0  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001880  0800a3d8  0800a3d8  0001a3d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bc58  0800bc58  00020084  2**0
                  CONTENTS
  4 .ARM          00000000  0800bc58  0800bc58  00020084  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800bc58  0800bc58  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bc58  0800bc58  0001bc58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bc5c  0800bc5c  0001bc5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  0800bc60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000d9c  20000084  0800bce4  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000e20  0800bce4  00020e20  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bf85  00000000  00000000  000200ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002127  00000000  00000000  0002c032  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000009d0  00000000  00000000  0002e160  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000008b8  00000000  00000000  0002eb30  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016f34  00000000  00000000  0002f3e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009e89  00000000  00000000  0004631c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007bc38  00000000  00000000  000501a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000cbddd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000028b0  00000000  00000000  000cbe58  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	20000084 	.word	0x20000084
 8000204:	00000000 	.word	0x00000000
 8000208:	0800a3c0 	.word	0x0800a3c0

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	20000088 	.word	0x20000088
 8000224:	0800a3c0 	.word	0x0800a3c0

08000228 <__aeabi_drsub>:
 8000228:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800022c:	e002      	b.n	8000234 <__adddf3>
 800022e:	bf00      	nop

08000230 <__aeabi_dsub>:
 8000230:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000234 <__adddf3>:
 8000234:	b530      	push	{r4, r5, lr}
 8000236:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800023a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800023e:	ea94 0f05 	teq	r4, r5
 8000242:	bf08      	it	eq
 8000244:	ea90 0f02 	teqeq	r0, r2
 8000248:	bf1f      	itttt	ne
 800024a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800024e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000252:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000256:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800025a:	f000 80e2 	beq.w	8000422 <__adddf3+0x1ee>
 800025e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000262:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000266:	bfb8      	it	lt
 8000268:	426d      	neglt	r5, r5
 800026a:	dd0c      	ble.n	8000286 <__adddf3+0x52>
 800026c:	442c      	add	r4, r5
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	ea82 0000 	eor.w	r0, r2, r0
 800027a:	ea83 0101 	eor.w	r1, r3, r1
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	2d36      	cmp	r5, #54	; 0x36
 8000288:	bf88      	it	hi
 800028a:	bd30      	pophi	{r4, r5, pc}
 800028c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000290:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000294:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000298:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800029c:	d002      	beq.n	80002a4 <__adddf3+0x70>
 800029e:	4240      	negs	r0, r0
 80002a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002a4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002ac:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b0:	d002      	beq.n	80002b8 <__adddf3+0x84>
 80002b2:	4252      	negs	r2, r2
 80002b4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b8:	ea94 0f05 	teq	r4, r5
 80002bc:	f000 80a7 	beq.w	800040e <__adddf3+0x1da>
 80002c0:	f1a4 0401 	sub.w	r4, r4, #1
 80002c4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c8:	db0d      	blt.n	80002e6 <__adddf3+0xb2>
 80002ca:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ce:	fa22 f205 	lsr.w	r2, r2, r5
 80002d2:	1880      	adds	r0, r0, r2
 80002d4:	f141 0100 	adc.w	r1, r1, #0
 80002d8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002dc:	1880      	adds	r0, r0, r2
 80002de:	fa43 f305 	asr.w	r3, r3, r5
 80002e2:	4159      	adcs	r1, r3
 80002e4:	e00e      	b.n	8000304 <__adddf3+0xd0>
 80002e6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ea:	f10e 0e20 	add.w	lr, lr, #32
 80002ee:	2a01      	cmp	r2, #1
 80002f0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002f4:	bf28      	it	cs
 80002f6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002fa:	fa43 f305 	asr.w	r3, r3, r5
 80002fe:	18c0      	adds	r0, r0, r3
 8000300:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000304:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000308:	d507      	bpl.n	800031a <__adddf3+0xe6>
 800030a:	f04f 0e00 	mov.w	lr, #0
 800030e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000312:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000316:	eb6e 0101 	sbc.w	r1, lr, r1
 800031a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800031e:	d31b      	bcc.n	8000358 <__adddf3+0x124>
 8000320:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000324:	d30c      	bcc.n	8000340 <__adddf3+0x10c>
 8000326:	0849      	lsrs	r1, r1, #1
 8000328:	ea5f 0030 	movs.w	r0, r0, rrx
 800032c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000330:	f104 0401 	add.w	r4, r4, #1
 8000334:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000338:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800033c:	f080 809a 	bcs.w	8000474 <__adddf3+0x240>
 8000340:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000344:	bf08      	it	eq
 8000346:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800034a:	f150 0000 	adcs.w	r0, r0, #0
 800034e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000352:	ea41 0105 	orr.w	r1, r1, r5
 8000356:	bd30      	pop	{r4, r5, pc}
 8000358:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800035c:	4140      	adcs	r0, r0
 800035e:	eb41 0101 	adc.w	r1, r1, r1
 8000362:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000366:	f1a4 0401 	sub.w	r4, r4, #1
 800036a:	d1e9      	bne.n	8000340 <__adddf3+0x10c>
 800036c:	f091 0f00 	teq	r1, #0
 8000370:	bf04      	itt	eq
 8000372:	4601      	moveq	r1, r0
 8000374:	2000      	moveq	r0, #0
 8000376:	fab1 f381 	clz	r3, r1
 800037a:	bf08      	it	eq
 800037c:	3320      	addeq	r3, #32
 800037e:	f1a3 030b 	sub.w	r3, r3, #11
 8000382:	f1b3 0220 	subs.w	r2, r3, #32
 8000386:	da0c      	bge.n	80003a2 <__adddf3+0x16e>
 8000388:	320c      	adds	r2, #12
 800038a:	dd08      	ble.n	800039e <__adddf3+0x16a>
 800038c:	f102 0c14 	add.w	ip, r2, #20
 8000390:	f1c2 020c 	rsb	r2, r2, #12
 8000394:	fa01 f00c 	lsl.w	r0, r1, ip
 8000398:	fa21 f102 	lsr.w	r1, r1, r2
 800039c:	e00c      	b.n	80003b8 <__adddf3+0x184>
 800039e:	f102 0214 	add.w	r2, r2, #20
 80003a2:	bfd8      	it	le
 80003a4:	f1c2 0c20 	rsble	ip, r2, #32
 80003a8:	fa01 f102 	lsl.w	r1, r1, r2
 80003ac:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b0:	bfdc      	itt	le
 80003b2:	ea41 010c 	orrle.w	r1, r1, ip
 80003b6:	4090      	lslle	r0, r2
 80003b8:	1ae4      	subs	r4, r4, r3
 80003ba:	bfa2      	ittt	ge
 80003bc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c0:	4329      	orrge	r1, r5
 80003c2:	bd30      	popge	{r4, r5, pc}
 80003c4:	ea6f 0404 	mvn.w	r4, r4
 80003c8:	3c1f      	subs	r4, #31
 80003ca:	da1c      	bge.n	8000406 <__adddf3+0x1d2>
 80003cc:	340c      	adds	r4, #12
 80003ce:	dc0e      	bgt.n	80003ee <__adddf3+0x1ba>
 80003d0:	f104 0414 	add.w	r4, r4, #20
 80003d4:	f1c4 0220 	rsb	r2, r4, #32
 80003d8:	fa20 f004 	lsr.w	r0, r0, r4
 80003dc:	fa01 f302 	lsl.w	r3, r1, r2
 80003e0:	ea40 0003 	orr.w	r0, r0, r3
 80003e4:	fa21 f304 	lsr.w	r3, r1, r4
 80003e8:	ea45 0103 	orr.w	r1, r5, r3
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f1c4 040c 	rsb	r4, r4, #12
 80003f2:	f1c4 0220 	rsb	r2, r4, #32
 80003f6:	fa20 f002 	lsr.w	r0, r0, r2
 80003fa:	fa01 f304 	lsl.w	r3, r1, r4
 80003fe:	ea40 0003 	orr.w	r0, r0, r3
 8000402:	4629      	mov	r1, r5
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	fa21 f004 	lsr.w	r0, r1, r4
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	f094 0f00 	teq	r4, #0
 8000412:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000416:	bf06      	itte	eq
 8000418:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800041c:	3401      	addeq	r4, #1
 800041e:	3d01      	subne	r5, #1
 8000420:	e74e      	b.n	80002c0 <__adddf3+0x8c>
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf18      	it	ne
 8000428:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800042c:	d029      	beq.n	8000482 <__adddf3+0x24e>
 800042e:	ea94 0f05 	teq	r4, r5
 8000432:	bf08      	it	eq
 8000434:	ea90 0f02 	teqeq	r0, r2
 8000438:	d005      	beq.n	8000446 <__adddf3+0x212>
 800043a:	ea54 0c00 	orrs.w	ip, r4, r0
 800043e:	bf04      	itt	eq
 8000440:	4619      	moveq	r1, r3
 8000442:	4610      	moveq	r0, r2
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	ea91 0f03 	teq	r1, r3
 800044a:	bf1e      	ittt	ne
 800044c:	2100      	movne	r1, #0
 800044e:	2000      	movne	r0, #0
 8000450:	bd30      	popne	{r4, r5, pc}
 8000452:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000456:	d105      	bne.n	8000464 <__adddf3+0x230>
 8000458:	0040      	lsls	r0, r0, #1
 800045a:	4149      	adcs	r1, r1
 800045c:	bf28      	it	cs
 800045e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000462:	bd30      	pop	{r4, r5, pc}
 8000464:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000468:	bf3c      	itt	cc
 800046a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800046e:	bd30      	popcc	{r4, r5, pc}
 8000470:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000474:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000478:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800047c:	f04f 0000 	mov.w	r0, #0
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000486:	bf1a      	itte	ne
 8000488:	4619      	movne	r1, r3
 800048a:	4610      	movne	r0, r2
 800048c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000490:	bf1c      	itt	ne
 8000492:	460b      	movne	r3, r1
 8000494:	4602      	movne	r2, r0
 8000496:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800049a:	bf06      	itte	eq
 800049c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a0:	ea91 0f03 	teqeq	r1, r3
 80004a4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	bf00      	nop

080004ac <__aeabi_ui2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f04f 0500 	mov.w	r5, #0
 80004c4:	f04f 0100 	mov.w	r1, #0
 80004c8:	e750      	b.n	800036c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_i2d>:
 80004cc:	f090 0f00 	teq	r0, #0
 80004d0:	bf04      	itt	eq
 80004d2:	2100      	moveq	r1, #0
 80004d4:	4770      	bxeq	lr
 80004d6:	b530      	push	{r4, r5, lr}
 80004d8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004dc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004e4:	bf48      	it	mi
 80004e6:	4240      	negmi	r0, r0
 80004e8:	f04f 0100 	mov.w	r1, #0
 80004ec:	e73e      	b.n	800036c <__adddf3+0x138>
 80004ee:	bf00      	nop

080004f0 <__aeabi_f2d>:
 80004f0:	0042      	lsls	r2, r0, #1
 80004f2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004f6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004fa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004fe:	bf1f      	itttt	ne
 8000500:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000504:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000508:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800050c:	4770      	bxne	lr
 800050e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000512:	bf08      	it	eq
 8000514:	4770      	bxeq	lr
 8000516:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800051a:	bf04      	itt	eq
 800051c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000520:	4770      	bxeq	lr
 8000522:	b530      	push	{r4, r5, lr}
 8000524:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000530:	e71c      	b.n	800036c <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_ul2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f04f 0500 	mov.w	r5, #0
 8000542:	e00a      	b.n	800055a <__aeabi_l2d+0x16>

08000544 <__aeabi_l2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000552:	d502      	bpl.n	800055a <__aeabi_l2d+0x16>
 8000554:	4240      	negs	r0, r0
 8000556:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800055a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800055e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000562:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000566:	f43f aed8 	beq.w	800031a <__adddf3+0xe6>
 800056a:	f04f 0203 	mov.w	r2, #3
 800056e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000572:	bf18      	it	ne
 8000574:	3203      	addne	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000582:	f1c2 0320 	rsb	r3, r2, #32
 8000586:	fa00 fc03 	lsl.w	ip, r0, r3
 800058a:	fa20 f002 	lsr.w	r0, r0, r2
 800058e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000592:	ea40 000e 	orr.w	r0, r0, lr
 8000596:	fa21 f102 	lsr.w	r1, r1, r2
 800059a:	4414      	add	r4, r2
 800059c:	e6bd      	b.n	800031a <__adddf3+0xe6>
 800059e:	bf00      	nop

080005a0 <__aeabi_dmul>:
 80005a0:	b570      	push	{r4, r5, r6, lr}
 80005a2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005a6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005ae:	bf1d      	ittte	ne
 80005b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005b4:	ea94 0f0c 	teqne	r4, ip
 80005b8:	ea95 0f0c 	teqne	r5, ip
 80005bc:	f000 f8de 	bleq	800077c <__aeabi_dmul+0x1dc>
 80005c0:	442c      	add	r4, r5
 80005c2:	ea81 0603 	eor.w	r6, r1, r3
 80005c6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ca:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ce:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005d2:	bf18      	it	ne
 80005d4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e0:	d038      	beq.n	8000654 <__aeabi_dmul+0xb4>
 80005e2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ee:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005f2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005f6:	f04f 0600 	mov.w	r6, #0
 80005fa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005fe:	f09c 0f00 	teq	ip, #0
 8000602:	bf18      	it	ne
 8000604:	f04e 0e01 	orrne.w	lr, lr, #1
 8000608:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800060c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000610:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000614:	d204      	bcs.n	8000620 <__aeabi_dmul+0x80>
 8000616:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800061a:	416d      	adcs	r5, r5
 800061c:	eb46 0606 	adc.w	r6, r6, r6
 8000620:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000624:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000628:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800062c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000630:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000634:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000638:	bf88      	it	hi
 800063a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800063e:	d81e      	bhi.n	800067e <__aeabi_dmul+0xde>
 8000640:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000644:	bf08      	it	eq
 8000646:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800064a:	f150 0000 	adcs.w	r0, r0, #0
 800064e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000652:	bd70      	pop	{r4, r5, r6, pc}
 8000654:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000658:	ea46 0101 	orr.w	r1, r6, r1
 800065c:	ea40 0002 	orr.w	r0, r0, r2
 8000660:	ea81 0103 	eor.w	r1, r1, r3
 8000664:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000668:	bfc2      	ittt	gt
 800066a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800066e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000672:	bd70      	popgt	{r4, r5, r6, pc}
 8000674:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000678:	f04f 0e00 	mov.w	lr, #0
 800067c:	3c01      	subs	r4, #1
 800067e:	f300 80ab 	bgt.w	80007d8 <__aeabi_dmul+0x238>
 8000682:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000686:	bfde      	ittt	le
 8000688:	2000      	movle	r0, #0
 800068a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800068e:	bd70      	pople	{r4, r5, r6, pc}
 8000690:	f1c4 0400 	rsb	r4, r4, #0
 8000694:	3c20      	subs	r4, #32
 8000696:	da35      	bge.n	8000704 <__aeabi_dmul+0x164>
 8000698:	340c      	adds	r4, #12
 800069a:	dc1b      	bgt.n	80006d4 <__aeabi_dmul+0x134>
 800069c:	f104 0414 	add.w	r4, r4, #20
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f305 	lsl.w	r3, r0, r5
 80006a8:	fa20 f004 	lsr.w	r0, r0, r4
 80006ac:	fa01 f205 	lsl.w	r2, r1, r5
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c0:	fa21 f604 	lsr.w	r6, r1, r4
 80006c4:	eb42 0106 	adc.w	r1, r2, r6
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f1c4 040c 	rsb	r4, r4, #12
 80006d8:	f1c4 0520 	rsb	r5, r4, #32
 80006dc:	fa00 f304 	lsl.w	r3, r0, r4
 80006e0:	fa20 f005 	lsr.w	r0, r0, r5
 80006e4:	fa01 f204 	lsl.w	r2, r1, r4
 80006e8:	ea40 0002 	orr.w	r0, r0, r2
 80006ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006f4:	f141 0100 	adc.w	r1, r1, #0
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f1c4 0520 	rsb	r5, r4, #32
 8000708:	fa00 f205 	lsl.w	r2, r0, r5
 800070c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000710:	fa20 f304 	lsr.w	r3, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea43 0302 	orr.w	r3, r3, r2
 800071c:	fa21 f004 	lsr.w	r0, r1, r4
 8000720:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000724:	fa21 f204 	lsr.w	r2, r1, r4
 8000728:	ea20 0002 	bic.w	r0, r0, r2
 800072c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f094 0f00 	teq	r4, #0
 8000740:	d10f      	bne.n	8000762 <__aeabi_dmul+0x1c2>
 8000742:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000746:	0040      	lsls	r0, r0, #1
 8000748:	eb41 0101 	adc.w	r1, r1, r1
 800074c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3c01      	subeq	r4, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1a6>
 8000756:	ea41 0106 	orr.w	r1, r1, r6
 800075a:	f095 0f00 	teq	r5, #0
 800075e:	bf18      	it	ne
 8000760:	4770      	bxne	lr
 8000762:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000766:	0052      	lsls	r2, r2, #1
 8000768:	eb43 0303 	adc.w	r3, r3, r3
 800076c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000770:	bf08      	it	eq
 8000772:	3d01      	subeq	r5, #1
 8000774:	d0f7      	beq.n	8000766 <__aeabi_dmul+0x1c6>
 8000776:	ea43 0306 	orr.w	r3, r3, r6
 800077a:	4770      	bx	lr
 800077c:	ea94 0f0c 	teq	r4, ip
 8000780:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000784:	bf18      	it	ne
 8000786:	ea95 0f0c 	teqne	r5, ip
 800078a:	d00c      	beq.n	80007a6 <__aeabi_dmul+0x206>
 800078c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000790:	bf18      	it	ne
 8000792:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000796:	d1d1      	bne.n	800073c <__aeabi_dmul+0x19c>
 8000798:	ea81 0103 	eor.w	r1, r1, r3
 800079c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a0:	f04f 0000 	mov.w	r0, #0
 80007a4:	bd70      	pop	{r4, r5, r6, pc}
 80007a6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007aa:	bf06      	itte	eq
 80007ac:	4610      	moveq	r0, r2
 80007ae:	4619      	moveq	r1, r3
 80007b0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007b4:	d019      	beq.n	80007ea <__aeabi_dmul+0x24a>
 80007b6:	ea94 0f0c 	teq	r4, ip
 80007ba:	d102      	bne.n	80007c2 <__aeabi_dmul+0x222>
 80007bc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c0:	d113      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007c2:	ea95 0f0c 	teq	r5, ip
 80007c6:	d105      	bne.n	80007d4 <__aeabi_dmul+0x234>
 80007c8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007cc:	bf1c      	itt	ne
 80007ce:	4610      	movne	r0, r2
 80007d0:	4619      	movne	r1, r3
 80007d2:	d10a      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007d4:	ea81 0103 	eor.w	r1, r1, r3
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007e4:	f04f 0000 	mov.w	r0, #0
 80007e8:	bd70      	pop	{r4, r5, r6, pc}
 80007ea:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ee:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007f2:	bd70      	pop	{r4, r5, r6, pc}

080007f4 <__aeabi_ddiv>:
 80007f4:	b570      	push	{r4, r5, r6, lr}
 80007f6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007fa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007fe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000802:	bf1d      	ittte	ne
 8000804:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000808:	ea94 0f0c 	teqne	r4, ip
 800080c:	ea95 0f0c 	teqne	r5, ip
 8000810:	f000 f8a7 	bleq	8000962 <__aeabi_ddiv+0x16e>
 8000814:	eba4 0405 	sub.w	r4, r4, r5
 8000818:	ea81 0e03 	eor.w	lr, r1, r3
 800081c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000820:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000824:	f000 8088 	beq.w	8000938 <__aeabi_ddiv+0x144>
 8000828:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800082c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000830:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000834:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000838:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800083c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000840:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000844:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000848:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800084c:	429d      	cmp	r5, r3
 800084e:	bf08      	it	eq
 8000850:	4296      	cmpeq	r6, r2
 8000852:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000856:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800085a:	d202      	bcs.n	8000862 <__aeabi_ddiv+0x6e>
 800085c:	085b      	lsrs	r3, r3, #1
 800085e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000862:	1ab6      	subs	r6, r6, r2
 8000864:	eb65 0503 	sbc.w	r5, r5, r3
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000872:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 000c 	orrcs.w	r0, r0, ip
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008d4:	d018      	beq.n	8000908 <__aeabi_ddiv+0x114>
 80008d6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008da:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008de:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008e2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008e6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ea:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ee:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008f2:	d1c0      	bne.n	8000876 <__aeabi_ddiv+0x82>
 80008f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f8:	d10b      	bne.n	8000912 <__aeabi_ddiv+0x11e>
 80008fa:	ea41 0100 	orr.w	r1, r1, r0
 80008fe:	f04f 0000 	mov.w	r0, #0
 8000902:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000906:	e7b6      	b.n	8000876 <__aeabi_ddiv+0x82>
 8000908:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800090c:	bf04      	itt	eq
 800090e:	4301      	orreq	r1, r0
 8000910:	2000      	moveq	r0, #0
 8000912:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000916:	bf88      	it	hi
 8000918:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800091c:	f63f aeaf 	bhi.w	800067e <__aeabi_dmul+0xde>
 8000920:	ebb5 0c03 	subs.w	ip, r5, r3
 8000924:	bf04      	itt	eq
 8000926:	ebb6 0c02 	subseq.w	ip, r6, r2
 800092a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800092e:	f150 0000 	adcs.w	r0, r0, #0
 8000932:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000936:	bd70      	pop	{r4, r5, r6, pc}
 8000938:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800093c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000940:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000944:	bfc2      	ittt	gt
 8000946:	ebd4 050c 	rsbsgt	r5, r4, ip
 800094a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800094e:	bd70      	popgt	{r4, r5, r6, pc}
 8000950:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000954:	f04f 0e00 	mov.w	lr, #0
 8000958:	3c01      	subs	r4, #1
 800095a:	e690      	b.n	800067e <__aeabi_dmul+0xde>
 800095c:	ea45 0e06 	orr.w	lr, r5, r6
 8000960:	e68d      	b.n	800067e <__aeabi_dmul+0xde>
 8000962:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000966:	ea94 0f0c 	teq	r4, ip
 800096a:	bf08      	it	eq
 800096c:	ea95 0f0c 	teqeq	r5, ip
 8000970:	f43f af3b 	beq.w	80007ea <__aeabi_dmul+0x24a>
 8000974:	ea94 0f0c 	teq	r4, ip
 8000978:	d10a      	bne.n	8000990 <__aeabi_ddiv+0x19c>
 800097a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800097e:	f47f af34 	bne.w	80007ea <__aeabi_dmul+0x24a>
 8000982:	ea95 0f0c 	teq	r5, ip
 8000986:	f47f af25 	bne.w	80007d4 <__aeabi_dmul+0x234>
 800098a:	4610      	mov	r0, r2
 800098c:	4619      	mov	r1, r3
 800098e:	e72c      	b.n	80007ea <__aeabi_dmul+0x24a>
 8000990:	ea95 0f0c 	teq	r5, ip
 8000994:	d106      	bne.n	80009a4 <__aeabi_ddiv+0x1b0>
 8000996:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800099a:	f43f aefd 	beq.w	8000798 <__aeabi_dmul+0x1f8>
 800099e:	4610      	mov	r0, r2
 80009a0:	4619      	mov	r1, r3
 80009a2:	e722      	b.n	80007ea <__aeabi_dmul+0x24a>
 80009a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009a8:	bf18      	it	ne
 80009aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009ae:	f47f aec5 	bne.w	800073c <__aeabi_dmul+0x19c>
 80009b2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009b6:	f47f af0d 	bne.w	80007d4 <__aeabi_dmul+0x234>
 80009ba:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009be:	f47f aeeb 	bne.w	8000798 <__aeabi_dmul+0x1f8>
 80009c2:	e712      	b.n	80007ea <__aeabi_dmul+0x24a>

080009c4 <__aeabi_d2uiz>:
 80009c4:	004a      	lsls	r2, r1, #1
 80009c6:	d211      	bcs.n	80009ec <__aeabi_d2uiz+0x28>
 80009c8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009cc:	d211      	bcs.n	80009f2 <__aeabi_d2uiz+0x2e>
 80009ce:	d50d      	bpl.n	80009ec <__aeabi_d2uiz+0x28>
 80009d0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009d4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009d8:	d40e      	bmi.n	80009f8 <__aeabi_d2uiz+0x34>
 80009da:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009de:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009e2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009e6:	fa23 f002 	lsr.w	r0, r3, r2
 80009ea:	4770      	bx	lr
 80009ec:	f04f 0000 	mov.w	r0, #0
 80009f0:	4770      	bx	lr
 80009f2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009f6:	d102      	bne.n	80009fe <__aeabi_d2uiz+0x3a>
 80009f8:	f04f 30ff 	mov.w	r0, #4294967295
 80009fc:	4770      	bx	lr
 80009fe:	f04f 0000 	mov.w	r0, #0
 8000a02:	4770      	bx	lr

08000a04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a08:	4b08      	ldr	r3, [pc, #32]	; (8000a2c <HAL_Init+0x28>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	4a07      	ldr	r2, [pc, #28]	; (8000a2c <HAL_Init+0x28>)
 8000a0e:	f043 0310 	orr.w	r3, r3, #16
 8000a12:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a14:	2003      	movs	r0, #3
 8000a16:	f000 f929 	bl	8000c6c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a1a:	2000      	movs	r0, #0
 8000a1c:	f000 f808 	bl	8000a30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a20:	f009 fb00 	bl	800a024 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a24:	2300      	movs	r3, #0
}
 8000a26:	4618      	mov	r0, r3
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	40022000 	.word	0x40022000

08000a30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a38:	4b12      	ldr	r3, [pc, #72]	; (8000a84 <HAL_InitTick+0x54>)
 8000a3a:	681a      	ldr	r2, [r3, #0]
 8000a3c:	4b12      	ldr	r3, [pc, #72]	; (8000a88 <HAL_InitTick+0x58>)
 8000a3e:	781b      	ldrb	r3, [r3, #0]
 8000a40:	4619      	mov	r1, r3
 8000a42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a46:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f000 f933 	bl	8000cba <HAL_SYSTICK_Config>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d001      	beq.n	8000a5e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	e00e      	b.n	8000a7c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	2b0f      	cmp	r3, #15
 8000a62:	d80a      	bhi.n	8000a7a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a64:	2200      	movs	r2, #0
 8000a66:	6879      	ldr	r1, [r7, #4]
 8000a68:	f04f 30ff 	mov.w	r0, #4294967295
 8000a6c:	f000 f909 	bl	8000c82 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a70:	4a06      	ldr	r2, [pc, #24]	; (8000a8c <HAL_InitTick+0x5c>)
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a76:	2300      	movs	r3, #0
 8000a78:	e000      	b.n	8000a7c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a7a:	2301      	movs	r3, #1
}
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	3708      	adds	r7, #8
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	2000001c 	.word	0x2000001c
 8000a88:	20000004 	.word	0x20000004
 8000a8c:	20000000 	.word	0x20000000

08000a90 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a94:	4b05      	ldr	r3, [pc, #20]	; (8000aac <HAL_IncTick+0x1c>)
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	461a      	mov	r2, r3
 8000a9a:	4b05      	ldr	r3, [pc, #20]	; (8000ab0 <HAL_IncTick+0x20>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	4413      	add	r3, r2
 8000aa0:	4a03      	ldr	r2, [pc, #12]	; (8000ab0 <HAL_IncTick+0x20>)
 8000aa2:	6013      	str	r3, [r2, #0]
}
 8000aa4:	bf00      	nop
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bc80      	pop	{r7}
 8000aaa:	4770      	bx	lr
 8000aac:	20000004 	.word	0x20000004
 8000ab0:	200000b0 	.word	0x200000b0

08000ab4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ab8:	4b02      	ldr	r3, [pc, #8]	; (8000ac4 <HAL_GetTick+0x10>)
 8000aba:	681b      	ldr	r3, [r3, #0]
}
 8000abc:	4618      	mov	r0, r3
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bc80      	pop	{r7}
 8000ac2:	4770      	bx	lr
 8000ac4:	200000b0 	.word	0x200000b0

08000ac8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b084      	sub	sp, #16
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ad0:	f7ff fff0 	bl	8000ab4 <HAL_GetTick>
 8000ad4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ada:	68fb      	ldr	r3, [r7, #12]
 8000adc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ae0:	d005      	beq.n	8000aee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ae2:	4b09      	ldr	r3, [pc, #36]	; (8000b08 <HAL_Delay+0x40>)
 8000ae4:	781b      	ldrb	r3, [r3, #0]
 8000ae6:	461a      	mov	r2, r3
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	4413      	add	r3, r2
 8000aec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000aee:	bf00      	nop
 8000af0:	f7ff ffe0 	bl	8000ab4 <HAL_GetTick>
 8000af4:	4602      	mov	r2, r0
 8000af6:	68bb      	ldr	r3, [r7, #8]
 8000af8:	1ad3      	subs	r3, r2, r3
 8000afa:	68fa      	ldr	r2, [r7, #12]
 8000afc:	429a      	cmp	r2, r3
 8000afe:	d8f7      	bhi.n	8000af0 <HAL_Delay+0x28>
  {
  }
}
 8000b00:	bf00      	nop
 8000b02:	3710      	adds	r7, #16
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	20000004 	.word	0x20000004

08000b0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	b085      	sub	sp, #20
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	f003 0307 	and.w	r3, r3, #7
 8000b1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b1c:	4b0c      	ldr	r3, [pc, #48]	; (8000b50 <__NVIC_SetPriorityGrouping+0x44>)
 8000b1e:	68db      	ldr	r3, [r3, #12]
 8000b20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b22:	68ba      	ldr	r2, [r7, #8]
 8000b24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b28:	4013      	ands	r3, r2
 8000b2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b30:	68bb      	ldr	r3, [r7, #8]
 8000b32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b3e:	4a04      	ldr	r2, [pc, #16]	; (8000b50 <__NVIC_SetPriorityGrouping+0x44>)
 8000b40:	68bb      	ldr	r3, [r7, #8]
 8000b42:	60d3      	str	r3, [r2, #12]
}
 8000b44:	bf00      	nop
 8000b46:	3714      	adds	r7, #20
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bc80      	pop	{r7}
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop
 8000b50:	e000ed00 	.word	0xe000ed00

08000b54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b58:	4b04      	ldr	r3, [pc, #16]	; (8000b6c <__NVIC_GetPriorityGrouping+0x18>)
 8000b5a:	68db      	ldr	r3, [r3, #12]
 8000b5c:	0a1b      	lsrs	r3, r3, #8
 8000b5e:	f003 0307 	and.w	r3, r3, #7
}
 8000b62:	4618      	mov	r0, r3
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bc80      	pop	{r7}
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop
 8000b6c:	e000ed00 	.word	0xe000ed00

08000b70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b70:	b480      	push	{r7}
 8000b72:	b083      	sub	sp, #12
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	4603      	mov	r3, r0
 8000b78:	6039      	str	r1, [r7, #0]
 8000b7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	db0a      	blt.n	8000b9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b84:	683b      	ldr	r3, [r7, #0]
 8000b86:	b2da      	uxtb	r2, r3
 8000b88:	490c      	ldr	r1, [pc, #48]	; (8000bbc <__NVIC_SetPriority+0x4c>)
 8000b8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b8e:	0112      	lsls	r2, r2, #4
 8000b90:	b2d2      	uxtb	r2, r2
 8000b92:	440b      	add	r3, r1
 8000b94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b98:	e00a      	b.n	8000bb0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b9a:	683b      	ldr	r3, [r7, #0]
 8000b9c:	b2da      	uxtb	r2, r3
 8000b9e:	4908      	ldr	r1, [pc, #32]	; (8000bc0 <__NVIC_SetPriority+0x50>)
 8000ba0:	79fb      	ldrb	r3, [r7, #7]
 8000ba2:	f003 030f 	and.w	r3, r3, #15
 8000ba6:	3b04      	subs	r3, #4
 8000ba8:	0112      	lsls	r2, r2, #4
 8000baa:	b2d2      	uxtb	r2, r2
 8000bac:	440b      	add	r3, r1
 8000bae:	761a      	strb	r2, [r3, #24]
}
 8000bb0:	bf00      	nop
 8000bb2:	370c      	adds	r7, #12
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bc80      	pop	{r7}
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop
 8000bbc:	e000e100 	.word	0xe000e100
 8000bc0:	e000ed00 	.word	0xe000ed00

08000bc4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b089      	sub	sp, #36	; 0x24
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	60f8      	str	r0, [r7, #12]
 8000bcc:	60b9      	str	r1, [r7, #8]
 8000bce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	f003 0307 	and.w	r3, r3, #7
 8000bd6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bd8:	69fb      	ldr	r3, [r7, #28]
 8000bda:	f1c3 0307 	rsb	r3, r3, #7
 8000bde:	2b04      	cmp	r3, #4
 8000be0:	bf28      	it	cs
 8000be2:	2304      	movcs	r3, #4
 8000be4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000be6:	69fb      	ldr	r3, [r7, #28]
 8000be8:	3304      	adds	r3, #4
 8000bea:	2b06      	cmp	r3, #6
 8000bec:	d902      	bls.n	8000bf4 <NVIC_EncodePriority+0x30>
 8000bee:	69fb      	ldr	r3, [r7, #28]
 8000bf0:	3b03      	subs	r3, #3
 8000bf2:	e000      	b.n	8000bf6 <NVIC_EncodePriority+0x32>
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bf8:	f04f 32ff 	mov.w	r2, #4294967295
 8000bfc:	69bb      	ldr	r3, [r7, #24]
 8000bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000c02:	43da      	mvns	r2, r3
 8000c04:	68bb      	ldr	r3, [r7, #8]
 8000c06:	401a      	ands	r2, r3
 8000c08:	697b      	ldr	r3, [r7, #20]
 8000c0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c0c:	f04f 31ff 	mov.w	r1, #4294967295
 8000c10:	697b      	ldr	r3, [r7, #20]
 8000c12:	fa01 f303 	lsl.w	r3, r1, r3
 8000c16:	43d9      	mvns	r1, r3
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c1c:	4313      	orrs	r3, r2
         );
}
 8000c1e:	4618      	mov	r0, r3
 8000c20:	3724      	adds	r7, #36	; 0x24
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bc80      	pop	{r7}
 8000c26:	4770      	bx	lr

08000c28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b082      	sub	sp, #8
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	3b01      	subs	r3, #1
 8000c34:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c38:	d301      	bcc.n	8000c3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	e00f      	b.n	8000c5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c3e:	4a0a      	ldr	r2, [pc, #40]	; (8000c68 <SysTick_Config+0x40>)
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	3b01      	subs	r3, #1
 8000c44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c46:	210f      	movs	r1, #15
 8000c48:	f04f 30ff 	mov.w	r0, #4294967295
 8000c4c:	f7ff ff90 	bl	8000b70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c50:	4b05      	ldr	r3, [pc, #20]	; (8000c68 <SysTick_Config+0x40>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c56:	4b04      	ldr	r3, [pc, #16]	; (8000c68 <SysTick_Config+0x40>)
 8000c58:	2207      	movs	r2, #7
 8000c5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c5c:	2300      	movs	r3, #0
}
 8000c5e:	4618      	mov	r0, r3
 8000c60:	3708      	adds	r7, #8
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	e000e010 	.word	0xe000e010

08000c6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b082      	sub	sp, #8
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c74:	6878      	ldr	r0, [r7, #4]
 8000c76:	f7ff ff49 	bl	8000b0c <__NVIC_SetPriorityGrouping>
}
 8000c7a:	bf00      	nop
 8000c7c:	3708      	adds	r7, #8
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}

08000c82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c82:	b580      	push	{r7, lr}
 8000c84:	b086      	sub	sp, #24
 8000c86:	af00      	add	r7, sp, #0
 8000c88:	4603      	mov	r3, r0
 8000c8a:	60b9      	str	r1, [r7, #8]
 8000c8c:	607a      	str	r2, [r7, #4]
 8000c8e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c90:	2300      	movs	r3, #0
 8000c92:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c94:	f7ff ff5e 	bl	8000b54 <__NVIC_GetPriorityGrouping>
 8000c98:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c9a:	687a      	ldr	r2, [r7, #4]
 8000c9c:	68b9      	ldr	r1, [r7, #8]
 8000c9e:	6978      	ldr	r0, [r7, #20]
 8000ca0:	f7ff ff90 	bl	8000bc4 <NVIC_EncodePriority>
 8000ca4:	4602      	mov	r2, r0
 8000ca6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000caa:	4611      	mov	r1, r2
 8000cac:	4618      	mov	r0, r3
 8000cae:	f7ff ff5f 	bl	8000b70 <__NVIC_SetPriority>
}
 8000cb2:	bf00      	nop
 8000cb4:	3718      	adds	r7, #24
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}

08000cba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cba:	b580      	push	{r7, lr}
 8000cbc:	b082      	sub	sp, #8
 8000cbe:	af00      	add	r7, sp, #0
 8000cc0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cc2:	6878      	ldr	r0, [r7, #4]
 8000cc4:	f7ff ffb0 	bl	8000c28 <SysTick_Config>
 8000cc8:	4603      	mov	r3, r0
}
 8000cca:	4618      	mov	r0, r3
 8000ccc:	3708      	adds	r7, #8
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
	...

08000cd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b08b      	sub	sp, #44	; 0x2c
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
 8000cdc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ce6:	e133      	b.n	8000f50 <HAL_GPIO_Init+0x27c>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000ce8:	2201      	movs	r2, #1
 8000cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cec:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	69fa      	ldr	r2, [r7, #28]
 8000cf8:	4013      	ands	r3, r2
 8000cfa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000cfc:	69ba      	ldr	r2, [r7, #24]
 8000cfe:	69fb      	ldr	r3, [r7, #28]
 8000d00:	429a      	cmp	r2, r3
 8000d02:	f040 8122 	bne.w	8000f4a <HAL_GPIO_Init+0x276>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	685b      	ldr	r3, [r3, #4]
 8000d0a:	2b12      	cmp	r3, #18
 8000d0c:	d034      	beq.n	8000d78 <HAL_GPIO_Init+0xa4>
 8000d0e:	2b12      	cmp	r3, #18
 8000d10:	d80d      	bhi.n	8000d2e <HAL_GPIO_Init+0x5a>
 8000d12:	2b02      	cmp	r3, #2
 8000d14:	d02b      	beq.n	8000d6e <HAL_GPIO_Init+0x9a>
 8000d16:	2b02      	cmp	r3, #2
 8000d18:	d804      	bhi.n	8000d24 <HAL_GPIO_Init+0x50>
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d031      	beq.n	8000d82 <HAL_GPIO_Init+0xae>
 8000d1e:	2b01      	cmp	r3, #1
 8000d20:	d01c      	beq.n	8000d5c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000d22:	e048      	b.n	8000db6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000d24:	2b03      	cmp	r3, #3
 8000d26:	d043      	beq.n	8000db0 <HAL_GPIO_Init+0xdc>
 8000d28:	2b11      	cmp	r3, #17
 8000d2a:	d01b      	beq.n	8000d64 <HAL_GPIO_Init+0x90>
          break;
 8000d2c:	e043      	b.n	8000db6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000d2e:	4a8f      	ldr	r2, [pc, #572]	; (8000f6c <HAL_GPIO_Init+0x298>)
 8000d30:	4293      	cmp	r3, r2
 8000d32:	d026      	beq.n	8000d82 <HAL_GPIO_Init+0xae>
 8000d34:	4a8d      	ldr	r2, [pc, #564]	; (8000f6c <HAL_GPIO_Init+0x298>)
 8000d36:	4293      	cmp	r3, r2
 8000d38:	d806      	bhi.n	8000d48 <HAL_GPIO_Init+0x74>
 8000d3a:	4a8d      	ldr	r2, [pc, #564]	; (8000f70 <HAL_GPIO_Init+0x29c>)
 8000d3c:	4293      	cmp	r3, r2
 8000d3e:	d020      	beq.n	8000d82 <HAL_GPIO_Init+0xae>
 8000d40:	4a8c      	ldr	r2, [pc, #560]	; (8000f74 <HAL_GPIO_Init+0x2a0>)
 8000d42:	4293      	cmp	r3, r2
 8000d44:	d01d      	beq.n	8000d82 <HAL_GPIO_Init+0xae>
          break;
 8000d46:	e036      	b.n	8000db6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000d48:	4a8b      	ldr	r2, [pc, #556]	; (8000f78 <HAL_GPIO_Init+0x2a4>)
 8000d4a:	4293      	cmp	r3, r2
 8000d4c:	d019      	beq.n	8000d82 <HAL_GPIO_Init+0xae>
 8000d4e:	4a8b      	ldr	r2, [pc, #556]	; (8000f7c <HAL_GPIO_Init+0x2a8>)
 8000d50:	4293      	cmp	r3, r2
 8000d52:	d016      	beq.n	8000d82 <HAL_GPIO_Init+0xae>
 8000d54:	4a8a      	ldr	r2, [pc, #552]	; (8000f80 <HAL_GPIO_Init+0x2ac>)
 8000d56:	4293      	cmp	r3, r2
 8000d58:	d013      	beq.n	8000d82 <HAL_GPIO_Init+0xae>
          break;
 8000d5a:	e02c      	b.n	8000db6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	68db      	ldr	r3, [r3, #12]
 8000d60:	623b      	str	r3, [r7, #32]
          break;
 8000d62:	e028      	b.n	8000db6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	68db      	ldr	r3, [r3, #12]
 8000d68:	3304      	adds	r3, #4
 8000d6a:	623b      	str	r3, [r7, #32]
          break;
 8000d6c:	e023      	b.n	8000db6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	68db      	ldr	r3, [r3, #12]
 8000d72:	3308      	adds	r3, #8
 8000d74:	623b      	str	r3, [r7, #32]
          break;
 8000d76:	e01e      	b.n	8000db6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	68db      	ldr	r3, [r3, #12]
 8000d7c:	330c      	adds	r3, #12
 8000d7e:	623b      	str	r3, [r7, #32]
          break;
 8000d80:	e019      	b.n	8000db6 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	689b      	ldr	r3, [r3, #8]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d102      	bne.n	8000d90 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000d8a:	2304      	movs	r3, #4
 8000d8c:	623b      	str	r3, [r7, #32]
          break;
 8000d8e:	e012      	b.n	8000db6 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	689b      	ldr	r3, [r3, #8]
 8000d94:	2b01      	cmp	r3, #1
 8000d96:	d105      	bne.n	8000da4 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d98:	2308      	movs	r3, #8
 8000d9a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	69fa      	ldr	r2, [r7, #28]
 8000da0:	611a      	str	r2, [r3, #16]
          break;
 8000da2:	e008      	b.n	8000db6 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000da4:	2308      	movs	r3, #8
 8000da6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	69fa      	ldr	r2, [r7, #28]
 8000dac:	615a      	str	r2, [r3, #20]
          break;
 8000dae:	e002      	b.n	8000db6 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000db0:	2300      	movs	r3, #0
 8000db2:	623b      	str	r3, [r7, #32]
          break;
 8000db4:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000db6:	69bb      	ldr	r3, [r7, #24]
 8000db8:	2bff      	cmp	r3, #255	; 0xff
 8000dba:	d801      	bhi.n	8000dc0 <HAL_GPIO_Init+0xec>
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	e001      	b.n	8000dc4 <HAL_GPIO_Init+0xf0>
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	3304      	adds	r3, #4
 8000dc4:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000dc6:	69bb      	ldr	r3, [r7, #24]
 8000dc8:	2bff      	cmp	r3, #255	; 0xff
 8000dca:	d802      	bhi.n	8000dd2 <HAL_GPIO_Init+0xfe>
 8000dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dce:	009b      	lsls	r3, r3, #2
 8000dd0:	e002      	b.n	8000dd8 <HAL_GPIO_Init+0x104>
 8000dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dd4:	3b08      	subs	r3, #8
 8000dd6:	009b      	lsls	r3, r3, #2
 8000dd8:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000dda:	697b      	ldr	r3, [r7, #20]
 8000ddc:	681a      	ldr	r2, [r3, #0]
 8000dde:	210f      	movs	r1, #15
 8000de0:	693b      	ldr	r3, [r7, #16]
 8000de2:	fa01 f303 	lsl.w	r3, r1, r3
 8000de6:	43db      	mvns	r3, r3
 8000de8:	401a      	ands	r2, r3
 8000dea:	6a39      	ldr	r1, [r7, #32]
 8000dec:	693b      	ldr	r3, [r7, #16]
 8000dee:	fa01 f303 	lsl.w	r3, r1, r3
 8000df2:	431a      	orrs	r2, r3
 8000df4:	697b      	ldr	r3, [r7, #20]
 8000df6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	685b      	ldr	r3, [r3, #4]
 8000dfc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	f000 80a2 	beq.w	8000f4a <HAL_GPIO_Init+0x276>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000e06:	4b5f      	ldr	r3, [pc, #380]	; (8000f84 <HAL_GPIO_Init+0x2b0>)
 8000e08:	699b      	ldr	r3, [r3, #24]
 8000e0a:	4a5e      	ldr	r2, [pc, #376]	; (8000f84 <HAL_GPIO_Init+0x2b0>)
 8000e0c:	f043 0301 	orr.w	r3, r3, #1
 8000e10:	6193      	str	r3, [r2, #24]
 8000e12:	4b5c      	ldr	r3, [pc, #368]	; (8000f84 <HAL_GPIO_Init+0x2b0>)
 8000e14:	699b      	ldr	r3, [r3, #24]
 8000e16:	f003 0301 	and.w	r3, r3, #1
 8000e1a:	60bb      	str	r3, [r7, #8]
 8000e1c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000e1e:	4a5a      	ldr	r2, [pc, #360]	; (8000f88 <HAL_GPIO_Init+0x2b4>)
 8000e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e22:	089b      	lsrs	r3, r3, #2
 8000e24:	3302      	adds	r3, #2
 8000e26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e2a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e2e:	f003 0303 	and.w	r3, r3, #3
 8000e32:	009b      	lsls	r3, r3, #2
 8000e34:	220f      	movs	r2, #15
 8000e36:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3a:	43db      	mvns	r3, r3
 8000e3c:	68fa      	ldr	r2, [r7, #12]
 8000e3e:	4013      	ands	r3, r2
 8000e40:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	4a51      	ldr	r2, [pc, #324]	; (8000f8c <HAL_GPIO_Init+0x2b8>)
 8000e46:	4293      	cmp	r3, r2
 8000e48:	d01f      	beq.n	8000e8a <HAL_GPIO_Init+0x1b6>
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	4a50      	ldr	r2, [pc, #320]	; (8000f90 <HAL_GPIO_Init+0x2bc>)
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	d019      	beq.n	8000e86 <HAL_GPIO_Init+0x1b2>
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	4a4f      	ldr	r2, [pc, #316]	; (8000f94 <HAL_GPIO_Init+0x2c0>)
 8000e56:	4293      	cmp	r3, r2
 8000e58:	d013      	beq.n	8000e82 <HAL_GPIO_Init+0x1ae>
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	4a4e      	ldr	r2, [pc, #312]	; (8000f98 <HAL_GPIO_Init+0x2c4>)
 8000e5e:	4293      	cmp	r3, r2
 8000e60:	d00d      	beq.n	8000e7e <HAL_GPIO_Init+0x1aa>
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	4a4d      	ldr	r2, [pc, #308]	; (8000f9c <HAL_GPIO_Init+0x2c8>)
 8000e66:	4293      	cmp	r3, r2
 8000e68:	d007      	beq.n	8000e7a <HAL_GPIO_Init+0x1a6>
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	4a4c      	ldr	r2, [pc, #304]	; (8000fa0 <HAL_GPIO_Init+0x2cc>)
 8000e6e:	4293      	cmp	r3, r2
 8000e70:	d101      	bne.n	8000e76 <HAL_GPIO_Init+0x1a2>
 8000e72:	2305      	movs	r3, #5
 8000e74:	e00a      	b.n	8000e8c <HAL_GPIO_Init+0x1b8>
 8000e76:	2306      	movs	r3, #6
 8000e78:	e008      	b.n	8000e8c <HAL_GPIO_Init+0x1b8>
 8000e7a:	2304      	movs	r3, #4
 8000e7c:	e006      	b.n	8000e8c <HAL_GPIO_Init+0x1b8>
 8000e7e:	2303      	movs	r3, #3
 8000e80:	e004      	b.n	8000e8c <HAL_GPIO_Init+0x1b8>
 8000e82:	2302      	movs	r3, #2
 8000e84:	e002      	b.n	8000e8c <HAL_GPIO_Init+0x1b8>
 8000e86:	2301      	movs	r3, #1
 8000e88:	e000      	b.n	8000e8c <HAL_GPIO_Init+0x1b8>
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e8e:	f002 0203 	and.w	r2, r2, #3
 8000e92:	0092      	lsls	r2, r2, #2
 8000e94:	4093      	lsls	r3, r2
 8000e96:	68fa      	ldr	r2, [r7, #12]
 8000e98:	4313      	orrs	r3, r2
 8000e9a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000e9c:	493a      	ldr	r1, [pc, #232]	; (8000f88 <HAL_GPIO_Init+0x2b4>)
 8000e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ea0:	089b      	lsrs	r3, r3, #2
 8000ea2:	3302      	adds	r3, #2
 8000ea4:	68fa      	ldr	r2, [r7, #12]
 8000ea6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	685b      	ldr	r3, [r3, #4]
 8000eae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d006      	beq.n	8000ec4 <HAL_GPIO_Init+0x1f0>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000eb6:	4b3b      	ldr	r3, [pc, #236]	; (8000fa4 <HAL_GPIO_Init+0x2d0>)
 8000eb8:	681a      	ldr	r2, [r3, #0]
 8000eba:	493a      	ldr	r1, [pc, #232]	; (8000fa4 <HAL_GPIO_Init+0x2d0>)
 8000ebc:	69bb      	ldr	r3, [r7, #24]
 8000ebe:	4313      	orrs	r3, r2
 8000ec0:	600b      	str	r3, [r1, #0]
 8000ec2:	e006      	b.n	8000ed2 <HAL_GPIO_Init+0x1fe>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000ec4:	4b37      	ldr	r3, [pc, #220]	; (8000fa4 <HAL_GPIO_Init+0x2d0>)
 8000ec6:	681a      	ldr	r2, [r3, #0]
 8000ec8:	69bb      	ldr	r3, [r7, #24]
 8000eca:	43db      	mvns	r3, r3
 8000ecc:	4935      	ldr	r1, [pc, #212]	; (8000fa4 <HAL_GPIO_Init+0x2d0>)
 8000ece:	4013      	ands	r3, r2
 8000ed0:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	685b      	ldr	r3, [r3, #4]
 8000ed6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d006      	beq.n	8000eec <HAL_GPIO_Init+0x218>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000ede:	4b31      	ldr	r3, [pc, #196]	; (8000fa4 <HAL_GPIO_Init+0x2d0>)
 8000ee0:	685a      	ldr	r2, [r3, #4]
 8000ee2:	4930      	ldr	r1, [pc, #192]	; (8000fa4 <HAL_GPIO_Init+0x2d0>)
 8000ee4:	69bb      	ldr	r3, [r7, #24]
 8000ee6:	4313      	orrs	r3, r2
 8000ee8:	604b      	str	r3, [r1, #4]
 8000eea:	e006      	b.n	8000efa <HAL_GPIO_Init+0x226>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000eec:	4b2d      	ldr	r3, [pc, #180]	; (8000fa4 <HAL_GPIO_Init+0x2d0>)
 8000eee:	685a      	ldr	r2, [r3, #4]
 8000ef0:	69bb      	ldr	r3, [r7, #24]
 8000ef2:	43db      	mvns	r3, r3
 8000ef4:	492b      	ldr	r1, [pc, #172]	; (8000fa4 <HAL_GPIO_Init+0x2d0>)
 8000ef6:	4013      	ands	r3, r2
 8000ef8:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	685b      	ldr	r3, [r3, #4]
 8000efe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d006      	beq.n	8000f14 <HAL_GPIO_Init+0x240>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000f06:	4b27      	ldr	r3, [pc, #156]	; (8000fa4 <HAL_GPIO_Init+0x2d0>)
 8000f08:	689a      	ldr	r2, [r3, #8]
 8000f0a:	4926      	ldr	r1, [pc, #152]	; (8000fa4 <HAL_GPIO_Init+0x2d0>)
 8000f0c:	69bb      	ldr	r3, [r7, #24]
 8000f0e:	4313      	orrs	r3, r2
 8000f10:	608b      	str	r3, [r1, #8]
 8000f12:	e006      	b.n	8000f22 <HAL_GPIO_Init+0x24e>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000f14:	4b23      	ldr	r3, [pc, #140]	; (8000fa4 <HAL_GPIO_Init+0x2d0>)
 8000f16:	689a      	ldr	r2, [r3, #8]
 8000f18:	69bb      	ldr	r3, [r7, #24]
 8000f1a:	43db      	mvns	r3, r3
 8000f1c:	4921      	ldr	r1, [pc, #132]	; (8000fa4 <HAL_GPIO_Init+0x2d0>)
 8000f1e:	4013      	ands	r3, r2
 8000f20:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	685b      	ldr	r3, [r3, #4]
 8000f26:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d006      	beq.n	8000f3c <HAL_GPIO_Init+0x268>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000f2e:	4b1d      	ldr	r3, [pc, #116]	; (8000fa4 <HAL_GPIO_Init+0x2d0>)
 8000f30:	68da      	ldr	r2, [r3, #12]
 8000f32:	491c      	ldr	r1, [pc, #112]	; (8000fa4 <HAL_GPIO_Init+0x2d0>)
 8000f34:	69bb      	ldr	r3, [r7, #24]
 8000f36:	4313      	orrs	r3, r2
 8000f38:	60cb      	str	r3, [r1, #12]
 8000f3a:	e006      	b.n	8000f4a <HAL_GPIO_Init+0x276>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000f3c:	4b19      	ldr	r3, [pc, #100]	; (8000fa4 <HAL_GPIO_Init+0x2d0>)
 8000f3e:	68da      	ldr	r2, [r3, #12]
 8000f40:	69bb      	ldr	r3, [r7, #24]
 8000f42:	43db      	mvns	r3, r3
 8000f44:	4917      	ldr	r1, [pc, #92]	; (8000fa4 <HAL_GPIO_Init+0x2d0>)
 8000f46:	4013      	ands	r3, r2
 8000f48:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f4c:	3301      	adds	r3, #1
 8000f4e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	681a      	ldr	r2, [r3, #0]
 8000f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f56:	fa22 f303 	lsr.w	r3, r2, r3
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	f47f aec4 	bne.w	8000ce8 <HAL_GPIO_Init+0x14>
  }
}
 8000f60:	bf00      	nop
 8000f62:	372c      	adds	r7, #44	; 0x2c
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bc80      	pop	{r7}
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop
 8000f6c:	10210000 	.word	0x10210000
 8000f70:	10110000 	.word	0x10110000
 8000f74:	10120000 	.word	0x10120000
 8000f78:	10310000 	.word	0x10310000
 8000f7c:	10320000 	.word	0x10320000
 8000f80:	10220000 	.word	0x10220000
 8000f84:	40021000 	.word	0x40021000
 8000f88:	40010000 	.word	0x40010000
 8000f8c:	40010800 	.word	0x40010800
 8000f90:	40010c00 	.word	0x40010c00
 8000f94:	40011000 	.word	0x40011000
 8000f98:	40011400 	.word	0x40011400
 8000f9c:	40011800 	.word	0x40011800
 8000fa0:	40011c00 	.word	0x40011c00
 8000fa4:	40010400 	.word	0x40010400

08000fa8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b085      	sub	sp, #20
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
 8000fb0:	460b      	mov	r3, r1
 8000fb2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	689a      	ldr	r2, [r3, #8]
 8000fb8:	887b      	ldrh	r3, [r7, #2]
 8000fba:	4013      	ands	r3, r2
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d002      	beq.n	8000fc6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	73fb      	strb	r3, [r7, #15]
 8000fc4:	e001      	b.n	8000fca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000fca:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fcc:	4618      	mov	r0, r3
 8000fce:	3714      	adds	r7, #20
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bc80      	pop	{r7}
 8000fd4:	4770      	bx	lr

08000fd6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fd6:	b480      	push	{r7}
 8000fd8:	b083      	sub	sp, #12
 8000fda:	af00      	add	r7, sp, #0
 8000fdc:	6078      	str	r0, [r7, #4]
 8000fde:	460b      	mov	r3, r1
 8000fe0:	807b      	strh	r3, [r7, #2]
 8000fe2:	4613      	mov	r3, r2
 8000fe4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000fe6:	787b      	ldrb	r3, [r7, #1]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d003      	beq.n	8000ff4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000fec:	887a      	ldrh	r2, [r7, #2]
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000ff2:	e003      	b.n	8000ffc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000ff4:	887b      	ldrh	r3, [r7, #2]
 8000ff6:	041a      	lsls	r2, r3, #16
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	611a      	str	r2, [r3, #16]
}
 8000ffc:	bf00      	nop
 8000ffe:	370c      	adds	r7, #12
 8001000:	46bd      	mov	sp, r7
 8001002:	bc80      	pop	{r7}
 8001004:	4770      	bx	lr
	...

08001008 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b086      	sub	sp, #24
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	2b00      	cmp	r3, #0
 8001014:	d101      	bne.n	800101a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001016:	2301      	movs	r3, #1
 8001018:	e26c      	b.n	80014f4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	f003 0301 	and.w	r3, r3, #1
 8001022:	2b00      	cmp	r3, #0
 8001024:	f000 8087 	beq.w	8001136 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001028:	4b92      	ldr	r3, [pc, #584]	; (8001274 <HAL_RCC_OscConfig+0x26c>)
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	f003 030c 	and.w	r3, r3, #12
 8001030:	2b04      	cmp	r3, #4
 8001032:	d00c      	beq.n	800104e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001034:	4b8f      	ldr	r3, [pc, #572]	; (8001274 <HAL_RCC_OscConfig+0x26c>)
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	f003 030c 	and.w	r3, r3, #12
 800103c:	2b08      	cmp	r3, #8
 800103e:	d112      	bne.n	8001066 <HAL_RCC_OscConfig+0x5e>
 8001040:	4b8c      	ldr	r3, [pc, #560]	; (8001274 <HAL_RCC_OscConfig+0x26c>)
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001048:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800104c:	d10b      	bne.n	8001066 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800104e:	4b89      	ldr	r3, [pc, #548]	; (8001274 <HAL_RCC_OscConfig+0x26c>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001056:	2b00      	cmp	r3, #0
 8001058:	d06c      	beq.n	8001134 <HAL_RCC_OscConfig+0x12c>
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	685b      	ldr	r3, [r3, #4]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d168      	bne.n	8001134 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001062:	2301      	movs	r3, #1
 8001064:	e246      	b.n	80014f4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800106e:	d106      	bne.n	800107e <HAL_RCC_OscConfig+0x76>
 8001070:	4b80      	ldr	r3, [pc, #512]	; (8001274 <HAL_RCC_OscConfig+0x26c>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4a7f      	ldr	r2, [pc, #508]	; (8001274 <HAL_RCC_OscConfig+0x26c>)
 8001076:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800107a:	6013      	str	r3, [r2, #0]
 800107c:	e02e      	b.n	80010dc <HAL_RCC_OscConfig+0xd4>
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	685b      	ldr	r3, [r3, #4]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d10c      	bne.n	80010a0 <HAL_RCC_OscConfig+0x98>
 8001086:	4b7b      	ldr	r3, [pc, #492]	; (8001274 <HAL_RCC_OscConfig+0x26c>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	4a7a      	ldr	r2, [pc, #488]	; (8001274 <HAL_RCC_OscConfig+0x26c>)
 800108c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001090:	6013      	str	r3, [r2, #0]
 8001092:	4b78      	ldr	r3, [pc, #480]	; (8001274 <HAL_RCC_OscConfig+0x26c>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	4a77      	ldr	r2, [pc, #476]	; (8001274 <HAL_RCC_OscConfig+0x26c>)
 8001098:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800109c:	6013      	str	r3, [r2, #0]
 800109e:	e01d      	b.n	80010dc <HAL_RCC_OscConfig+0xd4>
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80010a8:	d10c      	bne.n	80010c4 <HAL_RCC_OscConfig+0xbc>
 80010aa:	4b72      	ldr	r3, [pc, #456]	; (8001274 <HAL_RCC_OscConfig+0x26c>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	4a71      	ldr	r2, [pc, #452]	; (8001274 <HAL_RCC_OscConfig+0x26c>)
 80010b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010b4:	6013      	str	r3, [r2, #0]
 80010b6:	4b6f      	ldr	r3, [pc, #444]	; (8001274 <HAL_RCC_OscConfig+0x26c>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	4a6e      	ldr	r2, [pc, #440]	; (8001274 <HAL_RCC_OscConfig+0x26c>)
 80010bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010c0:	6013      	str	r3, [r2, #0]
 80010c2:	e00b      	b.n	80010dc <HAL_RCC_OscConfig+0xd4>
 80010c4:	4b6b      	ldr	r3, [pc, #428]	; (8001274 <HAL_RCC_OscConfig+0x26c>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4a6a      	ldr	r2, [pc, #424]	; (8001274 <HAL_RCC_OscConfig+0x26c>)
 80010ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010ce:	6013      	str	r3, [r2, #0]
 80010d0:	4b68      	ldr	r3, [pc, #416]	; (8001274 <HAL_RCC_OscConfig+0x26c>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4a67      	ldr	r2, [pc, #412]	; (8001274 <HAL_RCC_OscConfig+0x26c>)
 80010d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010da:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d013      	beq.n	800110c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010e4:	f7ff fce6 	bl	8000ab4 <HAL_GetTick>
 80010e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010ea:	e008      	b.n	80010fe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010ec:	f7ff fce2 	bl	8000ab4 <HAL_GetTick>
 80010f0:	4602      	mov	r2, r0
 80010f2:	693b      	ldr	r3, [r7, #16]
 80010f4:	1ad3      	subs	r3, r2, r3
 80010f6:	2b64      	cmp	r3, #100	; 0x64
 80010f8:	d901      	bls.n	80010fe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80010fa:	2303      	movs	r3, #3
 80010fc:	e1fa      	b.n	80014f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010fe:	4b5d      	ldr	r3, [pc, #372]	; (8001274 <HAL_RCC_OscConfig+0x26c>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001106:	2b00      	cmp	r3, #0
 8001108:	d0f0      	beq.n	80010ec <HAL_RCC_OscConfig+0xe4>
 800110a:	e014      	b.n	8001136 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800110c:	f7ff fcd2 	bl	8000ab4 <HAL_GetTick>
 8001110:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001112:	e008      	b.n	8001126 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001114:	f7ff fcce 	bl	8000ab4 <HAL_GetTick>
 8001118:	4602      	mov	r2, r0
 800111a:	693b      	ldr	r3, [r7, #16]
 800111c:	1ad3      	subs	r3, r2, r3
 800111e:	2b64      	cmp	r3, #100	; 0x64
 8001120:	d901      	bls.n	8001126 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001122:	2303      	movs	r3, #3
 8001124:	e1e6      	b.n	80014f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001126:	4b53      	ldr	r3, [pc, #332]	; (8001274 <HAL_RCC_OscConfig+0x26c>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800112e:	2b00      	cmp	r3, #0
 8001130:	d1f0      	bne.n	8001114 <HAL_RCC_OscConfig+0x10c>
 8001132:	e000      	b.n	8001136 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001134:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f003 0302 	and.w	r3, r3, #2
 800113e:	2b00      	cmp	r3, #0
 8001140:	d063      	beq.n	800120a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001142:	4b4c      	ldr	r3, [pc, #304]	; (8001274 <HAL_RCC_OscConfig+0x26c>)
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	f003 030c 	and.w	r3, r3, #12
 800114a:	2b00      	cmp	r3, #0
 800114c:	d00b      	beq.n	8001166 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800114e:	4b49      	ldr	r3, [pc, #292]	; (8001274 <HAL_RCC_OscConfig+0x26c>)
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	f003 030c 	and.w	r3, r3, #12
 8001156:	2b08      	cmp	r3, #8
 8001158:	d11c      	bne.n	8001194 <HAL_RCC_OscConfig+0x18c>
 800115a:	4b46      	ldr	r3, [pc, #280]	; (8001274 <HAL_RCC_OscConfig+0x26c>)
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001162:	2b00      	cmp	r3, #0
 8001164:	d116      	bne.n	8001194 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001166:	4b43      	ldr	r3, [pc, #268]	; (8001274 <HAL_RCC_OscConfig+0x26c>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f003 0302 	and.w	r3, r3, #2
 800116e:	2b00      	cmp	r3, #0
 8001170:	d005      	beq.n	800117e <HAL_RCC_OscConfig+0x176>
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	691b      	ldr	r3, [r3, #16]
 8001176:	2b01      	cmp	r3, #1
 8001178:	d001      	beq.n	800117e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800117a:	2301      	movs	r3, #1
 800117c:	e1ba      	b.n	80014f4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800117e:	4b3d      	ldr	r3, [pc, #244]	; (8001274 <HAL_RCC_OscConfig+0x26c>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	695b      	ldr	r3, [r3, #20]
 800118a:	00db      	lsls	r3, r3, #3
 800118c:	4939      	ldr	r1, [pc, #228]	; (8001274 <HAL_RCC_OscConfig+0x26c>)
 800118e:	4313      	orrs	r3, r2
 8001190:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001192:	e03a      	b.n	800120a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	691b      	ldr	r3, [r3, #16]
 8001198:	2b00      	cmp	r3, #0
 800119a:	d020      	beq.n	80011de <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800119c:	4b36      	ldr	r3, [pc, #216]	; (8001278 <HAL_RCC_OscConfig+0x270>)
 800119e:	2201      	movs	r2, #1
 80011a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011a2:	f7ff fc87 	bl	8000ab4 <HAL_GetTick>
 80011a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011a8:	e008      	b.n	80011bc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011aa:	f7ff fc83 	bl	8000ab4 <HAL_GetTick>
 80011ae:	4602      	mov	r2, r0
 80011b0:	693b      	ldr	r3, [r7, #16]
 80011b2:	1ad3      	subs	r3, r2, r3
 80011b4:	2b02      	cmp	r3, #2
 80011b6:	d901      	bls.n	80011bc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80011b8:	2303      	movs	r3, #3
 80011ba:	e19b      	b.n	80014f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011bc:	4b2d      	ldr	r3, [pc, #180]	; (8001274 <HAL_RCC_OscConfig+0x26c>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f003 0302 	and.w	r3, r3, #2
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d0f0      	beq.n	80011aa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011c8:	4b2a      	ldr	r3, [pc, #168]	; (8001274 <HAL_RCC_OscConfig+0x26c>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	695b      	ldr	r3, [r3, #20]
 80011d4:	00db      	lsls	r3, r3, #3
 80011d6:	4927      	ldr	r1, [pc, #156]	; (8001274 <HAL_RCC_OscConfig+0x26c>)
 80011d8:	4313      	orrs	r3, r2
 80011da:	600b      	str	r3, [r1, #0]
 80011dc:	e015      	b.n	800120a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80011de:	4b26      	ldr	r3, [pc, #152]	; (8001278 <HAL_RCC_OscConfig+0x270>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011e4:	f7ff fc66 	bl	8000ab4 <HAL_GetTick>
 80011e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011ea:	e008      	b.n	80011fe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011ec:	f7ff fc62 	bl	8000ab4 <HAL_GetTick>
 80011f0:	4602      	mov	r2, r0
 80011f2:	693b      	ldr	r3, [r7, #16]
 80011f4:	1ad3      	subs	r3, r2, r3
 80011f6:	2b02      	cmp	r3, #2
 80011f8:	d901      	bls.n	80011fe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80011fa:	2303      	movs	r3, #3
 80011fc:	e17a      	b.n	80014f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011fe:	4b1d      	ldr	r3, [pc, #116]	; (8001274 <HAL_RCC_OscConfig+0x26c>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f003 0302 	and.w	r3, r3, #2
 8001206:	2b00      	cmp	r3, #0
 8001208:	d1f0      	bne.n	80011ec <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f003 0308 	and.w	r3, r3, #8
 8001212:	2b00      	cmp	r3, #0
 8001214:	d03a      	beq.n	800128c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	699b      	ldr	r3, [r3, #24]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d019      	beq.n	8001252 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800121e:	4b17      	ldr	r3, [pc, #92]	; (800127c <HAL_RCC_OscConfig+0x274>)
 8001220:	2201      	movs	r2, #1
 8001222:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001224:	f7ff fc46 	bl	8000ab4 <HAL_GetTick>
 8001228:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800122a:	e008      	b.n	800123e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800122c:	f7ff fc42 	bl	8000ab4 <HAL_GetTick>
 8001230:	4602      	mov	r2, r0
 8001232:	693b      	ldr	r3, [r7, #16]
 8001234:	1ad3      	subs	r3, r2, r3
 8001236:	2b02      	cmp	r3, #2
 8001238:	d901      	bls.n	800123e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800123a:	2303      	movs	r3, #3
 800123c:	e15a      	b.n	80014f4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800123e:	4b0d      	ldr	r3, [pc, #52]	; (8001274 <HAL_RCC_OscConfig+0x26c>)
 8001240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001242:	f003 0302 	and.w	r3, r3, #2
 8001246:	2b00      	cmp	r3, #0
 8001248:	d0f0      	beq.n	800122c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800124a:	2001      	movs	r0, #1
 800124c:	f000 fada 	bl	8001804 <RCC_Delay>
 8001250:	e01c      	b.n	800128c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001252:	4b0a      	ldr	r3, [pc, #40]	; (800127c <HAL_RCC_OscConfig+0x274>)
 8001254:	2200      	movs	r2, #0
 8001256:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001258:	f7ff fc2c 	bl	8000ab4 <HAL_GetTick>
 800125c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800125e:	e00f      	b.n	8001280 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001260:	f7ff fc28 	bl	8000ab4 <HAL_GetTick>
 8001264:	4602      	mov	r2, r0
 8001266:	693b      	ldr	r3, [r7, #16]
 8001268:	1ad3      	subs	r3, r2, r3
 800126a:	2b02      	cmp	r3, #2
 800126c:	d908      	bls.n	8001280 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800126e:	2303      	movs	r3, #3
 8001270:	e140      	b.n	80014f4 <HAL_RCC_OscConfig+0x4ec>
 8001272:	bf00      	nop
 8001274:	40021000 	.word	0x40021000
 8001278:	42420000 	.word	0x42420000
 800127c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001280:	4b9e      	ldr	r3, [pc, #632]	; (80014fc <HAL_RCC_OscConfig+0x4f4>)
 8001282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001284:	f003 0302 	and.w	r3, r3, #2
 8001288:	2b00      	cmp	r3, #0
 800128a:	d1e9      	bne.n	8001260 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f003 0304 	and.w	r3, r3, #4
 8001294:	2b00      	cmp	r3, #0
 8001296:	f000 80a6 	beq.w	80013e6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800129a:	2300      	movs	r3, #0
 800129c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800129e:	4b97      	ldr	r3, [pc, #604]	; (80014fc <HAL_RCC_OscConfig+0x4f4>)
 80012a0:	69db      	ldr	r3, [r3, #28]
 80012a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d10d      	bne.n	80012c6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012aa:	4b94      	ldr	r3, [pc, #592]	; (80014fc <HAL_RCC_OscConfig+0x4f4>)
 80012ac:	69db      	ldr	r3, [r3, #28]
 80012ae:	4a93      	ldr	r2, [pc, #588]	; (80014fc <HAL_RCC_OscConfig+0x4f4>)
 80012b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012b4:	61d3      	str	r3, [r2, #28]
 80012b6:	4b91      	ldr	r3, [pc, #580]	; (80014fc <HAL_RCC_OscConfig+0x4f4>)
 80012b8:	69db      	ldr	r3, [r3, #28]
 80012ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012be:	60bb      	str	r3, [r7, #8]
 80012c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80012c2:	2301      	movs	r3, #1
 80012c4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012c6:	4b8e      	ldr	r3, [pc, #568]	; (8001500 <HAL_RCC_OscConfig+0x4f8>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d118      	bne.n	8001304 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80012d2:	4b8b      	ldr	r3, [pc, #556]	; (8001500 <HAL_RCC_OscConfig+0x4f8>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4a8a      	ldr	r2, [pc, #552]	; (8001500 <HAL_RCC_OscConfig+0x4f8>)
 80012d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80012de:	f7ff fbe9 	bl	8000ab4 <HAL_GetTick>
 80012e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012e4:	e008      	b.n	80012f8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012e6:	f7ff fbe5 	bl	8000ab4 <HAL_GetTick>
 80012ea:	4602      	mov	r2, r0
 80012ec:	693b      	ldr	r3, [r7, #16]
 80012ee:	1ad3      	subs	r3, r2, r3
 80012f0:	2b64      	cmp	r3, #100	; 0x64
 80012f2:	d901      	bls.n	80012f8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80012f4:	2303      	movs	r3, #3
 80012f6:	e0fd      	b.n	80014f4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012f8:	4b81      	ldr	r3, [pc, #516]	; (8001500 <HAL_RCC_OscConfig+0x4f8>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001300:	2b00      	cmp	r3, #0
 8001302:	d0f0      	beq.n	80012e6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	68db      	ldr	r3, [r3, #12]
 8001308:	2b01      	cmp	r3, #1
 800130a:	d106      	bne.n	800131a <HAL_RCC_OscConfig+0x312>
 800130c:	4b7b      	ldr	r3, [pc, #492]	; (80014fc <HAL_RCC_OscConfig+0x4f4>)
 800130e:	6a1b      	ldr	r3, [r3, #32]
 8001310:	4a7a      	ldr	r2, [pc, #488]	; (80014fc <HAL_RCC_OscConfig+0x4f4>)
 8001312:	f043 0301 	orr.w	r3, r3, #1
 8001316:	6213      	str	r3, [r2, #32]
 8001318:	e02d      	b.n	8001376 <HAL_RCC_OscConfig+0x36e>
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	68db      	ldr	r3, [r3, #12]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d10c      	bne.n	800133c <HAL_RCC_OscConfig+0x334>
 8001322:	4b76      	ldr	r3, [pc, #472]	; (80014fc <HAL_RCC_OscConfig+0x4f4>)
 8001324:	6a1b      	ldr	r3, [r3, #32]
 8001326:	4a75      	ldr	r2, [pc, #468]	; (80014fc <HAL_RCC_OscConfig+0x4f4>)
 8001328:	f023 0301 	bic.w	r3, r3, #1
 800132c:	6213      	str	r3, [r2, #32]
 800132e:	4b73      	ldr	r3, [pc, #460]	; (80014fc <HAL_RCC_OscConfig+0x4f4>)
 8001330:	6a1b      	ldr	r3, [r3, #32]
 8001332:	4a72      	ldr	r2, [pc, #456]	; (80014fc <HAL_RCC_OscConfig+0x4f4>)
 8001334:	f023 0304 	bic.w	r3, r3, #4
 8001338:	6213      	str	r3, [r2, #32]
 800133a:	e01c      	b.n	8001376 <HAL_RCC_OscConfig+0x36e>
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	68db      	ldr	r3, [r3, #12]
 8001340:	2b05      	cmp	r3, #5
 8001342:	d10c      	bne.n	800135e <HAL_RCC_OscConfig+0x356>
 8001344:	4b6d      	ldr	r3, [pc, #436]	; (80014fc <HAL_RCC_OscConfig+0x4f4>)
 8001346:	6a1b      	ldr	r3, [r3, #32]
 8001348:	4a6c      	ldr	r2, [pc, #432]	; (80014fc <HAL_RCC_OscConfig+0x4f4>)
 800134a:	f043 0304 	orr.w	r3, r3, #4
 800134e:	6213      	str	r3, [r2, #32]
 8001350:	4b6a      	ldr	r3, [pc, #424]	; (80014fc <HAL_RCC_OscConfig+0x4f4>)
 8001352:	6a1b      	ldr	r3, [r3, #32]
 8001354:	4a69      	ldr	r2, [pc, #420]	; (80014fc <HAL_RCC_OscConfig+0x4f4>)
 8001356:	f043 0301 	orr.w	r3, r3, #1
 800135a:	6213      	str	r3, [r2, #32]
 800135c:	e00b      	b.n	8001376 <HAL_RCC_OscConfig+0x36e>
 800135e:	4b67      	ldr	r3, [pc, #412]	; (80014fc <HAL_RCC_OscConfig+0x4f4>)
 8001360:	6a1b      	ldr	r3, [r3, #32]
 8001362:	4a66      	ldr	r2, [pc, #408]	; (80014fc <HAL_RCC_OscConfig+0x4f4>)
 8001364:	f023 0301 	bic.w	r3, r3, #1
 8001368:	6213      	str	r3, [r2, #32]
 800136a:	4b64      	ldr	r3, [pc, #400]	; (80014fc <HAL_RCC_OscConfig+0x4f4>)
 800136c:	6a1b      	ldr	r3, [r3, #32]
 800136e:	4a63      	ldr	r2, [pc, #396]	; (80014fc <HAL_RCC_OscConfig+0x4f4>)
 8001370:	f023 0304 	bic.w	r3, r3, #4
 8001374:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	68db      	ldr	r3, [r3, #12]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d015      	beq.n	80013aa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800137e:	f7ff fb99 	bl	8000ab4 <HAL_GetTick>
 8001382:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001384:	e00a      	b.n	800139c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001386:	f7ff fb95 	bl	8000ab4 <HAL_GetTick>
 800138a:	4602      	mov	r2, r0
 800138c:	693b      	ldr	r3, [r7, #16]
 800138e:	1ad3      	subs	r3, r2, r3
 8001390:	f241 3288 	movw	r2, #5000	; 0x1388
 8001394:	4293      	cmp	r3, r2
 8001396:	d901      	bls.n	800139c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001398:	2303      	movs	r3, #3
 800139a:	e0ab      	b.n	80014f4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800139c:	4b57      	ldr	r3, [pc, #348]	; (80014fc <HAL_RCC_OscConfig+0x4f4>)
 800139e:	6a1b      	ldr	r3, [r3, #32]
 80013a0:	f003 0302 	and.w	r3, r3, #2
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d0ee      	beq.n	8001386 <HAL_RCC_OscConfig+0x37e>
 80013a8:	e014      	b.n	80013d4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013aa:	f7ff fb83 	bl	8000ab4 <HAL_GetTick>
 80013ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013b0:	e00a      	b.n	80013c8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013b2:	f7ff fb7f 	bl	8000ab4 <HAL_GetTick>
 80013b6:	4602      	mov	r2, r0
 80013b8:	693b      	ldr	r3, [r7, #16]
 80013ba:	1ad3      	subs	r3, r2, r3
 80013bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80013c0:	4293      	cmp	r3, r2
 80013c2:	d901      	bls.n	80013c8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80013c4:	2303      	movs	r3, #3
 80013c6:	e095      	b.n	80014f4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013c8:	4b4c      	ldr	r3, [pc, #304]	; (80014fc <HAL_RCC_OscConfig+0x4f4>)
 80013ca:	6a1b      	ldr	r3, [r3, #32]
 80013cc:	f003 0302 	and.w	r3, r3, #2
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d1ee      	bne.n	80013b2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80013d4:	7dfb      	ldrb	r3, [r7, #23]
 80013d6:	2b01      	cmp	r3, #1
 80013d8:	d105      	bne.n	80013e6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80013da:	4b48      	ldr	r3, [pc, #288]	; (80014fc <HAL_RCC_OscConfig+0x4f4>)
 80013dc:	69db      	ldr	r3, [r3, #28]
 80013de:	4a47      	ldr	r2, [pc, #284]	; (80014fc <HAL_RCC_OscConfig+0x4f4>)
 80013e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80013e4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	69db      	ldr	r3, [r3, #28]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	f000 8081 	beq.w	80014f2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80013f0:	4b42      	ldr	r3, [pc, #264]	; (80014fc <HAL_RCC_OscConfig+0x4f4>)
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	f003 030c 	and.w	r3, r3, #12
 80013f8:	2b08      	cmp	r3, #8
 80013fa:	d061      	beq.n	80014c0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	69db      	ldr	r3, [r3, #28]
 8001400:	2b02      	cmp	r3, #2
 8001402:	d146      	bne.n	8001492 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001404:	4b3f      	ldr	r3, [pc, #252]	; (8001504 <HAL_RCC_OscConfig+0x4fc>)
 8001406:	2200      	movs	r2, #0
 8001408:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800140a:	f7ff fb53 	bl	8000ab4 <HAL_GetTick>
 800140e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001410:	e008      	b.n	8001424 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001412:	f7ff fb4f 	bl	8000ab4 <HAL_GetTick>
 8001416:	4602      	mov	r2, r0
 8001418:	693b      	ldr	r3, [r7, #16]
 800141a:	1ad3      	subs	r3, r2, r3
 800141c:	2b02      	cmp	r3, #2
 800141e:	d901      	bls.n	8001424 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001420:	2303      	movs	r3, #3
 8001422:	e067      	b.n	80014f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001424:	4b35      	ldr	r3, [pc, #212]	; (80014fc <HAL_RCC_OscConfig+0x4f4>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800142c:	2b00      	cmp	r3, #0
 800142e:	d1f0      	bne.n	8001412 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	6a1b      	ldr	r3, [r3, #32]
 8001434:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001438:	d108      	bne.n	800144c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800143a:	4b30      	ldr	r3, [pc, #192]	; (80014fc <HAL_RCC_OscConfig+0x4f4>)
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	689b      	ldr	r3, [r3, #8]
 8001446:	492d      	ldr	r1, [pc, #180]	; (80014fc <HAL_RCC_OscConfig+0x4f4>)
 8001448:	4313      	orrs	r3, r2
 800144a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800144c:	4b2b      	ldr	r3, [pc, #172]	; (80014fc <HAL_RCC_OscConfig+0x4f4>)
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	6a19      	ldr	r1, [r3, #32]
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800145c:	430b      	orrs	r3, r1
 800145e:	4927      	ldr	r1, [pc, #156]	; (80014fc <HAL_RCC_OscConfig+0x4f4>)
 8001460:	4313      	orrs	r3, r2
 8001462:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001464:	4b27      	ldr	r3, [pc, #156]	; (8001504 <HAL_RCC_OscConfig+0x4fc>)
 8001466:	2201      	movs	r2, #1
 8001468:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800146a:	f7ff fb23 	bl	8000ab4 <HAL_GetTick>
 800146e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001470:	e008      	b.n	8001484 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001472:	f7ff fb1f 	bl	8000ab4 <HAL_GetTick>
 8001476:	4602      	mov	r2, r0
 8001478:	693b      	ldr	r3, [r7, #16]
 800147a:	1ad3      	subs	r3, r2, r3
 800147c:	2b02      	cmp	r3, #2
 800147e:	d901      	bls.n	8001484 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001480:	2303      	movs	r3, #3
 8001482:	e037      	b.n	80014f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001484:	4b1d      	ldr	r3, [pc, #116]	; (80014fc <HAL_RCC_OscConfig+0x4f4>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800148c:	2b00      	cmp	r3, #0
 800148e:	d0f0      	beq.n	8001472 <HAL_RCC_OscConfig+0x46a>
 8001490:	e02f      	b.n	80014f2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001492:	4b1c      	ldr	r3, [pc, #112]	; (8001504 <HAL_RCC_OscConfig+0x4fc>)
 8001494:	2200      	movs	r2, #0
 8001496:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001498:	f7ff fb0c 	bl	8000ab4 <HAL_GetTick>
 800149c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800149e:	e008      	b.n	80014b2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014a0:	f7ff fb08 	bl	8000ab4 <HAL_GetTick>
 80014a4:	4602      	mov	r2, r0
 80014a6:	693b      	ldr	r3, [r7, #16]
 80014a8:	1ad3      	subs	r3, r2, r3
 80014aa:	2b02      	cmp	r3, #2
 80014ac:	d901      	bls.n	80014b2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80014ae:	2303      	movs	r3, #3
 80014b0:	e020      	b.n	80014f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014b2:	4b12      	ldr	r3, [pc, #72]	; (80014fc <HAL_RCC_OscConfig+0x4f4>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d1f0      	bne.n	80014a0 <HAL_RCC_OscConfig+0x498>
 80014be:	e018      	b.n	80014f2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	69db      	ldr	r3, [r3, #28]
 80014c4:	2b01      	cmp	r3, #1
 80014c6:	d101      	bne.n	80014cc <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80014c8:	2301      	movs	r3, #1
 80014ca:	e013      	b.n	80014f4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80014cc:	4b0b      	ldr	r3, [pc, #44]	; (80014fc <HAL_RCC_OscConfig+0x4f4>)
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6a1b      	ldr	r3, [r3, #32]
 80014dc:	429a      	cmp	r2, r3
 80014de:	d106      	bne.n	80014ee <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014ea:	429a      	cmp	r2, r3
 80014ec:	d001      	beq.n	80014f2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80014ee:	2301      	movs	r3, #1
 80014f0:	e000      	b.n	80014f4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80014f2:	2300      	movs	r3, #0
}
 80014f4:	4618      	mov	r0, r3
 80014f6:	3718      	adds	r7, #24
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	40021000 	.word	0x40021000
 8001500:	40007000 	.word	0x40007000
 8001504:	42420060 	.word	0x42420060

08001508 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b084      	sub	sp, #16
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
 8001510:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d101      	bne.n	800151c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001518:	2301      	movs	r3, #1
 800151a:	e0d0      	b.n	80016be <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800151c:	4b6a      	ldr	r3, [pc, #424]	; (80016c8 <HAL_RCC_ClockConfig+0x1c0>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f003 0307 	and.w	r3, r3, #7
 8001524:	683a      	ldr	r2, [r7, #0]
 8001526:	429a      	cmp	r2, r3
 8001528:	d910      	bls.n	800154c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800152a:	4b67      	ldr	r3, [pc, #412]	; (80016c8 <HAL_RCC_ClockConfig+0x1c0>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f023 0207 	bic.w	r2, r3, #7
 8001532:	4965      	ldr	r1, [pc, #404]	; (80016c8 <HAL_RCC_ClockConfig+0x1c0>)
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	4313      	orrs	r3, r2
 8001538:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800153a:	4b63      	ldr	r3, [pc, #396]	; (80016c8 <HAL_RCC_ClockConfig+0x1c0>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f003 0307 	and.w	r3, r3, #7
 8001542:	683a      	ldr	r2, [r7, #0]
 8001544:	429a      	cmp	r2, r3
 8001546:	d001      	beq.n	800154c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001548:	2301      	movs	r3, #1
 800154a:	e0b8      	b.n	80016be <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f003 0302 	and.w	r3, r3, #2
 8001554:	2b00      	cmp	r3, #0
 8001556:	d020      	beq.n	800159a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f003 0304 	and.w	r3, r3, #4
 8001560:	2b00      	cmp	r3, #0
 8001562:	d005      	beq.n	8001570 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001564:	4b59      	ldr	r3, [pc, #356]	; (80016cc <HAL_RCC_ClockConfig+0x1c4>)
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	4a58      	ldr	r2, [pc, #352]	; (80016cc <HAL_RCC_ClockConfig+0x1c4>)
 800156a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800156e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f003 0308 	and.w	r3, r3, #8
 8001578:	2b00      	cmp	r3, #0
 800157a:	d005      	beq.n	8001588 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800157c:	4b53      	ldr	r3, [pc, #332]	; (80016cc <HAL_RCC_ClockConfig+0x1c4>)
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	4a52      	ldr	r2, [pc, #328]	; (80016cc <HAL_RCC_ClockConfig+0x1c4>)
 8001582:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001586:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001588:	4b50      	ldr	r3, [pc, #320]	; (80016cc <HAL_RCC_ClockConfig+0x1c4>)
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	689b      	ldr	r3, [r3, #8]
 8001594:	494d      	ldr	r1, [pc, #308]	; (80016cc <HAL_RCC_ClockConfig+0x1c4>)
 8001596:	4313      	orrs	r3, r2
 8001598:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f003 0301 	and.w	r3, r3, #1
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d040      	beq.n	8001628 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	2b01      	cmp	r3, #1
 80015ac:	d107      	bne.n	80015be <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015ae:	4b47      	ldr	r3, [pc, #284]	; (80016cc <HAL_RCC_ClockConfig+0x1c4>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d115      	bne.n	80015e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015ba:	2301      	movs	r3, #1
 80015bc:	e07f      	b.n	80016be <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	2b02      	cmp	r3, #2
 80015c4:	d107      	bne.n	80015d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015c6:	4b41      	ldr	r3, [pc, #260]	; (80016cc <HAL_RCC_ClockConfig+0x1c4>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d109      	bne.n	80015e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015d2:	2301      	movs	r3, #1
 80015d4:	e073      	b.n	80016be <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015d6:	4b3d      	ldr	r3, [pc, #244]	; (80016cc <HAL_RCC_ClockConfig+0x1c4>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f003 0302 	and.w	r3, r3, #2
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d101      	bne.n	80015e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015e2:	2301      	movs	r3, #1
 80015e4:	e06b      	b.n	80016be <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80015e6:	4b39      	ldr	r3, [pc, #228]	; (80016cc <HAL_RCC_ClockConfig+0x1c4>)
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	f023 0203 	bic.w	r2, r3, #3
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	4936      	ldr	r1, [pc, #216]	; (80016cc <HAL_RCC_ClockConfig+0x1c4>)
 80015f4:	4313      	orrs	r3, r2
 80015f6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80015f8:	f7ff fa5c 	bl	8000ab4 <HAL_GetTick>
 80015fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015fe:	e00a      	b.n	8001616 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001600:	f7ff fa58 	bl	8000ab4 <HAL_GetTick>
 8001604:	4602      	mov	r2, r0
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	1ad3      	subs	r3, r2, r3
 800160a:	f241 3288 	movw	r2, #5000	; 0x1388
 800160e:	4293      	cmp	r3, r2
 8001610:	d901      	bls.n	8001616 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001612:	2303      	movs	r3, #3
 8001614:	e053      	b.n	80016be <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001616:	4b2d      	ldr	r3, [pc, #180]	; (80016cc <HAL_RCC_ClockConfig+0x1c4>)
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	f003 020c 	and.w	r2, r3, #12
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	009b      	lsls	r3, r3, #2
 8001624:	429a      	cmp	r2, r3
 8001626:	d1eb      	bne.n	8001600 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001628:	4b27      	ldr	r3, [pc, #156]	; (80016c8 <HAL_RCC_ClockConfig+0x1c0>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f003 0307 	and.w	r3, r3, #7
 8001630:	683a      	ldr	r2, [r7, #0]
 8001632:	429a      	cmp	r2, r3
 8001634:	d210      	bcs.n	8001658 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001636:	4b24      	ldr	r3, [pc, #144]	; (80016c8 <HAL_RCC_ClockConfig+0x1c0>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f023 0207 	bic.w	r2, r3, #7
 800163e:	4922      	ldr	r1, [pc, #136]	; (80016c8 <HAL_RCC_ClockConfig+0x1c0>)
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	4313      	orrs	r3, r2
 8001644:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001646:	4b20      	ldr	r3, [pc, #128]	; (80016c8 <HAL_RCC_ClockConfig+0x1c0>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f003 0307 	and.w	r3, r3, #7
 800164e:	683a      	ldr	r2, [r7, #0]
 8001650:	429a      	cmp	r2, r3
 8001652:	d001      	beq.n	8001658 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001654:	2301      	movs	r3, #1
 8001656:	e032      	b.n	80016be <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f003 0304 	and.w	r3, r3, #4
 8001660:	2b00      	cmp	r3, #0
 8001662:	d008      	beq.n	8001676 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001664:	4b19      	ldr	r3, [pc, #100]	; (80016cc <HAL_RCC_ClockConfig+0x1c4>)
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	68db      	ldr	r3, [r3, #12]
 8001670:	4916      	ldr	r1, [pc, #88]	; (80016cc <HAL_RCC_ClockConfig+0x1c4>)
 8001672:	4313      	orrs	r3, r2
 8001674:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f003 0308 	and.w	r3, r3, #8
 800167e:	2b00      	cmp	r3, #0
 8001680:	d009      	beq.n	8001696 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001682:	4b12      	ldr	r3, [pc, #72]	; (80016cc <HAL_RCC_ClockConfig+0x1c4>)
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	691b      	ldr	r3, [r3, #16]
 800168e:	00db      	lsls	r3, r3, #3
 8001690:	490e      	ldr	r1, [pc, #56]	; (80016cc <HAL_RCC_ClockConfig+0x1c4>)
 8001692:	4313      	orrs	r3, r2
 8001694:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001696:	f000 f821 	bl	80016dc <HAL_RCC_GetSysClockFreq>
 800169a:	4601      	mov	r1, r0
 800169c:	4b0b      	ldr	r3, [pc, #44]	; (80016cc <HAL_RCC_ClockConfig+0x1c4>)
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	091b      	lsrs	r3, r3, #4
 80016a2:	f003 030f 	and.w	r3, r3, #15
 80016a6:	4a0a      	ldr	r2, [pc, #40]	; (80016d0 <HAL_RCC_ClockConfig+0x1c8>)
 80016a8:	5cd3      	ldrb	r3, [r2, r3]
 80016aa:	fa21 f303 	lsr.w	r3, r1, r3
 80016ae:	4a09      	ldr	r2, [pc, #36]	; (80016d4 <HAL_RCC_ClockConfig+0x1cc>)
 80016b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80016b2:	4b09      	ldr	r3, [pc, #36]	; (80016d8 <HAL_RCC_ClockConfig+0x1d0>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4618      	mov	r0, r3
 80016b8:	f7ff f9ba 	bl	8000a30 <HAL_InitTick>

  return HAL_OK;
 80016bc:	2300      	movs	r3, #0
}
 80016be:	4618      	mov	r0, r3
 80016c0:	3710      	adds	r7, #16
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	40022000 	.word	0x40022000
 80016cc:	40021000 	.word	0x40021000
 80016d0:	0800bc40 	.word	0x0800bc40
 80016d4:	2000001c 	.word	0x2000001c
 80016d8:	20000000 	.word	0x20000000

080016dc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80016dc:	b490      	push	{r4, r7}
 80016de:	b08a      	sub	sp, #40	; 0x28
 80016e0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80016e2:	4b2a      	ldr	r3, [pc, #168]	; (800178c <HAL_RCC_GetSysClockFreq+0xb0>)
 80016e4:	1d3c      	adds	r4, r7, #4
 80016e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80016e8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80016ec:	4b28      	ldr	r3, [pc, #160]	; (8001790 <HAL_RCC_GetSysClockFreq+0xb4>)
 80016ee:	881b      	ldrh	r3, [r3, #0]
 80016f0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80016f2:	2300      	movs	r3, #0
 80016f4:	61fb      	str	r3, [r7, #28]
 80016f6:	2300      	movs	r3, #0
 80016f8:	61bb      	str	r3, [r7, #24]
 80016fa:	2300      	movs	r3, #0
 80016fc:	627b      	str	r3, [r7, #36]	; 0x24
 80016fe:	2300      	movs	r3, #0
 8001700:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001702:	2300      	movs	r3, #0
 8001704:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001706:	4b23      	ldr	r3, [pc, #140]	; (8001794 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800170c:	69fb      	ldr	r3, [r7, #28]
 800170e:	f003 030c 	and.w	r3, r3, #12
 8001712:	2b04      	cmp	r3, #4
 8001714:	d002      	beq.n	800171c <HAL_RCC_GetSysClockFreq+0x40>
 8001716:	2b08      	cmp	r3, #8
 8001718:	d003      	beq.n	8001722 <HAL_RCC_GetSysClockFreq+0x46>
 800171a:	e02d      	b.n	8001778 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800171c:	4b1e      	ldr	r3, [pc, #120]	; (8001798 <HAL_RCC_GetSysClockFreq+0xbc>)
 800171e:	623b      	str	r3, [r7, #32]
      break;
 8001720:	e02d      	b.n	800177e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001722:	69fb      	ldr	r3, [r7, #28]
 8001724:	0c9b      	lsrs	r3, r3, #18
 8001726:	f003 030f 	and.w	r3, r3, #15
 800172a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800172e:	4413      	add	r3, r2
 8001730:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001734:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001736:	69fb      	ldr	r3, [r7, #28]
 8001738:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800173c:	2b00      	cmp	r3, #0
 800173e:	d013      	beq.n	8001768 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001740:	4b14      	ldr	r3, [pc, #80]	; (8001794 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	0c5b      	lsrs	r3, r3, #17
 8001746:	f003 0301 	and.w	r3, r3, #1
 800174a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800174e:	4413      	add	r3, r2
 8001750:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001754:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001756:	697b      	ldr	r3, [r7, #20]
 8001758:	4a0f      	ldr	r2, [pc, #60]	; (8001798 <HAL_RCC_GetSysClockFreq+0xbc>)
 800175a:	fb02 f203 	mul.w	r2, r2, r3
 800175e:	69bb      	ldr	r3, [r7, #24]
 8001760:	fbb2 f3f3 	udiv	r3, r2, r3
 8001764:	627b      	str	r3, [r7, #36]	; 0x24
 8001766:	e004      	b.n	8001772 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	4a0c      	ldr	r2, [pc, #48]	; (800179c <HAL_RCC_GetSysClockFreq+0xc0>)
 800176c:	fb02 f303 	mul.w	r3, r2, r3
 8001770:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001774:	623b      	str	r3, [r7, #32]
      break;
 8001776:	e002      	b.n	800177e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001778:	4b07      	ldr	r3, [pc, #28]	; (8001798 <HAL_RCC_GetSysClockFreq+0xbc>)
 800177a:	623b      	str	r3, [r7, #32]
      break;
 800177c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800177e:	6a3b      	ldr	r3, [r7, #32]
}
 8001780:	4618      	mov	r0, r3
 8001782:	3728      	adds	r7, #40	; 0x28
 8001784:	46bd      	mov	sp, r7
 8001786:	bc90      	pop	{r4, r7}
 8001788:	4770      	bx	lr
 800178a:	bf00      	nop
 800178c:	0800a3d8 	.word	0x0800a3d8
 8001790:	0800a3e8 	.word	0x0800a3e8
 8001794:	40021000 	.word	0x40021000
 8001798:	007a1200 	.word	0x007a1200
 800179c:	003d0900 	.word	0x003d0900

080017a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80017a4:	4b02      	ldr	r3, [pc, #8]	; (80017b0 <HAL_RCC_GetHCLKFreq+0x10>)
 80017a6:	681b      	ldr	r3, [r3, #0]
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bc80      	pop	{r7}
 80017ae:	4770      	bx	lr
 80017b0:	2000001c 	.word	0x2000001c

080017b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80017b8:	f7ff fff2 	bl	80017a0 <HAL_RCC_GetHCLKFreq>
 80017bc:	4601      	mov	r1, r0
 80017be:	4b05      	ldr	r3, [pc, #20]	; (80017d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	0a1b      	lsrs	r3, r3, #8
 80017c4:	f003 0307 	and.w	r3, r3, #7
 80017c8:	4a03      	ldr	r2, [pc, #12]	; (80017d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80017ca:	5cd3      	ldrb	r3, [r2, r3]
 80017cc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	40021000 	.word	0x40021000
 80017d8:	0800bc50 	.word	0x0800bc50

080017dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80017e0:	f7ff ffde 	bl	80017a0 <HAL_RCC_GetHCLKFreq>
 80017e4:	4601      	mov	r1, r0
 80017e6:	4b05      	ldr	r3, [pc, #20]	; (80017fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	0adb      	lsrs	r3, r3, #11
 80017ec:	f003 0307 	and.w	r3, r3, #7
 80017f0:	4a03      	ldr	r2, [pc, #12]	; (8001800 <HAL_RCC_GetPCLK2Freq+0x24>)
 80017f2:	5cd3      	ldrb	r3, [r2, r3]
 80017f4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	40021000 	.word	0x40021000
 8001800:	0800bc50 	.word	0x0800bc50

08001804 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001804:	b480      	push	{r7}
 8001806:	b085      	sub	sp, #20
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800180c:	4b0a      	ldr	r3, [pc, #40]	; (8001838 <RCC_Delay+0x34>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a0a      	ldr	r2, [pc, #40]	; (800183c <RCC_Delay+0x38>)
 8001812:	fba2 2303 	umull	r2, r3, r2, r3
 8001816:	0a5b      	lsrs	r3, r3, #9
 8001818:	687a      	ldr	r2, [r7, #4]
 800181a:	fb02 f303 	mul.w	r3, r2, r3
 800181e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001820:	bf00      	nop
  }
  while (Delay --);
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	1e5a      	subs	r2, r3, #1
 8001826:	60fa      	str	r2, [r7, #12]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d1f9      	bne.n	8001820 <RCC_Delay+0x1c>
}
 800182c:	bf00      	nop
 800182e:	3714      	adds	r7, #20
 8001830:	46bd      	mov	sp, r7
 8001832:	bc80      	pop	{r7}
 8001834:	4770      	bx	lr
 8001836:	bf00      	nop
 8001838:	2000001c 	.word	0x2000001c
 800183c:	10624dd3 	.word	0x10624dd3

08001840 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b086      	sub	sp, #24
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8001848:	2300      	movs	r3, #0
 800184a:	613b      	str	r3, [r7, #16]
 800184c:	2300      	movs	r3, #0
 800184e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f003 0301 	and.w	r3, r3, #1
 8001858:	2b00      	cmp	r3, #0
 800185a:	d07d      	beq.n	8001958 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 800185c:	2300      	movs	r3, #0
 800185e:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001860:	4b4f      	ldr	r3, [pc, #316]	; (80019a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001862:	69db      	ldr	r3, [r3, #28]
 8001864:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001868:	2b00      	cmp	r3, #0
 800186a:	d10d      	bne.n	8001888 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800186c:	4b4c      	ldr	r3, [pc, #304]	; (80019a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800186e:	69db      	ldr	r3, [r3, #28]
 8001870:	4a4b      	ldr	r2, [pc, #300]	; (80019a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001872:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001876:	61d3      	str	r3, [r2, #28]
 8001878:	4b49      	ldr	r3, [pc, #292]	; (80019a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800187a:	69db      	ldr	r3, [r3, #28]
 800187c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001880:	60bb      	str	r3, [r7, #8]
 8001882:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001884:	2301      	movs	r3, #1
 8001886:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001888:	4b46      	ldr	r3, [pc, #280]	; (80019a4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001890:	2b00      	cmp	r3, #0
 8001892:	d118      	bne.n	80018c6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001894:	4b43      	ldr	r3, [pc, #268]	; (80019a4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a42      	ldr	r2, [pc, #264]	; (80019a4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800189a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800189e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018a0:	f7ff f908 	bl	8000ab4 <HAL_GetTick>
 80018a4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018a6:	e008      	b.n	80018ba <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018a8:	f7ff f904 	bl	8000ab4 <HAL_GetTick>
 80018ac:	4602      	mov	r2, r0
 80018ae:	693b      	ldr	r3, [r7, #16]
 80018b0:	1ad3      	subs	r3, r2, r3
 80018b2:	2b64      	cmp	r3, #100	; 0x64
 80018b4:	d901      	bls.n	80018ba <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80018b6:	2303      	movs	r3, #3
 80018b8:	e06d      	b.n	8001996 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018ba:	4b3a      	ldr	r3, [pc, #232]	; (80019a4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d0f0      	beq.n	80018a8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80018c6:	4b36      	ldr	r3, [pc, #216]	; (80019a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80018c8:	6a1b      	ldr	r3, [r3, #32]
 80018ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80018ce:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d02e      	beq.n	8001934 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80018de:	68fa      	ldr	r2, [r7, #12]
 80018e0:	429a      	cmp	r2, r3
 80018e2:	d027      	beq.n	8001934 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80018e4:	4b2e      	ldr	r3, [pc, #184]	; (80019a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80018e6:	6a1b      	ldr	r3, [r3, #32]
 80018e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80018ec:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80018ee:	4b2e      	ldr	r3, [pc, #184]	; (80019a8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80018f0:	2201      	movs	r2, #1
 80018f2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80018f4:	4b2c      	ldr	r3, [pc, #176]	; (80019a8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80018fa:	4a29      	ldr	r2, [pc, #164]	; (80019a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	f003 0301 	and.w	r3, r3, #1
 8001906:	2b00      	cmp	r3, #0
 8001908:	d014      	beq.n	8001934 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800190a:	f7ff f8d3 	bl	8000ab4 <HAL_GetTick>
 800190e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001910:	e00a      	b.n	8001928 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001912:	f7ff f8cf 	bl	8000ab4 <HAL_GetTick>
 8001916:	4602      	mov	r2, r0
 8001918:	693b      	ldr	r3, [r7, #16]
 800191a:	1ad3      	subs	r3, r2, r3
 800191c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001920:	4293      	cmp	r3, r2
 8001922:	d901      	bls.n	8001928 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001924:	2303      	movs	r3, #3
 8001926:	e036      	b.n	8001996 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001928:	4b1d      	ldr	r3, [pc, #116]	; (80019a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800192a:	6a1b      	ldr	r3, [r3, #32]
 800192c:	f003 0302 	and.w	r3, r3, #2
 8001930:	2b00      	cmp	r3, #0
 8001932:	d0ee      	beq.n	8001912 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001934:	4b1a      	ldr	r3, [pc, #104]	; (80019a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001936:	6a1b      	ldr	r3, [r3, #32]
 8001938:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	4917      	ldr	r1, [pc, #92]	; (80019a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001942:	4313      	orrs	r3, r2
 8001944:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001946:	7dfb      	ldrb	r3, [r7, #23]
 8001948:	2b01      	cmp	r3, #1
 800194a:	d105      	bne.n	8001958 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800194c:	4b14      	ldr	r3, [pc, #80]	; (80019a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800194e:	69db      	ldr	r3, [r3, #28]
 8001950:	4a13      	ldr	r2, [pc, #76]	; (80019a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001952:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001956:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f003 0302 	and.w	r3, r3, #2
 8001960:	2b00      	cmp	r3, #0
 8001962:	d008      	beq.n	8001976 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001964:	4b0e      	ldr	r3, [pc, #56]	; (80019a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	689b      	ldr	r3, [r3, #8]
 8001970:	490b      	ldr	r1, [pc, #44]	; (80019a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001972:	4313      	orrs	r3, r2
 8001974:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f003 0310 	and.w	r3, r3, #16
 800197e:	2b00      	cmp	r3, #0
 8001980:	d008      	beq.n	8001994 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001982:	4b07      	ldr	r3, [pc, #28]	; (80019a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	695b      	ldr	r3, [r3, #20]
 800198e:	4904      	ldr	r1, [pc, #16]	; (80019a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001990:	4313      	orrs	r3, r2
 8001992:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001994:	2300      	movs	r3, #0
}
 8001996:	4618      	mov	r0, r3
 8001998:	3718      	adds	r7, #24
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	40021000 	.word	0x40021000
 80019a4:	40007000 	.word	0x40007000
 80019a8:	42420440 	.word	0x42420440

080019ac <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80019ac:	b590      	push	{r4, r7, lr}
 80019ae:	b08d      	sub	sp, #52	; 0x34
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80019b4:	4b6b      	ldr	r3, [pc, #428]	; (8001b64 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 80019b6:	f107 040c 	add.w	r4, r7, #12
 80019ba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80019bc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80019c0:	4b69      	ldr	r3, [pc, #420]	; (8001b68 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 80019c2:	881b      	ldrh	r3, [r3, #0]
 80019c4:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80019c6:	2300      	movs	r3, #0
 80019c8:	627b      	str	r3, [r7, #36]	; 0x24
 80019ca:	2300      	movs	r3, #0
 80019cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80019ce:	2300      	movs	r3, #0
 80019d0:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80019d2:	2300      	movs	r3, #0
 80019d4:	61fb      	str	r3, [r7, #28]
 80019d6:	2300      	movs	r3, #0
 80019d8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	3b01      	subs	r3, #1
 80019de:	2b0f      	cmp	r3, #15
 80019e0:	f200 80b6 	bhi.w	8001b50 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 80019e4:	a201      	add	r2, pc, #4	; (adr r2, 80019ec <HAL_RCCEx_GetPeriphCLKFreq+0x40>)
 80019e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019ea:	bf00      	nop
 80019ec:	08001acf 	.word	0x08001acf
 80019f0:	08001b35 	.word	0x08001b35
 80019f4:	08001b51 	.word	0x08001b51
 80019f8:	08001abf 	.word	0x08001abf
 80019fc:	08001b51 	.word	0x08001b51
 8001a00:	08001b51 	.word	0x08001b51
 8001a04:	08001b51 	.word	0x08001b51
 8001a08:	08001ac7 	.word	0x08001ac7
 8001a0c:	08001b51 	.word	0x08001b51
 8001a10:	08001b51 	.word	0x08001b51
 8001a14:	08001b51 	.word	0x08001b51
 8001a18:	08001b51 	.word	0x08001b51
 8001a1c:	08001b51 	.word	0x08001b51
 8001a20:	08001b51 	.word	0x08001b51
 8001a24:	08001b51 	.word	0x08001b51
 8001a28:	08001a2d 	.word	0x08001a2d
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_USB:
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 8001a2c:	4b4f      	ldr	r3, [pc, #316]	; (8001b6c <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>)
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	61fb      	str	r3, [r7, #28]

      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8001a32:	4b4e      	ldr	r3, [pc, #312]	; (8001b6c <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	f000 808a 	beq.w	8001b54 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001a40:	69fb      	ldr	r3, [r7, #28]
 8001a42:	0c9b      	lsrs	r3, r3, #18
 8001a44:	f003 030f 	and.w	r3, r3, #15
 8001a48:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001a4c:	4413      	add	r3, r2
 8001a4e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001a52:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001a54:	69fb      	ldr	r3, [r7, #28]
 8001a56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d018      	beq.n	8001a90 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001a5e:	4b43      	ldr	r3, [pc, #268]	; (8001b6c <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>)
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	0c5b      	lsrs	r3, r3, #17
 8001a64:	f003 0301 	and.w	r3, r3, #1
 8001a68:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001a6c:	4413      	add	r3, r2
 8001a6e:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001a72:	627b      	str	r3, [r7, #36]	; 0x24
          if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
          {
            pllclk = pllclk / 2;
          }
#else
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001a74:	69fb      	ldr	r3, [r7, #28]
 8001a76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d00d      	beq.n	8001a9a <HAL_RCCEx_GetPeriphCLKFreq+0xee>
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8001a7e:	4a3c      	ldr	r2, [pc, #240]	; (8001b70 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>)
 8001a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a82:	fbb2 f2f3 	udiv	r2, r2, r3
 8001a86:	6a3b      	ldr	r3, [r7, #32]
 8001a88:	fb02 f303 	mul.w	r3, r2, r3
 8001a8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a8e:	e004      	b.n	8001a9a <HAL_RCCEx_GetPeriphCLKFreq+0xee>
#endif /* STM32F105xC || STM32F107xC */
        }
        else
        {
          /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001a90:	6a3b      	ldr	r3, [r7, #32]
 8001a92:	4a38      	ldr	r2, [pc, #224]	; (8001b74 <HAL_RCCEx_GetPeriphCLKFreq+0x1c8>)
 8001a94:	fb02 f303 	mul.w	r3, r2, r3
 8001a98:	62fb      	str	r3, [r7, #44]	; 0x2c
          /* Prescaler of 3 selected for USB */
          frequency = (2 * pllclk) / 3;
        }
#else
        /* USBCLK = PLLCLK / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8001a9a:	4b34      	ldr	r3, [pc, #208]	; (8001b6c <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>)
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001aa2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001aa6:	d102      	bne.n	8001aae <HAL_RCCEx_GetPeriphCLKFreq+0x102>
        {
          /* No prescaler selected for USB */
          frequency = pllclk;
 8001aa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001aaa:	62bb      	str	r3, [r7, #40]	; 0x28
          /* Prescaler of 1.5 selected for USB */
          frequency = (pllclk * 2) / 3;
        }
#endif
      }
      break;
 8001aac:	e052      	b.n	8001b54 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
          frequency = (pllclk * 2) / 3;
 8001aae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ab0:	005b      	lsls	r3, r3, #1
 8001ab2:	4a31      	ldr	r2, [pc, #196]	; (8001b78 <HAL_RCCEx_GetPeriphCLKFreq+0x1cc>)
 8001ab4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ab8:	085b      	lsrs	r3, r3, #1
 8001aba:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8001abc:	e04a      	b.n	8001b54 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
#if defined(STM32F103xE) || defined(STM32F103xG) || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_I2S2:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S2 */
      frequency = HAL_RCC_GetSysClockFreq();
 8001abe:	f7ff fe0d 	bl	80016dc <HAL_RCC_GetSysClockFreq>
 8001ac2:	62b8      	str	r0, [r7, #40]	; 0x28
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8001ac4:	e049      	b.n	8001b5a <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
    }
    case RCC_PERIPHCLK_I2S3:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S3 */
      frequency = HAL_RCC_GetSysClockFreq();
 8001ac6:	f7ff fe09 	bl	80016dc <HAL_RCC_GetSysClockFreq>
 8001aca:	62b8      	str	r0, [r7, #40]	; 0x28
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8001acc:	e045      	b.n	8001b5a <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
    case RCC_PERIPHCLK_RTC:
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 8001ace:	4b27      	ldr	r3, [pc, #156]	; (8001b6c <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>)
 8001ad0:	6a1b      	ldr	r3, [r3, #32]
 8001ad2:	61fb      	str	r3, [r7, #28]

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8001ad4:	69fb      	ldr	r3, [r7, #28]
 8001ad6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ada:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ade:	d108      	bne.n	8001af2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8001ae0:	69fb      	ldr	r3, [r7, #28]
 8001ae2:	f003 0302 	and.w	r3, r3, #2
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d003      	beq.n	8001af2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      {
        frequency = LSE_VALUE;
 8001aea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001aee:	62bb      	str	r3, [r7, #40]	; 0x28
 8001af0:	e01f      	b.n	8001b32 <HAL_RCCEx_GetPeriphCLKFreq+0x186>
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8001af2:	69fb      	ldr	r3, [r7, #28]
 8001af4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001af8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001afc:	d109      	bne.n	8001b12 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8001afe:	4b1b      	ldr	r3, [pc, #108]	; (8001b6c <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>)
 8001b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b02:	f003 0302 	and.w	r3, r3, #2
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d003      	beq.n	8001b12 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      {
        frequency = LSI_VALUE;
 8001b0a:	f649 4340 	movw	r3, #40000	; 0x9c40
 8001b0e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b10:	e00f      	b.n	8001b32 <HAL_RCCEx_GetPeriphCLKFreq+0x186>
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8001b12:	69fb      	ldr	r3, [r7, #28]
 8001b14:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b18:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001b1c:	d11c      	bne.n	8001b58 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 8001b1e:	4b13      	ldr	r3, [pc, #76]	; (8001b6c <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d016      	beq.n	8001b58 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
      {
        frequency = HSE_VALUE / 128U;
 8001b2a:	f24f 4324 	movw	r3, #62500	; 0xf424
 8001b2e:	62bb      	str	r3, [r7, #40]	; 0x28
      /* Clock not enabled for RTC*/
      else
      {
        /* nothing to do: frequency already initialized to 0U */
      }
      break;
 8001b30:	e012      	b.n	8001b58 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 8001b32:	e011      	b.n	8001b58 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
    }
    case RCC_PERIPHCLK_ADC:
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8001b34:	f7ff fe52 	bl	80017dc <HAL_RCC_GetPCLK2Freq>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	4b0c      	ldr	r3, [pc, #48]	; (8001b6c <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>)
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	0b9b      	lsrs	r3, r3, #14
 8001b40:	f003 0303 	and.w	r3, r3, #3
 8001b44:	3301      	adds	r3, #1
 8001b46:	005b      	lsls	r3, r3, #1
 8001b48:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b4c:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8001b4e:	e004      	b.n	8001b5a <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
    }
    default:
    {
      break;
 8001b50:	bf00      	nop
 8001b52:	e002      	b.n	8001b5a <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
      break;
 8001b54:	bf00      	nop
 8001b56:	e000      	b.n	8001b5a <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
      break;
 8001b58:	bf00      	nop
    }
  }
  return (frequency);
 8001b5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	3734      	adds	r7, #52	; 0x34
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd90      	pop	{r4, r7, pc}
 8001b64:	0800a3ec 	.word	0x0800a3ec
 8001b68:	0800a3fc 	.word	0x0800a3fc
 8001b6c:	40021000 	.word	0x40021000
 8001b70:	007a1200 	.word	0x007a1200
 8001b74:	003d0900 	.word	0x003d0900
 8001b78:	aaaaaaab 	.word	0xaaaaaaab

08001b7c <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b084      	sub	sp, #16
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8001b84:	2300      	movs	r3, #0
 8001b86:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d101      	bne.n	8001b92 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	e084      	b.n	8001c9c <HAL_RTC_Init+0x120>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	7c5b      	ldrb	r3, [r3, #17]
 8001b96:	b2db      	uxtb	r3, r3
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d105      	bne.n	8001ba8 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8001ba2:	6878      	ldr	r0, [r7, #4]
 8001ba4:	f000 f880 	bl	8001ca8 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2202      	movs	r2, #2
 8001bac:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001bae:	6878      	ldr	r0, [r7, #4]
 8001bb0:	f000 f883 	bl	8001cba <HAL_RTC_WaitForSynchro>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d004      	beq.n	8001bc4 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2204      	movs	r2, #4
 8001bbe:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	e06b      	b.n	8001c9c <HAL_RTC_Init+0x120>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8001bc4:	6878      	ldr	r0, [r7, #4]
 8001bc6:	f000 f8a5 	bl	8001d14 <RTC_EnterInitMode>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d004      	beq.n	8001bda <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2204      	movs	r2, #4
 8001bd4:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e060      	b.n	8001c9c <HAL_RTC_Init+0x120>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	685a      	ldr	r2, [r3, #4]
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f022 0207 	bic.w	r2, r2, #7
 8001be8:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	689b      	ldr	r3, [r3, #8]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d005      	beq.n	8001bfe <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8001bf2:	4b2c      	ldr	r3, [pc, #176]	; (8001ca4 <HAL_RTC_Init+0x128>)
 8001bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf6:	4a2b      	ldr	r2, [pc, #172]	; (8001ca4 <HAL_RTC_Init+0x128>)
 8001bf8:	f023 0301 	bic.w	r3, r3, #1
 8001bfc:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8001bfe:	4b29      	ldr	r3, [pc, #164]	; (8001ca4 <HAL_RTC_Init+0x128>)
 8001c00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c02:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	689b      	ldr	r3, [r3, #8]
 8001c0a:	4926      	ldr	r1, [pc, #152]	; (8001ca4 <HAL_RTC_Init+0x128>)
 8001c0c:	4313      	orrs	r3, r2
 8001c0e:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c18:	d003      	beq.n	8001c22 <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	60fb      	str	r3, [r7, #12]
 8001c20:	e00e      	b.n	8001c40 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8001c22:	2001      	movs	r0, #1
 8001c24:	f7ff fec2 	bl	80019ac <HAL_RCCEx_GetPeriphCLKFreq>
 8001c28:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d104      	bne.n	8001c3a <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2204      	movs	r2, #4
 8001c34:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
 8001c38:	e030      	b.n	8001c9c <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	3b01      	subs	r3, #1
 8001c3e:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	689b      	ldr	r3, [r3, #8]
 8001c46:	f023 010f 	bic.w	r1, r3, #15
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	0c1a      	lsrs	r2, r3, #16
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	430a      	orrs	r2, r1
 8001c54:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	68db      	ldr	r3, [r3, #12]
 8001c5c:	0c1b      	lsrs	r3, r3, #16
 8001c5e:	041b      	lsls	r3, r3, #16
 8001c60:	68fa      	ldr	r2, [r7, #12]
 8001c62:	b291      	uxth	r1, r2
 8001c64:	687a      	ldr	r2, [r7, #4]
 8001c66:	6812      	ldr	r2, [r2, #0]
 8001c68:	430b      	orrs	r3, r1
 8001c6a:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8001c6c:	6878      	ldr	r0, [r7, #4]
 8001c6e:	f000 f879 	bl	8001d64 <RTC_ExitInitMode>
 8001c72:	4603      	mov	r3, r0
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d004      	beq.n	8001c82 <HAL_RTC_Init+0x106>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2204      	movs	r2, #4
 8001c7c:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e00c      	b.n	8001c9c <HAL_RTC_Init+0x120>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2200      	movs	r2, #0
 8001c86:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2201      	movs	r2, #1
 8001c92:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2201      	movs	r2, #1
 8001c98:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8001c9a:	2300      	movs	r3, #0
  }
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	3710      	adds	r7, #16
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}
 8001ca4:	40006c00 	.word	0x40006c00

08001ca8 <HAL_RTC_MspInit>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTC_MspInit(RTC_HandleTypeDef *hrtc)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b083      	sub	sp, #12
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_MspInit could be implemented in the user file
   */
}
 8001cb0:	bf00      	nop
 8001cb2:	370c      	adds	r7, #12
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bc80      	pop	{r7}
 8001cb8:	4770      	bx	lr

08001cba <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8001cba:	b580      	push	{r7, lr}
 8001cbc:	b084      	sub	sp, #16
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d101      	bne.n	8001cd0 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	e01d      	b.n	8001d0c <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	685a      	ldr	r2, [r3, #4]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f022 0208 	bic.w	r2, r2, #8
 8001cde:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8001ce0:	f7fe fee8 	bl	8000ab4 <HAL_GetTick>
 8001ce4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8001ce6:	e009      	b.n	8001cfc <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8001ce8:	f7fe fee4 	bl	8000ab4 <HAL_GetTick>
 8001cec:	4602      	mov	r2, r0
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	1ad3      	subs	r3, r2, r3
 8001cf2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001cf6:	d901      	bls.n	8001cfc <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8001cf8:	2303      	movs	r3, #3
 8001cfa:	e007      	b.n	8001d0c <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	f003 0308 	and.w	r3, r3, #8
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d0ee      	beq.n	8001ce8 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8001d0a:	2300      	movs	r3, #0
}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	3710      	adds	r7, #16
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}

08001d14 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b084      	sub	sp, #16
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8001d20:	f7fe fec8 	bl	8000ab4 <HAL_GetTick>
 8001d24:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8001d26:	e009      	b.n	8001d3c <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8001d28:	f7fe fec4 	bl	8000ab4 <HAL_GetTick>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	1ad3      	subs	r3, r2, r3
 8001d32:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001d36:	d901      	bls.n	8001d3c <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8001d38:	2303      	movs	r3, #3
 8001d3a:	e00f      	b.n	8001d5c <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	f003 0320 	and.w	r3, r3, #32
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d0ee      	beq.n	8001d28 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	685a      	ldr	r2, [r3, #4]
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f042 0210 	orr.w	r2, r2, #16
 8001d58:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8001d5a:	2300      	movs	r3, #0
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	3710      	adds	r7, #16
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}

08001d64 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b084      	sub	sp, #16
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	685a      	ldr	r2, [r3, #4]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f022 0210 	bic.w	r2, r2, #16
 8001d7e:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8001d80:	f7fe fe98 	bl	8000ab4 <HAL_GetTick>
 8001d84:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8001d86:	e009      	b.n	8001d9c <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8001d88:	f7fe fe94 	bl	8000ab4 <HAL_GetTick>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	1ad3      	subs	r3, r2, r3
 8001d92:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001d96:	d901      	bls.n	8001d9c <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8001d98:	2303      	movs	r3, #3
 8001d9a:	e007      	b.n	8001dac <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	f003 0320 	and.w	r3, r3, #32
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d0ee      	beq.n	8001d88 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8001daa:	2300      	movs	r3, #0
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	3710      	adds	r7, #16
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}

08001db4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b082      	sub	sp, #8
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d101      	bne.n	8001dc6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e03f      	b.n	8001e46 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001dcc:	b2db      	uxtb	r3, r3
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d106      	bne.n	8001de0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001dda:	6878      	ldr	r0, [r7, #4]
 8001ddc:	f000 f837 	bl	8001e4e <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2224      	movs	r2, #36	; 0x24
 8001de4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	68da      	ldr	r2, [r3, #12]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001df6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001df8:	6878      	ldr	r0, [r7, #4]
 8001dfa:	f000 f831 	bl	8001e60 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	691a      	ldr	r2, [r3, #16]
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001e0c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	695a      	ldr	r2, [r3, #20]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001e1c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	68da      	ldr	r2, [r3, #12]
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001e2c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2200      	movs	r2, #0
 8001e32:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2220      	movs	r2, #32
 8001e38:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2220      	movs	r2, #32
 8001e40:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001e44:	2300      	movs	r3, #0
}
 8001e46:	4618      	mov	r0, r3
 8001e48:	3708      	adds	r7, #8
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}

08001e4e <HAL_UART_MspInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8001e4e:	b480      	push	{r7}
 8001e50:	b083      	sub	sp, #12
 8001e52:	af00      	add	r7, sp, #0
 8001e54:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_MspInit could be implemented in the user file
   */
}
 8001e56:	bf00      	nop
 8001e58:	370c      	adds	r7, #12
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bc80      	pop	{r7}
 8001e5e:	4770      	bx	lr

08001e60 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b084      	sub	sp, #16
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	691b      	ldr	r3, [r3, #16]
 8001e6e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	68da      	ldr	r2, [r3, #12]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	430a      	orrs	r2, r1
 8001e7c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	689a      	ldr	r2, [r3, #8]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	691b      	ldr	r3, [r3, #16]
 8001e86:	431a      	orrs	r2, r3
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	695b      	ldr	r3, [r3, #20]
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	68db      	ldr	r3, [r3, #12]
 8001e96:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001e9a:	f023 030c 	bic.w	r3, r3, #12
 8001e9e:	687a      	ldr	r2, [r7, #4]
 8001ea0:	6812      	ldr	r2, [r2, #0]
 8001ea2:	68f9      	ldr	r1, [r7, #12]
 8001ea4:	430b      	orrs	r3, r1
 8001ea6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	695b      	ldr	r3, [r3, #20]
 8001eae:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	699a      	ldr	r2, [r3, #24]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	430a      	orrs	r2, r1
 8001ebc:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4a52      	ldr	r2, [pc, #328]	; (800200c <UART_SetConfig+0x1ac>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d14e      	bne.n	8001f66 <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001ec8:	f7ff fc88 	bl	80017dc <HAL_RCC_GetPCLK2Freq>
 8001ecc:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001ece:	68ba      	ldr	r2, [r7, #8]
 8001ed0:	4613      	mov	r3, r2
 8001ed2:	009b      	lsls	r3, r3, #2
 8001ed4:	4413      	add	r3, r2
 8001ed6:	009a      	lsls	r2, r3, #2
 8001ed8:	441a      	add	r2, r3
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	009b      	lsls	r3, r3, #2
 8001ee0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ee4:	4a4a      	ldr	r2, [pc, #296]	; (8002010 <UART_SetConfig+0x1b0>)
 8001ee6:	fba2 2303 	umull	r2, r3, r2, r3
 8001eea:	095b      	lsrs	r3, r3, #5
 8001eec:	0119      	lsls	r1, r3, #4
 8001eee:	68ba      	ldr	r2, [r7, #8]
 8001ef0:	4613      	mov	r3, r2
 8001ef2:	009b      	lsls	r3, r3, #2
 8001ef4:	4413      	add	r3, r2
 8001ef6:	009a      	lsls	r2, r3, #2
 8001ef8:	441a      	add	r2, r3
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	009b      	lsls	r3, r3, #2
 8001f00:	fbb2 f2f3 	udiv	r2, r2, r3
 8001f04:	4b42      	ldr	r3, [pc, #264]	; (8002010 <UART_SetConfig+0x1b0>)
 8001f06:	fba3 0302 	umull	r0, r3, r3, r2
 8001f0a:	095b      	lsrs	r3, r3, #5
 8001f0c:	2064      	movs	r0, #100	; 0x64
 8001f0e:	fb00 f303 	mul.w	r3, r0, r3
 8001f12:	1ad3      	subs	r3, r2, r3
 8001f14:	011b      	lsls	r3, r3, #4
 8001f16:	3332      	adds	r3, #50	; 0x32
 8001f18:	4a3d      	ldr	r2, [pc, #244]	; (8002010 <UART_SetConfig+0x1b0>)
 8001f1a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f1e:	095b      	lsrs	r3, r3, #5
 8001f20:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f24:	4419      	add	r1, r3
 8001f26:	68ba      	ldr	r2, [r7, #8]
 8001f28:	4613      	mov	r3, r2
 8001f2a:	009b      	lsls	r3, r3, #2
 8001f2c:	4413      	add	r3, r2
 8001f2e:	009a      	lsls	r2, r3, #2
 8001f30:	441a      	add	r2, r3
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	009b      	lsls	r3, r3, #2
 8001f38:	fbb2 f2f3 	udiv	r2, r2, r3
 8001f3c:	4b34      	ldr	r3, [pc, #208]	; (8002010 <UART_SetConfig+0x1b0>)
 8001f3e:	fba3 0302 	umull	r0, r3, r3, r2
 8001f42:	095b      	lsrs	r3, r3, #5
 8001f44:	2064      	movs	r0, #100	; 0x64
 8001f46:	fb00 f303 	mul.w	r3, r0, r3
 8001f4a:	1ad3      	subs	r3, r2, r3
 8001f4c:	011b      	lsls	r3, r3, #4
 8001f4e:	3332      	adds	r3, #50	; 0x32
 8001f50:	4a2f      	ldr	r2, [pc, #188]	; (8002010 <UART_SetConfig+0x1b0>)
 8001f52:	fba2 2303 	umull	r2, r3, r2, r3
 8001f56:	095b      	lsrs	r3, r3, #5
 8001f58:	f003 020f 	and.w	r2, r3, #15
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	440a      	add	r2, r1
 8001f62:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8001f64:	e04d      	b.n	8002002 <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8001f66:	f7ff fc25 	bl	80017b4 <HAL_RCC_GetPCLK1Freq>
 8001f6a:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001f6c:	68ba      	ldr	r2, [r7, #8]
 8001f6e:	4613      	mov	r3, r2
 8001f70:	009b      	lsls	r3, r3, #2
 8001f72:	4413      	add	r3, r2
 8001f74:	009a      	lsls	r2, r3, #2
 8001f76:	441a      	add	r2, r3
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	009b      	lsls	r3, r3, #2
 8001f7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f82:	4a23      	ldr	r2, [pc, #140]	; (8002010 <UART_SetConfig+0x1b0>)
 8001f84:	fba2 2303 	umull	r2, r3, r2, r3
 8001f88:	095b      	lsrs	r3, r3, #5
 8001f8a:	0119      	lsls	r1, r3, #4
 8001f8c:	68ba      	ldr	r2, [r7, #8]
 8001f8e:	4613      	mov	r3, r2
 8001f90:	009b      	lsls	r3, r3, #2
 8001f92:	4413      	add	r3, r2
 8001f94:	009a      	lsls	r2, r3, #2
 8001f96:	441a      	add	r2, r3
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	009b      	lsls	r3, r3, #2
 8001f9e:	fbb2 f2f3 	udiv	r2, r2, r3
 8001fa2:	4b1b      	ldr	r3, [pc, #108]	; (8002010 <UART_SetConfig+0x1b0>)
 8001fa4:	fba3 0302 	umull	r0, r3, r3, r2
 8001fa8:	095b      	lsrs	r3, r3, #5
 8001faa:	2064      	movs	r0, #100	; 0x64
 8001fac:	fb00 f303 	mul.w	r3, r0, r3
 8001fb0:	1ad3      	subs	r3, r2, r3
 8001fb2:	011b      	lsls	r3, r3, #4
 8001fb4:	3332      	adds	r3, #50	; 0x32
 8001fb6:	4a16      	ldr	r2, [pc, #88]	; (8002010 <UART_SetConfig+0x1b0>)
 8001fb8:	fba2 2303 	umull	r2, r3, r2, r3
 8001fbc:	095b      	lsrs	r3, r3, #5
 8001fbe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001fc2:	4419      	add	r1, r3
 8001fc4:	68ba      	ldr	r2, [r7, #8]
 8001fc6:	4613      	mov	r3, r2
 8001fc8:	009b      	lsls	r3, r3, #2
 8001fca:	4413      	add	r3, r2
 8001fcc:	009a      	lsls	r2, r3, #2
 8001fce:	441a      	add	r2, r3
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	009b      	lsls	r3, r3, #2
 8001fd6:	fbb2 f2f3 	udiv	r2, r2, r3
 8001fda:	4b0d      	ldr	r3, [pc, #52]	; (8002010 <UART_SetConfig+0x1b0>)
 8001fdc:	fba3 0302 	umull	r0, r3, r3, r2
 8001fe0:	095b      	lsrs	r3, r3, #5
 8001fe2:	2064      	movs	r0, #100	; 0x64
 8001fe4:	fb00 f303 	mul.w	r3, r0, r3
 8001fe8:	1ad3      	subs	r3, r2, r3
 8001fea:	011b      	lsls	r3, r3, #4
 8001fec:	3332      	adds	r3, #50	; 0x32
 8001fee:	4a08      	ldr	r2, [pc, #32]	; (8002010 <UART_SetConfig+0x1b0>)
 8001ff0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ff4:	095b      	lsrs	r3, r3, #5
 8001ff6:	f003 020f 	and.w	r2, r3, #15
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	440a      	add	r2, r1
 8002000:	609a      	str	r2, [r3, #8]
}
 8002002:	bf00      	nop
 8002004:	3710      	adds	r7, #16
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	40013800 	.word	0x40013800
 8002010:	51eb851f 	.word	0x51eb851f

08002014 <draw_my_plane>:

void draw_reversed_right_triangle(int x, int y, int width, int height);
	
void draw_reversed_trapezoid(int x, int y, int upper_width, int lower_width, int height);
	
void draw_my_plane(int x, int y){
 8002014:	b580      	push	{r7, lr}
 8002016:	b084      	sub	sp, #16
 8002018:	af02      	add	r7, sp, #8
 800201a:	6078      	str	r0, [r7, #4]
 800201c:	6039      	str	r1, [r7, #0]
	draw_equal_triangle(x, y - 10, 6, 4);
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	f1a3 010a 	sub.w	r1, r3, #10
 8002024:	2304      	movs	r3, #4
 8002026:	2206      	movs	r2, #6
 8002028:	6878      	ldr	r0, [r7, #4]
 800202a:	f000 fbd7 	bl	80027dc <draw_equal_triangle>
	draw_rectangle(x - 2, y - 10, 4, 20);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	1e98      	subs	r0, r3, #2
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	f1a3 010a 	sub.w	r1, r3, #10
 8002038:	2314      	movs	r3, #20
 800203a:	2204      	movs	r2, #4
 800203c:	f000 fc08 	bl	8002850 <draw_rectangle>
	draw_left_triangle(x - 2, y + 2, 12, 9);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	1e98      	subs	r0, r3, #2
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	1c99      	adds	r1, r3, #2
 8002048:	2309      	movs	r3, #9
 800204a:	220c      	movs	r2, #12
 800204c:	f000 fc33 	bl	80028b6 <draw_left_triangle>
	draw_right_triangle(x + 2, y + 2, 12, 9);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	1c98      	adds	r0, r3, #2
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	1c99      	adds	r1, r3, #2
 8002058:	2309      	movs	r3, #9
 800205a:	220c      	movs	r2, #12
 800205c:	f000 fc64 	bl	8002928 <draw_right_triangle>
	draw_trapezoid(x, y + 10, 6, 14, 4);
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	f103 010a 	add.w	r1, r3, #10
 8002066:	2304      	movs	r3, #4
 8002068:	9300      	str	r3, [sp, #0]
 800206a:	230e      	movs	r3, #14
 800206c:	2206      	movs	r2, #6
 800206e:	6878      	ldr	r0, [r7, #4]
 8002070:	f000 fc93 	bl	800299a <draw_trapezoid>
	
}
 8002074:	bf00      	nop
 8002076:	3708      	adds	r7, #8
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}

0800207c <draw_enemy_plane>:

void draw_enemy_plane(int x ,int y){
 800207c:	b580      	push	{r7, lr}
 800207e:	b084      	sub	sp, #16
 8002080:	af02      	add	r7, sp, #8
 8002082:	6078      	str	r0, [r7, #4]
 8002084:	6039      	str	r1, [r7, #0]
	draw_reversed_equal_triangle(x, y + 10, 6, 4);
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	f103 010a 	add.w	r1, r3, #10
 800208c:	2304      	movs	r3, #4
 800208e:	2206      	movs	r2, #6
 8002090:	6878      	ldr	r0, [r7, #4]
 8002092:	f000 fcd9 	bl	8002a48 <draw_reversed_equal_triangle>
	draw_rectangle(x - 2, y - 10, 4, 20);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	1e98      	subs	r0, r3, #2
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	f1a3 010a 	sub.w	r1, r3, #10
 80020a0:	2314      	movs	r3, #20
 80020a2:	2204      	movs	r2, #4
 80020a4:	f000 fbd4 	bl	8002850 <draw_rectangle>
	draw_reversed_left_triangle(x + 2, y- 2, 12, 9);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	1c98      	adds	r0, r3, #2
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	1e99      	subs	r1, r3, #2
 80020b0:	2309      	movs	r3, #9
 80020b2:	220c      	movs	r2, #12
 80020b4:	f000 fd0c 	bl	8002ad0 <draw_reversed_left_triangle>
	draw_reversed_right_triangle(x - 2, y - 2, 12, 9);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	1e98      	subs	r0, r3, #2
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	1e99      	subs	r1, r3, #2
 80020c0:	2309      	movs	r3, #9
 80020c2:	220c      	movs	r2, #12
 80020c4:	f000 fd3d 	bl	8002b42 <draw_reversed_right_triangle>
	draw_reversed_trapezoid(x, y - 10, 6, 14, 4);
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	f1a3 010a 	sub.w	r1, r3, #10
 80020ce:	2304      	movs	r3, #4
 80020d0:	9300      	str	r3, [sp, #0]
 80020d2:	230e      	movs	r3, #14
 80020d4:	2206      	movs	r2, #6
 80020d6:	6878      	ldr	r0, [r7, #4]
 80020d8:	f000 fd6c 	bl	8002bb4 <draw_reversed_trapezoid>
}
 80020dc:	bf00      	nop
 80020de:	3708      	adds	r7, #8
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd80      	pop	{r7, pc}

080020e4 <draw_boss>:

//���˳�ʼ����0��0

void draw_boss(int x, int y){
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b0ae      	sub	sp, #184	; 0xb8
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
 80020ec:	6039      	str	r1, [r7, #0]
	int x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6, x7, y7, x8, y8, x9, y9, x10, y10,
		x11, y11, x12, y12, x13, y13, x14, y14, x15, y15, x16, y16, x17, y17, x18, y18, x19, y19,
	x20, y20, x21, y21, x22, y22;
	
	x1 = x - 15;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	3b0f      	subs	r3, #15
 80020f2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	y1 = y + 40;
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	3328      	adds	r3, #40	; 0x28
 80020fa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	
	x2 = x + 15;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	330f      	adds	r3, #15
 8002102:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	y2 = y + 40;
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	3328      	adds	r3, #40	; 0x28
 800210a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	
	x3 = x - 20;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	3b14      	subs	r3, #20
 8002112:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	y3 = y + 20;
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	3314      	adds	r3, #20
 800211a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	
	x4 = x + 20;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	3314      	adds	r3, #20
 8002122:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	y4 = y + 20;
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	3314      	adds	r3, #20
 800212a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	
	x5 = x3;
 800212e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002132:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	y5 = y3 - 5;
 8002136:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800213a:	3b05      	subs	r3, #5
 800213c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	
	x6 = x4;
 8002140:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002144:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	y6 = y4 - 5;
 8002148:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800214c:	3b05      	subs	r3, #5
 800214e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	
	x7 = x5;
 8002152:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002156:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	y7 = y5 - 10;
 800215a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800215e:	3b0a      	subs	r3, #10
 8002160:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	
	x8 = x6;
 8002164:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002168:	67fb      	str	r3, [r7, #124]	; 0x7c
	y8 = y6 - 10;
 800216a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800216e:	3b0a      	subs	r3, #10
 8002170:	67bb      	str	r3, [r7, #120]	; 0x78
	
	x9 = x7;
 8002172:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002176:	677b      	str	r3, [r7, #116]	; 0x74
	y9 = y7 - 30;
 8002178:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800217c:	3b1e      	subs	r3, #30
 800217e:	673b      	str	r3, [r7, #112]	; 0x70
	
	x10 = x8;
 8002180:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002182:	66fb      	str	r3, [r7, #108]	; 0x6c
	y10 = y8 - 30;
 8002184:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002186:	3b1e      	subs	r3, #30
 8002188:	66bb      	str	r3, [r7, #104]	; 0x68
	
	x11 = x9;
 800218a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800218c:	667b      	str	r3, [r7, #100]	; 0x64
	y11 = y9 - 10;
 800218e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002190:	3b0a      	subs	r3, #10
 8002192:	663b      	str	r3, [r7, #96]	; 0x60
	
	x12 = x10;
 8002194:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002196:	65fb      	str	r3, [r7, #92]	; 0x5c
	y12 = y10 - 10;
 8002198:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800219a:	3b0a      	subs	r3, #10
 800219c:	65bb      	str	r3, [r7, #88]	; 0x58
	
	x13 = x11;
 800219e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80021a0:	657b      	str	r3, [r7, #84]	; 0x54
	y13 = y11 - 5;
 80021a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80021a4:	3b05      	subs	r3, #5
 80021a6:	653b      	str	r3, [r7, #80]	; 0x50
	
	x14 = x12;
 80021a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80021aa:	64fb      	str	r3, [r7, #76]	; 0x4c
	y14 = y12 - 5;
 80021ac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80021ae:	3b05      	subs	r3, #5
 80021b0:	64bb      	str	r3, [r7, #72]	; 0x48
	
	
	x15 = x5 - 10;
 80021b2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80021b6:	3b0a      	subs	r3, #10
 80021b8:	647b      	str	r3, [r7, #68]	; 0x44
	y15 = y5;
 80021ba:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80021be:	643b      	str	r3, [r7, #64]	; 0x40
	
	x16 = x6 + 10;
 80021c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80021c4:	330a      	adds	r3, #10
 80021c6:	63fb      	str	r3, [r7, #60]	; 0x3c
	y16 = y6;
 80021c8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80021cc:	63bb      	str	r3, [r7, #56]	; 0x38
	
	x17 = x7 - 10;
 80021ce:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80021d2:	3b0a      	subs	r3, #10
 80021d4:	637b      	str	r3, [r7, #52]	; 0x34
	y17 = y7;
 80021d6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80021da:	633b      	str	r3, [r7, #48]	; 0x30
	
	x18 = x8 +10;
 80021dc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80021de:	330a      	adds	r3, #10
 80021e0:	62fb      	str	r3, [r7, #44]	; 0x2c
	y18 = y8;
 80021e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80021e4:	62bb      	str	r3, [r7, #40]	; 0x28
	
	x19 = x9 - 10;
 80021e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80021e8:	3b0a      	subs	r3, #10
 80021ea:	627b      	str	r3, [r7, #36]	; 0x24
	y19 = y9;
 80021ec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80021ee:	623b      	str	r3, [r7, #32]
	
	x20 = x10 + 10;
 80021f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021f2:	330a      	adds	r3, #10
 80021f4:	61fb      	str	r3, [r7, #28]
	y20 = y10;
 80021f6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80021f8:	61bb      	str	r3, [r7, #24]
	
	x21 = x11 - 10;
 80021fa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80021fc:	3b0a      	subs	r3, #10
 80021fe:	617b      	str	r3, [r7, #20]
	y21 = y11;
 8002200:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002202:	613b      	str	r3, [r7, #16]
	
	x22 = x12 + 10;
 8002204:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002206:	330a      	adds	r3, #10
 8002208:	60fb      	str	r3, [r7, #12]
	y22 = y12;
 800220a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800220c:	60bb      	str	r3, [r7, #8]
	
	LCD_DrawLine(x1, y1, x2, y2);
 800220e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002212:	b298      	uxth	r0, r3
 8002214:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002218:	b299      	uxth	r1, r3
 800221a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800221e:	b29a      	uxth	r2, r3
 8002220:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002224:	b29b      	uxth	r3, r3
 8002226:	f006 faaf 	bl	8008788 <LCD_DrawLine>
	LCD_DrawLine(x1, y1, x3, y3);
 800222a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800222e:	b298      	uxth	r0, r3
 8002230:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002234:	b299      	uxth	r1, r3
 8002236:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800223a:	b29a      	uxth	r2, r3
 800223c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002240:	b29b      	uxth	r3, r3
 8002242:	f006 faa1 	bl	8008788 <LCD_DrawLine>
	LCD_DrawLine(x2, y2, x4, y4);
 8002246:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800224a:	b298      	uxth	r0, r3
 800224c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002250:	b299      	uxth	r1, r3
 8002252:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002256:	b29a      	uxth	r2, r3
 8002258:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800225c:	b29b      	uxth	r3, r3
 800225e:	f006 fa93 	bl	8008788 <LCD_DrawLine>
	
	LCD_DrawLine(x3, y3, x13, y13);
 8002262:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002266:	b298      	uxth	r0, r3
 8002268:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800226c:	b299      	uxth	r1, r3
 800226e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002270:	b29a      	uxth	r2, r3
 8002272:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002274:	b29b      	uxth	r3, r3
 8002276:	f006 fa87 	bl	8008788 <LCD_DrawLine>
	LCD_DrawLine(x4, y4, x14, y14);
 800227a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800227e:	b298      	uxth	r0, r3
 8002280:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002284:	b299      	uxth	r1, r3
 8002286:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002288:	b29a      	uxth	r2, r3
 800228a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800228c:	b29b      	uxth	r3, r3
 800228e:	f006 fa7b 	bl	8008788 <LCD_DrawLine>
	LCD_DrawLine(x13, y13, x14, y14);
 8002292:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002294:	b298      	uxth	r0, r3
 8002296:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002298:	b299      	uxth	r1, r3
 800229a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800229c:	b29a      	uxth	r2, r3
 800229e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80022a0:	b29b      	uxth	r3, r3
 80022a2:	f006 fa71 	bl	8008788 <LCD_DrawLine>
	
	LCD_DrawLine(x5, y5, x15, y15);
 80022a6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80022aa:	b298      	uxth	r0, r3
 80022ac:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80022b0:	b299      	uxth	r1, r3
 80022b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80022b4:	b29a      	uxth	r2, r3
 80022b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80022b8:	b29b      	uxth	r3, r3
 80022ba:	f006 fa65 	bl	8008788 <LCD_DrawLine>
	LCD_DrawLine(x7, y7, x17, y17);
 80022be:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80022c2:	b298      	uxth	r0, r3
 80022c4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80022c8:	b299      	uxth	r1, r3
 80022ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022cc:	b29a      	uxth	r2, r3
 80022ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022d0:	b29b      	uxth	r3, r3
 80022d2:	f006 fa59 	bl	8008788 <LCD_DrawLine>
	
	LCD_DrawLine(x6, y6, x16, y16);
 80022d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80022da:	b298      	uxth	r0, r3
 80022dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80022e0:	b299      	uxth	r1, r3
 80022e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022e4:	b29a      	uxth	r2, r3
 80022e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022e8:	b29b      	uxth	r3, r3
 80022ea:	f006 fa4d 	bl	8008788 <LCD_DrawLine>
	LCD_DrawLine(x8, y8, x18, y18);
 80022ee:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80022f0:	b298      	uxth	r0, r3
 80022f2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80022f4:	b299      	uxth	r1, r3
 80022f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022f8:	b29a      	uxth	r2, r3
 80022fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022fc:	b29b      	uxth	r3, r3
 80022fe:	f006 fa43 	bl	8008788 <LCD_DrawLine>
	
	LCD_DrawLine(x9, y9, x19, y19);
 8002302:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002304:	b298      	uxth	r0, r3
 8002306:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002308:	b299      	uxth	r1, r3
 800230a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800230c:	b29a      	uxth	r2, r3
 800230e:	6a3b      	ldr	r3, [r7, #32]
 8002310:	b29b      	uxth	r3, r3
 8002312:	f006 fa39 	bl	8008788 <LCD_DrawLine>
	LCD_DrawLine(x11, y11, x21, y21);
 8002316:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002318:	b298      	uxth	r0, r3
 800231a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800231c:	b299      	uxth	r1, r3
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	b29a      	uxth	r2, r3
 8002322:	693b      	ldr	r3, [r7, #16]
 8002324:	b29b      	uxth	r3, r3
 8002326:	f006 fa2f 	bl	8008788 <LCD_DrawLine>
	
	LCD_DrawLine(x10, y10, x20, y20);
 800232a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800232c:	b298      	uxth	r0, r3
 800232e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002330:	b299      	uxth	r1, r3
 8002332:	69fb      	ldr	r3, [r7, #28]
 8002334:	b29a      	uxth	r2, r3
 8002336:	69bb      	ldr	r3, [r7, #24]
 8002338:	b29b      	uxth	r3, r3
 800233a:	f006 fa25 	bl	8008788 <LCD_DrawLine>
	LCD_DrawLine(x12, y12, x22, y22);
 800233e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002340:	b298      	uxth	r0, r3
 8002342:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002344:	b299      	uxth	r1, r3
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	b29a      	uxth	r2, r3
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	b29b      	uxth	r3, r3
 800234e:	f006 fa1b 	bl	8008788 <LCD_DrawLine>
	
	LCD_DrawLine(x15, y15 + 10, x17, y17 - 10);
 8002352:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002354:	b298      	uxth	r0, r3
 8002356:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002358:	b29b      	uxth	r3, r3
 800235a:	330a      	adds	r3, #10
 800235c:	b299      	uxth	r1, r3
 800235e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002360:	b29a      	uxth	r2, r3
 8002362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002364:	b29b      	uxth	r3, r3
 8002366:	3b0a      	subs	r3, #10
 8002368:	b29b      	uxth	r3, r3
 800236a:	f006 fa0d 	bl	8008788 <LCD_DrawLine>
	LCD_DrawLine(x15, y15 + 10, x15 - 10, y15 + 10);
 800236e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002370:	b298      	uxth	r0, r3
 8002372:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002374:	b29b      	uxth	r3, r3
 8002376:	330a      	adds	r3, #10
 8002378:	b299      	uxth	r1, r3
 800237a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800237c:	b29b      	uxth	r3, r3
 800237e:	3b0a      	subs	r3, #10
 8002380:	b29a      	uxth	r2, r3
 8002382:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002384:	b29b      	uxth	r3, r3
 8002386:	330a      	adds	r3, #10
 8002388:	b29b      	uxth	r3, r3
 800238a:	f006 f9fd 	bl	8008788 <LCD_DrawLine>
	LCD_DrawLine(x17, y17 - 10, x17 - 10, y17 - 10);
 800238e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002390:	b298      	uxth	r0, r3
 8002392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002394:	b29b      	uxth	r3, r3
 8002396:	3b0a      	subs	r3, #10
 8002398:	b299      	uxth	r1, r3
 800239a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800239c:	b29b      	uxth	r3, r3
 800239e:	3b0a      	subs	r3, #10
 80023a0:	b29a      	uxth	r2, r3
 80023a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023a4:	b29b      	uxth	r3, r3
 80023a6:	3b0a      	subs	r3, #10
 80023a8:	b29b      	uxth	r3, r3
 80023aa:	f006 f9ed 	bl	8008788 <LCD_DrawLine>
	LCD_DrawLine(x15 - 10, y15 + 10, x17 - 10, y17 - 10);
 80023ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80023b0:	b29b      	uxth	r3, r3
 80023b2:	3b0a      	subs	r3, #10
 80023b4:	b298      	uxth	r0, r3
 80023b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80023b8:	b29b      	uxth	r3, r3
 80023ba:	330a      	adds	r3, #10
 80023bc:	b299      	uxth	r1, r3
 80023be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023c0:	b29b      	uxth	r3, r3
 80023c2:	3b0a      	subs	r3, #10
 80023c4:	b29a      	uxth	r2, r3
 80023c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023c8:	b29b      	uxth	r3, r3
 80023ca:	3b0a      	subs	r3, #10
 80023cc:	b29b      	uxth	r3, r3
 80023ce:	f006 f9db 	bl	8008788 <LCD_DrawLine>
	
	LCD_DrawLine(x19, y19 + 10, x21, y21 - 5);
 80023d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d4:	b298      	uxth	r0, r3
 80023d6:	6a3b      	ldr	r3, [r7, #32]
 80023d8:	b29b      	uxth	r3, r3
 80023da:	330a      	adds	r3, #10
 80023dc:	b299      	uxth	r1, r3
 80023de:	697b      	ldr	r3, [r7, #20]
 80023e0:	b29a      	uxth	r2, r3
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	b29b      	uxth	r3, r3
 80023e6:	3b05      	subs	r3, #5
 80023e8:	b29b      	uxth	r3, r3
 80023ea:	f006 f9cd 	bl	8008788 <LCD_DrawLine>
	LCD_DrawLine(x19, y19 + 10, x19 - 10, y19 + 10);
 80023ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f0:	b298      	uxth	r0, r3
 80023f2:	6a3b      	ldr	r3, [r7, #32]
 80023f4:	b29b      	uxth	r3, r3
 80023f6:	330a      	adds	r3, #10
 80023f8:	b299      	uxth	r1, r3
 80023fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023fc:	b29b      	uxth	r3, r3
 80023fe:	3b0a      	subs	r3, #10
 8002400:	b29a      	uxth	r2, r3
 8002402:	6a3b      	ldr	r3, [r7, #32]
 8002404:	b29b      	uxth	r3, r3
 8002406:	330a      	adds	r3, #10
 8002408:	b29b      	uxth	r3, r3
 800240a:	f006 f9bd 	bl	8008788 <LCD_DrawLine>
	LCD_DrawLine(x21, y21 - 5, x21 - 10, y21 - 5);
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	b298      	uxth	r0, r3
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	b29b      	uxth	r3, r3
 8002416:	3b05      	subs	r3, #5
 8002418:	b299      	uxth	r1, r3
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	b29b      	uxth	r3, r3
 800241e:	3b0a      	subs	r3, #10
 8002420:	b29a      	uxth	r2, r3
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	b29b      	uxth	r3, r3
 8002426:	3b05      	subs	r3, #5
 8002428:	b29b      	uxth	r3, r3
 800242a:	f006 f9ad 	bl	8008788 <LCD_DrawLine>
	LCD_DrawLine(x19 - 10, y19 + 10, x21 - 10, y21 - 5);
 800242e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002430:	b29b      	uxth	r3, r3
 8002432:	3b0a      	subs	r3, #10
 8002434:	b298      	uxth	r0, r3
 8002436:	6a3b      	ldr	r3, [r7, #32]
 8002438:	b29b      	uxth	r3, r3
 800243a:	330a      	adds	r3, #10
 800243c:	b299      	uxth	r1, r3
 800243e:	697b      	ldr	r3, [r7, #20]
 8002440:	b29b      	uxth	r3, r3
 8002442:	3b0a      	subs	r3, #10
 8002444:	b29a      	uxth	r2, r3
 8002446:	693b      	ldr	r3, [r7, #16]
 8002448:	b29b      	uxth	r3, r3
 800244a:	3b05      	subs	r3, #5
 800244c:	b29b      	uxth	r3, r3
 800244e:	f006 f99b 	bl	8008788 <LCD_DrawLine>
	
	LCD_DrawLine(x16, y16 + 10, x18, y18 - 10);
 8002452:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002454:	b298      	uxth	r0, r3
 8002456:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002458:	b29b      	uxth	r3, r3
 800245a:	330a      	adds	r3, #10
 800245c:	b299      	uxth	r1, r3
 800245e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002460:	b29a      	uxth	r2, r3
 8002462:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002464:	b29b      	uxth	r3, r3
 8002466:	3b0a      	subs	r3, #10
 8002468:	b29b      	uxth	r3, r3
 800246a:	f006 f98d 	bl	8008788 <LCD_DrawLine>
	LCD_DrawLine(x16, y16 + 10, x16 + 10, y16 + 10);
 800246e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002470:	b298      	uxth	r0, r3
 8002472:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002474:	b29b      	uxth	r3, r3
 8002476:	330a      	adds	r3, #10
 8002478:	b299      	uxth	r1, r3
 800247a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800247c:	b29b      	uxth	r3, r3
 800247e:	330a      	adds	r3, #10
 8002480:	b29a      	uxth	r2, r3
 8002482:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002484:	b29b      	uxth	r3, r3
 8002486:	330a      	adds	r3, #10
 8002488:	b29b      	uxth	r3, r3
 800248a:	f006 f97d 	bl	8008788 <LCD_DrawLine>
	LCD_DrawLine(x18, y18 - 10, x18 + 10, y18 - 10);
 800248e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002490:	b298      	uxth	r0, r3
 8002492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002494:	b29b      	uxth	r3, r3
 8002496:	3b0a      	subs	r3, #10
 8002498:	b299      	uxth	r1, r3
 800249a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800249c:	b29b      	uxth	r3, r3
 800249e:	330a      	adds	r3, #10
 80024a0:	b29a      	uxth	r2, r3
 80024a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024a4:	b29b      	uxth	r3, r3
 80024a6:	3b0a      	subs	r3, #10
 80024a8:	b29b      	uxth	r3, r3
 80024aa:	f006 f96d 	bl	8008788 <LCD_DrawLine>
	LCD_DrawLine(x16 + 10, y16 + 10, x18 + 10, y18 - 10);
 80024ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024b0:	b29b      	uxth	r3, r3
 80024b2:	330a      	adds	r3, #10
 80024b4:	b298      	uxth	r0, r3
 80024b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024b8:	b29b      	uxth	r3, r3
 80024ba:	330a      	adds	r3, #10
 80024bc:	b299      	uxth	r1, r3
 80024be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024c0:	b29b      	uxth	r3, r3
 80024c2:	330a      	adds	r3, #10
 80024c4:	b29a      	uxth	r2, r3
 80024c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024c8:	b29b      	uxth	r3, r3
 80024ca:	3b0a      	subs	r3, #10
 80024cc:	b29b      	uxth	r3, r3
 80024ce:	f006 f95b 	bl	8008788 <LCD_DrawLine>
	
	LCD_DrawLine(x20, y20 + 10, x22, y22 - 5);
 80024d2:	69fb      	ldr	r3, [r7, #28]
 80024d4:	b298      	uxth	r0, r3
 80024d6:	69bb      	ldr	r3, [r7, #24]
 80024d8:	b29b      	uxth	r3, r3
 80024da:	330a      	adds	r3, #10
 80024dc:	b299      	uxth	r1, r3
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	b29a      	uxth	r2, r3
 80024e2:	68bb      	ldr	r3, [r7, #8]
 80024e4:	b29b      	uxth	r3, r3
 80024e6:	3b05      	subs	r3, #5
 80024e8:	b29b      	uxth	r3, r3
 80024ea:	f006 f94d 	bl	8008788 <LCD_DrawLine>
	LCD_DrawLine(x20, y20 + 10, x20 + 10, y20 + 10);
 80024ee:	69fb      	ldr	r3, [r7, #28]
 80024f0:	b298      	uxth	r0, r3
 80024f2:	69bb      	ldr	r3, [r7, #24]
 80024f4:	b29b      	uxth	r3, r3
 80024f6:	330a      	adds	r3, #10
 80024f8:	b299      	uxth	r1, r3
 80024fa:	69fb      	ldr	r3, [r7, #28]
 80024fc:	b29b      	uxth	r3, r3
 80024fe:	330a      	adds	r3, #10
 8002500:	b29a      	uxth	r2, r3
 8002502:	69bb      	ldr	r3, [r7, #24]
 8002504:	b29b      	uxth	r3, r3
 8002506:	330a      	adds	r3, #10
 8002508:	b29b      	uxth	r3, r3
 800250a:	f006 f93d 	bl	8008788 <LCD_DrawLine>
	LCD_DrawLine(x22, y22 - 5, x22 + 10, y22 - 5);
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	b298      	uxth	r0, r3
 8002512:	68bb      	ldr	r3, [r7, #8]
 8002514:	b29b      	uxth	r3, r3
 8002516:	3b05      	subs	r3, #5
 8002518:	b299      	uxth	r1, r3
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	b29b      	uxth	r3, r3
 800251e:	330a      	adds	r3, #10
 8002520:	b29a      	uxth	r2, r3
 8002522:	68bb      	ldr	r3, [r7, #8]
 8002524:	b29b      	uxth	r3, r3
 8002526:	3b05      	subs	r3, #5
 8002528:	b29b      	uxth	r3, r3
 800252a:	f006 f92d 	bl	8008788 <LCD_DrawLine>
	LCD_DrawLine(x20 + 10, y20 + 10, x22 + 10, y22 - 5);
 800252e:	69fb      	ldr	r3, [r7, #28]
 8002530:	b29b      	uxth	r3, r3
 8002532:	330a      	adds	r3, #10
 8002534:	b298      	uxth	r0, r3
 8002536:	69bb      	ldr	r3, [r7, #24]
 8002538:	b29b      	uxth	r3, r3
 800253a:	330a      	adds	r3, #10
 800253c:	b299      	uxth	r1, r3
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	b29b      	uxth	r3, r3
 8002542:	330a      	adds	r3, #10
 8002544:	b29a      	uxth	r2, r3
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	b29b      	uxth	r3, r3
 800254a:	3b05      	subs	r3, #5
 800254c:	b29b      	uxth	r3, r3
 800254e:	f006 f91b 	bl	8008788 <LCD_DrawLine>
	

}
 8002552:	bf00      	nop
 8002554:	37b8      	adds	r7, #184	; 0xb8
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}

0800255a <draw_my_bullet>:


void draw_my_bullet(int x, int y){
 800255a:	b580      	push	{r7, lr}
 800255c:	b082      	sub	sp, #8
 800255e:	af00      	add	r7, sp, #0
 8002560:	6078      	str	r0, [r7, #4]
 8002562:	6039      	str	r1, [r7, #0]
	LCD_DrawPoint(x,y-1);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	b29a      	uxth	r2, r3
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	b29b      	uxth	r3, r3
 800256c:	3b01      	subs	r3, #1
 800256e:	b29b      	uxth	r3, r3
 8002570:	4619      	mov	r1, r3
 8002572:	4610      	mov	r0, r2
 8002574:	f001 fc74 	bl	8003e60 <LCD_DrawPoint>
	
	LCD_DrawPoint(x-1,y);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	b29b      	uxth	r3, r3
 800257c:	3b01      	subs	r3, #1
 800257e:	b29b      	uxth	r3, r3
 8002580:	683a      	ldr	r2, [r7, #0]
 8002582:	b292      	uxth	r2, r2
 8002584:	4611      	mov	r1, r2
 8002586:	4618      	mov	r0, r3
 8002588:	f001 fc6a 	bl	8003e60 <LCD_DrawPoint>
	LCD_DrawPoint(x,y);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	b29b      	uxth	r3, r3
 8002590:	683a      	ldr	r2, [r7, #0]
 8002592:	b292      	uxth	r2, r2
 8002594:	4611      	mov	r1, r2
 8002596:	4618      	mov	r0, r3
 8002598:	f001 fc62 	bl	8003e60 <LCD_DrawPoint>
	LCD_DrawPoint(x+1,y);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	b29b      	uxth	r3, r3
 80025a0:	3301      	adds	r3, #1
 80025a2:	b29b      	uxth	r3, r3
 80025a4:	683a      	ldr	r2, [r7, #0]
 80025a6:	b292      	uxth	r2, r2
 80025a8:	4611      	mov	r1, r2
 80025aa:	4618      	mov	r0, r3
 80025ac:	f001 fc58 	bl	8003e60 <LCD_DrawPoint>

	LCD_DrawPoint(x-1,y+1);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	b29b      	uxth	r3, r3
 80025b4:	3b01      	subs	r3, #1
 80025b6:	b29a      	uxth	r2, r3
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	b29b      	uxth	r3, r3
 80025bc:	3301      	adds	r3, #1
 80025be:	b29b      	uxth	r3, r3
 80025c0:	4619      	mov	r1, r3
 80025c2:	4610      	mov	r0, r2
 80025c4:	f001 fc4c 	bl	8003e60 <LCD_DrawPoint>
	LCD_DrawPoint(x,y+1);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	b29a      	uxth	r2, r3
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	b29b      	uxth	r3, r3
 80025d0:	3301      	adds	r3, #1
 80025d2:	b29b      	uxth	r3, r3
 80025d4:	4619      	mov	r1, r3
 80025d6:	4610      	mov	r0, r2
 80025d8:	f001 fc42 	bl	8003e60 <LCD_DrawPoint>
	LCD_DrawPoint(x+1,y+1);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	b29b      	uxth	r3, r3
 80025e0:	3301      	adds	r3, #1
 80025e2:	b29a      	uxth	r2, r3
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	b29b      	uxth	r3, r3
 80025e8:	3301      	adds	r3, #1
 80025ea:	b29b      	uxth	r3, r3
 80025ec:	4619      	mov	r1, r3
 80025ee:	4610      	mov	r0, r2
 80025f0:	f001 fc36 	bl	8003e60 <LCD_DrawPoint>
}
 80025f4:	bf00      	nop
 80025f6:	3708      	adds	r7, #8
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd80      	pop	{r7, pc}

080025fc <draw_enemy_bullet>:

void draw_enemy_bullet(int x, int y){
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b082      	sub	sp, #8
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
 8002604:	6039      	str	r1, [r7, #0]
	LCD_DrawPoint(x-1,y-1);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	b29b      	uxth	r3, r3
 800260a:	3b01      	subs	r3, #1
 800260c:	b29a      	uxth	r2, r3
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	b29b      	uxth	r3, r3
 8002612:	3b01      	subs	r3, #1
 8002614:	b29b      	uxth	r3, r3
 8002616:	4619      	mov	r1, r3
 8002618:	4610      	mov	r0, r2
 800261a:	f001 fc21 	bl	8003e60 <LCD_DrawPoint>
	LCD_DrawPoint(x,y-1);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	b29a      	uxth	r2, r3
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	b29b      	uxth	r3, r3
 8002626:	3b01      	subs	r3, #1
 8002628:	b29b      	uxth	r3, r3
 800262a:	4619      	mov	r1, r3
 800262c:	4610      	mov	r0, r2
 800262e:	f001 fc17 	bl	8003e60 <LCD_DrawPoint>
	LCD_DrawPoint(x+1,y-1);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	b29b      	uxth	r3, r3
 8002636:	3301      	adds	r3, #1
 8002638:	b29a      	uxth	r2, r3
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	b29b      	uxth	r3, r3
 800263e:	3b01      	subs	r3, #1
 8002640:	b29b      	uxth	r3, r3
 8002642:	4619      	mov	r1, r3
 8002644:	4610      	mov	r0, r2
 8002646:	f001 fc0b 	bl	8003e60 <LCD_DrawPoint>
	
	LCD_DrawPoint(x-1,y);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	b29b      	uxth	r3, r3
 800264e:	3b01      	subs	r3, #1
 8002650:	b29b      	uxth	r3, r3
 8002652:	683a      	ldr	r2, [r7, #0]
 8002654:	b292      	uxth	r2, r2
 8002656:	4611      	mov	r1, r2
 8002658:	4618      	mov	r0, r3
 800265a:	f001 fc01 	bl	8003e60 <LCD_DrawPoint>
	LCD_DrawPoint(x,y);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	b29b      	uxth	r3, r3
 8002662:	683a      	ldr	r2, [r7, #0]
 8002664:	b292      	uxth	r2, r2
 8002666:	4611      	mov	r1, r2
 8002668:	4618      	mov	r0, r3
 800266a:	f001 fbf9 	bl	8003e60 <LCD_DrawPoint>
	LCD_DrawPoint(x+1,y);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	b29b      	uxth	r3, r3
 8002672:	3301      	adds	r3, #1
 8002674:	b29b      	uxth	r3, r3
 8002676:	683a      	ldr	r2, [r7, #0]
 8002678:	b292      	uxth	r2, r2
 800267a:	4611      	mov	r1, r2
 800267c:	4618      	mov	r0, r3
 800267e:	f001 fbef 	bl	8003e60 <LCD_DrawPoint>

	LCD_DrawPoint(x,y+1);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	b29a      	uxth	r2, r3
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	b29b      	uxth	r3, r3
 800268a:	3301      	adds	r3, #1
 800268c:	b29b      	uxth	r3, r3
 800268e:	4619      	mov	r1, r3
 8002690:	4610      	mov	r0, r2
 8002692:	f001 fbe5 	bl	8003e60 <LCD_DrawPoint>
}
 8002696:	bf00      	nop
 8002698:	3708      	adds	r7, #8
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}
	...

080026a0 <draw_heart>:
void draw_cross(int x, int y){
	LCD_DrawLine(x-cross_width/2,y-cross_height/2, x+cross_width/2,y+cross_height/2);
	LCD_DrawLine(x-cross_width/2,y+cross_height/2, x+cross_width/2,y-cross_height/2);
}

void draw_heart(int x, int y){
 80026a0:	b590      	push	{r4, r7, lr}
 80026a2:	b083      	sub	sp, #12
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
 80026a8:	6039      	str	r1, [r7, #0]
	LCD_DrawLine(x-heart_width/2,y-heart_height/2, x+heart_width/2,y+heart_height/2);
 80026aa:	4b4a      	ldr	r3, [pc, #296]	; (80027d4 <draw_heart+0x134>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	0fda      	lsrs	r2, r3, #31
 80026b0:	4413      	add	r3, r2
 80026b2:	105b      	asrs	r3, r3, #1
 80026b4:	425b      	negs	r3, r3
 80026b6:	b29a      	uxth	r2, r3
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	b29b      	uxth	r3, r3
 80026bc:	4413      	add	r3, r2
 80026be:	b298      	uxth	r0, r3
 80026c0:	4b45      	ldr	r3, [pc, #276]	; (80027d8 <draw_heart+0x138>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	0fda      	lsrs	r2, r3, #31
 80026c6:	4413      	add	r3, r2
 80026c8:	105b      	asrs	r3, r3, #1
 80026ca:	425b      	negs	r3, r3
 80026cc:	b29a      	uxth	r2, r3
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	b29b      	uxth	r3, r3
 80026d2:	4413      	add	r3, r2
 80026d4:	b299      	uxth	r1, r3
 80026d6:	4b3f      	ldr	r3, [pc, #252]	; (80027d4 <draw_heart+0x134>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	0fda      	lsrs	r2, r3, #31
 80026dc:	4413      	add	r3, r2
 80026de:	105b      	asrs	r3, r3, #1
 80026e0:	b29a      	uxth	r2, r3
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	b29b      	uxth	r3, r3
 80026e6:	4413      	add	r3, r2
 80026e8:	b29c      	uxth	r4, r3
 80026ea:	4b3b      	ldr	r3, [pc, #236]	; (80027d8 <draw_heart+0x138>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	0fda      	lsrs	r2, r3, #31
 80026f0:	4413      	add	r3, r2
 80026f2:	105b      	asrs	r3, r3, #1
 80026f4:	b29a      	uxth	r2, r3
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	b29b      	uxth	r3, r3
 80026fa:	4413      	add	r3, r2
 80026fc:	b29b      	uxth	r3, r3
 80026fe:	4622      	mov	r2, r4
 8002700:	f006 f842 	bl	8008788 <LCD_DrawLine>
	LCD_DrawLine(x-heart_width/2,y+heart_height/2, x+heart_width/2,y-heart_height/2);
 8002704:	4b33      	ldr	r3, [pc, #204]	; (80027d4 <draw_heart+0x134>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	0fda      	lsrs	r2, r3, #31
 800270a:	4413      	add	r3, r2
 800270c:	105b      	asrs	r3, r3, #1
 800270e:	425b      	negs	r3, r3
 8002710:	b29a      	uxth	r2, r3
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	b29b      	uxth	r3, r3
 8002716:	4413      	add	r3, r2
 8002718:	b298      	uxth	r0, r3
 800271a:	4b2f      	ldr	r3, [pc, #188]	; (80027d8 <draw_heart+0x138>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	0fda      	lsrs	r2, r3, #31
 8002720:	4413      	add	r3, r2
 8002722:	105b      	asrs	r3, r3, #1
 8002724:	b29a      	uxth	r2, r3
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	b29b      	uxth	r3, r3
 800272a:	4413      	add	r3, r2
 800272c:	b299      	uxth	r1, r3
 800272e:	4b29      	ldr	r3, [pc, #164]	; (80027d4 <draw_heart+0x134>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	0fda      	lsrs	r2, r3, #31
 8002734:	4413      	add	r3, r2
 8002736:	105b      	asrs	r3, r3, #1
 8002738:	b29a      	uxth	r2, r3
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	b29b      	uxth	r3, r3
 800273e:	4413      	add	r3, r2
 8002740:	b29c      	uxth	r4, r3
 8002742:	4b25      	ldr	r3, [pc, #148]	; (80027d8 <draw_heart+0x138>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	0fda      	lsrs	r2, r3, #31
 8002748:	4413      	add	r3, r2
 800274a:	105b      	asrs	r3, r3, #1
 800274c:	425b      	negs	r3, r3
 800274e:	b29a      	uxth	r2, r3
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	b29b      	uxth	r3, r3
 8002754:	4413      	add	r3, r2
 8002756:	b29b      	uxth	r3, r3
 8002758:	4622      	mov	r2, r4
 800275a:	f006 f815 	bl	8008788 <LCD_DrawLine>
	
	LCD_DrawLine(x-heart_width/2,y, x+heart_width/2,y);
 800275e:	4b1d      	ldr	r3, [pc, #116]	; (80027d4 <draw_heart+0x134>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	0fda      	lsrs	r2, r3, #31
 8002764:	4413      	add	r3, r2
 8002766:	105b      	asrs	r3, r3, #1
 8002768:	425b      	negs	r3, r3
 800276a:	b29a      	uxth	r2, r3
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	b29b      	uxth	r3, r3
 8002770:	4413      	add	r3, r2
 8002772:	b298      	uxth	r0, r3
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	b299      	uxth	r1, r3
 8002778:	4b16      	ldr	r3, [pc, #88]	; (80027d4 <draw_heart+0x134>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	0fda      	lsrs	r2, r3, #31
 800277e:	4413      	add	r3, r2
 8002780:	105b      	asrs	r3, r3, #1
 8002782:	b29a      	uxth	r2, r3
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	b29b      	uxth	r3, r3
 8002788:	4413      	add	r3, r2
 800278a:	b29a      	uxth	r2, r3
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	b29b      	uxth	r3, r3
 8002790:	f005 fffa 	bl	8008788 <LCD_DrawLine>
	LCD_DrawLine(x,y+heart_height/2, x,y-heart_height/2);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	b298      	uxth	r0, r3
 8002798:	4b0f      	ldr	r3, [pc, #60]	; (80027d8 <draw_heart+0x138>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	0fda      	lsrs	r2, r3, #31
 800279e:	4413      	add	r3, r2
 80027a0:	105b      	asrs	r3, r3, #1
 80027a2:	b29a      	uxth	r2, r3
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	b29b      	uxth	r3, r3
 80027a8:	4413      	add	r3, r2
 80027aa:	b299      	uxth	r1, r3
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	b29c      	uxth	r4, r3
 80027b0:	4b09      	ldr	r3, [pc, #36]	; (80027d8 <draw_heart+0x138>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	0fda      	lsrs	r2, r3, #31
 80027b6:	4413      	add	r3, r2
 80027b8:	105b      	asrs	r3, r3, #1
 80027ba:	425b      	negs	r3, r3
 80027bc:	b29a      	uxth	r2, r3
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	b29b      	uxth	r3, r3
 80027c2:	4413      	add	r3, r2
 80027c4:	b29b      	uxth	r3, r3
 80027c6:	4622      	mov	r2, r4
 80027c8:	f005 ffde 	bl	8008788 <LCD_DrawLine>
}
 80027cc:	bf00      	nop
 80027ce:	370c      	adds	r7, #12
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd90      	pop	{r4, r7, pc}
 80027d4:	20000008 	.word	0x20000008
 80027d8:	2000000c 	.word	0x2000000c

080027dc <draw_equal_triangle>:
}




void draw_equal_triangle(int x, int y, int width, int height){
 80027dc:	b580      	push	{r7, lr}
 80027de:	b08a      	sub	sp, #40	; 0x28
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	60f8      	str	r0, [r7, #12]
 80027e4:	60b9      	str	r1, [r7, #8]
 80027e6:	607a      	str	r2, [r7, #4]
 80027e8:	603b      	str	r3, [r7, #0]
	int x1,y1,x2,y2,x3,y3;
	x1 = x;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	627b      	str	r3, [r7, #36]	; 0x24
	y1 = y - height;
 80027ee:	68ba      	ldr	r2, [r7, #8]
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	1ad3      	subs	r3, r2, r3
 80027f4:	623b      	str	r3, [r7, #32]
	
	x2 = x - width / 2;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	0fda      	lsrs	r2, r3, #31
 80027fa:	4413      	add	r3, r2
 80027fc:	105b      	asrs	r3, r3, #1
 80027fe:	425b      	negs	r3, r3
 8002800:	461a      	mov	r2, r3
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	4413      	add	r3, r2
 8002806:	61fb      	str	r3, [r7, #28]
	y2 = y;
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	61bb      	str	r3, [r7, #24]
	
	x3 = x + width / 2;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	0fda      	lsrs	r2, r3, #31
 8002810:	4413      	add	r3, r2
 8002812:	105b      	asrs	r3, r3, #1
 8002814:	461a      	mov	r2, r3
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	4413      	add	r3, r2
 800281a:	617b      	str	r3, [r7, #20]
	y3 = y;
 800281c:	68bb      	ldr	r3, [r7, #8]
 800281e:	613b      	str	r3, [r7, #16]
	
	LCD_DrawLine(x1,y1,x2,y2);
 8002820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002822:	b298      	uxth	r0, r3
 8002824:	6a3b      	ldr	r3, [r7, #32]
 8002826:	b299      	uxth	r1, r3
 8002828:	69fb      	ldr	r3, [r7, #28]
 800282a:	b29a      	uxth	r2, r3
 800282c:	69bb      	ldr	r3, [r7, #24]
 800282e:	b29b      	uxth	r3, r3
 8002830:	f005 ffaa 	bl	8008788 <LCD_DrawLine>
	LCD_DrawLine(x1,y1,x3,y3);
 8002834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002836:	b298      	uxth	r0, r3
 8002838:	6a3b      	ldr	r3, [r7, #32]
 800283a:	b299      	uxth	r1, r3
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	b29a      	uxth	r2, r3
 8002840:	693b      	ldr	r3, [r7, #16]
 8002842:	b29b      	uxth	r3, r3
 8002844:	f005 ffa0 	bl	8008788 <LCD_DrawLine>
	//LCD_DrawLine(x2,y2,x3,y3);
}
 8002848:	bf00      	nop
 800284a:	3728      	adds	r7, #40	; 0x28
 800284c:	46bd      	mov	sp, r7
 800284e:	bd80      	pop	{r7, pc}

08002850 <draw_rectangle>:


void draw_rectangle(int x, int y, int width, int height){
 8002850:	b580      	push	{r7, lr}
 8002852:	b08c      	sub	sp, #48	; 0x30
 8002854:	af00      	add	r7, sp, #0
 8002856:	60f8      	str	r0, [r7, #12]
 8002858:	60b9      	str	r1, [r7, #8]
 800285a:	607a      	str	r2, [r7, #4]
 800285c:	603b      	str	r3, [r7, #0]
	int x1, y1, x2, y2, x3, y3, x4, y4;
	x1 = x;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	62fb      	str	r3, [r7, #44]	; 0x2c
	y1 = y;
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	62bb      	str	r3, [r7, #40]	; 0x28
	
	x2 = x + width;
 8002866:	68fa      	ldr	r2, [r7, #12]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	4413      	add	r3, r2
 800286c:	627b      	str	r3, [r7, #36]	; 0x24
	y2 = y;
 800286e:	68bb      	ldr	r3, [r7, #8]
 8002870:	623b      	str	r3, [r7, #32]
	
	x3 = x1;
 8002872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002874:	61fb      	str	r3, [r7, #28]
	y3 = y + height;
 8002876:	68ba      	ldr	r2, [r7, #8]
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	4413      	add	r3, r2
 800287c:	61bb      	str	r3, [r7, #24]
	
	x4 = x2;
 800287e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002880:	617b      	str	r3, [r7, #20]
	y4 = y3;
 8002882:	69bb      	ldr	r3, [r7, #24]
 8002884:	613b      	str	r3, [r7, #16]
	
	//LCD_DrawLine(x1,y1,x2,y2);
	LCD_DrawLine(x1,y1,x3,y3);
 8002886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002888:	b298      	uxth	r0, r3
 800288a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800288c:	b299      	uxth	r1, r3
 800288e:	69fb      	ldr	r3, [r7, #28]
 8002890:	b29a      	uxth	r2, r3
 8002892:	69bb      	ldr	r3, [r7, #24]
 8002894:	b29b      	uxth	r3, r3
 8002896:	f005 ff77 	bl	8008788 <LCD_DrawLine>
	LCD_DrawLine(x4,y4,x2,y2);
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	b298      	uxth	r0, r3
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	b299      	uxth	r1, r3
 80028a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a4:	b29a      	uxth	r2, r3
 80028a6:	6a3b      	ldr	r3, [r7, #32]
 80028a8:	b29b      	uxth	r3, r3
 80028aa:	f005 ff6d 	bl	8008788 <LCD_DrawLine>
	//LCD_DrawLine(x4,y4,x3,y3);
}
 80028ae:	bf00      	nop
 80028b0:	3730      	adds	r7, #48	; 0x30
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}

080028b6 <draw_left_triangle>:

void draw_left_triangle(int x, int y, int width, int height){
 80028b6:	b580      	push	{r7, lr}
 80028b8:	b08a      	sub	sp, #40	; 0x28
 80028ba:	af00      	add	r7, sp, #0
 80028bc:	60f8      	str	r0, [r7, #12]
 80028be:	60b9      	str	r1, [r7, #8]
 80028c0:	607a      	str	r2, [r7, #4]
 80028c2:	603b      	str	r3, [r7, #0]
	int x1, y1, x2, y2, x3, y3;
	x1 = x;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	627b      	str	r3, [r7, #36]	; 0x24
	y1 = y;
 80028c8:	68bb      	ldr	r3, [r7, #8]
 80028ca:	623b      	str	r3, [r7, #32]
	
	x2 = x - width;
 80028cc:	68fa      	ldr	r2, [r7, #12]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	1ad3      	subs	r3, r2, r3
 80028d2:	61fb      	str	r3, [r7, #28]
	y2 = y;
 80028d4:	68bb      	ldr	r3, [r7, #8]
 80028d6:	61bb      	str	r3, [r7, #24]
	
	x3 = x;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	617b      	str	r3, [r7, #20]
	y3 = y - height;
 80028dc:	68ba      	ldr	r2, [r7, #8]
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	1ad3      	subs	r3, r2, r3
 80028e2:	613b      	str	r3, [r7, #16]
	
	LCD_DrawLine(x1,y1,x2,y2);
 80028e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e6:	b298      	uxth	r0, r3
 80028e8:	6a3b      	ldr	r3, [r7, #32]
 80028ea:	b299      	uxth	r1, r3
 80028ec:	69fb      	ldr	r3, [r7, #28]
 80028ee:	b29a      	uxth	r2, r3
 80028f0:	69bb      	ldr	r3, [r7, #24]
 80028f2:	b29b      	uxth	r3, r3
 80028f4:	f005 ff48 	bl	8008788 <LCD_DrawLine>
	LCD_DrawLine(x1,y1,x3,y3);
 80028f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028fa:	b298      	uxth	r0, r3
 80028fc:	6a3b      	ldr	r3, [r7, #32]
 80028fe:	b299      	uxth	r1, r3
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	b29a      	uxth	r2, r3
 8002904:	693b      	ldr	r3, [r7, #16]
 8002906:	b29b      	uxth	r3, r3
 8002908:	f005 ff3e 	bl	8008788 <LCD_DrawLine>
	LCD_DrawLine(x2,y2,x3,y3);
 800290c:	69fb      	ldr	r3, [r7, #28]
 800290e:	b298      	uxth	r0, r3
 8002910:	69bb      	ldr	r3, [r7, #24]
 8002912:	b299      	uxth	r1, r3
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	b29a      	uxth	r2, r3
 8002918:	693b      	ldr	r3, [r7, #16]
 800291a:	b29b      	uxth	r3, r3
 800291c:	f005 ff34 	bl	8008788 <LCD_DrawLine>
}
 8002920:	bf00      	nop
 8002922:	3728      	adds	r7, #40	; 0x28
 8002924:	46bd      	mov	sp, r7
 8002926:	bd80      	pop	{r7, pc}

08002928 <draw_right_triangle>:

void draw_right_triangle(int x, int y, int width, int height){
 8002928:	b580      	push	{r7, lr}
 800292a:	b08a      	sub	sp, #40	; 0x28
 800292c:	af00      	add	r7, sp, #0
 800292e:	60f8      	str	r0, [r7, #12]
 8002930:	60b9      	str	r1, [r7, #8]
 8002932:	607a      	str	r2, [r7, #4]
 8002934:	603b      	str	r3, [r7, #0]
	int x1, y1, x2, y2, x3, y3;
	x1 = x;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	627b      	str	r3, [r7, #36]	; 0x24
	y1 = y;
 800293a:	68bb      	ldr	r3, [r7, #8]
 800293c:	623b      	str	r3, [r7, #32]
	
	x2 = x + width;
 800293e:	68fa      	ldr	r2, [r7, #12]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	4413      	add	r3, r2
 8002944:	61fb      	str	r3, [r7, #28]
	y2 = y;
 8002946:	68bb      	ldr	r3, [r7, #8]
 8002948:	61bb      	str	r3, [r7, #24]
	
	x3 = x;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	617b      	str	r3, [r7, #20]
	y3 = y - height;
 800294e:	68ba      	ldr	r2, [r7, #8]
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	1ad3      	subs	r3, r2, r3
 8002954:	613b      	str	r3, [r7, #16]
	
	LCD_DrawLine(x1,y1,x2,y2);
 8002956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002958:	b298      	uxth	r0, r3
 800295a:	6a3b      	ldr	r3, [r7, #32]
 800295c:	b299      	uxth	r1, r3
 800295e:	69fb      	ldr	r3, [r7, #28]
 8002960:	b29a      	uxth	r2, r3
 8002962:	69bb      	ldr	r3, [r7, #24]
 8002964:	b29b      	uxth	r3, r3
 8002966:	f005 ff0f 	bl	8008788 <LCD_DrawLine>
	LCD_DrawLine(x1,y1,x3,y3);
 800296a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800296c:	b298      	uxth	r0, r3
 800296e:	6a3b      	ldr	r3, [r7, #32]
 8002970:	b299      	uxth	r1, r3
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	b29a      	uxth	r2, r3
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	b29b      	uxth	r3, r3
 800297a:	f005 ff05 	bl	8008788 <LCD_DrawLine>
	LCD_DrawLine(x2,y2,x3,y3);
 800297e:	69fb      	ldr	r3, [r7, #28]
 8002980:	b298      	uxth	r0, r3
 8002982:	69bb      	ldr	r3, [r7, #24]
 8002984:	b299      	uxth	r1, r3
 8002986:	697b      	ldr	r3, [r7, #20]
 8002988:	b29a      	uxth	r2, r3
 800298a:	693b      	ldr	r3, [r7, #16]
 800298c:	b29b      	uxth	r3, r3
 800298e:	f005 fefb 	bl	8008788 <LCD_DrawLine>
}
 8002992:	bf00      	nop
 8002994:	3728      	adds	r7, #40	; 0x28
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}

0800299a <draw_trapezoid>:

void draw_trapezoid(int x, int y, int upper_width, int lower_width, int height){
 800299a:	b580      	push	{r7, lr}
 800299c:	b08c      	sub	sp, #48	; 0x30
 800299e:	af00      	add	r7, sp, #0
 80029a0:	60f8      	str	r0, [r7, #12]
 80029a2:	60b9      	str	r1, [r7, #8]
 80029a4:	607a      	str	r2, [r7, #4]
 80029a6:	603b      	str	r3, [r7, #0]
	int x1, y1, x2, y2, x3, y3, x4, y4;
	x1 = x - upper_width/2;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	0fda      	lsrs	r2, r3, #31
 80029ac:	4413      	add	r3, r2
 80029ae:	105b      	asrs	r3, r3, #1
 80029b0:	425b      	negs	r3, r3
 80029b2:	461a      	mov	r2, r3
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	4413      	add	r3, r2
 80029b8:	62fb      	str	r3, [r7, #44]	; 0x2c
	y1 = y;
 80029ba:	68bb      	ldr	r3, [r7, #8]
 80029bc:	62bb      	str	r3, [r7, #40]	; 0x28
	
	x2 = x + upper_width/2;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	0fda      	lsrs	r2, r3, #31
 80029c2:	4413      	add	r3, r2
 80029c4:	105b      	asrs	r3, r3, #1
 80029c6:	461a      	mov	r2, r3
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	4413      	add	r3, r2
 80029cc:	627b      	str	r3, [r7, #36]	; 0x24
	y2 = y;
 80029ce:	68bb      	ldr	r3, [r7, #8]
 80029d0:	623b      	str	r3, [r7, #32]
	
	x3 = x - lower_width/2;
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	0fda      	lsrs	r2, r3, #31
 80029d6:	4413      	add	r3, r2
 80029d8:	105b      	asrs	r3, r3, #1
 80029da:	425b      	negs	r3, r3
 80029dc:	461a      	mov	r2, r3
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	4413      	add	r3, r2
 80029e2:	61fb      	str	r3, [r7, #28]
	y3 = y + height;
 80029e4:	68ba      	ldr	r2, [r7, #8]
 80029e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029e8:	4413      	add	r3, r2
 80029ea:	61bb      	str	r3, [r7, #24]
	
	x4 = x + lower_width/2;
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	0fda      	lsrs	r2, r3, #31
 80029f0:	4413      	add	r3, r2
 80029f2:	105b      	asrs	r3, r3, #1
 80029f4:	461a      	mov	r2, r3
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	4413      	add	r3, r2
 80029fa:	617b      	str	r3, [r7, #20]
	y4 = y + height;
 80029fc:	68ba      	ldr	r2, [r7, #8]
 80029fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a00:	4413      	add	r3, r2
 8002a02:	613b      	str	r3, [r7, #16]
	
	//LCD_DrawLine(x1,y1,x2,y2);
	LCD_DrawLine(x1,y1,x3,y3);
 8002a04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a06:	b298      	uxth	r0, r3
 8002a08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a0a:	b299      	uxth	r1, r3
 8002a0c:	69fb      	ldr	r3, [r7, #28]
 8002a0e:	b29a      	uxth	r2, r3
 8002a10:	69bb      	ldr	r3, [r7, #24]
 8002a12:	b29b      	uxth	r3, r3
 8002a14:	f005 feb8 	bl	8008788 <LCD_DrawLine>
	LCD_DrawLine(x4,y4,x2,y2);
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	b298      	uxth	r0, r3
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	b299      	uxth	r1, r3
 8002a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a22:	b29a      	uxth	r2, r3
 8002a24:	6a3b      	ldr	r3, [r7, #32]
 8002a26:	b29b      	uxth	r3, r3
 8002a28:	f005 feae 	bl	8008788 <LCD_DrawLine>
	LCD_DrawLine(x4,y4,x3,y3);
 8002a2c:	697b      	ldr	r3, [r7, #20]
 8002a2e:	b298      	uxth	r0, r3
 8002a30:	693b      	ldr	r3, [r7, #16]
 8002a32:	b299      	uxth	r1, r3
 8002a34:	69fb      	ldr	r3, [r7, #28]
 8002a36:	b29a      	uxth	r2, r3
 8002a38:	69bb      	ldr	r3, [r7, #24]
 8002a3a:	b29b      	uxth	r3, r3
 8002a3c:	f005 fea4 	bl	8008788 <LCD_DrawLine>
	
}
 8002a40:	bf00      	nop
 8002a42:	3730      	adds	r7, #48	; 0x30
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}

08002a48 <draw_reversed_equal_triangle>:

void draw_reversed_equal_triangle(int x, int y, int width, int height){
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b08a      	sub	sp, #40	; 0x28
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	60f8      	str	r0, [r7, #12]
 8002a50:	60b9      	str	r1, [r7, #8]
 8002a52:	607a      	str	r2, [r7, #4]
 8002a54:	603b      	str	r3, [r7, #0]
	int x1, y1, x2, y2, x3, y3;
	
	x1 = x - width / 2;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	0fda      	lsrs	r2, r3, #31
 8002a5a:	4413      	add	r3, r2
 8002a5c:	105b      	asrs	r3, r3, #1
 8002a5e:	425b      	negs	r3, r3
 8002a60:	461a      	mov	r2, r3
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	4413      	add	r3, r2
 8002a66:	627b      	str	r3, [r7, #36]	; 0x24
	y1 = y;
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	623b      	str	r3, [r7, #32]
	
	x2 = x + width / 2;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	0fda      	lsrs	r2, r3, #31
 8002a70:	4413      	add	r3, r2
 8002a72:	105b      	asrs	r3, r3, #1
 8002a74:	461a      	mov	r2, r3
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	4413      	add	r3, r2
 8002a7a:	61fb      	str	r3, [r7, #28]
	y2 = y;
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	61bb      	str	r3, [r7, #24]
	
	x3 = x;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	617b      	str	r3, [r7, #20]
	y3 = y + height;
 8002a84:	68ba      	ldr	r2, [r7, #8]
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	4413      	add	r3, r2
 8002a8a:	613b      	str	r3, [r7, #16]
	
	LCD_DrawLine(x1,y1,x2,y2);
 8002a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a8e:	b298      	uxth	r0, r3
 8002a90:	6a3b      	ldr	r3, [r7, #32]
 8002a92:	b299      	uxth	r1, r3
 8002a94:	69fb      	ldr	r3, [r7, #28]
 8002a96:	b29a      	uxth	r2, r3
 8002a98:	69bb      	ldr	r3, [r7, #24]
 8002a9a:	b29b      	uxth	r3, r3
 8002a9c:	f005 fe74 	bl	8008788 <LCD_DrawLine>
	LCD_DrawLine(x1,y1,x3,y3);
 8002aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa2:	b298      	uxth	r0, r3
 8002aa4:	6a3b      	ldr	r3, [r7, #32]
 8002aa6:	b299      	uxth	r1, r3
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	b29a      	uxth	r2, r3
 8002aac:	693b      	ldr	r3, [r7, #16]
 8002aae:	b29b      	uxth	r3, r3
 8002ab0:	f005 fe6a 	bl	8008788 <LCD_DrawLine>
	LCD_DrawLine(x2,y2,x3,y3);
 8002ab4:	69fb      	ldr	r3, [r7, #28]
 8002ab6:	b298      	uxth	r0, r3
 8002ab8:	69bb      	ldr	r3, [r7, #24]
 8002aba:	b299      	uxth	r1, r3
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	b29a      	uxth	r2, r3
 8002ac0:	693b      	ldr	r3, [r7, #16]
 8002ac2:	b29b      	uxth	r3, r3
 8002ac4:	f005 fe60 	bl	8008788 <LCD_DrawLine>
	
}
 8002ac8:	bf00      	nop
 8002aca:	3728      	adds	r7, #40	; 0x28
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bd80      	pop	{r7, pc}

08002ad0 <draw_reversed_left_triangle>:

void draw_reversed_left_triangle(int x, int y, int width, int height){
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b08a      	sub	sp, #40	; 0x28
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	60f8      	str	r0, [r7, #12]
 8002ad8:	60b9      	str	r1, [r7, #8]
 8002ada:	607a      	str	r2, [r7, #4]
 8002adc:	603b      	str	r3, [r7, #0]
	int x1, y1, x2, y2, x3, y3;
	
	x1 = x;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	627b      	str	r3, [r7, #36]	; 0x24
	y1 = y;
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	623b      	str	r3, [r7, #32]
	
	x2 = x + width;
 8002ae6:	68fa      	ldr	r2, [r7, #12]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	4413      	add	r3, r2
 8002aec:	61fb      	str	r3, [r7, #28]
	y2 = y;
 8002aee:	68bb      	ldr	r3, [r7, #8]
 8002af0:	61bb      	str	r3, [r7, #24]
	
	x3 = x;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	617b      	str	r3, [r7, #20]
	y3 = y + height;
 8002af6:	68ba      	ldr	r2, [r7, #8]
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	4413      	add	r3, r2
 8002afc:	613b      	str	r3, [r7, #16]
	
	LCD_DrawLine(x1,y1,x2,y2);
 8002afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b00:	b298      	uxth	r0, r3
 8002b02:	6a3b      	ldr	r3, [r7, #32]
 8002b04:	b299      	uxth	r1, r3
 8002b06:	69fb      	ldr	r3, [r7, #28]
 8002b08:	b29a      	uxth	r2, r3
 8002b0a:	69bb      	ldr	r3, [r7, #24]
 8002b0c:	b29b      	uxth	r3, r3
 8002b0e:	f005 fe3b 	bl	8008788 <LCD_DrawLine>
	LCD_DrawLine(x1,y1,x3,y3);
 8002b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b14:	b298      	uxth	r0, r3
 8002b16:	6a3b      	ldr	r3, [r7, #32]
 8002b18:	b299      	uxth	r1, r3
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	b29a      	uxth	r2, r3
 8002b1e:	693b      	ldr	r3, [r7, #16]
 8002b20:	b29b      	uxth	r3, r3
 8002b22:	f005 fe31 	bl	8008788 <LCD_DrawLine>
	LCD_DrawLine(x2,y2,x3,y3);
 8002b26:	69fb      	ldr	r3, [r7, #28]
 8002b28:	b298      	uxth	r0, r3
 8002b2a:	69bb      	ldr	r3, [r7, #24]
 8002b2c:	b299      	uxth	r1, r3
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	b29a      	uxth	r2, r3
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	b29b      	uxth	r3, r3
 8002b36:	f005 fe27 	bl	8008788 <LCD_DrawLine>
	
}
 8002b3a:	bf00      	nop
 8002b3c:	3728      	adds	r7, #40	; 0x28
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}

08002b42 <draw_reversed_right_triangle>:

void draw_reversed_right_triangle(int x, int y, int width, int height){
 8002b42:	b580      	push	{r7, lr}
 8002b44:	b08a      	sub	sp, #40	; 0x28
 8002b46:	af00      	add	r7, sp, #0
 8002b48:	60f8      	str	r0, [r7, #12]
 8002b4a:	60b9      	str	r1, [r7, #8]
 8002b4c:	607a      	str	r2, [r7, #4]
 8002b4e:	603b      	str	r3, [r7, #0]
	int x1, y1, x2, y2, x3, y3;
	
	x1 = x;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	627b      	str	r3, [r7, #36]	; 0x24
	y1 = y;
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	623b      	str	r3, [r7, #32]
	
	x2 = x - width;
 8002b58:	68fa      	ldr	r2, [r7, #12]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	1ad3      	subs	r3, r2, r3
 8002b5e:	61fb      	str	r3, [r7, #28]
	y2 = y;
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	61bb      	str	r3, [r7, #24]
	
	x3 = x;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	617b      	str	r3, [r7, #20]
	y3 = y + height;
 8002b68:	68ba      	ldr	r2, [r7, #8]
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	4413      	add	r3, r2
 8002b6e:	613b      	str	r3, [r7, #16]
	
	LCD_DrawLine(x1,y1,x2,y2);
 8002b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b72:	b298      	uxth	r0, r3
 8002b74:	6a3b      	ldr	r3, [r7, #32]
 8002b76:	b299      	uxth	r1, r3
 8002b78:	69fb      	ldr	r3, [r7, #28]
 8002b7a:	b29a      	uxth	r2, r3
 8002b7c:	69bb      	ldr	r3, [r7, #24]
 8002b7e:	b29b      	uxth	r3, r3
 8002b80:	f005 fe02 	bl	8008788 <LCD_DrawLine>
	LCD_DrawLine(x1,y1,x3,y3);
 8002b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b86:	b298      	uxth	r0, r3
 8002b88:	6a3b      	ldr	r3, [r7, #32]
 8002b8a:	b299      	uxth	r1, r3
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	b29a      	uxth	r2, r3
 8002b90:	693b      	ldr	r3, [r7, #16]
 8002b92:	b29b      	uxth	r3, r3
 8002b94:	f005 fdf8 	bl	8008788 <LCD_DrawLine>
	LCD_DrawLine(x2,y2,x3,y3);
 8002b98:	69fb      	ldr	r3, [r7, #28]
 8002b9a:	b298      	uxth	r0, r3
 8002b9c:	69bb      	ldr	r3, [r7, #24]
 8002b9e:	b299      	uxth	r1, r3
 8002ba0:	697b      	ldr	r3, [r7, #20]
 8002ba2:	b29a      	uxth	r2, r3
 8002ba4:	693b      	ldr	r3, [r7, #16]
 8002ba6:	b29b      	uxth	r3, r3
 8002ba8:	f005 fdee 	bl	8008788 <LCD_DrawLine>
	
}
 8002bac:	bf00      	nop
 8002bae:	3728      	adds	r7, #40	; 0x28
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bd80      	pop	{r7, pc}

08002bb4 <draw_reversed_trapezoid>:

void draw_reversed_trapezoid(int x, int y, int upper_width, int lower_width, int height){
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b08c      	sub	sp, #48	; 0x30
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	60f8      	str	r0, [r7, #12]
 8002bbc:	60b9      	str	r1, [r7, #8]
 8002bbe:	607a      	str	r2, [r7, #4]
 8002bc0:	603b      	str	r3, [r7, #0]
	int x1, y1, x2, y2, x3, y3, x4, y4;
	x1 = x - upper_width/2;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	0fda      	lsrs	r2, r3, #31
 8002bc6:	4413      	add	r3, r2
 8002bc8:	105b      	asrs	r3, r3, #1
 8002bca:	425b      	negs	r3, r3
 8002bcc:	461a      	mov	r2, r3
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	4413      	add	r3, r2
 8002bd2:	62fb      	str	r3, [r7, #44]	; 0x2c
	y1 = y;
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	62bb      	str	r3, [r7, #40]	; 0x28
	
	x2 = x + upper_width/2;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	0fda      	lsrs	r2, r3, #31
 8002bdc:	4413      	add	r3, r2
 8002bde:	105b      	asrs	r3, r3, #1
 8002be0:	461a      	mov	r2, r3
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	4413      	add	r3, r2
 8002be6:	627b      	str	r3, [r7, #36]	; 0x24
	y2 = y;
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	623b      	str	r3, [r7, #32]
	
	x3 = x - lower_width/2;
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	0fda      	lsrs	r2, r3, #31
 8002bf0:	4413      	add	r3, r2
 8002bf2:	105b      	asrs	r3, r3, #1
 8002bf4:	425b      	negs	r3, r3
 8002bf6:	461a      	mov	r2, r3
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	4413      	add	r3, r2
 8002bfc:	61fb      	str	r3, [r7, #28]
	y3 = y - height;
 8002bfe:	68ba      	ldr	r2, [r7, #8]
 8002c00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c02:	1ad3      	subs	r3, r2, r3
 8002c04:	61bb      	str	r3, [r7, #24]
	
	x4 = x + lower_width/2;
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	0fda      	lsrs	r2, r3, #31
 8002c0a:	4413      	add	r3, r2
 8002c0c:	105b      	asrs	r3, r3, #1
 8002c0e:	461a      	mov	r2, r3
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	4413      	add	r3, r2
 8002c14:	617b      	str	r3, [r7, #20]
	y4 = y - height;
 8002c16:	68ba      	ldr	r2, [r7, #8]
 8002c18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c1a:	1ad3      	subs	r3, r2, r3
 8002c1c:	613b      	str	r3, [r7, #16]
	
	//LCD_DrawLine(x1,y1,x2,y2);
	LCD_DrawLine(x1,y1,x3,y3);
 8002c1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c20:	b298      	uxth	r0, r3
 8002c22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c24:	b299      	uxth	r1, r3
 8002c26:	69fb      	ldr	r3, [r7, #28]
 8002c28:	b29a      	uxth	r2, r3
 8002c2a:	69bb      	ldr	r3, [r7, #24]
 8002c2c:	b29b      	uxth	r3, r3
 8002c2e:	f005 fdab 	bl	8008788 <LCD_DrawLine>
	LCD_DrawLine(x4,y4,x2,y2);
 8002c32:	697b      	ldr	r3, [r7, #20]
 8002c34:	b298      	uxth	r0, r3
 8002c36:	693b      	ldr	r3, [r7, #16]
 8002c38:	b299      	uxth	r1, r3
 8002c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c3c:	b29a      	uxth	r2, r3
 8002c3e:	6a3b      	ldr	r3, [r7, #32]
 8002c40:	b29b      	uxth	r3, r3
 8002c42:	f005 fda1 	bl	8008788 <LCD_DrawLine>
	LCD_DrawLine(x4,y4,x3,y3);
 8002c46:	697b      	ldr	r3, [r7, #20]
 8002c48:	b298      	uxth	r0, r3
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	b299      	uxth	r1, r3
 8002c4e:	69fb      	ldr	r3, [r7, #28]
 8002c50:	b29a      	uxth	r2, r3
 8002c52:	69bb      	ldr	r3, [r7, #24]
 8002c54:	b29b      	uxth	r3, r3
 8002c56:	f005 fd97 	bl	8008788 <LCD_DrawLine>
	
}
 8002c5a:	bf00      	nop
 8002c5c:	3730      	adds	r7, #48	; 0x30
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}
	...

08002c64 <draw_start_page>:
#include "lcd.h"
#include "draw.h"
#include <stdio.h>

//��ʼ��������һ��һ����Ϸ��ֻ��ʹ��һ��
void draw_start_page(void){
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b082      	sub	sp, #8
 8002c68:	af02      	add	r7, sp, #8
	LCD_ShowString(30,180,200,24,24,"Aircraft");
 8002c6a:	4b12      	ldr	r3, [pc, #72]	; (8002cb4 <draw_start_page+0x50>)
 8002c6c:	9301      	str	r3, [sp, #4]
 8002c6e:	2318      	movs	r3, #24
 8002c70:	9300      	str	r3, [sp, #0]
 8002c72:	2318      	movs	r3, #24
 8002c74:	22c8      	movs	r2, #200	; 0xc8
 8002c76:	21b4      	movs	r1, #180	; 0xb4
 8002c78:	201e      	movs	r0, #30
 8002c7a:	f005 ff6d 	bl	8008b58 <LCD_ShowString>
	LCD_ShowString(130,180,200,24,24,"Battle");
 8002c7e:	4b0e      	ldr	r3, [pc, #56]	; (8002cb8 <draw_start_page+0x54>)
 8002c80:	9301      	str	r3, [sp, #4]
 8002c82:	2318      	movs	r3, #24
 8002c84:	9300      	str	r3, [sp, #0]
 8002c86:	2318      	movs	r3, #24
 8002c88:	22c8      	movs	r2, #200	; 0xc8
 8002c8a:	21b4      	movs	r1, #180	; 0xb4
 8002c8c:	2082      	movs	r0, #130	; 0x82
 8002c8e:	f005 ff63 	bl	8008b58 <LCD_ShowString>
	
	draw_my_plane(120,120);
 8002c92:	2178      	movs	r1, #120	; 0x78
 8002c94:	2078      	movs	r0, #120	; 0x78
 8002c96:	f7ff f9bd 	bl	8002014 <draw_my_plane>
	
	LCD_ShowString(60,250,200,12,12,"PRESS KEY-0 TO START");
 8002c9a:	4b08      	ldr	r3, [pc, #32]	; (8002cbc <draw_start_page+0x58>)
 8002c9c:	9301      	str	r3, [sp, #4]
 8002c9e:	230c      	movs	r3, #12
 8002ca0:	9300      	str	r3, [sp, #0]
 8002ca2:	230c      	movs	r3, #12
 8002ca4:	22c8      	movs	r2, #200	; 0xc8
 8002ca6:	21fa      	movs	r1, #250	; 0xfa
 8002ca8:	203c      	movs	r0, #60	; 0x3c
 8002caa:	f005 ff55 	bl	8008b58 <LCD_ShowString>
}
 8002cae:	bf00      	nop
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd80      	pop	{r7, pc}
 8002cb4:	0800a400 	.word	0x0800a400
 8002cb8:	0800a40c 	.word	0x0800a40c
 8002cbc:	0800a414 	.word	0x0800a414

08002cc0 <init_play_interface>:

void init_play_interface(void){
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b082      	sub	sp, #8
 8002cc4:	af02      	add	r7, sp, #8
	//设置基础界面

	LCD_DrawLine(1,40,239,40);
 8002cc6:	2328      	movs	r3, #40	; 0x28
 8002cc8:	22ef      	movs	r2, #239	; 0xef
 8002cca:	2128      	movs	r1, #40	; 0x28
 8002ccc:	2001      	movs	r0, #1
 8002cce:	f005 fd5b 	bl	8008788 <LCD_DrawLine>

	LCD_ShowString(8,7,100,24,24,"score");
 8002cd2:	4b0b      	ldr	r3, [pc, #44]	; (8002d00 <init_play_interface+0x40>)
 8002cd4:	9301      	str	r3, [sp, #4]
 8002cd6:	2318      	movs	r3, #24
 8002cd8:	9300      	str	r3, [sp, #0]
 8002cda:	2318      	movs	r3, #24
 8002cdc:	2264      	movs	r2, #100	; 0x64
 8002cde:	2107      	movs	r1, #7
 8002ce0:	2008      	movs	r0, #8
 8002ce2:	f005 ff39 	bl	8008b58 <LCD_ShowString>
	LCD_ShowString(130,7,100,24,24,"life");
 8002ce6:	4b07      	ldr	r3, [pc, #28]	; (8002d04 <init_play_interface+0x44>)
 8002ce8:	9301      	str	r3, [sp, #4]
 8002cea:	2318      	movs	r3, #24
 8002cec:	9300      	str	r3, [sp, #0]
 8002cee:	2318      	movs	r3, #24
 8002cf0:	2264      	movs	r2, #100	; 0x64
 8002cf2:	2107      	movs	r1, #7
 8002cf4:	2082      	movs	r0, #130	; 0x82
 8002cf6:	f005 ff2f 	bl	8008b58 <LCD_ShowString>
}
 8002cfa:	bf00      	nop
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd80      	pop	{r7, pc}
 8002d00:	0800a42c 	.word	0x0800a42c
 8002d04:	0800a434 	.word	0x0800a434

08002d08 <draw_end>:


void draw_end(int *score,int *score_2, int *score_3){
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b086      	sub	sp, #24
 8002d0c:	af02      	add	r7, sp, #8
 8002d0e:	60f8      	str	r0, [r7, #12]
 8002d10:	60b9      	str	r1, [r7, #8]
 8002d12:	607a      	str	r2, [r7, #4]
	LCD_Clear(GRAY);
 8002d14:	f248 4030 	movw	r0, #33840	; 0x8430
 8002d18:	f005 fc48 	bl	80085ac <LCD_Clear>
	
	LCD_ShowString(60,30,200,24,24,"Game Over");
 8002d1c:	4b84      	ldr	r3, [pc, #528]	; (8002f30 <draw_end+0x228>)
 8002d1e:	9301      	str	r3, [sp, #4]
 8002d20:	2318      	movs	r3, #24
 8002d22:	9300      	str	r3, [sp, #0]
 8002d24:	2318      	movs	r3, #24
 8002d26:	22c8      	movs	r2, #200	; 0xc8
 8002d28:	211e      	movs	r1, #30
 8002d2a:	203c      	movs	r0, #60	; 0x3c
 8002d2c:	f005 ff14 	bl	8008b58 <LCD_ShowString>
	LCD_ShowString(30,80,200,24,24,"My SCORE:");
 8002d30:	4b80      	ldr	r3, [pc, #512]	; (8002f34 <draw_end+0x22c>)
 8002d32:	9301      	str	r3, [sp, #4]
 8002d34:	2318      	movs	r3, #24
 8002d36:	9300      	str	r3, [sp, #0]
 8002d38:	2318      	movs	r3, #24
 8002d3a:	22c8      	movs	r2, #200	; 0xc8
 8002d3c:	2150      	movs	r1, #80	; 0x50
 8002d3e:	201e      	movs	r0, #30
 8002d40:	f005 ff0a 	bl	8008b58 <LCD_ShowString>
	LCD_ShowxNum(130,80,*score,4,24,0);
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	461a      	mov	r2, r3
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	9301      	str	r3, [sp, #4]
 8002d4e:	2318      	movs	r3, #24
 8002d50:	9300      	str	r3, [sp, #0]
 8002d52:	2304      	movs	r3, #4
 8002d54:	2150      	movs	r1, #80	; 0x50
 8002d56:	2082      	movs	r0, #130	; 0x82
 8002d58:	f005 fe64 	bl	8008a24 <LCD_ShowxNum>
	if(*score_2 == 0 && *score_3 == 0){
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d132      	bne.n	8002dca <draw_end+0xc2>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d12e      	bne.n	8002dca <draw_end+0xc2>
		*score_2 = *score;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681a      	ldr	r2, [r3, #0]
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	601a      	str	r2, [r3, #0]
		LCD_ShowString(30,140,200,24,24,"Rank1:");
 8002d74:	4b70      	ldr	r3, [pc, #448]	; (8002f38 <draw_end+0x230>)
 8002d76:	9301      	str	r3, [sp, #4]
 8002d78:	2318      	movs	r3, #24
 8002d7a:	9300      	str	r3, [sp, #0]
 8002d7c:	2318      	movs	r3, #24
 8002d7e:	22c8      	movs	r2, #200	; 0xc8
 8002d80:	218c      	movs	r1, #140	; 0x8c
 8002d82:	201e      	movs	r0, #30
 8002d84:	f005 fee8 	bl	8008b58 <LCD_ShowString>
		LCD_ShowxNum(130,140,*score_2,4,24,0);
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	461a      	mov	r2, r3
 8002d8e:	2300      	movs	r3, #0
 8002d90:	9301      	str	r3, [sp, #4]
 8002d92:	2318      	movs	r3, #24
 8002d94:	9300      	str	r3, [sp, #0]
 8002d96:	2304      	movs	r3, #4
 8002d98:	218c      	movs	r1, #140	; 0x8c
 8002d9a:	2082      	movs	r0, #130	; 0x82
 8002d9c:	f005 fe42 	bl	8008a24 <LCD_ShowxNum>
		LCD_ShowString(30,200,200,24,24,"Rank2:");
 8002da0:	4b66      	ldr	r3, [pc, #408]	; (8002f3c <draw_end+0x234>)
 8002da2:	9301      	str	r3, [sp, #4]
 8002da4:	2318      	movs	r3, #24
 8002da6:	9300      	str	r3, [sp, #0]
 8002da8:	2318      	movs	r3, #24
 8002daa:	22c8      	movs	r2, #200	; 0xc8
 8002dac:	21c8      	movs	r1, #200	; 0xc8
 8002dae:	201e      	movs	r0, #30
 8002db0:	f005 fed2 	bl	8008b58 <LCD_ShowString>
		LCD_ShowString(160,200,200,24,24,"--");
 8002db4:	4b62      	ldr	r3, [pc, #392]	; (8002f40 <draw_end+0x238>)
 8002db6:	9301      	str	r3, [sp, #4]
 8002db8:	2318      	movs	r3, #24
 8002dba:	9300      	str	r3, [sp, #0]
 8002dbc:	2318      	movs	r3, #24
 8002dbe:	22c8      	movs	r2, #200	; 0xc8
 8002dc0:	21c8      	movs	r1, #200	; 0xc8
 8002dc2:	20a0      	movs	r0, #160	; 0xa0
 8002dc4:	f005 fec8 	bl	8008b58 <LCD_ShowString>
 8002dc8:	e0a0      	b.n	8002f0c <draw_end+0x204>
	}else if(*score_2 != 0 && *score_3 == 0){
 8002dca:	68bb      	ldr	r3, [r7, #8]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d049      	beq.n	8002e66 <draw_end+0x15e>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d145      	bne.n	8002e66 <draw_end+0x15e>
		if (*score > *score_2) {
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681a      	ldr	r2, [r3, #0]
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	429a      	cmp	r2, r3
 8002de4:	dd08      	ble.n	8002df8 <draw_end+0xf0>
			*score_3 = *score_2;
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	681a      	ldr	r2, [r3, #0]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	601a      	str	r2, [r3, #0]
			*score_2 = *score;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681a      	ldr	r2, [r3, #0]
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	601a      	str	r2, [r3, #0]
 8002df6:	e009      	b.n	8002e0c <draw_end+0x104>
		} else if (*score < *score_2) {
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681a      	ldr	r2, [r3, #0]
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	429a      	cmp	r2, r3
 8002e02:	da03      	bge.n	8002e0c <draw_end+0x104>
			*score_3 = *score;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681a      	ldr	r2, [r3, #0]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	601a      	str	r2, [r3, #0]
		}
		LCD_ShowString(30,140,200,24,24,"Rank1:");
 8002e0c:	4b4a      	ldr	r3, [pc, #296]	; (8002f38 <draw_end+0x230>)
 8002e0e:	9301      	str	r3, [sp, #4]
 8002e10:	2318      	movs	r3, #24
 8002e12:	9300      	str	r3, [sp, #0]
 8002e14:	2318      	movs	r3, #24
 8002e16:	22c8      	movs	r2, #200	; 0xc8
 8002e18:	218c      	movs	r1, #140	; 0x8c
 8002e1a:	201e      	movs	r0, #30
 8002e1c:	f005 fe9c 	bl	8008b58 <LCD_ShowString>
		LCD_ShowxNum(130,140,*score_2,4,24,0);
 8002e20:	68bb      	ldr	r3, [r7, #8]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	461a      	mov	r2, r3
 8002e26:	2300      	movs	r3, #0
 8002e28:	9301      	str	r3, [sp, #4]
 8002e2a:	2318      	movs	r3, #24
 8002e2c:	9300      	str	r3, [sp, #0]
 8002e2e:	2304      	movs	r3, #4
 8002e30:	218c      	movs	r1, #140	; 0x8c
 8002e32:	2082      	movs	r0, #130	; 0x82
 8002e34:	f005 fdf6 	bl	8008a24 <LCD_ShowxNum>
		LCD_ShowString(30,200,200,24,24,"Rank2:");
 8002e38:	4b40      	ldr	r3, [pc, #256]	; (8002f3c <draw_end+0x234>)
 8002e3a:	9301      	str	r3, [sp, #4]
 8002e3c:	2318      	movs	r3, #24
 8002e3e:	9300      	str	r3, [sp, #0]
 8002e40:	2318      	movs	r3, #24
 8002e42:	22c8      	movs	r2, #200	; 0xc8
 8002e44:	21c8      	movs	r1, #200	; 0xc8
 8002e46:	201e      	movs	r0, #30
 8002e48:	f005 fe86 	bl	8008b58 <LCD_ShowString>
		LCD_ShowxNum(130,200,*score_3,4,24,0);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	461a      	mov	r2, r3
 8002e52:	2300      	movs	r3, #0
 8002e54:	9301      	str	r3, [sp, #4]
 8002e56:	2318      	movs	r3, #24
 8002e58:	9300      	str	r3, [sp, #0]
 8002e5a:	2304      	movs	r3, #4
 8002e5c:	21c8      	movs	r1, #200	; 0xc8
 8002e5e:	2082      	movs	r0, #130	; 0x82
 8002e60:	f005 fde0 	bl	8008a24 <LCD_ShowxNum>
 8002e64:	e052      	b.n	8002f0c <draw_end+0x204>
	}else if(*score_2 != 0 && *score_3 != 0){
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d04e      	beq.n	8002f0c <draw_end+0x204>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d04a      	beq.n	8002f0c <draw_end+0x204>
		if (*score > *score_2) {
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681a      	ldr	r2, [r3, #0]
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	429a      	cmp	r2, r3
 8002e80:	dd08      	ble.n	8002e94 <draw_end+0x18c>
			*score_3 = *score_2;
 8002e82:	68bb      	ldr	r3, [r7, #8]
 8002e84:	681a      	ldr	r2, [r3, #0]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	601a      	str	r2, [r3, #0]
			*score_2 = *score;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681a      	ldr	r2, [r3, #0]
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	601a      	str	r2, [r3, #0]
 8002e92:	e00f      	b.n	8002eb4 <draw_end+0x1ac>
		} else if (*score < *score_2 && *score > *score_3) {
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681a      	ldr	r2, [r3, #0]
 8002e98:	68bb      	ldr	r3, [r7, #8]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	429a      	cmp	r2, r3
 8002e9e:	da09      	bge.n	8002eb4 <draw_end+0x1ac>
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681a      	ldr	r2, [r3, #0]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	429a      	cmp	r2, r3
 8002eaa:	dd03      	ble.n	8002eb4 <draw_end+0x1ac>
			*score_3 = *score;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681a      	ldr	r2, [r3, #0]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	601a      	str	r2, [r3, #0]
		}
		LCD_ShowString(30,140,200,24,24,"Rank1:");
 8002eb4:	4b20      	ldr	r3, [pc, #128]	; (8002f38 <draw_end+0x230>)
 8002eb6:	9301      	str	r3, [sp, #4]
 8002eb8:	2318      	movs	r3, #24
 8002eba:	9300      	str	r3, [sp, #0]
 8002ebc:	2318      	movs	r3, #24
 8002ebe:	22c8      	movs	r2, #200	; 0xc8
 8002ec0:	218c      	movs	r1, #140	; 0x8c
 8002ec2:	201e      	movs	r0, #30
 8002ec4:	f005 fe48 	bl	8008b58 <LCD_ShowString>
		LCD_ShowxNum(130,140,*score_2,4,24,0);
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	461a      	mov	r2, r3
 8002ece:	2300      	movs	r3, #0
 8002ed0:	9301      	str	r3, [sp, #4]
 8002ed2:	2318      	movs	r3, #24
 8002ed4:	9300      	str	r3, [sp, #0]
 8002ed6:	2304      	movs	r3, #4
 8002ed8:	218c      	movs	r1, #140	; 0x8c
 8002eda:	2082      	movs	r0, #130	; 0x82
 8002edc:	f005 fda2 	bl	8008a24 <LCD_ShowxNum>
		LCD_ShowString(30,200,200,24,24,"Rank2:");
 8002ee0:	4b16      	ldr	r3, [pc, #88]	; (8002f3c <draw_end+0x234>)
 8002ee2:	9301      	str	r3, [sp, #4]
 8002ee4:	2318      	movs	r3, #24
 8002ee6:	9300      	str	r3, [sp, #0]
 8002ee8:	2318      	movs	r3, #24
 8002eea:	22c8      	movs	r2, #200	; 0xc8
 8002eec:	21c8      	movs	r1, #200	; 0xc8
 8002eee:	201e      	movs	r0, #30
 8002ef0:	f005 fe32 	bl	8008b58 <LCD_ShowString>
		LCD_ShowxNum(130,200,*score_3,4,24,0);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	461a      	mov	r2, r3
 8002efa:	2300      	movs	r3, #0
 8002efc:	9301      	str	r3, [sp, #4]
 8002efe:	2318      	movs	r3, #24
 8002f00:	9300      	str	r3, [sp, #0]
 8002f02:	2304      	movs	r3, #4
 8002f04:	21c8      	movs	r1, #200	; 0xc8
 8002f06:	2082      	movs	r0, #130	; 0x82
 8002f08:	f005 fd8c 	bl	8008a24 <LCD_ShowxNum>
	}

	*score = 0;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	601a      	str	r2, [r3, #0]
	
	LCD_ShowString(60,280,200,12,12,"Powered by 2019SUSTech");
 8002f12:	4b0c      	ldr	r3, [pc, #48]	; (8002f44 <draw_end+0x23c>)
 8002f14:	9301      	str	r3, [sp, #4]
 8002f16:	230c      	movs	r3, #12
 8002f18:	9300      	str	r3, [sp, #0]
 8002f1a:	230c      	movs	r3, #12
 8002f1c:	22c8      	movs	r2, #200	; 0xc8
 8002f1e:	f44f 718c 	mov.w	r1, #280	; 0x118
 8002f22:	203c      	movs	r0, #60	; 0x3c
 8002f24:	f005 fe18 	bl	8008b58 <LCD_ShowString>
}
 8002f28:	bf00      	nop
 8002f2a:	3710      	adds	r7, #16
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd80      	pop	{r7, pc}
 8002f30:	0800a43c 	.word	0x0800a43c
 8002f34:	0800a448 	.word	0x0800a448
 8002f38:	0800a454 	.word	0x0800a454
 8002f3c:	0800a45c 	.word	0x0800a45c
 8002f40:	0800a464 	.word	0x0800a464
 8002f44:	0800a468 	.word	0x0800a468

08002f48 <draw_play_title>:

//������Ⱦ�ɵ��� basic_draw.h
//1. �ҷ��ɻ���Ⱦ
//2. boss��Ⱦ
//3. cross��Ⱦ
void draw_play_title(int score, int life){
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b086      	sub	sp, #24
 8002f4c:	af02      	add	r7, sp, #8
 8002f4e:	6078      	str	r0, [r7, #4]
 8002f50:	6039      	str	r1, [r7, #0]
	//�����Ϣ
	int i=0;
 8002f52:	2300      	movs	r3, #0
 8002f54:	60fb      	str	r3, [r7, #12]
	int start_x = 195;
 8002f56:	23c3      	movs	r3, #195	; 0xc3
 8002f58:	60bb      	str	r3, [r7, #8]
	
	//LCD_Fill(75,8,130,32,GRAY);
	LCD_ShowxNum(75,8,score,4,24,0);		//��ʾ����
 8002f5a:	687a      	ldr	r2, [r7, #4]
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	9301      	str	r3, [sp, #4]
 8002f60:	2318      	movs	r3, #24
 8002f62:	9300      	str	r3, [sp, #0]
 8002f64:	2304      	movs	r3, #4
 8002f66:	2108      	movs	r1, #8
 8002f68:	204b      	movs	r0, #75	; 0x4b
 8002f6a:	f005 fd5b 	bl	8008a24 <LCD_ShowxNum>
	
	LCD_Fill(190,15,226,25,BACK_COLOR);
 8002f6e:	4b11      	ldr	r3, [pc, #68]	; (8002fb4 <draw_play_title+0x6c>)
 8002f70:	881b      	ldrh	r3, [r3, #0]
 8002f72:	9300      	str	r3, [sp, #0]
 8002f74:	2319      	movs	r3, #25
 8002f76:	22e2      	movs	r2, #226	; 0xe2
 8002f78:	210f      	movs	r1, #15
 8002f7a:	20be      	movs	r0, #190	; 0xbe
 8002f7c:	f005 fb78 	bl	8008670 <LCD_Fill>
	for(i=0; i<life; i++){	//��ʾ����ֵ
 8002f80:	2300      	movs	r3, #0
 8002f82:	60fb      	str	r3, [r7, #12]
 8002f84:	e00e      	b.n	8002fa4 <draw_play_title+0x5c>
		draw_heart(start_x+i*13, 20);
 8002f86:	68fa      	ldr	r2, [r7, #12]
 8002f88:	4613      	mov	r3, r2
 8002f8a:	005b      	lsls	r3, r3, #1
 8002f8c:	4413      	add	r3, r2
 8002f8e:	009b      	lsls	r3, r3, #2
 8002f90:	441a      	add	r2, r3
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	4413      	add	r3, r2
 8002f96:	2114      	movs	r1, #20
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f7ff fb81 	bl	80026a0 <draw_heart>
	for(i=0; i<life; i++){	//��ʾ����ֵ
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	3301      	adds	r3, #1
 8002fa2:	60fb      	str	r3, [r7, #12]
 8002fa4:	68fa      	ldr	r2, [r7, #12]
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	429a      	cmp	r2, r3
 8002faa:	dbec      	blt.n	8002f86 <draw_play_title+0x3e>
	}
}
 8002fac:	bf00      	nop
 8002fae:	3710      	adds	r7, #16
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bd80      	pop	{r7, pc}
 8002fb4:	20000010 	.word	0x20000010

08002fb8 <draw_all_my_buttles>:
//#define my_buttle_max 100
//#define enemy_buttle_max 300
//#define enemy_plane_max 10

//���� 0��0
void draw_all_my_buttles(int my_buttles[100][2]){
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b084      	sub	sp, #16
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
	int i =0;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	60fb      	str	r3, [r7, #12]
	for(i=0; i<100; i++){
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	60fb      	str	r3, [r7, #12]
 8002fc8:	e016      	b.n	8002ff8 <draw_all_my_buttles+0x40>
		if(my_buttles[i][0] != 0){
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	00db      	lsls	r3, r3, #3
 8002fce:	687a      	ldr	r2, [r7, #4]
 8002fd0:	4413      	add	r3, r2
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d00c      	beq.n	8002ff2 <draw_all_my_buttles+0x3a>
			draw_my_bullet(my_buttles[i][0],my_buttles[i][1]);
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	00db      	lsls	r3, r3, #3
 8002fdc:	687a      	ldr	r2, [r7, #4]
 8002fde:	4413      	add	r3, r2
 8002fe0:	6818      	ldr	r0, [r3, #0]
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	00db      	lsls	r3, r3, #3
 8002fe6:	687a      	ldr	r2, [r7, #4]
 8002fe8:	4413      	add	r3, r2
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	4619      	mov	r1, r3
 8002fee:	f7ff fab4 	bl	800255a <draw_my_bullet>
	for(i=0; i<100; i++){
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	3301      	adds	r3, #1
 8002ff6:	60fb      	str	r3, [r7, #12]
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	2b63      	cmp	r3, #99	; 0x63
 8002ffc:	dde5      	ble.n	8002fca <draw_all_my_buttles+0x12>
		}
	}
}
 8002ffe:	bf00      	nop
 8003000:	3710      	adds	r7, #16
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}

08003006 <draw_all_enemy_planes>:

//���� 0��0
void draw_all_enemy_planes(int enemy_planes[10][2]){
 8003006:	b580      	push	{r7, lr}
 8003008:	b084      	sub	sp, #16
 800300a:	af00      	add	r7, sp, #0
 800300c:	6078      	str	r0, [r7, #4]
	int i = 0;
 800300e:	2300      	movs	r3, #0
 8003010:	60fb      	str	r3, [r7, #12]
	for(i=0; i<10; i++){
 8003012:	2300      	movs	r3, #0
 8003014:	60fb      	str	r3, [r7, #12]
 8003016:	e016      	b.n	8003046 <draw_all_enemy_planes+0x40>
		if(enemy_planes[i][0] != 0){
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	00db      	lsls	r3, r3, #3
 800301c:	687a      	ldr	r2, [r7, #4]
 800301e:	4413      	add	r3, r2
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d00c      	beq.n	8003040 <draw_all_enemy_planes+0x3a>
			draw_enemy_plane(enemy_planes[i][0],enemy_planes[i][1]);
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	00db      	lsls	r3, r3, #3
 800302a:	687a      	ldr	r2, [r7, #4]
 800302c:	4413      	add	r3, r2
 800302e:	6818      	ldr	r0, [r3, #0]
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	00db      	lsls	r3, r3, #3
 8003034:	687a      	ldr	r2, [r7, #4]
 8003036:	4413      	add	r3, r2
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	4619      	mov	r1, r3
 800303c:	f7ff f81e 	bl	800207c <draw_enemy_plane>
	for(i=0; i<10; i++){
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	3301      	adds	r3, #1
 8003044:	60fb      	str	r3, [r7, #12]
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	2b09      	cmp	r3, #9
 800304a:	dde5      	ble.n	8003018 <draw_all_enemy_planes+0x12>
		}
	}
}
 800304c:	bf00      	nop
 800304e:	3710      	adds	r7, #16
 8003050:	46bd      	mov	sp, r7
 8003052:	bd80      	pop	{r7, pc}

08003054 <draw_all_enemy_buttles>:

//���� 0��0
void draw_all_enemy_buttles(int enemy_buttles[300][2]){
 8003054:	b580      	push	{r7, lr}
 8003056:	b084      	sub	sp, #16
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
	int i =0;
 800305c:	2300      	movs	r3, #0
 800305e:	60fb      	str	r3, [r7, #12]
	for(i=0; i<300; i++){
 8003060:	2300      	movs	r3, #0
 8003062:	60fb      	str	r3, [r7, #12]
 8003064:	e016      	b.n	8003094 <draw_all_enemy_buttles+0x40>
		if(enemy_buttles[i][0] != 0){
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	00db      	lsls	r3, r3, #3
 800306a:	687a      	ldr	r2, [r7, #4]
 800306c:	4413      	add	r3, r2
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d00c      	beq.n	800308e <draw_all_enemy_buttles+0x3a>
			draw_enemy_bullet(enemy_buttles[i][0],enemy_buttles[i][1]);
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	00db      	lsls	r3, r3, #3
 8003078:	687a      	ldr	r2, [r7, #4]
 800307a:	4413      	add	r3, r2
 800307c:	6818      	ldr	r0, [r3, #0]
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	00db      	lsls	r3, r3, #3
 8003082:	687a      	ldr	r2, [r7, #4]
 8003084:	4413      	add	r3, r2
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	4619      	mov	r1, r3
 800308a:	f7ff fab7 	bl	80025fc <draw_enemy_bullet>
	for(i=0; i<300; i++){
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	3301      	adds	r3, #1
 8003092:	60fb      	str	r3, [r7, #12]
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800309a:	dbe4      	blt.n	8003066 <draw_all_enemy_buttles+0x12>
		}
	}
}
 800309c:	bf00      	nop
 800309e:	3710      	adds	r7, #16
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd80      	pop	{r7, pc}

080030a4 <draw_play_all>:



//����Ⱦ����Ⱦ���������
//��Щ�����ҲҪ��Ⱦ���ή��Ч��
void draw_play_all(int score,int life, int my_plane[2], int my_buttles[100][2], int boss[2], int enemy_planes[10][2], int enemy_buttles[300][2]){
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b084      	sub	sp, #16
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	60f8      	str	r0, [r7, #12]
 80030ac:	60b9      	str	r1, [r7, #8]
 80030ae:	607a      	str	r2, [r7, #4]
 80030b0:	603b      	str	r3, [r7, #0]
	draw_play_title(score,life);
 80030b2:	68b9      	ldr	r1, [r7, #8]
 80030b4:	68f8      	ldr	r0, [r7, #12]
 80030b6:	f7ff ff47 	bl	8002f48 <draw_play_title>
	
	draw_my_plane(my_plane[0],my_plane[1]);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681a      	ldr	r2, [r3, #0]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	3304      	adds	r3, #4
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4619      	mov	r1, r3
 80030c6:	4610      	mov	r0, r2
 80030c8:	f7fe ffa4 	bl	8002014 <draw_my_plane>
	draw_all_my_buttles(my_buttles);
 80030cc:	6838      	ldr	r0, [r7, #0]
 80030ce:	f7ff ff73 	bl	8002fb8 <draw_all_my_buttles>
	if(boss[0]!= 0){
 80030d2:	69bb      	ldr	r3, [r7, #24]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d008      	beq.n	80030ec <draw_play_all+0x48>
		draw_boss(boss[0],boss[1]);
 80030da:	69bb      	ldr	r3, [r7, #24]
 80030dc:	681a      	ldr	r2, [r3, #0]
 80030de:	69bb      	ldr	r3, [r7, #24]
 80030e0:	3304      	adds	r3, #4
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4619      	mov	r1, r3
 80030e6:	4610      	mov	r0, r2
 80030e8:	f7fe fffc 	bl	80020e4 <draw_boss>
	}
	draw_all_enemy_planes(enemy_planes);
 80030ec:	69f8      	ldr	r0, [r7, #28]
 80030ee:	f7ff ff8a 	bl	8003006 <draw_all_enemy_planes>
	draw_all_enemy_buttles(enemy_buttles);
 80030f2:	6a38      	ldr	r0, [r7, #32]
 80030f4:	f7ff ffae 	bl	8003054 <draw_all_enemy_buttles>
}
 80030f8:	bf00      	nop
 80030fa:	3710      	adds	r7, #16
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bd80      	pop	{r7, pc}

08003100 <LCD_WR_REG>:
//默认为竖屏
_lcd_dev lcddev;

//写寄存器函数
//data:寄存器值
void LCD_WR_REG(uint16_t data) {
 8003100:	b480      	push	{r7}
 8003102:	b083      	sub	sp, #12
 8003104:	af00      	add	r7, sp, #0
 8003106:	4603      	mov	r3, r0
 8003108:	80fb      	strh	r3, [r7, #6]
	LCD_RS_CLR;  //写地址
 800310a:	4b0d      	ldr	r3, [pc, #52]	; (8003140 <LCD_WR_REG+0x40>)
 800310c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003110:	615a      	str	r2, [r3, #20]
	LCD_CS_CLR;
 8003112:	4b0b      	ldr	r3, [pc, #44]	; (8003140 <LCD_WR_REG+0x40>)
 8003114:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003118:	615a      	str	r2, [r3, #20]
	DATAOUT(data);
 800311a:	4a0a      	ldr	r2, [pc, #40]	; (8003144 <LCD_WR_REG+0x44>)
 800311c:	88fb      	ldrh	r3, [r7, #6]
 800311e:	60d3      	str	r3, [r2, #12]
	LCD_WR_CLR;
 8003120:	4b07      	ldr	r3, [pc, #28]	; (8003140 <LCD_WR_REG+0x40>)
 8003122:	2280      	movs	r2, #128	; 0x80
 8003124:	615a      	str	r2, [r3, #20]
	LCD_WR_SET;
 8003126:	4b06      	ldr	r3, [pc, #24]	; (8003140 <LCD_WR_REG+0x40>)
 8003128:	2280      	movs	r2, #128	; 0x80
 800312a:	611a      	str	r2, [r3, #16]
	LCD_CS_SET;
 800312c:	4b04      	ldr	r3, [pc, #16]	; (8003140 <LCD_WR_REG+0x40>)
 800312e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003132:	611a      	str	r2, [r3, #16]
}
 8003134:	bf00      	nop
 8003136:	370c      	adds	r7, #12
 8003138:	46bd      	mov	sp, r7
 800313a:	bc80      	pop	{r7}
 800313c:	4770      	bx	lr
 800313e:	bf00      	nop
 8003140:	40011000 	.word	0x40011000
 8003144:	40010c00 	.word	0x40010c00

08003148 <LCD_WR_DATAX>:
//写数据函数
//可以替代LCD_WR_DATAX宏,拿时间换空间.
//data:寄存器值
void LCD_WR_DATAX(uint16_t data) {
 8003148:	b480      	push	{r7}
 800314a:	b083      	sub	sp, #12
 800314c:	af00      	add	r7, sp, #0
 800314e:	4603      	mov	r3, r0
 8003150:	80fb      	strh	r3, [r7, #6]
	LCD_RS_SET;
 8003152:	4b0d      	ldr	r3, [pc, #52]	; (8003188 <LCD_WR_DATAX+0x40>)
 8003154:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003158:	611a      	str	r2, [r3, #16]
	LCD_CS_CLR;
 800315a:	4b0b      	ldr	r3, [pc, #44]	; (8003188 <LCD_WR_DATAX+0x40>)
 800315c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003160:	615a      	str	r2, [r3, #20]
	DATAOUT(data);
 8003162:	4a0a      	ldr	r2, [pc, #40]	; (800318c <LCD_WR_DATAX+0x44>)
 8003164:	88fb      	ldrh	r3, [r7, #6]
 8003166:	60d3      	str	r3, [r2, #12]
	LCD_WR_CLR;
 8003168:	4b07      	ldr	r3, [pc, #28]	; (8003188 <LCD_WR_DATAX+0x40>)
 800316a:	2280      	movs	r2, #128	; 0x80
 800316c:	615a      	str	r2, [r3, #20]
	LCD_WR_SET;
 800316e:	4b06      	ldr	r3, [pc, #24]	; (8003188 <LCD_WR_DATAX+0x40>)
 8003170:	2280      	movs	r2, #128	; 0x80
 8003172:	611a      	str	r2, [r3, #16]
	LCD_CS_SET;
 8003174:	4b04      	ldr	r3, [pc, #16]	; (8003188 <LCD_WR_DATAX+0x40>)
 8003176:	f44f 7200 	mov.w	r2, #512	; 0x200
 800317a:	611a      	str	r2, [r3, #16]
}
 800317c:	bf00      	nop
 800317e:	370c      	adds	r7, #12
 8003180:	46bd      	mov	sp, r7
 8003182:	bc80      	pop	{r7}
 8003184:	4770      	bx	lr
 8003186:	bf00      	nop
 8003188:	40011000 	.word	0x40011000
 800318c:	40010c00 	.word	0x40010c00

08003190 <LCD_RD_DATA>:
//读LCD数据
//返回值:读到的值
uint16_t LCD_RD_DATA(void) {
 8003190:	b580      	push	{r7, lr}
 8003192:	b082      	sub	sp, #8
 8003194:	af00      	add	r7, sp, #0
	uint16_t t;
	GPIOB->CRL = 0X88888888; //PB0-7  上拉输入
 8003196:	4b1d      	ldr	r3, [pc, #116]	; (800320c <LCD_RD_DATA+0x7c>)
 8003198:	f04f 3288 	mov.w	r2, #2290649224	; 0x88888888
 800319c:	601a      	str	r2, [r3, #0]
	GPIOB->CRH = 0X88888888; //PB8-15 上拉输入
 800319e:	4b1b      	ldr	r3, [pc, #108]	; (800320c <LCD_RD_DATA+0x7c>)
 80031a0:	f04f 3288 	mov.w	r2, #2290649224	; 0x88888888
 80031a4:	605a      	str	r2, [r3, #4]
	GPIOB->ODR = 0X0000;     //全部输出0
 80031a6:	4b19      	ldr	r3, [pc, #100]	; (800320c <LCD_RD_DATA+0x7c>)
 80031a8:	2200      	movs	r2, #0
 80031aa:	60da      	str	r2, [r3, #12]

	LCD_RS_SET;
 80031ac:	4b18      	ldr	r3, [pc, #96]	; (8003210 <LCD_RD_DATA+0x80>)
 80031ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80031b2:	611a      	str	r2, [r3, #16]
	LCD_CS_CLR;
 80031b4:	4b16      	ldr	r3, [pc, #88]	; (8003210 <LCD_RD_DATA+0x80>)
 80031b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80031ba:	615a      	str	r2, [r3, #20]
	//读取数据(读寄存器时,并不需要读2次)
	LCD_RD_CLR;
 80031bc:	4b14      	ldr	r3, [pc, #80]	; (8003210 <LCD_RD_DATA+0x80>)
 80031be:	2240      	movs	r2, #64	; 0x40
 80031c0:	615a      	str	r2, [r3, #20]
	if (lcddev.id == 0X8989)
 80031c2:	4b14      	ldr	r3, [pc, #80]	; (8003214 <LCD_RD_DATA+0x84>)
 80031c4:	889b      	ldrh	r3, [r3, #4]
 80031c6:	f648 1289 	movw	r2, #35209	; 0x8989
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d102      	bne.n	80031d4 <LCD_RD_DATA+0x44>
		HAL_Delay(1); // delay_us(2);//FOR 8989,延时2us
 80031ce:	2001      	movs	r0, #1
 80031d0:	f7fd fc7a 	bl	8000ac8 <HAL_Delay>
	t = DATAIN
 80031d4:	4b0d      	ldr	r3, [pc, #52]	; (800320c <LCD_RD_DATA+0x7c>)
 80031d6:	689b      	ldr	r3, [r3, #8]
 80031d8:	80fb      	strh	r3, [r7, #6]
	;
	LCD_RD_SET;
 80031da:	4b0d      	ldr	r3, [pc, #52]	; (8003210 <LCD_RD_DATA+0x80>)
 80031dc:	2240      	movs	r2, #64	; 0x40
 80031de:	611a      	str	r2, [r3, #16]
	LCD_CS_SET;
 80031e0:	4b0b      	ldr	r3, [pc, #44]	; (8003210 <LCD_RD_DATA+0x80>)
 80031e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80031e6:	611a      	str	r2, [r3, #16]

	GPIOB->CRL = 0X33333333; //PB0-7  上拉输出
 80031e8:	4b08      	ldr	r3, [pc, #32]	; (800320c <LCD_RD_DATA+0x7c>)
 80031ea:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 80031ee:	601a      	str	r2, [r3, #0]
	GPIOB->CRH = 0X33333333; //PB8-15 上拉输出
 80031f0:	4b06      	ldr	r3, [pc, #24]	; (800320c <LCD_RD_DATA+0x7c>)
 80031f2:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 80031f6:	605a      	str	r2, [r3, #4]
	GPIOB->ODR = 0XFFFF;    //全部输出高
 80031f8:	4b04      	ldr	r3, [pc, #16]	; (800320c <LCD_RD_DATA+0x7c>)
 80031fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80031fe:	60da      	str	r2, [r3, #12]
	return t;
 8003200:	88fb      	ldrh	r3, [r7, #6]
}
 8003202:	4618      	mov	r0, r3
 8003204:	3708      	adds	r7, #8
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}
 800320a:	bf00      	nop
 800320c:	40010c00 	.word	0x40010c00
 8003210:	40011000 	.word	0x40011000
 8003214:	200000b4 	.word	0x200000b4

08003218 <LCD_WriteReg>:
//写寄存器
//LCD_Reg:寄存器编号
//LCD_RegValue:要写入的值
void LCD_WriteReg(uint16_t LCD_Reg, uint16_t LCD_RegValue) {
 8003218:	b580      	push	{r7, lr}
 800321a:	b082      	sub	sp, #8
 800321c:	af00      	add	r7, sp, #0
 800321e:	4603      	mov	r3, r0
 8003220:	460a      	mov	r2, r1
 8003222:	80fb      	strh	r3, [r7, #6]
 8003224:	4613      	mov	r3, r2
 8003226:	80bb      	strh	r3, [r7, #4]
	LCD_WR_REG(LCD_Reg);
 8003228:	88fb      	ldrh	r3, [r7, #6]
 800322a:	4618      	mov	r0, r3
 800322c:	f7ff ff68 	bl	8003100 <LCD_WR_REG>
	LCD_WR_DATA(LCD_RegValue);
 8003230:	4b0c      	ldr	r3, [pc, #48]	; (8003264 <LCD_WriteReg+0x4c>)
 8003232:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003236:	611a      	str	r2, [r3, #16]
 8003238:	4b0a      	ldr	r3, [pc, #40]	; (8003264 <LCD_WriteReg+0x4c>)
 800323a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800323e:	615a      	str	r2, [r3, #20]
 8003240:	4a09      	ldr	r2, [pc, #36]	; (8003268 <LCD_WriteReg+0x50>)
 8003242:	88bb      	ldrh	r3, [r7, #4]
 8003244:	60d3      	str	r3, [r2, #12]
 8003246:	4b07      	ldr	r3, [pc, #28]	; (8003264 <LCD_WriteReg+0x4c>)
 8003248:	2280      	movs	r2, #128	; 0x80
 800324a:	615a      	str	r2, [r3, #20]
 800324c:	4b05      	ldr	r3, [pc, #20]	; (8003264 <LCD_WriteReg+0x4c>)
 800324e:	2280      	movs	r2, #128	; 0x80
 8003250:	611a      	str	r2, [r3, #16]
 8003252:	4b04      	ldr	r3, [pc, #16]	; (8003264 <LCD_WriteReg+0x4c>)
 8003254:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003258:	611a      	str	r2, [r3, #16]
}
 800325a:	bf00      	nop
 800325c:	3708      	adds	r7, #8
 800325e:	46bd      	mov	sp, r7
 8003260:	bd80      	pop	{r7, pc}
 8003262:	bf00      	nop
 8003264:	40011000 	.word	0x40011000
 8003268:	40010c00 	.word	0x40010c00

0800326c <LCD_ReadReg>:
//读寄存器
//LCD_Reg:寄存器编号
//返回值:读到的值
uint16_t LCD_ReadReg(uint16_t LCD_Reg) {
 800326c:	b580      	push	{r7, lr}
 800326e:	b082      	sub	sp, #8
 8003270:	af00      	add	r7, sp, #0
 8003272:	4603      	mov	r3, r0
 8003274:	80fb      	strh	r3, [r7, #6]
	LCD_WR_REG(LCD_Reg);  //写入要读的寄存器号
 8003276:	88fb      	ldrh	r3, [r7, #6]
 8003278:	4618      	mov	r0, r3
 800327a:	f7ff ff41 	bl	8003100 <LCD_WR_REG>
	return LCD_RD_DATA();
 800327e:	f7ff ff87 	bl	8003190 <LCD_RD_DATA>
 8003282:	4603      	mov	r3, r0
}
 8003284:	4618      	mov	r0, r3
 8003286:	3708      	adds	r7, #8
 8003288:	46bd      	mov	sp, r7
 800328a:	bd80      	pop	{r7, pc}

0800328c <LCD_WriteRAM_Prepare>:
//开始写GRAM
void LCD_WriteRAM_Prepare(void) {
 800328c:	b580      	push	{r7, lr}
 800328e:	af00      	add	r7, sp, #0
	LCD_WR_REG(lcddev.wramcmd);
 8003290:	4b03      	ldr	r3, [pc, #12]	; (80032a0 <LCD_WriteRAM_Prepare+0x14>)
 8003292:	891b      	ldrh	r3, [r3, #8]
 8003294:	4618      	mov	r0, r3
 8003296:	f7ff ff33 	bl	8003100 <LCD_WR_REG>
}
 800329a:	bf00      	nop
 800329c:	bd80      	pop	{r7, pc}
 800329e:	bf00      	nop
 80032a0:	200000b4 	.word	0x200000b4

080032a4 <LCD_SetCursor>:
		LCD_WriteReg(0X07, 0x0);	//关闭显示
}
//设置光标位置
//Xpos:横坐标
//Ypos:纵坐标
void LCD_SetCursor(uint16_t Xpos, uint16_t Ypos) {
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b082      	sub	sp, #8
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	4603      	mov	r3, r0
 80032ac:	460a      	mov	r2, r1
 80032ae:	80fb      	strh	r3, [r7, #6]
 80032b0:	4613      	mov	r3, r2
 80032b2:	80bb      	strh	r3, [r7, #4]
	if (lcddev.id == 0X9341 || lcddev.id == 0X5310) {
 80032b4:	4b73      	ldr	r3, [pc, #460]	; (8003484 <LCD_SetCursor+0x1e0>)
 80032b6:	889b      	ldrh	r3, [r3, #4]
 80032b8:	f249 3241 	movw	r2, #37697	; 0x9341
 80032bc:	4293      	cmp	r3, r2
 80032be:	d005      	beq.n	80032cc <LCD_SetCursor+0x28>
 80032c0:	4b70      	ldr	r3, [pc, #448]	; (8003484 <LCD_SetCursor+0x1e0>)
 80032c2:	889b      	ldrh	r3, [r3, #4]
 80032c4:	f245 3210 	movw	r2, #21264	; 0x5310
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d164      	bne.n	8003396 <LCD_SetCursor+0xf2>
		LCD_WR_REG(lcddev.setxcmd);
 80032cc:	4b6d      	ldr	r3, [pc, #436]	; (8003484 <LCD_SetCursor+0x1e0>)
 80032ce:	895b      	ldrh	r3, [r3, #10]
 80032d0:	4618      	mov	r0, r3
 80032d2:	f7ff ff15 	bl	8003100 <LCD_WR_REG>
		LCD_WR_DATA(Xpos >> 8);
 80032d6:	4b6c      	ldr	r3, [pc, #432]	; (8003488 <LCD_SetCursor+0x1e4>)
 80032d8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80032dc:	611a      	str	r2, [r3, #16]
 80032de:	4b6a      	ldr	r3, [pc, #424]	; (8003488 <LCD_SetCursor+0x1e4>)
 80032e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80032e4:	615a      	str	r2, [r3, #20]
 80032e6:	88fb      	ldrh	r3, [r7, #6]
 80032e8:	0a1b      	lsrs	r3, r3, #8
 80032ea:	b29a      	uxth	r2, r3
 80032ec:	4b67      	ldr	r3, [pc, #412]	; (800348c <LCD_SetCursor+0x1e8>)
 80032ee:	60da      	str	r2, [r3, #12]
 80032f0:	4b65      	ldr	r3, [pc, #404]	; (8003488 <LCD_SetCursor+0x1e4>)
 80032f2:	2280      	movs	r2, #128	; 0x80
 80032f4:	615a      	str	r2, [r3, #20]
 80032f6:	4b64      	ldr	r3, [pc, #400]	; (8003488 <LCD_SetCursor+0x1e4>)
 80032f8:	2280      	movs	r2, #128	; 0x80
 80032fa:	611a      	str	r2, [r3, #16]
 80032fc:	4b62      	ldr	r3, [pc, #392]	; (8003488 <LCD_SetCursor+0x1e4>)
 80032fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003302:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(Xpos & 0XFF);
 8003304:	4b60      	ldr	r3, [pc, #384]	; (8003488 <LCD_SetCursor+0x1e4>)
 8003306:	f44f 7280 	mov.w	r2, #256	; 0x100
 800330a:	611a      	str	r2, [r3, #16]
 800330c:	4b5e      	ldr	r3, [pc, #376]	; (8003488 <LCD_SetCursor+0x1e4>)
 800330e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003312:	615a      	str	r2, [r3, #20]
 8003314:	88fb      	ldrh	r3, [r7, #6]
 8003316:	4a5d      	ldr	r2, [pc, #372]	; (800348c <LCD_SetCursor+0x1e8>)
 8003318:	b2db      	uxtb	r3, r3
 800331a:	60d3      	str	r3, [r2, #12]
 800331c:	4b5a      	ldr	r3, [pc, #360]	; (8003488 <LCD_SetCursor+0x1e4>)
 800331e:	2280      	movs	r2, #128	; 0x80
 8003320:	615a      	str	r2, [r3, #20]
 8003322:	4b59      	ldr	r3, [pc, #356]	; (8003488 <LCD_SetCursor+0x1e4>)
 8003324:	2280      	movs	r2, #128	; 0x80
 8003326:	611a      	str	r2, [r3, #16]
 8003328:	4b57      	ldr	r3, [pc, #348]	; (8003488 <LCD_SetCursor+0x1e4>)
 800332a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800332e:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 8003330:	4b54      	ldr	r3, [pc, #336]	; (8003484 <LCD_SetCursor+0x1e0>)
 8003332:	899b      	ldrh	r3, [r3, #12]
 8003334:	4618      	mov	r0, r3
 8003336:	f7ff fee3 	bl	8003100 <LCD_WR_REG>
		LCD_WR_DATA(Ypos >> 8);
 800333a:	4b53      	ldr	r3, [pc, #332]	; (8003488 <LCD_SetCursor+0x1e4>)
 800333c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003340:	611a      	str	r2, [r3, #16]
 8003342:	4b51      	ldr	r3, [pc, #324]	; (8003488 <LCD_SetCursor+0x1e4>)
 8003344:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003348:	615a      	str	r2, [r3, #20]
 800334a:	88bb      	ldrh	r3, [r7, #4]
 800334c:	0a1b      	lsrs	r3, r3, #8
 800334e:	b29a      	uxth	r2, r3
 8003350:	4b4e      	ldr	r3, [pc, #312]	; (800348c <LCD_SetCursor+0x1e8>)
 8003352:	60da      	str	r2, [r3, #12]
 8003354:	4b4c      	ldr	r3, [pc, #304]	; (8003488 <LCD_SetCursor+0x1e4>)
 8003356:	2280      	movs	r2, #128	; 0x80
 8003358:	615a      	str	r2, [r3, #20]
 800335a:	4b4b      	ldr	r3, [pc, #300]	; (8003488 <LCD_SetCursor+0x1e4>)
 800335c:	2280      	movs	r2, #128	; 0x80
 800335e:	611a      	str	r2, [r3, #16]
 8003360:	4b49      	ldr	r3, [pc, #292]	; (8003488 <LCD_SetCursor+0x1e4>)
 8003362:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003366:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(Ypos & 0XFF);
 8003368:	4b47      	ldr	r3, [pc, #284]	; (8003488 <LCD_SetCursor+0x1e4>)
 800336a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800336e:	611a      	str	r2, [r3, #16]
 8003370:	4b45      	ldr	r3, [pc, #276]	; (8003488 <LCD_SetCursor+0x1e4>)
 8003372:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003376:	615a      	str	r2, [r3, #20]
 8003378:	88bb      	ldrh	r3, [r7, #4]
 800337a:	4a44      	ldr	r2, [pc, #272]	; (800348c <LCD_SetCursor+0x1e8>)
 800337c:	b2db      	uxtb	r3, r3
 800337e:	60d3      	str	r3, [r2, #12]
 8003380:	4b41      	ldr	r3, [pc, #260]	; (8003488 <LCD_SetCursor+0x1e4>)
 8003382:	2280      	movs	r2, #128	; 0x80
 8003384:	615a      	str	r2, [r3, #20]
 8003386:	4b40      	ldr	r3, [pc, #256]	; (8003488 <LCD_SetCursor+0x1e4>)
 8003388:	2280      	movs	r2, #128	; 0x80
 800338a:	611a      	str	r2, [r3, #16]
 800338c:	4b3e      	ldr	r3, [pc, #248]	; (8003488 <LCD_SetCursor+0x1e4>)
 800338e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003392:	611a      	str	r2, [r3, #16]
		if (lcddev.dir == 1)
			Xpos = lcddev.width - 1 - Xpos;	//横屏其实就是调转x,y坐标
		LCD_WriteReg(lcddev.setxcmd, Xpos);
		LCD_WriteReg(lcddev.setycmd, Ypos);
	}
}
 8003394:	e248      	b.n	8003828 <LCD_SetCursor+0x584>
	} else if (lcddev.id == 0X6804) {
 8003396:	4b3b      	ldr	r3, [pc, #236]	; (8003484 <LCD_SetCursor+0x1e0>)
 8003398:	889b      	ldrh	r3, [r3, #4]
 800339a:	f646 0204 	movw	r2, #26628	; 0x6804
 800339e:	4293      	cmp	r3, r2
 80033a0:	d176      	bne.n	8003490 <LCD_SetCursor+0x1ec>
		if (lcddev.dir == 1)
 80033a2:	4b38      	ldr	r3, [pc, #224]	; (8003484 <LCD_SetCursor+0x1e0>)
 80033a4:	799b      	ldrb	r3, [r3, #6]
 80033a6:	2b01      	cmp	r3, #1
 80033a8:	d106      	bne.n	80033b8 <LCD_SetCursor+0x114>
			Xpos = lcddev.width - 1 - Xpos;	//横屏时处理
 80033aa:	4b36      	ldr	r3, [pc, #216]	; (8003484 <LCD_SetCursor+0x1e0>)
 80033ac:	881a      	ldrh	r2, [r3, #0]
 80033ae:	88fb      	ldrh	r3, [r7, #6]
 80033b0:	1ad3      	subs	r3, r2, r3
 80033b2:	b29b      	uxth	r3, r3
 80033b4:	3b01      	subs	r3, #1
 80033b6:	80fb      	strh	r3, [r7, #6]
		LCD_WR_REG(lcddev.setxcmd);
 80033b8:	4b32      	ldr	r3, [pc, #200]	; (8003484 <LCD_SetCursor+0x1e0>)
 80033ba:	895b      	ldrh	r3, [r3, #10]
 80033bc:	4618      	mov	r0, r3
 80033be:	f7ff fe9f 	bl	8003100 <LCD_WR_REG>
		LCD_WR_DATA(Xpos >> 8);
 80033c2:	4b31      	ldr	r3, [pc, #196]	; (8003488 <LCD_SetCursor+0x1e4>)
 80033c4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80033c8:	611a      	str	r2, [r3, #16]
 80033ca:	4b2f      	ldr	r3, [pc, #188]	; (8003488 <LCD_SetCursor+0x1e4>)
 80033cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80033d0:	615a      	str	r2, [r3, #20]
 80033d2:	88fb      	ldrh	r3, [r7, #6]
 80033d4:	0a1b      	lsrs	r3, r3, #8
 80033d6:	b29a      	uxth	r2, r3
 80033d8:	4b2c      	ldr	r3, [pc, #176]	; (800348c <LCD_SetCursor+0x1e8>)
 80033da:	60da      	str	r2, [r3, #12]
 80033dc:	4b2a      	ldr	r3, [pc, #168]	; (8003488 <LCD_SetCursor+0x1e4>)
 80033de:	2280      	movs	r2, #128	; 0x80
 80033e0:	615a      	str	r2, [r3, #20]
 80033e2:	4b29      	ldr	r3, [pc, #164]	; (8003488 <LCD_SetCursor+0x1e4>)
 80033e4:	2280      	movs	r2, #128	; 0x80
 80033e6:	611a      	str	r2, [r3, #16]
 80033e8:	4b27      	ldr	r3, [pc, #156]	; (8003488 <LCD_SetCursor+0x1e4>)
 80033ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80033ee:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(Xpos & 0XFF);
 80033f0:	4b25      	ldr	r3, [pc, #148]	; (8003488 <LCD_SetCursor+0x1e4>)
 80033f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80033f6:	611a      	str	r2, [r3, #16]
 80033f8:	4b23      	ldr	r3, [pc, #140]	; (8003488 <LCD_SetCursor+0x1e4>)
 80033fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80033fe:	615a      	str	r2, [r3, #20]
 8003400:	88fb      	ldrh	r3, [r7, #6]
 8003402:	4a22      	ldr	r2, [pc, #136]	; (800348c <LCD_SetCursor+0x1e8>)
 8003404:	b2db      	uxtb	r3, r3
 8003406:	60d3      	str	r3, [r2, #12]
 8003408:	4b1f      	ldr	r3, [pc, #124]	; (8003488 <LCD_SetCursor+0x1e4>)
 800340a:	2280      	movs	r2, #128	; 0x80
 800340c:	615a      	str	r2, [r3, #20]
 800340e:	4b1e      	ldr	r3, [pc, #120]	; (8003488 <LCD_SetCursor+0x1e4>)
 8003410:	2280      	movs	r2, #128	; 0x80
 8003412:	611a      	str	r2, [r3, #16]
 8003414:	4b1c      	ldr	r3, [pc, #112]	; (8003488 <LCD_SetCursor+0x1e4>)
 8003416:	f44f 7200 	mov.w	r2, #512	; 0x200
 800341a:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 800341c:	4b19      	ldr	r3, [pc, #100]	; (8003484 <LCD_SetCursor+0x1e0>)
 800341e:	899b      	ldrh	r3, [r3, #12]
 8003420:	4618      	mov	r0, r3
 8003422:	f7ff fe6d 	bl	8003100 <LCD_WR_REG>
		LCD_WR_DATA(Ypos >> 8);
 8003426:	4b18      	ldr	r3, [pc, #96]	; (8003488 <LCD_SetCursor+0x1e4>)
 8003428:	f44f 7280 	mov.w	r2, #256	; 0x100
 800342c:	611a      	str	r2, [r3, #16]
 800342e:	4b16      	ldr	r3, [pc, #88]	; (8003488 <LCD_SetCursor+0x1e4>)
 8003430:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003434:	615a      	str	r2, [r3, #20]
 8003436:	88bb      	ldrh	r3, [r7, #4]
 8003438:	0a1b      	lsrs	r3, r3, #8
 800343a:	b29a      	uxth	r2, r3
 800343c:	4b13      	ldr	r3, [pc, #76]	; (800348c <LCD_SetCursor+0x1e8>)
 800343e:	60da      	str	r2, [r3, #12]
 8003440:	4b11      	ldr	r3, [pc, #68]	; (8003488 <LCD_SetCursor+0x1e4>)
 8003442:	2280      	movs	r2, #128	; 0x80
 8003444:	615a      	str	r2, [r3, #20]
 8003446:	4b10      	ldr	r3, [pc, #64]	; (8003488 <LCD_SetCursor+0x1e4>)
 8003448:	2280      	movs	r2, #128	; 0x80
 800344a:	611a      	str	r2, [r3, #16]
 800344c:	4b0e      	ldr	r3, [pc, #56]	; (8003488 <LCD_SetCursor+0x1e4>)
 800344e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003452:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(Ypos & 0XFF);
 8003454:	4b0c      	ldr	r3, [pc, #48]	; (8003488 <LCD_SetCursor+0x1e4>)
 8003456:	f44f 7280 	mov.w	r2, #256	; 0x100
 800345a:	611a      	str	r2, [r3, #16]
 800345c:	4b0a      	ldr	r3, [pc, #40]	; (8003488 <LCD_SetCursor+0x1e4>)
 800345e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003462:	615a      	str	r2, [r3, #20]
 8003464:	88bb      	ldrh	r3, [r7, #4]
 8003466:	4a09      	ldr	r2, [pc, #36]	; (800348c <LCD_SetCursor+0x1e8>)
 8003468:	b2db      	uxtb	r3, r3
 800346a:	60d3      	str	r3, [r2, #12]
 800346c:	4b06      	ldr	r3, [pc, #24]	; (8003488 <LCD_SetCursor+0x1e4>)
 800346e:	2280      	movs	r2, #128	; 0x80
 8003470:	615a      	str	r2, [r3, #20]
 8003472:	4b05      	ldr	r3, [pc, #20]	; (8003488 <LCD_SetCursor+0x1e4>)
 8003474:	2280      	movs	r2, #128	; 0x80
 8003476:	611a      	str	r2, [r3, #16]
 8003478:	4b03      	ldr	r3, [pc, #12]	; (8003488 <LCD_SetCursor+0x1e4>)
 800347a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800347e:	611a      	str	r2, [r3, #16]
}
 8003480:	e1d2      	b.n	8003828 <LCD_SetCursor+0x584>
 8003482:	bf00      	nop
 8003484:	200000b4 	.word	0x200000b4
 8003488:	40011000 	.word	0x40011000
 800348c:	40010c00 	.word	0x40010c00
	} else if (lcddev.id == 0X1963) {
 8003490:	4b99      	ldr	r3, [pc, #612]	; (80036f8 <LCD_SetCursor+0x454>)
 8003492:	889b      	ldrh	r3, [r3, #4]
 8003494:	f641 1263 	movw	r2, #6499	; 0x1963
 8003498:	4293      	cmp	r3, r2
 800349a:	f040 8133 	bne.w	8003704 <LCD_SetCursor+0x460>
		if (lcddev.dir == 0)	//x坐标需要变换
 800349e:	4b96      	ldr	r3, [pc, #600]	; (80036f8 <LCD_SetCursor+0x454>)
 80034a0:	799b      	ldrb	r3, [r3, #6]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d163      	bne.n	800356e <LCD_SetCursor+0x2ca>
			Xpos = lcddev.width - 1 - Xpos;
 80034a6:	4b94      	ldr	r3, [pc, #592]	; (80036f8 <LCD_SetCursor+0x454>)
 80034a8:	881a      	ldrh	r2, [r3, #0]
 80034aa:	88fb      	ldrh	r3, [r7, #6]
 80034ac:	1ad3      	subs	r3, r2, r3
 80034ae:	b29b      	uxth	r3, r3
 80034b0:	3b01      	subs	r3, #1
 80034b2:	80fb      	strh	r3, [r7, #6]
			LCD_WR_REG(lcddev.setxcmd);
 80034b4:	4b90      	ldr	r3, [pc, #576]	; (80036f8 <LCD_SetCursor+0x454>)
 80034b6:	895b      	ldrh	r3, [r3, #10]
 80034b8:	4618      	mov	r0, r3
 80034ba:	f7ff fe21 	bl	8003100 <LCD_WR_REG>
			LCD_WR_DATA(0);
 80034be:	4b8f      	ldr	r3, [pc, #572]	; (80036fc <LCD_SetCursor+0x458>)
 80034c0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80034c4:	611a      	str	r2, [r3, #16]
 80034c6:	4b8d      	ldr	r3, [pc, #564]	; (80036fc <LCD_SetCursor+0x458>)
 80034c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80034cc:	615a      	str	r2, [r3, #20]
 80034ce:	4b8c      	ldr	r3, [pc, #560]	; (8003700 <LCD_SetCursor+0x45c>)
 80034d0:	2200      	movs	r2, #0
 80034d2:	60da      	str	r2, [r3, #12]
 80034d4:	4b89      	ldr	r3, [pc, #548]	; (80036fc <LCD_SetCursor+0x458>)
 80034d6:	2280      	movs	r2, #128	; 0x80
 80034d8:	615a      	str	r2, [r3, #20]
 80034da:	4b88      	ldr	r3, [pc, #544]	; (80036fc <LCD_SetCursor+0x458>)
 80034dc:	2280      	movs	r2, #128	; 0x80
 80034de:	611a      	str	r2, [r3, #16]
 80034e0:	4b86      	ldr	r3, [pc, #536]	; (80036fc <LCD_SetCursor+0x458>)
 80034e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80034e6:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(0);
 80034e8:	4b84      	ldr	r3, [pc, #528]	; (80036fc <LCD_SetCursor+0x458>)
 80034ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 80034ee:	611a      	str	r2, [r3, #16]
 80034f0:	4b82      	ldr	r3, [pc, #520]	; (80036fc <LCD_SetCursor+0x458>)
 80034f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80034f6:	615a      	str	r2, [r3, #20]
 80034f8:	4b81      	ldr	r3, [pc, #516]	; (8003700 <LCD_SetCursor+0x45c>)
 80034fa:	2200      	movs	r2, #0
 80034fc:	60da      	str	r2, [r3, #12]
 80034fe:	4b7f      	ldr	r3, [pc, #508]	; (80036fc <LCD_SetCursor+0x458>)
 8003500:	2280      	movs	r2, #128	; 0x80
 8003502:	615a      	str	r2, [r3, #20]
 8003504:	4b7d      	ldr	r3, [pc, #500]	; (80036fc <LCD_SetCursor+0x458>)
 8003506:	2280      	movs	r2, #128	; 0x80
 8003508:	611a      	str	r2, [r3, #16]
 800350a:	4b7c      	ldr	r3, [pc, #496]	; (80036fc <LCD_SetCursor+0x458>)
 800350c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003510:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(Xpos >> 8);
 8003512:	4b7a      	ldr	r3, [pc, #488]	; (80036fc <LCD_SetCursor+0x458>)
 8003514:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003518:	611a      	str	r2, [r3, #16]
 800351a:	4b78      	ldr	r3, [pc, #480]	; (80036fc <LCD_SetCursor+0x458>)
 800351c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003520:	615a      	str	r2, [r3, #20]
 8003522:	88fb      	ldrh	r3, [r7, #6]
 8003524:	0a1b      	lsrs	r3, r3, #8
 8003526:	b29a      	uxth	r2, r3
 8003528:	4b75      	ldr	r3, [pc, #468]	; (8003700 <LCD_SetCursor+0x45c>)
 800352a:	60da      	str	r2, [r3, #12]
 800352c:	4b73      	ldr	r3, [pc, #460]	; (80036fc <LCD_SetCursor+0x458>)
 800352e:	2280      	movs	r2, #128	; 0x80
 8003530:	615a      	str	r2, [r3, #20]
 8003532:	4b72      	ldr	r3, [pc, #456]	; (80036fc <LCD_SetCursor+0x458>)
 8003534:	2280      	movs	r2, #128	; 0x80
 8003536:	611a      	str	r2, [r3, #16]
 8003538:	4b70      	ldr	r3, [pc, #448]	; (80036fc <LCD_SetCursor+0x458>)
 800353a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800353e:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(Xpos & 0XFF);
 8003540:	4b6e      	ldr	r3, [pc, #440]	; (80036fc <LCD_SetCursor+0x458>)
 8003542:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003546:	611a      	str	r2, [r3, #16]
 8003548:	4b6c      	ldr	r3, [pc, #432]	; (80036fc <LCD_SetCursor+0x458>)
 800354a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800354e:	615a      	str	r2, [r3, #20]
 8003550:	88fb      	ldrh	r3, [r7, #6]
 8003552:	4a6b      	ldr	r2, [pc, #428]	; (8003700 <LCD_SetCursor+0x45c>)
 8003554:	b2db      	uxtb	r3, r3
 8003556:	60d3      	str	r3, [r2, #12]
 8003558:	4b68      	ldr	r3, [pc, #416]	; (80036fc <LCD_SetCursor+0x458>)
 800355a:	2280      	movs	r2, #128	; 0x80
 800355c:	615a      	str	r2, [r3, #20]
 800355e:	4b67      	ldr	r3, [pc, #412]	; (80036fc <LCD_SetCursor+0x458>)
 8003560:	2280      	movs	r2, #128	; 0x80
 8003562:	611a      	str	r2, [r3, #16]
 8003564:	4b65      	ldr	r3, [pc, #404]	; (80036fc <LCD_SetCursor+0x458>)
 8003566:	f44f 7200 	mov.w	r2, #512	; 0x200
 800356a:	611a      	str	r2, [r3, #16]
 800356c:	e061      	b.n	8003632 <LCD_SetCursor+0x38e>
			LCD_WR_REG(lcddev.setxcmd);
 800356e:	4b62      	ldr	r3, [pc, #392]	; (80036f8 <LCD_SetCursor+0x454>)
 8003570:	895b      	ldrh	r3, [r3, #10]
 8003572:	4618      	mov	r0, r3
 8003574:	f7ff fdc4 	bl	8003100 <LCD_WR_REG>
			LCD_WR_DATA(Xpos >> 8);
 8003578:	4b60      	ldr	r3, [pc, #384]	; (80036fc <LCD_SetCursor+0x458>)
 800357a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800357e:	611a      	str	r2, [r3, #16]
 8003580:	4b5e      	ldr	r3, [pc, #376]	; (80036fc <LCD_SetCursor+0x458>)
 8003582:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003586:	615a      	str	r2, [r3, #20]
 8003588:	88fb      	ldrh	r3, [r7, #6]
 800358a:	0a1b      	lsrs	r3, r3, #8
 800358c:	b29a      	uxth	r2, r3
 800358e:	4b5c      	ldr	r3, [pc, #368]	; (8003700 <LCD_SetCursor+0x45c>)
 8003590:	60da      	str	r2, [r3, #12]
 8003592:	4b5a      	ldr	r3, [pc, #360]	; (80036fc <LCD_SetCursor+0x458>)
 8003594:	2280      	movs	r2, #128	; 0x80
 8003596:	615a      	str	r2, [r3, #20]
 8003598:	4b58      	ldr	r3, [pc, #352]	; (80036fc <LCD_SetCursor+0x458>)
 800359a:	2280      	movs	r2, #128	; 0x80
 800359c:	611a      	str	r2, [r3, #16]
 800359e:	4b57      	ldr	r3, [pc, #348]	; (80036fc <LCD_SetCursor+0x458>)
 80035a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80035a4:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(Xpos & 0XFF);
 80035a6:	4b55      	ldr	r3, [pc, #340]	; (80036fc <LCD_SetCursor+0x458>)
 80035a8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80035ac:	611a      	str	r2, [r3, #16]
 80035ae:	4b53      	ldr	r3, [pc, #332]	; (80036fc <LCD_SetCursor+0x458>)
 80035b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80035b4:	615a      	str	r2, [r3, #20]
 80035b6:	88fb      	ldrh	r3, [r7, #6]
 80035b8:	4a51      	ldr	r2, [pc, #324]	; (8003700 <LCD_SetCursor+0x45c>)
 80035ba:	b2db      	uxtb	r3, r3
 80035bc:	60d3      	str	r3, [r2, #12]
 80035be:	4b4f      	ldr	r3, [pc, #316]	; (80036fc <LCD_SetCursor+0x458>)
 80035c0:	2280      	movs	r2, #128	; 0x80
 80035c2:	615a      	str	r2, [r3, #20]
 80035c4:	4b4d      	ldr	r3, [pc, #308]	; (80036fc <LCD_SetCursor+0x458>)
 80035c6:	2280      	movs	r2, #128	; 0x80
 80035c8:	611a      	str	r2, [r3, #16]
 80035ca:	4b4c      	ldr	r3, [pc, #304]	; (80036fc <LCD_SetCursor+0x458>)
 80035cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80035d0:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.width - 1) >> 8);
 80035d2:	4b4a      	ldr	r3, [pc, #296]	; (80036fc <LCD_SetCursor+0x458>)
 80035d4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80035d8:	611a      	str	r2, [r3, #16]
 80035da:	4b48      	ldr	r3, [pc, #288]	; (80036fc <LCD_SetCursor+0x458>)
 80035dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80035e0:	615a      	str	r2, [r3, #20]
 80035e2:	4b45      	ldr	r3, [pc, #276]	; (80036f8 <LCD_SetCursor+0x454>)
 80035e4:	881b      	ldrh	r3, [r3, #0]
 80035e6:	3b01      	subs	r3, #1
 80035e8:	121a      	asrs	r2, r3, #8
 80035ea:	4b45      	ldr	r3, [pc, #276]	; (8003700 <LCD_SetCursor+0x45c>)
 80035ec:	60da      	str	r2, [r3, #12]
 80035ee:	4b43      	ldr	r3, [pc, #268]	; (80036fc <LCD_SetCursor+0x458>)
 80035f0:	2280      	movs	r2, #128	; 0x80
 80035f2:	615a      	str	r2, [r3, #20]
 80035f4:	4b41      	ldr	r3, [pc, #260]	; (80036fc <LCD_SetCursor+0x458>)
 80035f6:	2280      	movs	r2, #128	; 0x80
 80035f8:	611a      	str	r2, [r3, #16]
 80035fa:	4b40      	ldr	r3, [pc, #256]	; (80036fc <LCD_SetCursor+0x458>)
 80035fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003600:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.width - 1) & 0XFF);
 8003602:	4b3e      	ldr	r3, [pc, #248]	; (80036fc <LCD_SetCursor+0x458>)
 8003604:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003608:	611a      	str	r2, [r3, #16]
 800360a:	4b3c      	ldr	r3, [pc, #240]	; (80036fc <LCD_SetCursor+0x458>)
 800360c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003610:	615a      	str	r2, [r3, #20]
 8003612:	4b39      	ldr	r3, [pc, #228]	; (80036f8 <LCD_SetCursor+0x454>)
 8003614:	881b      	ldrh	r3, [r3, #0]
 8003616:	3b01      	subs	r3, #1
 8003618:	4a39      	ldr	r2, [pc, #228]	; (8003700 <LCD_SetCursor+0x45c>)
 800361a:	b2db      	uxtb	r3, r3
 800361c:	60d3      	str	r3, [r2, #12]
 800361e:	4b37      	ldr	r3, [pc, #220]	; (80036fc <LCD_SetCursor+0x458>)
 8003620:	2280      	movs	r2, #128	; 0x80
 8003622:	615a      	str	r2, [r3, #20]
 8003624:	4b35      	ldr	r3, [pc, #212]	; (80036fc <LCD_SetCursor+0x458>)
 8003626:	2280      	movs	r2, #128	; 0x80
 8003628:	611a      	str	r2, [r3, #16]
 800362a:	4b34      	ldr	r3, [pc, #208]	; (80036fc <LCD_SetCursor+0x458>)
 800362c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003630:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 8003632:	4b31      	ldr	r3, [pc, #196]	; (80036f8 <LCD_SetCursor+0x454>)
 8003634:	899b      	ldrh	r3, [r3, #12]
 8003636:	4618      	mov	r0, r3
 8003638:	f7ff fd62 	bl	8003100 <LCD_WR_REG>
		LCD_WR_DATA(Ypos >> 8);
 800363c:	4b2f      	ldr	r3, [pc, #188]	; (80036fc <LCD_SetCursor+0x458>)
 800363e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003642:	611a      	str	r2, [r3, #16]
 8003644:	4b2d      	ldr	r3, [pc, #180]	; (80036fc <LCD_SetCursor+0x458>)
 8003646:	f44f 7200 	mov.w	r2, #512	; 0x200
 800364a:	615a      	str	r2, [r3, #20]
 800364c:	88bb      	ldrh	r3, [r7, #4]
 800364e:	0a1b      	lsrs	r3, r3, #8
 8003650:	b29a      	uxth	r2, r3
 8003652:	4b2b      	ldr	r3, [pc, #172]	; (8003700 <LCD_SetCursor+0x45c>)
 8003654:	60da      	str	r2, [r3, #12]
 8003656:	4b29      	ldr	r3, [pc, #164]	; (80036fc <LCD_SetCursor+0x458>)
 8003658:	2280      	movs	r2, #128	; 0x80
 800365a:	615a      	str	r2, [r3, #20]
 800365c:	4b27      	ldr	r3, [pc, #156]	; (80036fc <LCD_SetCursor+0x458>)
 800365e:	2280      	movs	r2, #128	; 0x80
 8003660:	611a      	str	r2, [r3, #16]
 8003662:	4b26      	ldr	r3, [pc, #152]	; (80036fc <LCD_SetCursor+0x458>)
 8003664:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003668:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(Ypos & 0XFF);
 800366a:	4b24      	ldr	r3, [pc, #144]	; (80036fc <LCD_SetCursor+0x458>)
 800366c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003670:	611a      	str	r2, [r3, #16]
 8003672:	4b22      	ldr	r3, [pc, #136]	; (80036fc <LCD_SetCursor+0x458>)
 8003674:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003678:	615a      	str	r2, [r3, #20]
 800367a:	88bb      	ldrh	r3, [r7, #4]
 800367c:	4a20      	ldr	r2, [pc, #128]	; (8003700 <LCD_SetCursor+0x45c>)
 800367e:	b2db      	uxtb	r3, r3
 8003680:	60d3      	str	r3, [r2, #12]
 8003682:	4b1e      	ldr	r3, [pc, #120]	; (80036fc <LCD_SetCursor+0x458>)
 8003684:	2280      	movs	r2, #128	; 0x80
 8003686:	615a      	str	r2, [r3, #20]
 8003688:	4b1c      	ldr	r3, [pc, #112]	; (80036fc <LCD_SetCursor+0x458>)
 800368a:	2280      	movs	r2, #128	; 0x80
 800368c:	611a      	str	r2, [r3, #16]
 800368e:	4b1b      	ldr	r3, [pc, #108]	; (80036fc <LCD_SetCursor+0x458>)
 8003690:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003694:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA((lcddev.height - 1) >> 8);
 8003696:	4b19      	ldr	r3, [pc, #100]	; (80036fc <LCD_SetCursor+0x458>)
 8003698:	f44f 7280 	mov.w	r2, #256	; 0x100
 800369c:	611a      	str	r2, [r3, #16]
 800369e:	4b17      	ldr	r3, [pc, #92]	; (80036fc <LCD_SetCursor+0x458>)
 80036a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80036a4:	615a      	str	r2, [r3, #20]
 80036a6:	4b14      	ldr	r3, [pc, #80]	; (80036f8 <LCD_SetCursor+0x454>)
 80036a8:	885b      	ldrh	r3, [r3, #2]
 80036aa:	3b01      	subs	r3, #1
 80036ac:	121a      	asrs	r2, r3, #8
 80036ae:	4b14      	ldr	r3, [pc, #80]	; (8003700 <LCD_SetCursor+0x45c>)
 80036b0:	60da      	str	r2, [r3, #12]
 80036b2:	4b12      	ldr	r3, [pc, #72]	; (80036fc <LCD_SetCursor+0x458>)
 80036b4:	2280      	movs	r2, #128	; 0x80
 80036b6:	615a      	str	r2, [r3, #20]
 80036b8:	4b10      	ldr	r3, [pc, #64]	; (80036fc <LCD_SetCursor+0x458>)
 80036ba:	2280      	movs	r2, #128	; 0x80
 80036bc:	611a      	str	r2, [r3, #16]
 80036be:	4b0f      	ldr	r3, [pc, #60]	; (80036fc <LCD_SetCursor+0x458>)
 80036c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80036c4:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA((lcddev.height - 1) & 0XFF);
 80036c6:	4b0d      	ldr	r3, [pc, #52]	; (80036fc <LCD_SetCursor+0x458>)
 80036c8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80036cc:	611a      	str	r2, [r3, #16]
 80036ce:	4b0b      	ldr	r3, [pc, #44]	; (80036fc <LCD_SetCursor+0x458>)
 80036d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80036d4:	615a      	str	r2, [r3, #20]
 80036d6:	4b08      	ldr	r3, [pc, #32]	; (80036f8 <LCD_SetCursor+0x454>)
 80036d8:	885b      	ldrh	r3, [r3, #2]
 80036da:	3b01      	subs	r3, #1
 80036dc:	4a08      	ldr	r2, [pc, #32]	; (8003700 <LCD_SetCursor+0x45c>)
 80036de:	b2db      	uxtb	r3, r3
 80036e0:	60d3      	str	r3, [r2, #12]
 80036e2:	4b06      	ldr	r3, [pc, #24]	; (80036fc <LCD_SetCursor+0x458>)
 80036e4:	2280      	movs	r2, #128	; 0x80
 80036e6:	615a      	str	r2, [r3, #20]
 80036e8:	4b04      	ldr	r3, [pc, #16]	; (80036fc <LCD_SetCursor+0x458>)
 80036ea:	2280      	movs	r2, #128	; 0x80
 80036ec:	611a      	str	r2, [r3, #16]
 80036ee:	4b03      	ldr	r3, [pc, #12]	; (80036fc <LCD_SetCursor+0x458>)
 80036f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80036f4:	611a      	str	r2, [r3, #16]
}
 80036f6:	e097      	b.n	8003828 <LCD_SetCursor+0x584>
 80036f8:	200000b4 	.word	0x200000b4
 80036fc:	40011000 	.word	0x40011000
 8003700:	40010c00 	.word	0x40010c00
	} else if (lcddev.id == 0X5510) {
 8003704:	4b4a      	ldr	r3, [pc, #296]	; (8003830 <LCD_SetCursor+0x58c>)
 8003706:	889b      	ldrh	r3, [r3, #4]
 8003708:	f245 5210 	movw	r2, #21776	; 0x5510
 800370c:	4293      	cmp	r3, r2
 800370e:	d172      	bne.n	80037f6 <LCD_SetCursor+0x552>
		LCD_WR_REG(lcddev.setxcmd);
 8003710:	4b47      	ldr	r3, [pc, #284]	; (8003830 <LCD_SetCursor+0x58c>)
 8003712:	895b      	ldrh	r3, [r3, #10]
 8003714:	4618      	mov	r0, r3
 8003716:	f7ff fcf3 	bl	8003100 <LCD_WR_REG>
		LCD_WR_DATA(Xpos >> 8);
 800371a:	4b46      	ldr	r3, [pc, #280]	; (8003834 <LCD_SetCursor+0x590>)
 800371c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003720:	611a      	str	r2, [r3, #16]
 8003722:	4b44      	ldr	r3, [pc, #272]	; (8003834 <LCD_SetCursor+0x590>)
 8003724:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003728:	615a      	str	r2, [r3, #20]
 800372a:	88fb      	ldrh	r3, [r7, #6]
 800372c:	0a1b      	lsrs	r3, r3, #8
 800372e:	b29a      	uxth	r2, r3
 8003730:	4b41      	ldr	r3, [pc, #260]	; (8003838 <LCD_SetCursor+0x594>)
 8003732:	60da      	str	r2, [r3, #12]
 8003734:	4b3f      	ldr	r3, [pc, #252]	; (8003834 <LCD_SetCursor+0x590>)
 8003736:	2280      	movs	r2, #128	; 0x80
 8003738:	615a      	str	r2, [r3, #20]
 800373a:	4b3e      	ldr	r3, [pc, #248]	; (8003834 <LCD_SetCursor+0x590>)
 800373c:	2280      	movs	r2, #128	; 0x80
 800373e:	611a      	str	r2, [r3, #16]
 8003740:	4b3c      	ldr	r3, [pc, #240]	; (8003834 <LCD_SetCursor+0x590>)
 8003742:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003746:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setxcmd + 1);
 8003748:	4b39      	ldr	r3, [pc, #228]	; (8003830 <LCD_SetCursor+0x58c>)
 800374a:	895b      	ldrh	r3, [r3, #10]
 800374c:	3301      	adds	r3, #1
 800374e:	b29b      	uxth	r3, r3
 8003750:	4618      	mov	r0, r3
 8003752:	f7ff fcd5 	bl	8003100 <LCD_WR_REG>
		LCD_WR_DATA(Xpos & 0XFF);
 8003756:	4b37      	ldr	r3, [pc, #220]	; (8003834 <LCD_SetCursor+0x590>)
 8003758:	f44f 7280 	mov.w	r2, #256	; 0x100
 800375c:	611a      	str	r2, [r3, #16]
 800375e:	4b35      	ldr	r3, [pc, #212]	; (8003834 <LCD_SetCursor+0x590>)
 8003760:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003764:	615a      	str	r2, [r3, #20]
 8003766:	88fb      	ldrh	r3, [r7, #6]
 8003768:	4a33      	ldr	r2, [pc, #204]	; (8003838 <LCD_SetCursor+0x594>)
 800376a:	b2db      	uxtb	r3, r3
 800376c:	60d3      	str	r3, [r2, #12]
 800376e:	4b31      	ldr	r3, [pc, #196]	; (8003834 <LCD_SetCursor+0x590>)
 8003770:	2280      	movs	r2, #128	; 0x80
 8003772:	615a      	str	r2, [r3, #20]
 8003774:	4b2f      	ldr	r3, [pc, #188]	; (8003834 <LCD_SetCursor+0x590>)
 8003776:	2280      	movs	r2, #128	; 0x80
 8003778:	611a      	str	r2, [r3, #16]
 800377a:	4b2e      	ldr	r3, [pc, #184]	; (8003834 <LCD_SetCursor+0x590>)
 800377c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003780:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 8003782:	4b2b      	ldr	r3, [pc, #172]	; (8003830 <LCD_SetCursor+0x58c>)
 8003784:	899b      	ldrh	r3, [r3, #12]
 8003786:	4618      	mov	r0, r3
 8003788:	f7ff fcba 	bl	8003100 <LCD_WR_REG>
		LCD_WR_DATA(Ypos >> 8);
 800378c:	4b29      	ldr	r3, [pc, #164]	; (8003834 <LCD_SetCursor+0x590>)
 800378e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003792:	611a      	str	r2, [r3, #16]
 8003794:	4b27      	ldr	r3, [pc, #156]	; (8003834 <LCD_SetCursor+0x590>)
 8003796:	f44f 7200 	mov.w	r2, #512	; 0x200
 800379a:	615a      	str	r2, [r3, #20]
 800379c:	88bb      	ldrh	r3, [r7, #4]
 800379e:	0a1b      	lsrs	r3, r3, #8
 80037a0:	b29a      	uxth	r2, r3
 80037a2:	4b25      	ldr	r3, [pc, #148]	; (8003838 <LCD_SetCursor+0x594>)
 80037a4:	60da      	str	r2, [r3, #12]
 80037a6:	4b23      	ldr	r3, [pc, #140]	; (8003834 <LCD_SetCursor+0x590>)
 80037a8:	2280      	movs	r2, #128	; 0x80
 80037aa:	615a      	str	r2, [r3, #20]
 80037ac:	4b21      	ldr	r3, [pc, #132]	; (8003834 <LCD_SetCursor+0x590>)
 80037ae:	2280      	movs	r2, #128	; 0x80
 80037b0:	611a      	str	r2, [r3, #16]
 80037b2:	4b20      	ldr	r3, [pc, #128]	; (8003834 <LCD_SetCursor+0x590>)
 80037b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80037b8:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd + 1);
 80037ba:	4b1d      	ldr	r3, [pc, #116]	; (8003830 <LCD_SetCursor+0x58c>)
 80037bc:	899b      	ldrh	r3, [r3, #12]
 80037be:	3301      	adds	r3, #1
 80037c0:	b29b      	uxth	r3, r3
 80037c2:	4618      	mov	r0, r3
 80037c4:	f7ff fc9c 	bl	8003100 <LCD_WR_REG>
		LCD_WR_DATA(Ypos & 0XFF);
 80037c8:	4b1a      	ldr	r3, [pc, #104]	; (8003834 <LCD_SetCursor+0x590>)
 80037ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 80037ce:	611a      	str	r2, [r3, #16]
 80037d0:	4b18      	ldr	r3, [pc, #96]	; (8003834 <LCD_SetCursor+0x590>)
 80037d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80037d6:	615a      	str	r2, [r3, #20]
 80037d8:	88bb      	ldrh	r3, [r7, #4]
 80037da:	4a17      	ldr	r2, [pc, #92]	; (8003838 <LCD_SetCursor+0x594>)
 80037dc:	b2db      	uxtb	r3, r3
 80037de:	60d3      	str	r3, [r2, #12]
 80037e0:	4b14      	ldr	r3, [pc, #80]	; (8003834 <LCD_SetCursor+0x590>)
 80037e2:	2280      	movs	r2, #128	; 0x80
 80037e4:	615a      	str	r2, [r3, #20]
 80037e6:	4b13      	ldr	r3, [pc, #76]	; (8003834 <LCD_SetCursor+0x590>)
 80037e8:	2280      	movs	r2, #128	; 0x80
 80037ea:	611a      	str	r2, [r3, #16]
 80037ec:	4b11      	ldr	r3, [pc, #68]	; (8003834 <LCD_SetCursor+0x590>)
 80037ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80037f2:	611a      	str	r2, [r3, #16]
}
 80037f4:	e018      	b.n	8003828 <LCD_SetCursor+0x584>
		if (lcddev.dir == 1)
 80037f6:	4b0e      	ldr	r3, [pc, #56]	; (8003830 <LCD_SetCursor+0x58c>)
 80037f8:	799b      	ldrb	r3, [r3, #6]
 80037fa:	2b01      	cmp	r3, #1
 80037fc:	d106      	bne.n	800380c <LCD_SetCursor+0x568>
			Xpos = lcddev.width - 1 - Xpos;	//横屏其实就是调转x,y坐标
 80037fe:	4b0c      	ldr	r3, [pc, #48]	; (8003830 <LCD_SetCursor+0x58c>)
 8003800:	881a      	ldrh	r2, [r3, #0]
 8003802:	88fb      	ldrh	r3, [r7, #6]
 8003804:	1ad3      	subs	r3, r2, r3
 8003806:	b29b      	uxth	r3, r3
 8003808:	3b01      	subs	r3, #1
 800380a:	80fb      	strh	r3, [r7, #6]
		LCD_WriteReg(lcddev.setxcmd, Xpos);
 800380c:	4b08      	ldr	r3, [pc, #32]	; (8003830 <LCD_SetCursor+0x58c>)
 800380e:	895b      	ldrh	r3, [r3, #10]
 8003810:	88fa      	ldrh	r2, [r7, #6]
 8003812:	4611      	mov	r1, r2
 8003814:	4618      	mov	r0, r3
 8003816:	f7ff fcff 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(lcddev.setycmd, Ypos);
 800381a:	4b05      	ldr	r3, [pc, #20]	; (8003830 <LCD_SetCursor+0x58c>)
 800381c:	899b      	ldrh	r3, [r3, #12]
 800381e:	88ba      	ldrh	r2, [r7, #4]
 8003820:	4611      	mov	r1, r2
 8003822:	4618      	mov	r0, r3
 8003824:	f7ff fcf8 	bl	8003218 <LCD_WriteReg>
}
 8003828:	bf00      	nop
 800382a:	3708      	adds	r7, #8
 800382c:	46bd      	mov	sp, r7
 800382e:	bd80      	pop	{r7, pc}
 8003830:	200000b4 	.word	0x200000b4
 8003834:	40011000 	.word	0x40011000
 8003838:	40010c00 	.word	0x40010c00

0800383c <LCD_Scan_Dir>:
//设置LCD的自动扫描方向
//注意:其他函数可能会受到此函数设置的影响(尤其是9341/6804这两个奇葩),
//所以,一般设置为L2R_U2D即可,如果设置为其他扫描方式,可能导致显示不正常.
//dir:0~7,代表8个方向(具体定义见lcd.h)
//9320/9325/9328/4531/4535/1505/b505/5408/9341/5310/5510/1963等IC已经实际测试	   	   
void LCD_Scan_Dir(uint8_t dir) {
 800383c:	b580      	push	{r7, lr}
 800383e:	b084      	sub	sp, #16
 8003840:	af00      	add	r7, sp, #0
 8003842:	4603      	mov	r3, r0
 8003844:	71fb      	strb	r3, [r7, #7]
	uint16_t regval = 0;
 8003846:	2300      	movs	r3, #0
 8003848:	81fb      	strh	r3, [r7, #14]
	uint16_t dirreg = 0;
 800384a:	2300      	movs	r3, #0
 800384c:	81bb      	strh	r3, [r7, #12]
	uint16_t temp;
	if ((lcddev.dir == 1 && lcddev.id != 0X6804 && lcddev.id != 0X1963)
 800384e:	4b78      	ldr	r3, [pc, #480]	; (8003a30 <LCD_Scan_Dir+0x1f4>)
 8003850:	799b      	ldrb	r3, [r3, #6]
 8003852:	2b01      	cmp	r3, #1
 8003854:	d10b      	bne.n	800386e <LCD_Scan_Dir+0x32>
 8003856:	4b76      	ldr	r3, [pc, #472]	; (8003a30 <LCD_Scan_Dir+0x1f4>)
 8003858:	889b      	ldrh	r3, [r3, #4]
 800385a:	f646 0204 	movw	r2, #26628	; 0x6804
 800385e:	4293      	cmp	r3, r2
 8003860:	d005      	beq.n	800386e <LCD_Scan_Dir+0x32>
 8003862:	4b73      	ldr	r3, [pc, #460]	; (8003a30 <LCD_Scan_Dir+0x1f4>)
 8003864:	889b      	ldrh	r3, [r3, #4]
 8003866:	f641 1263 	movw	r2, #6499	; 0x1963
 800386a:	4293      	cmp	r3, r2
 800386c:	d109      	bne.n	8003882 <LCD_Scan_Dir+0x46>
			|| (lcddev.dir == 0 && lcddev.id == 0X1963))//横屏时，对6804和1963不改变扫描方向！竖屏时1963改变方向
 800386e:	4b70      	ldr	r3, [pc, #448]	; (8003a30 <LCD_Scan_Dir+0x1f4>)
 8003870:	799b      	ldrb	r3, [r3, #6]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d134      	bne.n	80038e0 <LCD_Scan_Dir+0xa4>
 8003876:	4b6e      	ldr	r3, [pc, #440]	; (8003a30 <LCD_Scan_Dir+0x1f4>)
 8003878:	889b      	ldrh	r3, [r3, #4]
 800387a:	f641 1263 	movw	r2, #6499	; 0x1963
 800387e:	4293      	cmp	r3, r2
 8003880:	d12e      	bne.n	80038e0 <LCD_Scan_Dir+0xa4>
			{
		switch (dir)	//方向转换
 8003882:	79fb      	ldrb	r3, [r7, #7]
 8003884:	2b07      	cmp	r3, #7
 8003886:	d82b      	bhi.n	80038e0 <LCD_Scan_Dir+0xa4>
 8003888:	a201      	add	r2, pc, #4	; (adr r2, 8003890 <LCD_Scan_Dir+0x54>)
 800388a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800388e:	bf00      	nop
 8003890:	080038b1 	.word	0x080038b1
 8003894:	080038b7 	.word	0x080038b7
 8003898:	080038bd 	.word	0x080038bd
 800389c:	080038c3 	.word	0x080038c3
 80038a0:	080038c9 	.word	0x080038c9
 80038a4:	080038cf 	.word	0x080038cf
 80038a8:	080038d5 	.word	0x080038d5
 80038ac:	080038db 	.word	0x080038db
		{
		case 0:
			dir = 6;
 80038b0:	2306      	movs	r3, #6
 80038b2:	71fb      	strb	r3, [r7, #7]
			break;
 80038b4:	e014      	b.n	80038e0 <LCD_Scan_Dir+0xa4>
		case 1:
			dir = 7;
 80038b6:	2307      	movs	r3, #7
 80038b8:	71fb      	strb	r3, [r7, #7]
			break;
 80038ba:	e011      	b.n	80038e0 <LCD_Scan_Dir+0xa4>
		case 2:
			dir = 4;
 80038bc:	2304      	movs	r3, #4
 80038be:	71fb      	strb	r3, [r7, #7]
			break;
 80038c0:	e00e      	b.n	80038e0 <LCD_Scan_Dir+0xa4>
		case 3:
			dir = 5;
 80038c2:	2305      	movs	r3, #5
 80038c4:	71fb      	strb	r3, [r7, #7]
			break;
 80038c6:	e00b      	b.n	80038e0 <LCD_Scan_Dir+0xa4>
		case 4:
			dir = 1;
 80038c8:	2301      	movs	r3, #1
 80038ca:	71fb      	strb	r3, [r7, #7]
			break;
 80038cc:	e008      	b.n	80038e0 <LCD_Scan_Dir+0xa4>
		case 5:
			dir = 0;
 80038ce:	2300      	movs	r3, #0
 80038d0:	71fb      	strb	r3, [r7, #7]
			break;
 80038d2:	e005      	b.n	80038e0 <LCD_Scan_Dir+0xa4>
		case 6:
			dir = 3;
 80038d4:	2303      	movs	r3, #3
 80038d6:	71fb      	strb	r3, [r7, #7]
			break;
 80038d8:	e002      	b.n	80038e0 <LCD_Scan_Dir+0xa4>
		case 7:
			dir = 2;
 80038da:	2302      	movs	r3, #2
 80038dc:	71fb      	strb	r3, [r7, #7]
			break;
 80038de:	bf00      	nop
		}
	}
	if (lcddev.id == 0x9341 || lcddev.id == 0X6804 || lcddev.id == 0X5310
 80038e0:	4b53      	ldr	r3, [pc, #332]	; (8003a30 <LCD_Scan_Dir+0x1f4>)
 80038e2:	889b      	ldrh	r3, [r3, #4]
 80038e4:	f249 3241 	movw	r2, #37697	; 0x9341
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d018      	beq.n	800391e <LCD_Scan_Dir+0xe2>
 80038ec:	4b50      	ldr	r3, [pc, #320]	; (8003a30 <LCD_Scan_Dir+0x1f4>)
 80038ee:	889b      	ldrh	r3, [r3, #4]
 80038f0:	f646 0204 	movw	r2, #26628	; 0x6804
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d012      	beq.n	800391e <LCD_Scan_Dir+0xe2>
 80038f8:	4b4d      	ldr	r3, [pc, #308]	; (8003a30 <LCD_Scan_Dir+0x1f4>)
 80038fa:	889b      	ldrh	r3, [r3, #4]
 80038fc:	f245 3210 	movw	r2, #21264	; 0x5310
 8003900:	4293      	cmp	r3, r2
 8003902:	d00c      	beq.n	800391e <LCD_Scan_Dir+0xe2>
			|| lcddev.id == 0X5510 || lcddev.id == 0X1963)//9341/6804/5310/5510/1963,特殊处理
 8003904:	4b4a      	ldr	r3, [pc, #296]	; (8003a30 <LCD_Scan_Dir+0x1f4>)
 8003906:	889b      	ldrh	r3, [r3, #4]
 8003908:	f245 5210 	movw	r2, #21776	; 0x5510
 800390c:	4293      	cmp	r3, r2
 800390e:	d006      	beq.n	800391e <LCD_Scan_Dir+0xe2>
 8003910:	4b47      	ldr	r3, [pc, #284]	; (8003a30 <LCD_Scan_Dir+0x1f4>)
 8003912:	889b      	ldrh	r3, [r3, #4]
 8003914:	f641 1263 	movw	r2, #6499	; 0x1963
 8003918:	4293      	cmp	r3, r2
 800391a:	f040 8250 	bne.w	8003dbe <LCD_Scan_Dir+0x582>
					{
		switch (dir) {
 800391e:	79fb      	ldrb	r3, [r7, #7]
 8003920:	2b07      	cmp	r3, #7
 8003922:	d836      	bhi.n	8003992 <LCD_Scan_Dir+0x156>
 8003924:	a201      	add	r2, pc, #4	; (adr r2, 800392c <LCD_Scan_Dir+0xf0>)
 8003926:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800392a:	bf00      	nop
 800392c:	08003993 	.word	0x08003993
 8003930:	0800394d 	.word	0x0800394d
 8003934:	08003957 	.word	0x08003957
 8003938:	08003961 	.word	0x08003961
 800393c:	0800396b 	.word	0x0800396b
 8003940:	08003975 	.word	0x08003975
 8003944:	0800397f 	.word	0x0800397f
 8003948:	08003989 	.word	0x08003989
		case L2R_U2D:	//从左到右,从上到下
			regval |= (0 << 7) | (0 << 6) | (0 << 5);
			break;
		case L2R_D2U:	//从左到右,从下到上
			regval |= (1 << 7) | (0 << 6) | (0 << 5);
 800394c:	89fb      	ldrh	r3, [r7, #14]
 800394e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003952:	81fb      	strh	r3, [r7, #14]
			break;
 8003954:	e01d      	b.n	8003992 <LCD_Scan_Dir+0x156>
		case R2L_U2D:	//从右到左,从上到下
			regval |= (0 << 7) | (1 << 6) | (0 << 5);
 8003956:	89fb      	ldrh	r3, [r7, #14]
 8003958:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800395c:	81fb      	strh	r3, [r7, #14]
			break;
 800395e:	e018      	b.n	8003992 <LCD_Scan_Dir+0x156>
		case R2L_D2U:	//从右到左,从下到上
			regval |= (1 << 7) | (1 << 6) | (0 << 5);
 8003960:	89fb      	ldrh	r3, [r7, #14]
 8003962:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003966:	81fb      	strh	r3, [r7, #14]
			break;
 8003968:	e013      	b.n	8003992 <LCD_Scan_Dir+0x156>
		case U2D_L2R:	//从上到下,从左到右
			regval |= (0 << 7) | (0 << 6) | (1 << 5);
 800396a:	89fb      	ldrh	r3, [r7, #14]
 800396c:	f043 0320 	orr.w	r3, r3, #32
 8003970:	81fb      	strh	r3, [r7, #14]
			break;
 8003972:	e00e      	b.n	8003992 <LCD_Scan_Dir+0x156>
		case U2D_R2L:	//从上到下,从右到左
			regval |= (0 << 7) | (1 << 6) | (1 << 5);
 8003974:	89fb      	ldrh	r3, [r7, #14]
 8003976:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800397a:	81fb      	strh	r3, [r7, #14]
			break;
 800397c:	e009      	b.n	8003992 <LCD_Scan_Dir+0x156>
		case D2U_L2R:	//从下到上,从左到右
			regval |= (1 << 7) | (0 << 6) | (1 << 5);
 800397e:	89fb      	ldrh	r3, [r7, #14]
 8003980:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8003984:	81fb      	strh	r3, [r7, #14]
			break;
 8003986:	e004      	b.n	8003992 <LCD_Scan_Dir+0x156>
		case D2U_R2L:	//从下到上,从右到左
			regval |= (1 << 7) | (1 << 6) | (1 << 5);
 8003988:	89fb      	ldrh	r3, [r7, #14]
 800398a:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 800398e:	81fb      	strh	r3, [r7, #14]
			break;
 8003990:	bf00      	nop
		}
		if (lcddev.id == 0X5510)
 8003992:	4b27      	ldr	r3, [pc, #156]	; (8003a30 <LCD_Scan_Dir+0x1f4>)
 8003994:	889b      	ldrh	r3, [r3, #4]
 8003996:	f245 5210 	movw	r2, #21776	; 0x5510
 800399a:	4293      	cmp	r3, r2
 800399c:	d103      	bne.n	80039a6 <LCD_Scan_Dir+0x16a>
			dirreg = 0X3600;
 800399e:	f44f 5358 	mov.w	r3, #13824	; 0x3600
 80039a2:	81bb      	strh	r3, [r7, #12]
 80039a4:	e001      	b.n	80039aa <LCD_Scan_Dir+0x16e>
		else
			dirreg = 0X36;
 80039a6:	2336      	movs	r3, #54	; 0x36
 80039a8:	81bb      	strh	r3, [r7, #12]
		if ((lcddev.id != 0X5310) && (lcddev.id != 0X5510) && (lcddev.id != 0X1963))
 80039aa:	4b21      	ldr	r3, [pc, #132]	; (8003a30 <LCD_Scan_Dir+0x1f4>)
 80039ac:	889b      	ldrh	r3, [r3, #4]
 80039ae:	f245 3210 	movw	r2, #21264	; 0x5310
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d00f      	beq.n	80039d6 <LCD_Scan_Dir+0x19a>
 80039b6:	4b1e      	ldr	r3, [pc, #120]	; (8003a30 <LCD_Scan_Dir+0x1f4>)
 80039b8:	889b      	ldrh	r3, [r3, #4]
 80039ba:	f245 5210 	movw	r2, #21776	; 0x5510
 80039be:	4293      	cmp	r3, r2
 80039c0:	d009      	beq.n	80039d6 <LCD_Scan_Dir+0x19a>
 80039c2:	4b1b      	ldr	r3, [pc, #108]	; (8003a30 <LCD_Scan_Dir+0x1f4>)
 80039c4:	889b      	ldrh	r3, [r3, #4]
 80039c6:	f641 1263 	movw	r2, #6499	; 0x1963
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d003      	beq.n	80039d6 <LCD_Scan_Dir+0x19a>
			regval |= 0X08;	//5310/5510/1963不需要BGR
 80039ce:	89fb      	ldrh	r3, [r7, #14]
 80039d0:	f043 0308 	orr.w	r3, r3, #8
 80039d4:	81fb      	strh	r3, [r7, #14]
		if (lcddev.id == 0X6804)
 80039d6:	4b16      	ldr	r3, [pc, #88]	; (8003a30 <LCD_Scan_Dir+0x1f4>)
 80039d8:	889b      	ldrh	r3, [r3, #4]
 80039da:	f646 0204 	movw	r2, #26628	; 0x6804
 80039de:	4293      	cmp	r3, r2
 80039e0:	d103      	bne.n	80039ea <LCD_Scan_Dir+0x1ae>
			regval |= 0x02;	//6804的BIT6和9341的反了
 80039e2:	89fb      	ldrh	r3, [r7, #14]
 80039e4:	f043 0302 	orr.w	r3, r3, #2
 80039e8:	81fb      	strh	r3, [r7, #14]
		LCD_WriteReg(dirreg, regval);
 80039ea:	89fa      	ldrh	r2, [r7, #14]
 80039ec:	89bb      	ldrh	r3, [r7, #12]
 80039ee:	4611      	mov	r1, r2
 80039f0:	4618      	mov	r0, r3
 80039f2:	f7ff fc11 	bl	8003218 <LCD_WriteReg>
		if (lcddev.id != 0X1963)	//1963不做坐标处理
 80039f6:	4b0e      	ldr	r3, [pc, #56]	; (8003a30 <LCD_Scan_Dir+0x1f4>)
 80039f8:	889b      	ldrh	r3, [r3, #4]
 80039fa:	f641 1263 	movw	r2, #6499	; 0x1963
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d028      	beq.n	8003a54 <LCD_Scan_Dir+0x218>
				{
			if (regval & 0X20) {
 8003a02:	89fb      	ldrh	r3, [r7, #14]
 8003a04:	f003 0320 	and.w	r3, r3, #32
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d013      	beq.n	8003a34 <LCD_Scan_Dir+0x1f8>
				if (lcddev.width < lcddev.height)	//交换X,Y
 8003a0c:	4b08      	ldr	r3, [pc, #32]	; (8003a30 <LCD_Scan_Dir+0x1f4>)
 8003a0e:	881a      	ldrh	r2, [r3, #0]
 8003a10:	4b07      	ldr	r3, [pc, #28]	; (8003a30 <LCD_Scan_Dir+0x1f4>)
 8003a12:	885b      	ldrh	r3, [r3, #2]
 8003a14:	429a      	cmp	r2, r3
 8003a16:	d21d      	bcs.n	8003a54 <LCD_Scan_Dir+0x218>
						{
					temp = lcddev.width;
 8003a18:	4b05      	ldr	r3, [pc, #20]	; (8003a30 <LCD_Scan_Dir+0x1f4>)
 8003a1a:	881b      	ldrh	r3, [r3, #0]
 8003a1c:	817b      	strh	r3, [r7, #10]
					lcddev.width = lcddev.height;
 8003a1e:	4b04      	ldr	r3, [pc, #16]	; (8003a30 <LCD_Scan_Dir+0x1f4>)
 8003a20:	885a      	ldrh	r2, [r3, #2]
 8003a22:	4b03      	ldr	r3, [pc, #12]	; (8003a30 <LCD_Scan_Dir+0x1f4>)
 8003a24:	801a      	strh	r2, [r3, #0]
					lcddev.height = temp;
 8003a26:	4a02      	ldr	r2, [pc, #8]	; (8003a30 <LCD_Scan_Dir+0x1f4>)
 8003a28:	897b      	ldrh	r3, [r7, #10]
 8003a2a:	8053      	strh	r3, [r2, #2]
 8003a2c:	e012      	b.n	8003a54 <LCD_Scan_Dir+0x218>
 8003a2e:	bf00      	nop
 8003a30:	200000b4 	.word	0x200000b4
				}
			} else {
				if (lcddev.width > lcddev.height)	//交换X,Y
 8003a34:	4b7f      	ldr	r3, [pc, #508]	; (8003c34 <LCD_Scan_Dir+0x3f8>)
 8003a36:	881a      	ldrh	r2, [r3, #0]
 8003a38:	4b7e      	ldr	r3, [pc, #504]	; (8003c34 <LCD_Scan_Dir+0x3f8>)
 8003a3a:	885b      	ldrh	r3, [r3, #2]
 8003a3c:	429a      	cmp	r2, r3
 8003a3e:	d909      	bls.n	8003a54 <LCD_Scan_Dir+0x218>
						{
					temp = lcddev.width;
 8003a40:	4b7c      	ldr	r3, [pc, #496]	; (8003c34 <LCD_Scan_Dir+0x3f8>)
 8003a42:	881b      	ldrh	r3, [r3, #0]
 8003a44:	817b      	strh	r3, [r7, #10]
					lcddev.width = lcddev.height;
 8003a46:	4b7b      	ldr	r3, [pc, #492]	; (8003c34 <LCD_Scan_Dir+0x3f8>)
 8003a48:	885a      	ldrh	r2, [r3, #2]
 8003a4a:	4b7a      	ldr	r3, [pc, #488]	; (8003c34 <LCD_Scan_Dir+0x3f8>)
 8003a4c:	801a      	strh	r2, [r3, #0]
					lcddev.height = temp;
 8003a4e:	4a79      	ldr	r2, [pc, #484]	; (8003c34 <LCD_Scan_Dir+0x3f8>)
 8003a50:	897b      	ldrh	r3, [r7, #10]
 8003a52:	8053      	strh	r3, [r2, #2]
				}
			}
		}
		if (lcddev.id == 0X5510) {
 8003a54:	4b77      	ldr	r3, [pc, #476]	; (8003c34 <LCD_Scan_Dir+0x3f8>)
 8003a56:	889b      	ldrh	r3, [r3, #4]
 8003a58:	f245 5210 	movw	r2, #21776	; 0x5510
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	f040 80ef 	bne.w	8003c40 <LCD_Scan_Dir+0x404>
			LCD_WR_REG(lcddev.setxcmd);
 8003a62:	4b74      	ldr	r3, [pc, #464]	; (8003c34 <LCD_Scan_Dir+0x3f8>)
 8003a64:	895b      	ldrh	r3, [r3, #10]
 8003a66:	4618      	mov	r0, r3
 8003a68:	f7ff fb4a 	bl	8003100 <LCD_WR_REG>
			LCD_WR_DATA(0);
 8003a6c:	4b72      	ldr	r3, [pc, #456]	; (8003c38 <LCD_Scan_Dir+0x3fc>)
 8003a6e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003a72:	611a      	str	r2, [r3, #16]
 8003a74:	4b70      	ldr	r3, [pc, #448]	; (8003c38 <LCD_Scan_Dir+0x3fc>)
 8003a76:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a7a:	615a      	str	r2, [r3, #20]
 8003a7c:	4b6f      	ldr	r3, [pc, #444]	; (8003c3c <LCD_Scan_Dir+0x400>)
 8003a7e:	2200      	movs	r2, #0
 8003a80:	60da      	str	r2, [r3, #12]
 8003a82:	4b6d      	ldr	r3, [pc, #436]	; (8003c38 <LCD_Scan_Dir+0x3fc>)
 8003a84:	2280      	movs	r2, #128	; 0x80
 8003a86:	615a      	str	r2, [r3, #20]
 8003a88:	4b6b      	ldr	r3, [pc, #428]	; (8003c38 <LCD_Scan_Dir+0x3fc>)
 8003a8a:	2280      	movs	r2, #128	; 0x80
 8003a8c:	611a      	str	r2, [r3, #16]
 8003a8e:	4b6a      	ldr	r3, [pc, #424]	; (8003c38 <LCD_Scan_Dir+0x3fc>)
 8003a90:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a94:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setxcmd + 1);
 8003a96:	4b67      	ldr	r3, [pc, #412]	; (8003c34 <LCD_Scan_Dir+0x3f8>)
 8003a98:	895b      	ldrh	r3, [r3, #10]
 8003a9a:	3301      	adds	r3, #1
 8003a9c:	b29b      	uxth	r3, r3
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	f7ff fb2e 	bl	8003100 <LCD_WR_REG>
			LCD_WR_DATA(0);
 8003aa4:	4b64      	ldr	r3, [pc, #400]	; (8003c38 <LCD_Scan_Dir+0x3fc>)
 8003aa6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003aaa:	611a      	str	r2, [r3, #16]
 8003aac:	4b62      	ldr	r3, [pc, #392]	; (8003c38 <LCD_Scan_Dir+0x3fc>)
 8003aae:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ab2:	615a      	str	r2, [r3, #20]
 8003ab4:	4b61      	ldr	r3, [pc, #388]	; (8003c3c <LCD_Scan_Dir+0x400>)
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	60da      	str	r2, [r3, #12]
 8003aba:	4b5f      	ldr	r3, [pc, #380]	; (8003c38 <LCD_Scan_Dir+0x3fc>)
 8003abc:	2280      	movs	r2, #128	; 0x80
 8003abe:	615a      	str	r2, [r3, #20]
 8003ac0:	4b5d      	ldr	r3, [pc, #372]	; (8003c38 <LCD_Scan_Dir+0x3fc>)
 8003ac2:	2280      	movs	r2, #128	; 0x80
 8003ac4:	611a      	str	r2, [r3, #16]
 8003ac6:	4b5c      	ldr	r3, [pc, #368]	; (8003c38 <LCD_Scan_Dir+0x3fc>)
 8003ac8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003acc:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setxcmd + 2);
 8003ace:	4b59      	ldr	r3, [pc, #356]	; (8003c34 <LCD_Scan_Dir+0x3f8>)
 8003ad0:	895b      	ldrh	r3, [r3, #10]
 8003ad2:	3302      	adds	r3, #2
 8003ad4:	b29b      	uxth	r3, r3
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f7ff fb12 	bl	8003100 <LCD_WR_REG>
			LCD_WR_DATA((lcddev.width - 1) >> 8);
 8003adc:	4b56      	ldr	r3, [pc, #344]	; (8003c38 <LCD_Scan_Dir+0x3fc>)
 8003ade:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003ae2:	611a      	str	r2, [r3, #16]
 8003ae4:	4b54      	ldr	r3, [pc, #336]	; (8003c38 <LCD_Scan_Dir+0x3fc>)
 8003ae6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003aea:	615a      	str	r2, [r3, #20]
 8003aec:	4b51      	ldr	r3, [pc, #324]	; (8003c34 <LCD_Scan_Dir+0x3f8>)
 8003aee:	881b      	ldrh	r3, [r3, #0]
 8003af0:	3b01      	subs	r3, #1
 8003af2:	121a      	asrs	r2, r3, #8
 8003af4:	4b51      	ldr	r3, [pc, #324]	; (8003c3c <LCD_Scan_Dir+0x400>)
 8003af6:	60da      	str	r2, [r3, #12]
 8003af8:	4b4f      	ldr	r3, [pc, #316]	; (8003c38 <LCD_Scan_Dir+0x3fc>)
 8003afa:	2280      	movs	r2, #128	; 0x80
 8003afc:	615a      	str	r2, [r3, #20]
 8003afe:	4b4e      	ldr	r3, [pc, #312]	; (8003c38 <LCD_Scan_Dir+0x3fc>)
 8003b00:	2280      	movs	r2, #128	; 0x80
 8003b02:	611a      	str	r2, [r3, #16]
 8003b04:	4b4c      	ldr	r3, [pc, #304]	; (8003c38 <LCD_Scan_Dir+0x3fc>)
 8003b06:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b0a:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setxcmd + 3);
 8003b0c:	4b49      	ldr	r3, [pc, #292]	; (8003c34 <LCD_Scan_Dir+0x3f8>)
 8003b0e:	895b      	ldrh	r3, [r3, #10]
 8003b10:	3303      	adds	r3, #3
 8003b12:	b29b      	uxth	r3, r3
 8003b14:	4618      	mov	r0, r3
 8003b16:	f7ff faf3 	bl	8003100 <LCD_WR_REG>
			LCD_WR_DATA((lcddev.width - 1) & 0XFF);
 8003b1a:	4b47      	ldr	r3, [pc, #284]	; (8003c38 <LCD_Scan_Dir+0x3fc>)
 8003b1c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003b20:	611a      	str	r2, [r3, #16]
 8003b22:	4b45      	ldr	r3, [pc, #276]	; (8003c38 <LCD_Scan_Dir+0x3fc>)
 8003b24:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b28:	615a      	str	r2, [r3, #20]
 8003b2a:	4b42      	ldr	r3, [pc, #264]	; (8003c34 <LCD_Scan_Dir+0x3f8>)
 8003b2c:	881b      	ldrh	r3, [r3, #0]
 8003b2e:	3b01      	subs	r3, #1
 8003b30:	4a42      	ldr	r2, [pc, #264]	; (8003c3c <LCD_Scan_Dir+0x400>)
 8003b32:	b2db      	uxtb	r3, r3
 8003b34:	60d3      	str	r3, [r2, #12]
 8003b36:	4b40      	ldr	r3, [pc, #256]	; (8003c38 <LCD_Scan_Dir+0x3fc>)
 8003b38:	2280      	movs	r2, #128	; 0x80
 8003b3a:	615a      	str	r2, [r3, #20]
 8003b3c:	4b3e      	ldr	r3, [pc, #248]	; (8003c38 <LCD_Scan_Dir+0x3fc>)
 8003b3e:	2280      	movs	r2, #128	; 0x80
 8003b40:	611a      	str	r2, [r3, #16]
 8003b42:	4b3d      	ldr	r3, [pc, #244]	; (8003c38 <LCD_Scan_Dir+0x3fc>)
 8003b44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b48:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd);
 8003b4a:	4b3a      	ldr	r3, [pc, #232]	; (8003c34 <LCD_Scan_Dir+0x3f8>)
 8003b4c:	899b      	ldrh	r3, [r3, #12]
 8003b4e:	4618      	mov	r0, r3
 8003b50:	f7ff fad6 	bl	8003100 <LCD_WR_REG>
			LCD_WR_DATA(0);
 8003b54:	4b38      	ldr	r3, [pc, #224]	; (8003c38 <LCD_Scan_Dir+0x3fc>)
 8003b56:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003b5a:	611a      	str	r2, [r3, #16]
 8003b5c:	4b36      	ldr	r3, [pc, #216]	; (8003c38 <LCD_Scan_Dir+0x3fc>)
 8003b5e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b62:	615a      	str	r2, [r3, #20]
 8003b64:	4b35      	ldr	r3, [pc, #212]	; (8003c3c <LCD_Scan_Dir+0x400>)
 8003b66:	2200      	movs	r2, #0
 8003b68:	60da      	str	r2, [r3, #12]
 8003b6a:	4b33      	ldr	r3, [pc, #204]	; (8003c38 <LCD_Scan_Dir+0x3fc>)
 8003b6c:	2280      	movs	r2, #128	; 0x80
 8003b6e:	615a      	str	r2, [r3, #20]
 8003b70:	4b31      	ldr	r3, [pc, #196]	; (8003c38 <LCD_Scan_Dir+0x3fc>)
 8003b72:	2280      	movs	r2, #128	; 0x80
 8003b74:	611a      	str	r2, [r3, #16]
 8003b76:	4b30      	ldr	r3, [pc, #192]	; (8003c38 <LCD_Scan_Dir+0x3fc>)
 8003b78:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b7c:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd + 1);
 8003b7e:	4b2d      	ldr	r3, [pc, #180]	; (8003c34 <LCD_Scan_Dir+0x3f8>)
 8003b80:	899b      	ldrh	r3, [r3, #12]
 8003b82:	3301      	adds	r3, #1
 8003b84:	b29b      	uxth	r3, r3
 8003b86:	4618      	mov	r0, r3
 8003b88:	f7ff faba 	bl	8003100 <LCD_WR_REG>
			LCD_WR_DATA(0);
 8003b8c:	4b2a      	ldr	r3, [pc, #168]	; (8003c38 <LCD_Scan_Dir+0x3fc>)
 8003b8e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003b92:	611a      	str	r2, [r3, #16]
 8003b94:	4b28      	ldr	r3, [pc, #160]	; (8003c38 <LCD_Scan_Dir+0x3fc>)
 8003b96:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b9a:	615a      	str	r2, [r3, #20]
 8003b9c:	4b27      	ldr	r3, [pc, #156]	; (8003c3c <LCD_Scan_Dir+0x400>)
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	60da      	str	r2, [r3, #12]
 8003ba2:	4b25      	ldr	r3, [pc, #148]	; (8003c38 <LCD_Scan_Dir+0x3fc>)
 8003ba4:	2280      	movs	r2, #128	; 0x80
 8003ba6:	615a      	str	r2, [r3, #20]
 8003ba8:	4b23      	ldr	r3, [pc, #140]	; (8003c38 <LCD_Scan_Dir+0x3fc>)
 8003baa:	2280      	movs	r2, #128	; 0x80
 8003bac:	611a      	str	r2, [r3, #16]
 8003bae:	4b22      	ldr	r3, [pc, #136]	; (8003c38 <LCD_Scan_Dir+0x3fc>)
 8003bb0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003bb4:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd + 2);
 8003bb6:	4b1f      	ldr	r3, [pc, #124]	; (8003c34 <LCD_Scan_Dir+0x3f8>)
 8003bb8:	899b      	ldrh	r3, [r3, #12]
 8003bba:	3302      	adds	r3, #2
 8003bbc:	b29b      	uxth	r3, r3
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	f7ff fa9e 	bl	8003100 <LCD_WR_REG>
			LCD_WR_DATA((lcddev.height - 1) >> 8);
 8003bc4:	4b1c      	ldr	r3, [pc, #112]	; (8003c38 <LCD_Scan_Dir+0x3fc>)
 8003bc6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003bca:	611a      	str	r2, [r3, #16]
 8003bcc:	4b1a      	ldr	r3, [pc, #104]	; (8003c38 <LCD_Scan_Dir+0x3fc>)
 8003bce:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003bd2:	615a      	str	r2, [r3, #20]
 8003bd4:	4b17      	ldr	r3, [pc, #92]	; (8003c34 <LCD_Scan_Dir+0x3f8>)
 8003bd6:	885b      	ldrh	r3, [r3, #2]
 8003bd8:	3b01      	subs	r3, #1
 8003bda:	121a      	asrs	r2, r3, #8
 8003bdc:	4b17      	ldr	r3, [pc, #92]	; (8003c3c <LCD_Scan_Dir+0x400>)
 8003bde:	60da      	str	r2, [r3, #12]
 8003be0:	4b15      	ldr	r3, [pc, #84]	; (8003c38 <LCD_Scan_Dir+0x3fc>)
 8003be2:	2280      	movs	r2, #128	; 0x80
 8003be4:	615a      	str	r2, [r3, #20]
 8003be6:	4b14      	ldr	r3, [pc, #80]	; (8003c38 <LCD_Scan_Dir+0x3fc>)
 8003be8:	2280      	movs	r2, #128	; 0x80
 8003bea:	611a      	str	r2, [r3, #16]
 8003bec:	4b12      	ldr	r3, [pc, #72]	; (8003c38 <LCD_Scan_Dir+0x3fc>)
 8003bee:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003bf2:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd + 3);
 8003bf4:	4b0f      	ldr	r3, [pc, #60]	; (8003c34 <LCD_Scan_Dir+0x3f8>)
 8003bf6:	899b      	ldrh	r3, [r3, #12]
 8003bf8:	3303      	adds	r3, #3
 8003bfa:	b29b      	uxth	r3, r3
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	f7ff fa7f 	bl	8003100 <LCD_WR_REG>
			LCD_WR_DATA((lcddev.height - 1) & 0XFF);
 8003c02:	4b0d      	ldr	r3, [pc, #52]	; (8003c38 <LCD_Scan_Dir+0x3fc>)
 8003c04:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003c08:	611a      	str	r2, [r3, #16]
 8003c0a:	4b0b      	ldr	r3, [pc, #44]	; (8003c38 <LCD_Scan_Dir+0x3fc>)
 8003c0c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c10:	615a      	str	r2, [r3, #20]
 8003c12:	4b08      	ldr	r3, [pc, #32]	; (8003c34 <LCD_Scan_Dir+0x3f8>)
 8003c14:	885b      	ldrh	r3, [r3, #2]
 8003c16:	3b01      	subs	r3, #1
 8003c18:	4a08      	ldr	r2, [pc, #32]	; (8003c3c <LCD_Scan_Dir+0x400>)
 8003c1a:	b2db      	uxtb	r3, r3
 8003c1c:	60d3      	str	r3, [r2, #12]
 8003c1e:	4b06      	ldr	r3, [pc, #24]	; (8003c38 <LCD_Scan_Dir+0x3fc>)
 8003c20:	2280      	movs	r2, #128	; 0x80
 8003c22:	615a      	str	r2, [r3, #20]
 8003c24:	4b04      	ldr	r3, [pc, #16]	; (8003c38 <LCD_Scan_Dir+0x3fc>)
 8003c26:	2280      	movs	r2, #128	; 0x80
 8003c28:	611a      	str	r2, [r3, #16]
 8003c2a:	4b03      	ldr	r3, [pc, #12]	; (8003c38 <LCD_Scan_Dir+0x3fc>)
 8003c2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c30:	611a      	str	r2, [r3, #16]
		if (lcddev.id == 0X5510) {
 8003c32:	e10a      	b.n	8003e4a <LCD_Scan_Dir+0x60e>
 8003c34:	200000b4 	.word	0x200000b4
 8003c38:	40011000 	.word	0x40011000
 8003c3c:	40010c00 	.word	0x40010c00
		} else {
			LCD_WR_REG(lcddev.setxcmd);
 8003c40:	4b84      	ldr	r3, [pc, #528]	; (8003e54 <LCD_Scan_Dir+0x618>)
 8003c42:	895b      	ldrh	r3, [r3, #10]
 8003c44:	4618      	mov	r0, r3
 8003c46:	f7ff fa5b 	bl	8003100 <LCD_WR_REG>
			LCD_WR_DATA(0);
 8003c4a:	4b83      	ldr	r3, [pc, #524]	; (8003e58 <LCD_Scan_Dir+0x61c>)
 8003c4c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003c50:	611a      	str	r2, [r3, #16]
 8003c52:	4b81      	ldr	r3, [pc, #516]	; (8003e58 <LCD_Scan_Dir+0x61c>)
 8003c54:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c58:	615a      	str	r2, [r3, #20]
 8003c5a:	4b80      	ldr	r3, [pc, #512]	; (8003e5c <LCD_Scan_Dir+0x620>)
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	60da      	str	r2, [r3, #12]
 8003c60:	4b7d      	ldr	r3, [pc, #500]	; (8003e58 <LCD_Scan_Dir+0x61c>)
 8003c62:	2280      	movs	r2, #128	; 0x80
 8003c64:	615a      	str	r2, [r3, #20]
 8003c66:	4b7c      	ldr	r3, [pc, #496]	; (8003e58 <LCD_Scan_Dir+0x61c>)
 8003c68:	2280      	movs	r2, #128	; 0x80
 8003c6a:	611a      	str	r2, [r3, #16]
 8003c6c:	4b7a      	ldr	r3, [pc, #488]	; (8003e58 <LCD_Scan_Dir+0x61c>)
 8003c6e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c72:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(0);
 8003c74:	4b78      	ldr	r3, [pc, #480]	; (8003e58 <LCD_Scan_Dir+0x61c>)
 8003c76:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003c7a:	611a      	str	r2, [r3, #16]
 8003c7c:	4b76      	ldr	r3, [pc, #472]	; (8003e58 <LCD_Scan_Dir+0x61c>)
 8003c7e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c82:	615a      	str	r2, [r3, #20]
 8003c84:	4b75      	ldr	r3, [pc, #468]	; (8003e5c <LCD_Scan_Dir+0x620>)
 8003c86:	2200      	movs	r2, #0
 8003c88:	60da      	str	r2, [r3, #12]
 8003c8a:	4b73      	ldr	r3, [pc, #460]	; (8003e58 <LCD_Scan_Dir+0x61c>)
 8003c8c:	2280      	movs	r2, #128	; 0x80
 8003c8e:	615a      	str	r2, [r3, #20]
 8003c90:	4b71      	ldr	r3, [pc, #452]	; (8003e58 <LCD_Scan_Dir+0x61c>)
 8003c92:	2280      	movs	r2, #128	; 0x80
 8003c94:	611a      	str	r2, [r3, #16]
 8003c96:	4b70      	ldr	r3, [pc, #448]	; (8003e58 <LCD_Scan_Dir+0x61c>)
 8003c98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c9c:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.width - 1) >> 8);
 8003c9e:	4b6e      	ldr	r3, [pc, #440]	; (8003e58 <LCD_Scan_Dir+0x61c>)
 8003ca0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003ca4:	611a      	str	r2, [r3, #16]
 8003ca6:	4b6c      	ldr	r3, [pc, #432]	; (8003e58 <LCD_Scan_Dir+0x61c>)
 8003ca8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003cac:	615a      	str	r2, [r3, #20]
 8003cae:	4b69      	ldr	r3, [pc, #420]	; (8003e54 <LCD_Scan_Dir+0x618>)
 8003cb0:	881b      	ldrh	r3, [r3, #0]
 8003cb2:	3b01      	subs	r3, #1
 8003cb4:	121a      	asrs	r2, r3, #8
 8003cb6:	4b69      	ldr	r3, [pc, #420]	; (8003e5c <LCD_Scan_Dir+0x620>)
 8003cb8:	60da      	str	r2, [r3, #12]
 8003cba:	4b67      	ldr	r3, [pc, #412]	; (8003e58 <LCD_Scan_Dir+0x61c>)
 8003cbc:	2280      	movs	r2, #128	; 0x80
 8003cbe:	615a      	str	r2, [r3, #20]
 8003cc0:	4b65      	ldr	r3, [pc, #404]	; (8003e58 <LCD_Scan_Dir+0x61c>)
 8003cc2:	2280      	movs	r2, #128	; 0x80
 8003cc4:	611a      	str	r2, [r3, #16]
 8003cc6:	4b64      	ldr	r3, [pc, #400]	; (8003e58 <LCD_Scan_Dir+0x61c>)
 8003cc8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ccc:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.width - 1) & 0XFF);
 8003cce:	4b62      	ldr	r3, [pc, #392]	; (8003e58 <LCD_Scan_Dir+0x61c>)
 8003cd0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003cd4:	611a      	str	r2, [r3, #16]
 8003cd6:	4b60      	ldr	r3, [pc, #384]	; (8003e58 <LCD_Scan_Dir+0x61c>)
 8003cd8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003cdc:	615a      	str	r2, [r3, #20]
 8003cde:	4b5d      	ldr	r3, [pc, #372]	; (8003e54 <LCD_Scan_Dir+0x618>)
 8003ce0:	881b      	ldrh	r3, [r3, #0]
 8003ce2:	3b01      	subs	r3, #1
 8003ce4:	4a5d      	ldr	r2, [pc, #372]	; (8003e5c <LCD_Scan_Dir+0x620>)
 8003ce6:	b2db      	uxtb	r3, r3
 8003ce8:	60d3      	str	r3, [r2, #12]
 8003cea:	4b5b      	ldr	r3, [pc, #364]	; (8003e58 <LCD_Scan_Dir+0x61c>)
 8003cec:	2280      	movs	r2, #128	; 0x80
 8003cee:	615a      	str	r2, [r3, #20]
 8003cf0:	4b59      	ldr	r3, [pc, #356]	; (8003e58 <LCD_Scan_Dir+0x61c>)
 8003cf2:	2280      	movs	r2, #128	; 0x80
 8003cf4:	611a      	str	r2, [r3, #16]
 8003cf6:	4b58      	ldr	r3, [pc, #352]	; (8003e58 <LCD_Scan_Dir+0x61c>)
 8003cf8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003cfc:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd);
 8003cfe:	4b55      	ldr	r3, [pc, #340]	; (8003e54 <LCD_Scan_Dir+0x618>)
 8003d00:	899b      	ldrh	r3, [r3, #12]
 8003d02:	4618      	mov	r0, r3
 8003d04:	f7ff f9fc 	bl	8003100 <LCD_WR_REG>
			LCD_WR_DATA(0);
 8003d08:	4b53      	ldr	r3, [pc, #332]	; (8003e58 <LCD_Scan_Dir+0x61c>)
 8003d0a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003d0e:	611a      	str	r2, [r3, #16]
 8003d10:	4b51      	ldr	r3, [pc, #324]	; (8003e58 <LCD_Scan_Dir+0x61c>)
 8003d12:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d16:	615a      	str	r2, [r3, #20]
 8003d18:	4b50      	ldr	r3, [pc, #320]	; (8003e5c <LCD_Scan_Dir+0x620>)
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	60da      	str	r2, [r3, #12]
 8003d1e:	4b4e      	ldr	r3, [pc, #312]	; (8003e58 <LCD_Scan_Dir+0x61c>)
 8003d20:	2280      	movs	r2, #128	; 0x80
 8003d22:	615a      	str	r2, [r3, #20]
 8003d24:	4b4c      	ldr	r3, [pc, #304]	; (8003e58 <LCD_Scan_Dir+0x61c>)
 8003d26:	2280      	movs	r2, #128	; 0x80
 8003d28:	611a      	str	r2, [r3, #16]
 8003d2a:	4b4b      	ldr	r3, [pc, #300]	; (8003e58 <LCD_Scan_Dir+0x61c>)
 8003d2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d30:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(0);
 8003d32:	4b49      	ldr	r3, [pc, #292]	; (8003e58 <LCD_Scan_Dir+0x61c>)
 8003d34:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003d38:	611a      	str	r2, [r3, #16]
 8003d3a:	4b47      	ldr	r3, [pc, #284]	; (8003e58 <LCD_Scan_Dir+0x61c>)
 8003d3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d40:	615a      	str	r2, [r3, #20]
 8003d42:	4b46      	ldr	r3, [pc, #280]	; (8003e5c <LCD_Scan_Dir+0x620>)
 8003d44:	2200      	movs	r2, #0
 8003d46:	60da      	str	r2, [r3, #12]
 8003d48:	4b43      	ldr	r3, [pc, #268]	; (8003e58 <LCD_Scan_Dir+0x61c>)
 8003d4a:	2280      	movs	r2, #128	; 0x80
 8003d4c:	615a      	str	r2, [r3, #20]
 8003d4e:	4b42      	ldr	r3, [pc, #264]	; (8003e58 <LCD_Scan_Dir+0x61c>)
 8003d50:	2280      	movs	r2, #128	; 0x80
 8003d52:	611a      	str	r2, [r3, #16]
 8003d54:	4b40      	ldr	r3, [pc, #256]	; (8003e58 <LCD_Scan_Dir+0x61c>)
 8003d56:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d5a:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.height - 1) >> 8);
 8003d5c:	4b3e      	ldr	r3, [pc, #248]	; (8003e58 <LCD_Scan_Dir+0x61c>)
 8003d5e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003d62:	611a      	str	r2, [r3, #16]
 8003d64:	4b3c      	ldr	r3, [pc, #240]	; (8003e58 <LCD_Scan_Dir+0x61c>)
 8003d66:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d6a:	615a      	str	r2, [r3, #20]
 8003d6c:	4b39      	ldr	r3, [pc, #228]	; (8003e54 <LCD_Scan_Dir+0x618>)
 8003d6e:	885b      	ldrh	r3, [r3, #2]
 8003d70:	3b01      	subs	r3, #1
 8003d72:	121a      	asrs	r2, r3, #8
 8003d74:	4b39      	ldr	r3, [pc, #228]	; (8003e5c <LCD_Scan_Dir+0x620>)
 8003d76:	60da      	str	r2, [r3, #12]
 8003d78:	4b37      	ldr	r3, [pc, #220]	; (8003e58 <LCD_Scan_Dir+0x61c>)
 8003d7a:	2280      	movs	r2, #128	; 0x80
 8003d7c:	615a      	str	r2, [r3, #20]
 8003d7e:	4b36      	ldr	r3, [pc, #216]	; (8003e58 <LCD_Scan_Dir+0x61c>)
 8003d80:	2280      	movs	r2, #128	; 0x80
 8003d82:	611a      	str	r2, [r3, #16]
 8003d84:	4b34      	ldr	r3, [pc, #208]	; (8003e58 <LCD_Scan_Dir+0x61c>)
 8003d86:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d8a:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.height - 1) & 0XFF);
 8003d8c:	4b32      	ldr	r3, [pc, #200]	; (8003e58 <LCD_Scan_Dir+0x61c>)
 8003d8e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003d92:	611a      	str	r2, [r3, #16]
 8003d94:	4b30      	ldr	r3, [pc, #192]	; (8003e58 <LCD_Scan_Dir+0x61c>)
 8003d96:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d9a:	615a      	str	r2, [r3, #20]
 8003d9c:	4b2d      	ldr	r3, [pc, #180]	; (8003e54 <LCD_Scan_Dir+0x618>)
 8003d9e:	885b      	ldrh	r3, [r3, #2]
 8003da0:	3b01      	subs	r3, #1
 8003da2:	4a2e      	ldr	r2, [pc, #184]	; (8003e5c <LCD_Scan_Dir+0x620>)
 8003da4:	b2db      	uxtb	r3, r3
 8003da6:	60d3      	str	r3, [r2, #12]
 8003da8:	4b2b      	ldr	r3, [pc, #172]	; (8003e58 <LCD_Scan_Dir+0x61c>)
 8003daa:	2280      	movs	r2, #128	; 0x80
 8003dac:	615a      	str	r2, [r3, #20]
 8003dae:	4b2a      	ldr	r3, [pc, #168]	; (8003e58 <LCD_Scan_Dir+0x61c>)
 8003db0:	2280      	movs	r2, #128	; 0x80
 8003db2:	611a      	str	r2, [r3, #16]
 8003db4:	4b28      	ldr	r3, [pc, #160]	; (8003e58 <LCD_Scan_Dir+0x61c>)
 8003db6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003dba:	611a      	str	r2, [r3, #16]
		if (lcddev.id == 0X5510) {
 8003dbc:	e045      	b.n	8003e4a <LCD_Scan_Dir+0x60e>
		}
	} else {
		switch (dir) {
 8003dbe:	79fb      	ldrb	r3, [r7, #7]
 8003dc0:	2b07      	cmp	r3, #7
 8003dc2:	d836      	bhi.n	8003e32 <LCD_Scan_Dir+0x5f6>
 8003dc4:	a201      	add	r2, pc, #4	; (adr r2, 8003dcc <LCD_Scan_Dir+0x590>)
 8003dc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dca:	bf00      	nop
 8003dcc:	08003ded 	.word	0x08003ded
 8003dd0:	08003df7 	.word	0x08003df7
 8003dd4:	08003e01 	.word	0x08003e01
 8003dd8:	08003e33 	.word	0x08003e33
 8003ddc:	08003e0b 	.word	0x08003e0b
 8003de0:	08003e15 	.word	0x08003e15
 8003de4:	08003e1f 	.word	0x08003e1f
 8003de8:	08003e29 	.word	0x08003e29
		case L2R_U2D:	//从左到右,从上到下
			regval |= (1 << 5) | (1 << 4) | (0 << 3);
 8003dec:	89fb      	ldrh	r3, [r7, #14]
 8003dee:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8003df2:	81fb      	strh	r3, [r7, #14]
			break;
 8003df4:	e01d      	b.n	8003e32 <LCD_Scan_Dir+0x5f6>
		case L2R_D2U:	//从左到右,从下到上
			regval |= (0 << 5) | (1 << 4) | (0 << 3);
 8003df6:	89fb      	ldrh	r3, [r7, #14]
 8003df8:	f043 0310 	orr.w	r3, r3, #16
 8003dfc:	81fb      	strh	r3, [r7, #14]
			break;
 8003dfe:	e018      	b.n	8003e32 <LCD_Scan_Dir+0x5f6>
		case R2L_U2D:	//从右到左,从上到下
			regval |= (1 << 5) | (0 << 4) | (0 << 3);
 8003e00:	89fb      	ldrh	r3, [r7, #14]
 8003e02:	f043 0320 	orr.w	r3, r3, #32
 8003e06:	81fb      	strh	r3, [r7, #14]
			break;
 8003e08:	e013      	b.n	8003e32 <LCD_Scan_Dir+0x5f6>
		case R2L_D2U:	//从右到左,从下到上
			regval |= (0 << 5) | (0 << 4) | (0 << 3);
			break;
		case U2D_L2R:	//从上到下,从左到右
			regval |= (1 << 5) | (1 << 4) | (1 << 3);
 8003e0a:	89fb      	ldrh	r3, [r7, #14]
 8003e0c:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 8003e10:	81fb      	strh	r3, [r7, #14]
			break;
 8003e12:	e00e      	b.n	8003e32 <LCD_Scan_Dir+0x5f6>
		case U2D_R2L:	//从上到下,从右到左
			regval |= (1 << 5) | (0 << 4) | (1 << 3);
 8003e14:	89fb      	ldrh	r3, [r7, #14]
 8003e16:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8003e1a:	81fb      	strh	r3, [r7, #14]
			break;
 8003e1c:	e009      	b.n	8003e32 <LCD_Scan_Dir+0x5f6>
		case D2U_L2R:	//从下到上,从左到右
			regval |= (0 << 5) | (1 << 4) | (1 << 3);
 8003e1e:	89fb      	ldrh	r3, [r7, #14]
 8003e20:	f043 0318 	orr.w	r3, r3, #24
 8003e24:	81fb      	strh	r3, [r7, #14]
			break;
 8003e26:	e004      	b.n	8003e32 <LCD_Scan_Dir+0x5f6>
		case D2U_R2L:	//从下到上,从右到左
			regval |= (0 << 5) | (0 << 4) | (1 << 3);
 8003e28:	89fb      	ldrh	r3, [r7, #14]
 8003e2a:	f043 0308 	orr.w	r3, r3, #8
 8003e2e:	81fb      	strh	r3, [r7, #14]
			break;
 8003e30:	bf00      	nop
		}
		dirreg = 0X03;
 8003e32:	2303      	movs	r3, #3
 8003e34:	81bb      	strh	r3, [r7, #12]
		regval |= 1 << 12;
 8003e36:	89fb      	ldrh	r3, [r7, #14]
 8003e38:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003e3c:	81fb      	strh	r3, [r7, #14]
		LCD_WriteReg(dirreg, regval);
 8003e3e:	89fa      	ldrh	r2, [r7, #14]
 8003e40:	89bb      	ldrh	r3, [r7, #12]
 8003e42:	4611      	mov	r1, r2
 8003e44:	4618      	mov	r0, r3
 8003e46:	f7ff f9e7 	bl	8003218 <LCD_WriteReg>
	}
}
 8003e4a:	bf00      	nop
 8003e4c:	3710      	adds	r7, #16
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}
 8003e52:	bf00      	nop
 8003e54:	200000b4 	.word	0x200000b4
 8003e58:	40011000 	.word	0x40011000
 8003e5c:	40010c00 	.word	0x40010c00

08003e60 <LCD_DrawPoint>:
//Draw a point with color
//x,y: coordinate

void LCD_DrawPoint(uint16_t x, uint16_t y) {
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b082      	sub	sp, #8
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	4603      	mov	r3, r0
 8003e68:	460a      	mov	r2, r1
 8003e6a:	80fb      	strh	r3, [r7, #6]
 8003e6c:	4613      	mov	r3, r2
 8003e6e:	80bb      	strh	r3, [r7, #4]
	LCD_SetCursor(x, y);
 8003e70:	88ba      	ldrh	r2, [r7, #4]
 8003e72:	88fb      	ldrh	r3, [r7, #6]
 8003e74:	4611      	mov	r1, r2
 8003e76:	4618      	mov	r0, r3
 8003e78:	f7ff fa14 	bl	80032a4 <LCD_SetCursor>
	LCD_WriteRAM_Prepare();
 8003e7c:	f7ff fa06 	bl	800328c <LCD_WriteRAM_Prepare>
	LCD_WR_DATA(POINT_COLOR); //POINT_COLOR: Color of this point
 8003e80:	4b0c      	ldr	r3, [pc, #48]	; (8003eb4 <LCD_DrawPoint+0x54>)
 8003e82:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003e86:	611a      	str	r2, [r3, #16]
 8003e88:	4b0a      	ldr	r3, [pc, #40]	; (8003eb4 <LCD_DrawPoint+0x54>)
 8003e8a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e8e:	615a      	str	r2, [r3, #20]
 8003e90:	4b09      	ldr	r3, [pc, #36]	; (8003eb8 <LCD_DrawPoint+0x58>)
 8003e92:	881a      	ldrh	r2, [r3, #0]
 8003e94:	4b09      	ldr	r3, [pc, #36]	; (8003ebc <LCD_DrawPoint+0x5c>)
 8003e96:	60da      	str	r2, [r3, #12]
 8003e98:	4b06      	ldr	r3, [pc, #24]	; (8003eb4 <LCD_DrawPoint+0x54>)
 8003e9a:	2280      	movs	r2, #128	; 0x80
 8003e9c:	615a      	str	r2, [r3, #20]
 8003e9e:	4b05      	ldr	r3, [pc, #20]	; (8003eb4 <LCD_DrawPoint+0x54>)
 8003ea0:	2280      	movs	r2, #128	; 0x80
 8003ea2:	611a      	str	r2, [r3, #16]
 8003ea4:	4b03      	ldr	r3, [pc, #12]	; (8003eb4 <LCD_DrawPoint+0x54>)
 8003ea6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003eaa:	611a      	str	r2, [r3, #16]
}
 8003eac:	bf00      	nop
 8003eae:	3708      	adds	r7, #8
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	bd80      	pop	{r7, pc}
 8003eb4:	40011000 	.word	0x40011000
 8003eb8:	200000a0 	.word	0x200000a0
 8003ebc:	40010c00 	.word	0x40010c00

08003ec0 <LCD_Fast_DrawPoint>:
//Draw a point with color(quicker)
//x,y: coordinate
void LCD_Fast_DrawPoint(uint16_t x, uint16_t y, uint16_t color) {
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b082      	sub	sp, #8
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	80fb      	strh	r3, [r7, #6]
 8003eca:	460b      	mov	r3, r1
 8003ecc:	80bb      	strh	r3, [r7, #4]
 8003ece:	4613      	mov	r3, r2
 8003ed0:	807b      	strh	r3, [r7, #2]
	if (lcddev.id == 0X9341 || lcddev.id == 0X5310) {
 8003ed2:	4b75      	ldr	r3, [pc, #468]	; (80040a8 <LCD_Fast_DrawPoint+0x1e8>)
 8003ed4:	889b      	ldrh	r3, [r3, #4]
 8003ed6:	f249 3241 	movw	r2, #37697	; 0x9341
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d005      	beq.n	8003eea <LCD_Fast_DrawPoint+0x2a>
 8003ede:	4b72      	ldr	r3, [pc, #456]	; (80040a8 <LCD_Fast_DrawPoint+0x1e8>)
 8003ee0:	889b      	ldrh	r3, [r3, #4]
 8003ee2:	f245 3210 	movw	r2, #21264	; 0x5310
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d164      	bne.n	8003fb4 <LCD_Fast_DrawPoint+0xf4>
		LCD_WR_REG(lcddev.setxcmd);
 8003eea:	4b6f      	ldr	r3, [pc, #444]	; (80040a8 <LCD_Fast_DrawPoint+0x1e8>)
 8003eec:	895b      	ldrh	r3, [r3, #10]
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f7ff f906 	bl	8003100 <LCD_WR_REG>
		LCD_WR_DATA(x >> 8);
 8003ef4:	4b6d      	ldr	r3, [pc, #436]	; (80040ac <LCD_Fast_DrawPoint+0x1ec>)
 8003ef6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003efa:	611a      	str	r2, [r3, #16]
 8003efc:	4b6b      	ldr	r3, [pc, #428]	; (80040ac <LCD_Fast_DrawPoint+0x1ec>)
 8003efe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f02:	615a      	str	r2, [r3, #20]
 8003f04:	88fb      	ldrh	r3, [r7, #6]
 8003f06:	0a1b      	lsrs	r3, r3, #8
 8003f08:	b29a      	uxth	r2, r3
 8003f0a:	4b69      	ldr	r3, [pc, #420]	; (80040b0 <LCD_Fast_DrawPoint+0x1f0>)
 8003f0c:	60da      	str	r2, [r3, #12]
 8003f0e:	4b67      	ldr	r3, [pc, #412]	; (80040ac <LCD_Fast_DrawPoint+0x1ec>)
 8003f10:	2280      	movs	r2, #128	; 0x80
 8003f12:	615a      	str	r2, [r3, #20]
 8003f14:	4b65      	ldr	r3, [pc, #404]	; (80040ac <LCD_Fast_DrawPoint+0x1ec>)
 8003f16:	2280      	movs	r2, #128	; 0x80
 8003f18:	611a      	str	r2, [r3, #16]
 8003f1a:	4b64      	ldr	r3, [pc, #400]	; (80040ac <LCD_Fast_DrawPoint+0x1ec>)
 8003f1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f20:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(x & 0XFF);
 8003f22:	4b62      	ldr	r3, [pc, #392]	; (80040ac <LCD_Fast_DrawPoint+0x1ec>)
 8003f24:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003f28:	611a      	str	r2, [r3, #16]
 8003f2a:	4b60      	ldr	r3, [pc, #384]	; (80040ac <LCD_Fast_DrawPoint+0x1ec>)
 8003f2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f30:	615a      	str	r2, [r3, #20]
 8003f32:	88fb      	ldrh	r3, [r7, #6]
 8003f34:	4a5e      	ldr	r2, [pc, #376]	; (80040b0 <LCD_Fast_DrawPoint+0x1f0>)
 8003f36:	b2db      	uxtb	r3, r3
 8003f38:	60d3      	str	r3, [r2, #12]
 8003f3a:	4b5c      	ldr	r3, [pc, #368]	; (80040ac <LCD_Fast_DrawPoint+0x1ec>)
 8003f3c:	2280      	movs	r2, #128	; 0x80
 8003f3e:	615a      	str	r2, [r3, #20]
 8003f40:	4b5a      	ldr	r3, [pc, #360]	; (80040ac <LCD_Fast_DrawPoint+0x1ec>)
 8003f42:	2280      	movs	r2, #128	; 0x80
 8003f44:	611a      	str	r2, [r3, #16]
 8003f46:	4b59      	ldr	r3, [pc, #356]	; (80040ac <LCD_Fast_DrawPoint+0x1ec>)
 8003f48:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f4c:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 8003f4e:	4b56      	ldr	r3, [pc, #344]	; (80040a8 <LCD_Fast_DrawPoint+0x1e8>)
 8003f50:	899b      	ldrh	r3, [r3, #12]
 8003f52:	4618      	mov	r0, r3
 8003f54:	f7ff f8d4 	bl	8003100 <LCD_WR_REG>
		LCD_WR_DATA(y >> 8);
 8003f58:	4b54      	ldr	r3, [pc, #336]	; (80040ac <LCD_Fast_DrawPoint+0x1ec>)
 8003f5a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003f5e:	611a      	str	r2, [r3, #16]
 8003f60:	4b52      	ldr	r3, [pc, #328]	; (80040ac <LCD_Fast_DrawPoint+0x1ec>)
 8003f62:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f66:	615a      	str	r2, [r3, #20]
 8003f68:	88bb      	ldrh	r3, [r7, #4]
 8003f6a:	0a1b      	lsrs	r3, r3, #8
 8003f6c:	b29a      	uxth	r2, r3
 8003f6e:	4b50      	ldr	r3, [pc, #320]	; (80040b0 <LCD_Fast_DrawPoint+0x1f0>)
 8003f70:	60da      	str	r2, [r3, #12]
 8003f72:	4b4e      	ldr	r3, [pc, #312]	; (80040ac <LCD_Fast_DrawPoint+0x1ec>)
 8003f74:	2280      	movs	r2, #128	; 0x80
 8003f76:	615a      	str	r2, [r3, #20]
 8003f78:	4b4c      	ldr	r3, [pc, #304]	; (80040ac <LCD_Fast_DrawPoint+0x1ec>)
 8003f7a:	2280      	movs	r2, #128	; 0x80
 8003f7c:	611a      	str	r2, [r3, #16]
 8003f7e:	4b4b      	ldr	r3, [pc, #300]	; (80040ac <LCD_Fast_DrawPoint+0x1ec>)
 8003f80:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f84:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(y & 0XFF);
 8003f86:	4b49      	ldr	r3, [pc, #292]	; (80040ac <LCD_Fast_DrawPoint+0x1ec>)
 8003f88:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003f8c:	611a      	str	r2, [r3, #16]
 8003f8e:	4b47      	ldr	r3, [pc, #284]	; (80040ac <LCD_Fast_DrawPoint+0x1ec>)
 8003f90:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f94:	615a      	str	r2, [r3, #20]
 8003f96:	88bb      	ldrh	r3, [r7, #4]
 8003f98:	4a45      	ldr	r2, [pc, #276]	; (80040b0 <LCD_Fast_DrawPoint+0x1f0>)
 8003f9a:	b2db      	uxtb	r3, r3
 8003f9c:	60d3      	str	r3, [r2, #12]
 8003f9e:	4b43      	ldr	r3, [pc, #268]	; (80040ac <LCD_Fast_DrawPoint+0x1ec>)
 8003fa0:	2280      	movs	r2, #128	; 0x80
 8003fa2:	615a      	str	r2, [r3, #20]
 8003fa4:	4b41      	ldr	r3, [pc, #260]	; (80040ac <LCD_Fast_DrawPoint+0x1ec>)
 8003fa6:	2280      	movs	r2, #128	; 0x80
 8003fa8:	611a      	str	r2, [r3, #16]
 8003faa:	4b40      	ldr	r3, [pc, #256]	; (80040ac <LCD_Fast_DrawPoint+0x1ec>)
 8003fac:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003fb0:	611a      	str	r2, [r3, #16]
 8003fb2:	e1e6      	b.n	8004382 <LCD_Fast_DrawPoint+0x4c2>
	} else if (lcddev.id == 0X5510) {
 8003fb4:	4b3c      	ldr	r3, [pc, #240]	; (80040a8 <LCD_Fast_DrawPoint+0x1e8>)
 8003fb6:	889b      	ldrh	r3, [r3, #4]
 8003fb8:	f245 5210 	movw	r2, #21776	; 0x5510
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d179      	bne.n	80040b4 <LCD_Fast_DrawPoint+0x1f4>
		LCD_WR_REG(lcddev.setxcmd);
 8003fc0:	4b39      	ldr	r3, [pc, #228]	; (80040a8 <LCD_Fast_DrawPoint+0x1e8>)
 8003fc2:	895b      	ldrh	r3, [r3, #10]
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	f7ff f89b 	bl	8003100 <LCD_WR_REG>
		LCD_WR_DATA(x >> 8);
 8003fca:	4b38      	ldr	r3, [pc, #224]	; (80040ac <LCD_Fast_DrawPoint+0x1ec>)
 8003fcc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003fd0:	611a      	str	r2, [r3, #16]
 8003fd2:	4b36      	ldr	r3, [pc, #216]	; (80040ac <LCD_Fast_DrawPoint+0x1ec>)
 8003fd4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003fd8:	615a      	str	r2, [r3, #20]
 8003fda:	88fb      	ldrh	r3, [r7, #6]
 8003fdc:	0a1b      	lsrs	r3, r3, #8
 8003fde:	b29a      	uxth	r2, r3
 8003fe0:	4b33      	ldr	r3, [pc, #204]	; (80040b0 <LCD_Fast_DrawPoint+0x1f0>)
 8003fe2:	60da      	str	r2, [r3, #12]
 8003fe4:	4b31      	ldr	r3, [pc, #196]	; (80040ac <LCD_Fast_DrawPoint+0x1ec>)
 8003fe6:	2280      	movs	r2, #128	; 0x80
 8003fe8:	615a      	str	r2, [r3, #20]
 8003fea:	4b30      	ldr	r3, [pc, #192]	; (80040ac <LCD_Fast_DrawPoint+0x1ec>)
 8003fec:	2280      	movs	r2, #128	; 0x80
 8003fee:	611a      	str	r2, [r3, #16]
 8003ff0:	4b2e      	ldr	r3, [pc, #184]	; (80040ac <LCD_Fast_DrawPoint+0x1ec>)
 8003ff2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ff6:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setxcmd + 1);
 8003ff8:	4b2b      	ldr	r3, [pc, #172]	; (80040a8 <LCD_Fast_DrawPoint+0x1e8>)
 8003ffa:	895b      	ldrh	r3, [r3, #10]
 8003ffc:	3301      	adds	r3, #1
 8003ffe:	b29b      	uxth	r3, r3
 8004000:	4618      	mov	r0, r3
 8004002:	f7ff f87d 	bl	8003100 <LCD_WR_REG>
		LCD_WR_DATA(x & 0XFF);
 8004006:	4b29      	ldr	r3, [pc, #164]	; (80040ac <LCD_Fast_DrawPoint+0x1ec>)
 8004008:	f44f 7280 	mov.w	r2, #256	; 0x100
 800400c:	611a      	str	r2, [r3, #16]
 800400e:	4b27      	ldr	r3, [pc, #156]	; (80040ac <LCD_Fast_DrawPoint+0x1ec>)
 8004010:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004014:	615a      	str	r2, [r3, #20]
 8004016:	88fb      	ldrh	r3, [r7, #6]
 8004018:	4a25      	ldr	r2, [pc, #148]	; (80040b0 <LCD_Fast_DrawPoint+0x1f0>)
 800401a:	b2db      	uxtb	r3, r3
 800401c:	60d3      	str	r3, [r2, #12]
 800401e:	4b23      	ldr	r3, [pc, #140]	; (80040ac <LCD_Fast_DrawPoint+0x1ec>)
 8004020:	2280      	movs	r2, #128	; 0x80
 8004022:	615a      	str	r2, [r3, #20]
 8004024:	4b21      	ldr	r3, [pc, #132]	; (80040ac <LCD_Fast_DrawPoint+0x1ec>)
 8004026:	2280      	movs	r2, #128	; 0x80
 8004028:	611a      	str	r2, [r3, #16]
 800402a:	4b20      	ldr	r3, [pc, #128]	; (80040ac <LCD_Fast_DrawPoint+0x1ec>)
 800402c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004030:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 8004032:	4b1d      	ldr	r3, [pc, #116]	; (80040a8 <LCD_Fast_DrawPoint+0x1e8>)
 8004034:	899b      	ldrh	r3, [r3, #12]
 8004036:	4618      	mov	r0, r3
 8004038:	f7ff f862 	bl	8003100 <LCD_WR_REG>
		LCD_WR_DATA(y >> 8);
 800403c:	4b1b      	ldr	r3, [pc, #108]	; (80040ac <LCD_Fast_DrawPoint+0x1ec>)
 800403e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004042:	611a      	str	r2, [r3, #16]
 8004044:	4b19      	ldr	r3, [pc, #100]	; (80040ac <LCD_Fast_DrawPoint+0x1ec>)
 8004046:	f44f 7200 	mov.w	r2, #512	; 0x200
 800404a:	615a      	str	r2, [r3, #20]
 800404c:	88bb      	ldrh	r3, [r7, #4]
 800404e:	0a1b      	lsrs	r3, r3, #8
 8004050:	b29a      	uxth	r2, r3
 8004052:	4b17      	ldr	r3, [pc, #92]	; (80040b0 <LCD_Fast_DrawPoint+0x1f0>)
 8004054:	60da      	str	r2, [r3, #12]
 8004056:	4b15      	ldr	r3, [pc, #84]	; (80040ac <LCD_Fast_DrawPoint+0x1ec>)
 8004058:	2280      	movs	r2, #128	; 0x80
 800405a:	615a      	str	r2, [r3, #20]
 800405c:	4b13      	ldr	r3, [pc, #76]	; (80040ac <LCD_Fast_DrawPoint+0x1ec>)
 800405e:	2280      	movs	r2, #128	; 0x80
 8004060:	611a      	str	r2, [r3, #16]
 8004062:	4b12      	ldr	r3, [pc, #72]	; (80040ac <LCD_Fast_DrawPoint+0x1ec>)
 8004064:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004068:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd + 1);
 800406a:	4b0f      	ldr	r3, [pc, #60]	; (80040a8 <LCD_Fast_DrawPoint+0x1e8>)
 800406c:	899b      	ldrh	r3, [r3, #12]
 800406e:	3301      	adds	r3, #1
 8004070:	b29b      	uxth	r3, r3
 8004072:	4618      	mov	r0, r3
 8004074:	f7ff f844 	bl	8003100 <LCD_WR_REG>
		LCD_WR_DATA(y & 0XFF);
 8004078:	4b0c      	ldr	r3, [pc, #48]	; (80040ac <LCD_Fast_DrawPoint+0x1ec>)
 800407a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800407e:	611a      	str	r2, [r3, #16]
 8004080:	4b0a      	ldr	r3, [pc, #40]	; (80040ac <LCD_Fast_DrawPoint+0x1ec>)
 8004082:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004086:	615a      	str	r2, [r3, #20]
 8004088:	88bb      	ldrh	r3, [r7, #4]
 800408a:	4a09      	ldr	r2, [pc, #36]	; (80040b0 <LCD_Fast_DrawPoint+0x1f0>)
 800408c:	b2db      	uxtb	r3, r3
 800408e:	60d3      	str	r3, [r2, #12]
 8004090:	4b06      	ldr	r3, [pc, #24]	; (80040ac <LCD_Fast_DrawPoint+0x1ec>)
 8004092:	2280      	movs	r2, #128	; 0x80
 8004094:	615a      	str	r2, [r3, #20]
 8004096:	4b05      	ldr	r3, [pc, #20]	; (80040ac <LCD_Fast_DrawPoint+0x1ec>)
 8004098:	2280      	movs	r2, #128	; 0x80
 800409a:	611a      	str	r2, [r3, #16]
 800409c:	4b03      	ldr	r3, [pc, #12]	; (80040ac <LCD_Fast_DrawPoint+0x1ec>)
 800409e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80040a2:	611a      	str	r2, [r3, #16]
 80040a4:	e16d      	b.n	8004382 <LCD_Fast_DrawPoint+0x4c2>
 80040a6:	bf00      	nop
 80040a8:	200000b4 	.word	0x200000b4
 80040ac:	40011000 	.word	0x40011000
 80040b0:	40010c00 	.word	0x40010c00
	} else if (lcddev.id == 0X1963) {
 80040b4:	4b68      	ldr	r3, [pc, #416]	; (8004258 <LCD_Fast_DrawPoint+0x398>)
 80040b6:	889b      	ldrh	r3, [r3, #4]
 80040b8:	f641 1263 	movw	r2, #6499	; 0x1963
 80040bc:	4293      	cmp	r3, r2
 80040be:	f040 80d1 	bne.w	8004264 <LCD_Fast_DrawPoint+0x3a4>
		if (lcddev.dir == 0)
 80040c2:	4b65      	ldr	r3, [pc, #404]	; (8004258 <LCD_Fast_DrawPoint+0x398>)
 80040c4:	799b      	ldrb	r3, [r3, #6]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d106      	bne.n	80040d8 <LCD_Fast_DrawPoint+0x218>
			x = lcddev.width - 1 - x;
 80040ca:	4b63      	ldr	r3, [pc, #396]	; (8004258 <LCD_Fast_DrawPoint+0x398>)
 80040cc:	881a      	ldrh	r2, [r3, #0]
 80040ce:	88fb      	ldrh	r3, [r7, #6]
 80040d0:	1ad3      	subs	r3, r2, r3
 80040d2:	b29b      	uxth	r3, r3
 80040d4:	3b01      	subs	r3, #1
 80040d6:	80fb      	strh	r3, [r7, #6]
		LCD_WR_REG(lcddev.setxcmd);
 80040d8:	4b5f      	ldr	r3, [pc, #380]	; (8004258 <LCD_Fast_DrawPoint+0x398>)
 80040da:	895b      	ldrh	r3, [r3, #10]
 80040dc:	4618      	mov	r0, r3
 80040de:	f7ff f80f 	bl	8003100 <LCD_WR_REG>
		LCD_WR_DATA(x >> 8);
 80040e2:	4b5e      	ldr	r3, [pc, #376]	; (800425c <LCD_Fast_DrawPoint+0x39c>)
 80040e4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80040e8:	611a      	str	r2, [r3, #16]
 80040ea:	4b5c      	ldr	r3, [pc, #368]	; (800425c <LCD_Fast_DrawPoint+0x39c>)
 80040ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80040f0:	615a      	str	r2, [r3, #20]
 80040f2:	88fb      	ldrh	r3, [r7, #6]
 80040f4:	0a1b      	lsrs	r3, r3, #8
 80040f6:	b29a      	uxth	r2, r3
 80040f8:	4b59      	ldr	r3, [pc, #356]	; (8004260 <LCD_Fast_DrawPoint+0x3a0>)
 80040fa:	60da      	str	r2, [r3, #12]
 80040fc:	4b57      	ldr	r3, [pc, #348]	; (800425c <LCD_Fast_DrawPoint+0x39c>)
 80040fe:	2280      	movs	r2, #128	; 0x80
 8004100:	615a      	str	r2, [r3, #20]
 8004102:	4b56      	ldr	r3, [pc, #344]	; (800425c <LCD_Fast_DrawPoint+0x39c>)
 8004104:	2280      	movs	r2, #128	; 0x80
 8004106:	611a      	str	r2, [r3, #16]
 8004108:	4b54      	ldr	r3, [pc, #336]	; (800425c <LCD_Fast_DrawPoint+0x39c>)
 800410a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800410e:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(x & 0XFF);
 8004110:	4b52      	ldr	r3, [pc, #328]	; (800425c <LCD_Fast_DrawPoint+0x39c>)
 8004112:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004116:	611a      	str	r2, [r3, #16]
 8004118:	4b50      	ldr	r3, [pc, #320]	; (800425c <LCD_Fast_DrawPoint+0x39c>)
 800411a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800411e:	615a      	str	r2, [r3, #20]
 8004120:	88fb      	ldrh	r3, [r7, #6]
 8004122:	4a4f      	ldr	r2, [pc, #316]	; (8004260 <LCD_Fast_DrawPoint+0x3a0>)
 8004124:	b2db      	uxtb	r3, r3
 8004126:	60d3      	str	r3, [r2, #12]
 8004128:	4b4c      	ldr	r3, [pc, #304]	; (800425c <LCD_Fast_DrawPoint+0x39c>)
 800412a:	2280      	movs	r2, #128	; 0x80
 800412c:	615a      	str	r2, [r3, #20]
 800412e:	4b4b      	ldr	r3, [pc, #300]	; (800425c <LCD_Fast_DrawPoint+0x39c>)
 8004130:	2280      	movs	r2, #128	; 0x80
 8004132:	611a      	str	r2, [r3, #16]
 8004134:	4b49      	ldr	r3, [pc, #292]	; (800425c <LCD_Fast_DrawPoint+0x39c>)
 8004136:	f44f 7200 	mov.w	r2, #512	; 0x200
 800413a:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(x >> 8);
 800413c:	4b47      	ldr	r3, [pc, #284]	; (800425c <LCD_Fast_DrawPoint+0x39c>)
 800413e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004142:	611a      	str	r2, [r3, #16]
 8004144:	4b45      	ldr	r3, [pc, #276]	; (800425c <LCD_Fast_DrawPoint+0x39c>)
 8004146:	f44f 7200 	mov.w	r2, #512	; 0x200
 800414a:	615a      	str	r2, [r3, #20]
 800414c:	88fb      	ldrh	r3, [r7, #6]
 800414e:	0a1b      	lsrs	r3, r3, #8
 8004150:	b29a      	uxth	r2, r3
 8004152:	4b43      	ldr	r3, [pc, #268]	; (8004260 <LCD_Fast_DrawPoint+0x3a0>)
 8004154:	60da      	str	r2, [r3, #12]
 8004156:	4b41      	ldr	r3, [pc, #260]	; (800425c <LCD_Fast_DrawPoint+0x39c>)
 8004158:	2280      	movs	r2, #128	; 0x80
 800415a:	615a      	str	r2, [r3, #20]
 800415c:	4b3f      	ldr	r3, [pc, #252]	; (800425c <LCD_Fast_DrawPoint+0x39c>)
 800415e:	2280      	movs	r2, #128	; 0x80
 8004160:	611a      	str	r2, [r3, #16]
 8004162:	4b3e      	ldr	r3, [pc, #248]	; (800425c <LCD_Fast_DrawPoint+0x39c>)
 8004164:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004168:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(x & 0XFF);
 800416a:	4b3c      	ldr	r3, [pc, #240]	; (800425c <LCD_Fast_DrawPoint+0x39c>)
 800416c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004170:	611a      	str	r2, [r3, #16]
 8004172:	4b3a      	ldr	r3, [pc, #232]	; (800425c <LCD_Fast_DrawPoint+0x39c>)
 8004174:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004178:	615a      	str	r2, [r3, #20]
 800417a:	88fb      	ldrh	r3, [r7, #6]
 800417c:	4a38      	ldr	r2, [pc, #224]	; (8004260 <LCD_Fast_DrawPoint+0x3a0>)
 800417e:	b2db      	uxtb	r3, r3
 8004180:	60d3      	str	r3, [r2, #12]
 8004182:	4b36      	ldr	r3, [pc, #216]	; (800425c <LCD_Fast_DrawPoint+0x39c>)
 8004184:	2280      	movs	r2, #128	; 0x80
 8004186:	615a      	str	r2, [r3, #20]
 8004188:	4b34      	ldr	r3, [pc, #208]	; (800425c <LCD_Fast_DrawPoint+0x39c>)
 800418a:	2280      	movs	r2, #128	; 0x80
 800418c:	611a      	str	r2, [r3, #16]
 800418e:	4b33      	ldr	r3, [pc, #204]	; (800425c <LCD_Fast_DrawPoint+0x39c>)
 8004190:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004194:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 8004196:	4b30      	ldr	r3, [pc, #192]	; (8004258 <LCD_Fast_DrawPoint+0x398>)
 8004198:	899b      	ldrh	r3, [r3, #12]
 800419a:	4618      	mov	r0, r3
 800419c:	f7fe ffb0 	bl	8003100 <LCD_WR_REG>
		LCD_WR_DATA(y >> 8);
 80041a0:	4b2e      	ldr	r3, [pc, #184]	; (800425c <LCD_Fast_DrawPoint+0x39c>)
 80041a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80041a6:	611a      	str	r2, [r3, #16]
 80041a8:	4b2c      	ldr	r3, [pc, #176]	; (800425c <LCD_Fast_DrawPoint+0x39c>)
 80041aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80041ae:	615a      	str	r2, [r3, #20]
 80041b0:	88bb      	ldrh	r3, [r7, #4]
 80041b2:	0a1b      	lsrs	r3, r3, #8
 80041b4:	b29a      	uxth	r2, r3
 80041b6:	4b2a      	ldr	r3, [pc, #168]	; (8004260 <LCD_Fast_DrawPoint+0x3a0>)
 80041b8:	60da      	str	r2, [r3, #12]
 80041ba:	4b28      	ldr	r3, [pc, #160]	; (800425c <LCD_Fast_DrawPoint+0x39c>)
 80041bc:	2280      	movs	r2, #128	; 0x80
 80041be:	615a      	str	r2, [r3, #20]
 80041c0:	4b26      	ldr	r3, [pc, #152]	; (800425c <LCD_Fast_DrawPoint+0x39c>)
 80041c2:	2280      	movs	r2, #128	; 0x80
 80041c4:	611a      	str	r2, [r3, #16]
 80041c6:	4b25      	ldr	r3, [pc, #148]	; (800425c <LCD_Fast_DrawPoint+0x39c>)
 80041c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80041cc:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(y & 0XFF);
 80041ce:	4b23      	ldr	r3, [pc, #140]	; (800425c <LCD_Fast_DrawPoint+0x39c>)
 80041d0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80041d4:	611a      	str	r2, [r3, #16]
 80041d6:	4b21      	ldr	r3, [pc, #132]	; (800425c <LCD_Fast_DrawPoint+0x39c>)
 80041d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80041dc:	615a      	str	r2, [r3, #20]
 80041de:	88bb      	ldrh	r3, [r7, #4]
 80041e0:	4a1f      	ldr	r2, [pc, #124]	; (8004260 <LCD_Fast_DrawPoint+0x3a0>)
 80041e2:	b2db      	uxtb	r3, r3
 80041e4:	60d3      	str	r3, [r2, #12]
 80041e6:	4b1d      	ldr	r3, [pc, #116]	; (800425c <LCD_Fast_DrawPoint+0x39c>)
 80041e8:	2280      	movs	r2, #128	; 0x80
 80041ea:	615a      	str	r2, [r3, #20]
 80041ec:	4b1b      	ldr	r3, [pc, #108]	; (800425c <LCD_Fast_DrawPoint+0x39c>)
 80041ee:	2280      	movs	r2, #128	; 0x80
 80041f0:	611a      	str	r2, [r3, #16]
 80041f2:	4b1a      	ldr	r3, [pc, #104]	; (800425c <LCD_Fast_DrawPoint+0x39c>)
 80041f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80041f8:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(y >> 8);
 80041fa:	4b18      	ldr	r3, [pc, #96]	; (800425c <LCD_Fast_DrawPoint+0x39c>)
 80041fc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004200:	611a      	str	r2, [r3, #16]
 8004202:	4b16      	ldr	r3, [pc, #88]	; (800425c <LCD_Fast_DrawPoint+0x39c>)
 8004204:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004208:	615a      	str	r2, [r3, #20]
 800420a:	88bb      	ldrh	r3, [r7, #4]
 800420c:	0a1b      	lsrs	r3, r3, #8
 800420e:	b29a      	uxth	r2, r3
 8004210:	4b13      	ldr	r3, [pc, #76]	; (8004260 <LCD_Fast_DrawPoint+0x3a0>)
 8004212:	60da      	str	r2, [r3, #12]
 8004214:	4b11      	ldr	r3, [pc, #68]	; (800425c <LCD_Fast_DrawPoint+0x39c>)
 8004216:	2280      	movs	r2, #128	; 0x80
 8004218:	615a      	str	r2, [r3, #20]
 800421a:	4b10      	ldr	r3, [pc, #64]	; (800425c <LCD_Fast_DrawPoint+0x39c>)
 800421c:	2280      	movs	r2, #128	; 0x80
 800421e:	611a      	str	r2, [r3, #16]
 8004220:	4b0e      	ldr	r3, [pc, #56]	; (800425c <LCD_Fast_DrawPoint+0x39c>)
 8004222:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004226:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(y & 0XFF);
 8004228:	4b0c      	ldr	r3, [pc, #48]	; (800425c <LCD_Fast_DrawPoint+0x39c>)
 800422a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800422e:	611a      	str	r2, [r3, #16]
 8004230:	4b0a      	ldr	r3, [pc, #40]	; (800425c <LCD_Fast_DrawPoint+0x39c>)
 8004232:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004236:	615a      	str	r2, [r3, #20]
 8004238:	88bb      	ldrh	r3, [r7, #4]
 800423a:	4a09      	ldr	r2, [pc, #36]	; (8004260 <LCD_Fast_DrawPoint+0x3a0>)
 800423c:	b2db      	uxtb	r3, r3
 800423e:	60d3      	str	r3, [r2, #12]
 8004240:	4b06      	ldr	r3, [pc, #24]	; (800425c <LCD_Fast_DrawPoint+0x39c>)
 8004242:	2280      	movs	r2, #128	; 0x80
 8004244:	615a      	str	r2, [r3, #20]
 8004246:	4b05      	ldr	r3, [pc, #20]	; (800425c <LCD_Fast_DrawPoint+0x39c>)
 8004248:	2280      	movs	r2, #128	; 0x80
 800424a:	611a      	str	r2, [r3, #16]
 800424c:	4b03      	ldr	r3, [pc, #12]	; (800425c <LCD_Fast_DrawPoint+0x39c>)
 800424e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004252:	611a      	str	r2, [r3, #16]
 8004254:	e095      	b.n	8004382 <LCD_Fast_DrawPoint+0x4c2>
 8004256:	bf00      	nop
 8004258:	200000b4 	.word	0x200000b4
 800425c:	40011000 	.word	0x40011000
 8004260:	40010c00 	.word	0x40010c00
	} else if (lcddev.id == 0X6804) {
 8004264:	4b5e      	ldr	r3, [pc, #376]	; (80043e0 <LCD_Fast_DrawPoint+0x520>)
 8004266:	889b      	ldrh	r3, [r3, #4]
 8004268:	f646 0204 	movw	r2, #26628	; 0x6804
 800426c:	4293      	cmp	r3, r2
 800426e:	d16f      	bne.n	8004350 <LCD_Fast_DrawPoint+0x490>
		if (lcddev.dir == 1)
 8004270:	4b5b      	ldr	r3, [pc, #364]	; (80043e0 <LCD_Fast_DrawPoint+0x520>)
 8004272:	799b      	ldrb	r3, [r3, #6]
 8004274:	2b01      	cmp	r3, #1
 8004276:	d106      	bne.n	8004286 <LCD_Fast_DrawPoint+0x3c6>
			x = lcddev.width - 1 - x;	//横屏时处理
 8004278:	4b59      	ldr	r3, [pc, #356]	; (80043e0 <LCD_Fast_DrawPoint+0x520>)
 800427a:	881a      	ldrh	r2, [r3, #0]
 800427c:	88fb      	ldrh	r3, [r7, #6]
 800427e:	1ad3      	subs	r3, r2, r3
 8004280:	b29b      	uxth	r3, r3
 8004282:	3b01      	subs	r3, #1
 8004284:	80fb      	strh	r3, [r7, #6]
		LCD_WR_REG(lcddev.setxcmd);
 8004286:	4b56      	ldr	r3, [pc, #344]	; (80043e0 <LCD_Fast_DrawPoint+0x520>)
 8004288:	895b      	ldrh	r3, [r3, #10]
 800428a:	4618      	mov	r0, r3
 800428c:	f7fe ff38 	bl	8003100 <LCD_WR_REG>
		LCD_WR_DATA(x >> 8);
 8004290:	4b54      	ldr	r3, [pc, #336]	; (80043e4 <LCD_Fast_DrawPoint+0x524>)
 8004292:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004296:	611a      	str	r2, [r3, #16]
 8004298:	4b52      	ldr	r3, [pc, #328]	; (80043e4 <LCD_Fast_DrawPoint+0x524>)
 800429a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800429e:	615a      	str	r2, [r3, #20]
 80042a0:	88fb      	ldrh	r3, [r7, #6]
 80042a2:	0a1b      	lsrs	r3, r3, #8
 80042a4:	b29a      	uxth	r2, r3
 80042a6:	4b50      	ldr	r3, [pc, #320]	; (80043e8 <LCD_Fast_DrawPoint+0x528>)
 80042a8:	60da      	str	r2, [r3, #12]
 80042aa:	4b4e      	ldr	r3, [pc, #312]	; (80043e4 <LCD_Fast_DrawPoint+0x524>)
 80042ac:	2280      	movs	r2, #128	; 0x80
 80042ae:	615a      	str	r2, [r3, #20]
 80042b0:	4b4c      	ldr	r3, [pc, #304]	; (80043e4 <LCD_Fast_DrawPoint+0x524>)
 80042b2:	2280      	movs	r2, #128	; 0x80
 80042b4:	611a      	str	r2, [r3, #16]
 80042b6:	4b4b      	ldr	r3, [pc, #300]	; (80043e4 <LCD_Fast_DrawPoint+0x524>)
 80042b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80042bc:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(x & 0XFF);
 80042be:	4b49      	ldr	r3, [pc, #292]	; (80043e4 <LCD_Fast_DrawPoint+0x524>)
 80042c0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80042c4:	611a      	str	r2, [r3, #16]
 80042c6:	4b47      	ldr	r3, [pc, #284]	; (80043e4 <LCD_Fast_DrawPoint+0x524>)
 80042c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80042cc:	615a      	str	r2, [r3, #20]
 80042ce:	88fb      	ldrh	r3, [r7, #6]
 80042d0:	4a45      	ldr	r2, [pc, #276]	; (80043e8 <LCD_Fast_DrawPoint+0x528>)
 80042d2:	b2db      	uxtb	r3, r3
 80042d4:	60d3      	str	r3, [r2, #12]
 80042d6:	4b43      	ldr	r3, [pc, #268]	; (80043e4 <LCD_Fast_DrawPoint+0x524>)
 80042d8:	2280      	movs	r2, #128	; 0x80
 80042da:	615a      	str	r2, [r3, #20]
 80042dc:	4b41      	ldr	r3, [pc, #260]	; (80043e4 <LCD_Fast_DrawPoint+0x524>)
 80042de:	2280      	movs	r2, #128	; 0x80
 80042e0:	611a      	str	r2, [r3, #16]
 80042e2:	4b40      	ldr	r3, [pc, #256]	; (80043e4 <LCD_Fast_DrawPoint+0x524>)
 80042e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80042e8:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 80042ea:	4b3d      	ldr	r3, [pc, #244]	; (80043e0 <LCD_Fast_DrawPoint+0x520>)
 80042ec:	899b      	ldrh	r3, [r3, #12]
 80042ee:	4618      	mov	r0, r3
 80042f0:	f7fe ff06 	bl	8003100 <LCD_WR_REG>
		LCD_WR_DATA(y >> 8);
 80042f4:	4b3b      	ldr	r3, [pc, #236]	; (80043e4 <LCD_Fast_DrawPoint+0x524>)
 80042f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80042fa:	611a      	str	r2, [r3, #16]
 80042fc:	4b39      	ldr	r3, [pc, #228]	; (80043e4 <LCD_Fast_DrawPoint+0x524>)
 80042fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004302:	615a      	str	r2, [r3, #20]
 8004304:	88bb      	ldrh	r3, [r7, #4]
 8004306:	0a1b      	lsrs	r3, r3, #8
 8004308:	b29a      	uxth	r2, r3
 800430a:	4b37      	ldr	r3, [pc, #220]	; (80043e8 <LCD_Fast_DrawPoint+0x528>)
 800430c:	60da      	str	r2, [r3, #12]
 800430e:	4b35      	ldr	r3, [pc, #212]	; (80043e4 <LCD_Fast_DrawPoint+0x524>)
 8004310:	2280      	movs	r2, #128	; 0x80
 8004312:	615a      	str	r2, [r3, #20]
 8004314:	4b33      	ldr	r3, [pc, #204]	; (80043e4 <LCD_Fast_DrawPoint+0x524>)
 8004316:	2280      	movs	r2, #128	; 0x80
 8004318:	611a      	str	r2, [r3, #16]
 800431a:	4b32      	ldr	r3, [pc, #200]	; (80043e4 <LCD_Fast_DrawPoint+0x524>)
 800431c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004320:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(y & 0XFF);
 8004322:	4b30      	ldr	r3, [pc, #192]	; (80043e4 <LCD_Fast_DrawPoint+0x524>)
 8004324:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004328:	611a      	str	r2, [r3, #16]
 800432a:	4b2e      	ldr	r3, [pc, #184]	; (80043e4 <LCD_Fast_DrawPoint+0x524>)
 800432c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004330:	615a      	str	r2, [r3, #20]
 8004332:	88bb      	ldrh	r3, [r7, #4]
 8004334:	4a2c      	ldr	r2, [pc, #176]	; (80043e8 <LCD_Fast_DrawPoint+0x528>)
 8004336:	b2db      	uxtb	r3, r3
 8004338:	60d3      	str	r3, [r2, #12]
 800433a:	4b2a      	ldr	r3, [pc, #168]	; (80043e4 <LCD_Fast_DrawPoint+0x524>)
 800433c:	2280      	movs	r2, #128	; 0x80
 800433e:	615a      	str	r2, [r3, #20]
 8004340:	4b28      	ldr	r3, [pc, #160]	; (80043e4 <LCD_Fast_DrawPoint+0x524>)
 8004342:	2280      	movs	r2, #128	; 0x80
 8004344:	611a      	str	r2, [r3, #16]
 8004346:	4b27      	ldr	r3, [pc, #156]	; (80043e4 <LCD_Fast_DrawPoint+0x524>)
 8004348:	f44f 7200 	mov.w	r2, #512	; 0x200
 800434c:	611a      	str	r2, [r3, #16]
 800434e:	e018      	b.n	8004382 <LCD_Fast_DrawPoint+0x4c2>
	} else {
		if (lcddev.dir == 1)
 8004350:	4b23      	ldr	r3, [pc, #140]	; (80043e0 <LCD_Fast_DrawPoint+0x520>)
 8004352:	799b      	ldrb	r3, [r3, #6]
 8004354:	2b01      	cmp	r3, #1
 8004356:	d106      	bne.n	8004366 <LCD_Fast_DrawPoint+0x4a6>
			x = lcddev.width - 1 - x;	//横屏其实就是调转x,y坐标
 8004358:	4b21      	ldr	r3, [pc, #132]	; (80043e0 <LCD_Fast_DrawPoint+0x520>)
 800435a:	881a      	ldrh	r2, [r3, #0]
 800435c:	88fb      	ldrh	r3, [r7, #6]
 800435e:	1ad3      	subs	r3, r2, r3
 8004360:	b29b      	uxth	r3, r3
 8004362:	3b01      	subs	r3, #1
 8004364:	80fb      	strh	r3, [r7, #6]
		LCD_WriteReg(lcddev.setxcmd, x);
 8004366:	4b1e      	ldr	r3, [pc, #120]	; (80043e0 <LCD_Fast_DrawPoint+0x520>)
 8004368:	895b      	ldrh	r3, [r3, #10]
 800436a:	88fa      	ldrh	r2, [r7, #6]
 800436c:	4611      	mov	r1, r2
 800436e:	4618      	mov	r0, r3
 8004370:	f7fe ff52 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(lcddev.setycmd, y);
 8004374:	4b1a      	ldr	r3, [pc, #104]	; (80043e0 <LCD_Fast_DrawPoint+0x520>)
 8004376:	899b      	ldrh	r3, [r3, #12]
 8004378:	88ba      	ldrh	r2, [r7, #4]
 800437a:	4611      	mov	r1, r2
 800437c:	4618      	mov	r0, r3
 800437e:	f7fe ff4b 	bl	8003218 <LCD_WriteReg>
	}
	LCD_RS_CLR;
 8004382:	4b18      	ldr	r3, [pc, #96]	; (80043e4 <LCD_Fast_DrawPoint+0x524>)
 8004384:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004388:	615a      	str	r2, [r3, #20]
	LCD_CS_CLR;
 800438a:	4b16      	ldr	r3, [pc, #88]	; (80043e4 <LCD_Fast_DrawPoint+0x524>)
 800438c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004390:	615a      	str	r2, [r3, #20]
	DATAOUT(lcddev.wramcmd);	//写指令
 8004392:	4b13      	ldr	r3, [pc, #76]	; (80043e0 <LCD_Fast_DrawPoint+0x520>)
 8004394:	891a      	ldrh	r2, [r3, #8]
 8004396:	4b14      	ldr	r3, [pc, #80]	; (80043e8 <LCD_Fast_DrawPoint+0x528>)
 8004398:	60da      	str	r2, [r3, #12]
	LCD_WR_CLR;
 800439a:	4b12      	ldr	r3, [pc, #72]	; (80043e4 <LCD_Fast_DrawPoint+0x524>)
 800439c:	2280      	movs	r2, #128	; 0x80
 800439e:	615a      	str	r2, [r3, #20]
	LCD_WR_SET;
 80043a0:	4b10      	ldr	r3, [pc, #64]	; (80043e4 <LCD_Fast_DrawPoint+0x524>)
 80043a2:	2280      	movs	r2, #128	; 0x80
 80043a4:	611a      	str	r2, [r3, #16]
	LCD_CS_SET;
 80043a6:	4b0f      	ldr	r3, [pc, #60]	; (80043e4 <LCD_Fast_DrawPoint+0x524>)
 80043a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80043ac:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(color);		//写数据
 80043ae:	4b0d      	ldr	r3, [pc, #52]	; (80043e4 <LCD_Fast_DrawPoint+0x524>)
 80043b0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80043b4:	611a      	str	r2, [r3, #16]
 80043b6:	4b0b      	ldr	r3, [pc, #44]	; (80043e4 <LCD_Fast_DrawPoint+0x524>)
 80043b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80043bc:	615a      	str	r2, [r3, #20]
 80043be:	4a0a      	ldr	r2, [pc, #40]	; (80043e8 <LCD_Fast_DrawPoint+0x528>)
 80043c0:	887b      	ldrh	r3, [r7, #2]
 80043c2:	60d3      	str	r3, [r2, #12]
 80043c4:	4b07      	ldr	r3, [pc, #28]	; (80043e4 <LCD_Fast_DrawPoint+0x524>)
 80043c6:	2280      	movs	r2, #128	; 0x80
 80043c8:	615a      	str	r2, [r3, #20]
 80043ca:	4b06      	ldr	r3, [pc, #24]	; (80043e4 <LCD_Fast_DrawPoint+0x524>)
 80043cc:	2280      	movs	r2, #128	; 0x80
 80043ce:	611a      	str	r2, [r3, #16]
 80043d0:	4b04      	ldr	r3, [pc, #16]	; (80043e4 <LCD_Fast_DrawPoint+0x524>)
 80043d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80043d6:	611a      	str	r2, [r3, #16]
}
 80043d8:	bf00      	nop
 80043da:	3708      	adds	r7, #8
 80043dc:	46bd      	mov	sp, r7
 80043de:	bd80      	pop	{r7, pc}
 80043e0:	200000b4 	.word	0x200000b4
 80043e4:	40011000 	.word	0x40011000
 80043e8:	40010c00 	.word	0x40010c00
 80043ec:	00000000 	.word	0x00000000

080043f0 <LCD_SSD_BackLightSet>:
//SSD1963 背光设置
//pwm:背光等级,0~100.越大越亮.
void LCD_SSD_BackLightSet(uint8_t pwm) {
 80043f0:	b590      	push	{r4, r7, lr}
 80043f2:	b083      	sub	sp, #12
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	4603      	mov	r3, r0
 80043f8:	71fb      	strb	r3, [r7, #7]
	LCD_WR_REG(0xBE);	//配置PWM输出
 80043fa:	20be      	movs	r0, #190	; 0xbe
 80043fc:	f7fe fe80 	bl	8003100 <LCD_WR_REG>
	LCD_WR_DATA(0x05);	//1设置PWM频率
 8004400:	4b4b      	ldr	r3, [pc, #300]	; (8004530 <LCD_SSD_BackLightSet+0x140>)
 8004402:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004406:	611a      	str	r2, [r3, #16]
 8004408:	4b49      	ldr	r3, [pc, #292]	; (8004530 <LCD_SSD_BackLightSet+0x140>)
 800440a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800440e:	615a      	str	r2, [r3, #20]
 8004410:	4b48      	ldr	r3, [pc, #288]	; (8004534 <LCD_SSD_BackLightSet+0x144>)
 8004412:	2205      	movs	r2, #5
 8004414:	60da      	str	r2, [r3, #12]
 8004416:	4b46      	ldr	r3, [pc, #280]	; (8004530 <LCD_SSD_BackLightSet+0x140>)
 8004418:	2280      	movs	r2, #128	; 0x80
 800441a:	615a      	str	r2, [r3, #20]
 800441c:	4b44      	ldr	r3, [pc, #272]	; (8004530 <LCD_SSD_BackLightSet+0x140>)
 800441e:	2280      	movs	r2, #128	; 0x80
 8004420:	611a      	str	r2, [r3, #16]
 8004422:	4b43      	ldr	r3, [pc, #268]	; (8004530 <LCD_SSD_BackLightSet+0x140>)
 8004424:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004428:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(pwm * 2.55);	//2设置PWM占空比
 800442a:	4b41      	ldr	r3, [pc, #260]	; (8004530 <LCD_SSD_BackLightSet+0x140>)
 800442c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004430:	611a      	str	r2, [r3, #16]
 8004432:	4b3f      	ldr	r3, [pc, #252]	; (8004530 <LCD_SSD_BackLightSet+0x140>)
 8004434:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004438:	615a      	str	r2, [r3, #20]
 800443a:	79fb      	ldrb	r3, [r7, #7]
 800443c:	4618      	mov	r0, r3
 800443e:	f7fc f845 	bl	80004cc <__aeabi_i2d>
 8004442:	a339      	add	r3, pc, #228	; (adr r3, 8004528 <LCD_SSD_BackLightSet+0x138>)
 8004444:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004448:	f7fc f8aa 	bl	80005a0 <__aeabi_dmul>
 800444c:	4603      	mov	r3, r0
 800444e:	460c      	mov	r4, r1
 8004450:	461a      	mov	r2, r3
 8004452:	4623      	mov	r3, r4
 8004454:	4c37      	ldr	r4, [pc, #220]	; (8004534 <LCD_SSD_BackLightSet+0x144>)
 8004456:	4610      	mov	r0, r2
 8004458:	4619      	mov	r1, r3
 800445a:	f7fc fab3 	bl	80009c4 <__aeabi_d2uiz>
 800445e:	4603      	mov	r3, r0
 8004460:	60e3      	str	r3, [r4, #12]
 8004462:	4b33      	ldr	r3, [pc, #204]	; (8004530 <LCD_SSD_BackLightSet+0x140>)
 8004464:	2280      	movs	r2, #128	; 0x80
 8004466:	615a      	str	r2, [r3, #20]
 8004468:	4b31      	ldr	r3, [pc, #196]	; (8004530 <LCD_SSD_BackLightSet+0x140>)
 800446a:	2280      	movs	r2, #128	; 0x80
 800446c:	611a      	str	r2, [r3, #16]
 800446e:	4b30      	ldr	r3, [pc, #192]	; (8004530 <LCD_SSD_BackLightSet+0x140>)
 8004470:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004474:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(0x01);	//3设置C
 8004476:	4b2e      	ldr	r3, [pc, #184]	; (8004530 <LCD_SSD_BackLightSet+0x140>)
 8004478:	f44f 7280 	mov.w	r2, #256	; 0x100
 800447c:	611a      	str	r2, [r3, #16]
 800447e:	4b2c      	ldr	r3, [pc, #176]	; (8004530 <LCD_SSD_BackLightSet+0x140>)
 8004480:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004484:	615a      	str	r2, [r3, #20]
 8004486:	4b2b      	ldr	r3, [pc, #172]	; (8004534 <LCD_SSD_BackLightSet+0x144>)
 8004488:	2201      	movs	r2, #1
 800448a:	60da      	str	r2, [r3, #12]
 800448c:	4b28      	ldr	r3, [pc, #160]	; (8004530 <LCD_SSD_BackLightSet+0x140>)
 800448e:	2280      	movs	r2, #128	; 0x80
 8004490:	615a      	str	r2, [r3, #20]
 8004492:	4b27      	ldr	r3, [pc, #156]	; (8004530 <LCD_SSD_BackLightSet+0x140>)
 8004494:	2280      	movs	r2, #128	; 0x80
 8004496:	611a      	str	r2, [r3, #16]
 8004498:	4b25      	ldr	r3, [pc, #148]	; (8004530 <LCD_SSD_BackLightSet+0x140>)
 800449a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800449e:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(0xFF);	//4设置D
 80044a0:	4b23      	ldr	r3, [pc, #140]	; (8004530 <LCD_SSD_BackLightSet+0x140>)
 80044a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80044a6:	611a      	str	r2, [r3, #16]
 80044a8:	4b21      	ldr	r3, [pc, #132]	; (8004530 <LCD_SSD_BackLightSet+0x140>)
 80044aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80044ae:	615a      	str	r2, [r3, #20]
 80044b0:	4b20      	ldr	r3, [pc, #128]	; (8004534 <LCD_SSD_BackLightSet+0x144>)
 80044b2:	22ff      	movs	r2, #255	; 0xff
 80044b4:	60da      	str	r2, [r3, #12]
 80044b6:	4b1e      	ldr	r3, [pc, #120]	; (8004530 <LCD_SSD_BackLightSet+0x140>)
 80044b8:	2280      	movs	r2, #128	; 0x80
 80044ba:	615a      	str	r2, [r3, #20]
 80044bc:	4b1c      	ldr	r3, [pc, #112]	; (8004530 <LCD_SSD_BackLightSet+0x140>)
 80044be:	2280      	movs	r2, #128	; 0x80
 80044c0:	611a      	str	r2, [r3, #16]
 80044c2:	4b1b      	ldr	r3, [pc, #108]	; (8004530 <LCD_SSD_BackLightSet+0x140>)
 80044c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80044c8:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(0x00);	//5设置E
 80044ca:	4b19      	ldr	r3, [pc, #100]	; (8004530 <LCD_SSD_BackLightSet+0x140>)
 80044cc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80044d0:	611a      	str	r2, [r3, #16]
 80044d2:	4b17      	ldr	r3, [pc, #92]	; (8004530 <LCD_SSD_BackLightSet+0x140>)
 80044d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80044d8:	615a      	str	r2, [r3, #20]
 80044da:	4b16      	ldr	r3, [pc, #88]	; (8004534 <LCD_SSD_BackLightSet+0x144>)
 80044dc:	2200      	movs	r2, #0
 80044de:	60da      	str	r2, [r3, #12]
 80044e0:	4b13      	ldr	r3, [pc, #76]	; (8004530 <LCD_SSD_BackLightSet+0x140>)
 80044e2:	2280      	movs	r2, #128	; 0x80
 80044e4:	615a      	str	r2, [r3, #20]
 80044e6:	4b12      	ldr	r3, [pc, #72]	; (8004530 <LCD_SSD_BackLightSet+0x140>)
 80044e8:	2280      	movs	r2, #128	; 0x80
 80044ea:	611a      	str	r2, [r3, #16]
 80044ec:	4b10      	ldr	r3, [pc, #64]	; (8004530 <LCD_SSD_BackLightSet+0x140>)
 80044ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80044f2:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(0x00);	//6设置F
 80044f4:	4b0e      	ldr	r3, [pc, #56]	; (8004530 <LCD_SSD_BackLightSet+0x140>)
 80044f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80044fa:	611a      	str	r2, [r3, #16]
 80044fc:	4b0c      	ldr	r3, [pc, #48]	; (8004530 <LCD_SSD_BackLightSet+0x140>)
 80044fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004502:	615a      	str	r2, [r3, #20]
 8004504:	4b0b      	ldr	r3, [pc, #44]	; (8004534 <LCD_SSD_BackLightSet+0x144>)
 8004506:	2200      	movs	r2, #0
 8004508:	60da      	str	r2, [r3, #12]
 800450a:	4b09      	ldr	r3, [pc, #36]	; (8004530 <LCD_SSD_BackLightSet+0x140>)
 800450c:	2280      	movs	r2, #128	; 0x80
 800450e:	615a      	str	r2, [r3, #20]
 8004510:	4b07      	ldr	r3, [pc, #28]	; (8004530 <LCD_SSD_BackLightSet+0x140>)
 8004512:	2280      	movs	r2, #128	; 0x80
 8004514:	611a      	str	r2, [r3, #16]
 8004516:	4b06      	ldr	r3, [pc, #24]	; (8004530 <LCD_SSD_BackLightSet+0x140>)
 8004518:	f44f 7200 	mov.w	r2, #512	; 0x200
 800451c:	611a      	str	r2, [r3, #16]
}
 800451e:	bf00      	nop
 8004520:	370c      	adds	r7, #12
 8004522:	46bd      	mov	sp, r7
 8004524:	bd90      	pop	{r4, r7, pc}
 8004526:	bf00      	nop
 8004528:	66666666 	.word	0x66666666
 800452c:	40046666 	.word	0x40046666
 8004530:	40011000 	.word	0x40011000
 8004534:	40010c00 	.word	0x40010c00

08004538 <LCD_Display_Dir>:
// Set LCD display direction
// dir: 0, vertical 1, horizontal
void LCD_Display_Dir(uint8_t dir) {
 8004538:	b580      	push	{r7, lr}
 800453a:	b082      	sub	sp, #8
 800453c:	af00      	add	r7, sp, #0
 800453e:	4603      	mov	r3, r0
 8004540:	71fb      	strb	r3, [r7, #7]
	if (dir == 0)			//竖屏
 8004542:	79fb      	ldrb	r3, [r7, #7]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d177      	bne.n	8004638 <LCD_Display_Dir+0x100>
			{
		lcddev.dir = 0;	//竖屏
 8004548:	4b80      	ldr	r3, [pc, #512]	; (800474c <LCD_Display_Dir+0x214>)
 800454a:	2200      	movs	r2, #0
 800454c:	719a      	strb	r2, [r3, #6]
		lcddev.width = 240;
 800454e:	4b7f      	ldr	r3, [pc, #508]	; (800474c <LCD_Display_Dir+0x214>)
 8004550:	22f0      	movs	r2, #240	; 0xf0
 8004552:	801a      	strh	r2, [r3, #0]
		lcddev.height = 320;
 8004554:	4b7d      	ldr	r3, [pc, #500]	; (800474c <LCD_Display_Dir+0x214>)
 8004556:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800455a:	805a      	strh	r2, [r3, #2]
		if (lcddev.id == 0X9341 || lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 800455c:	4b7b      	ldr	r3, [pc, #492]	; (800474c <LCD_Display_Dir+0x214>)
 800455e:	889b      	ldrh	r3, [r3, #4]
 8004560:	f249 3241 	movw	r2, #37697	; 0x9341
 8004564:	4293      	cmp	r3, r2
 8004566:	d00b      	beq.n	8004580 <LCD_Display_Dir+0x48>
 8004568:	4b78      	ldr	r3, [pc, #480]	; (800474c <LCD_Display_Dir+0x214>)
 800456a:	889b      	ldrh	r3, [r3, #4]
 800456c:	f646 0204 	movw	r2, #26628	; 0x6804
 8004570:	4293      	cmp	r3, r2
 8004572:	d005      	beq.n	8004580 <LCD_Display_Dir+0x48>
 8004574:	4b75      	ldr	r3, [pc, #468]	; (800474c <LCD_Display_Dir+0x214>)
 8004576:	889b      	ldrh	r3, [r3, #4]
 8004578:	f245 3210 	movw	r2, #21264	; 0x5310
 800457c:	4293      	cmp	r3, r2
 800457e:	d11e      	bne.n	80045be <LCD_Display_Dir+0x86>
			lcddev.wramcmd = 0X2C;
 8004580:	4b72      	ldr	r3, [pc, #456]	; (800474c <LCD_Display_Dir+0x214>)
 8004582:	222c      	movs	r2, #44	; 0x2c
 8004584:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2A;
 8004586:	4b71      	ldr	r3, [pc, #452]	; (800474c <LCD_Display_Dir+0x214>)
 8004588:	222a      	movs	r2, #42	; 0x2a
 800458a:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2B;
 800458c:	4b6f      	ldr	r3, [pc, #444]	; (800474c <LCD_Display_Dir+0x214>)
 800458e:	222b      	movs	r2, #43	; 0x2b
 8004590:	819a      	strh	r2, [r3, #12]
			if (lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 8004592:	4b6e      	ldr	r3, [pc, #440]	; (800474c <LCD_Display_Dir+0x214>)
 8004594:	889b      	ldrh	r3, [r3, #4]
 8004596:	f646 0204 	movw	r2, #26628	; 0x6804
 800459a:	4293      	cmp	r3, r2
 800459c:	d006      	beq.n	80045ac <LCD_Display_Dir+0x74>
 800459e:	4b6b      	ldr	r3, [pc, #428]	; (800474c <LCD_Display_Dir+0x214>)
 80045a0:	889b      	ldrh	r3, [r3, #4]
 80045a2:	f245 3210 	movw	r2, #21264	; 0x5310
 80045a6:	4293      	cmp	r3, r2
 80045a8:	f040 80c7 	bne.w	800473a <LCD_Display_Dir+0x202>
				lcddev.width = 320;
 80045ac:	4b67      	ldr	r3, [pc, #412]	; (800474c <LCD_Display_Dir+0x214>)
 80045ae:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80045b2:	801a      	strh	r2, [r3, #0]
				lcddev.height = 480;
 80045b4:	4b65      	ldr	r3, [pc, #404]	; (800474c <LCD_Display_Dir+0x214>)
 80045b6:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80045ba:	805a      	strh	r2, [r3, #2]
			if (lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 80045bc:	e0bd      	b.n	800473a <LCD_Display_Dir+0x202>
			}
		} else if (lcddev.id == 0x5510) {
 80045be:	4b63      	ldr	r3, [pc, #396]	; (800474c <LCD_Display_Dir+0x214>)
 80045c0:	889b      	ldrh	r3, [r3, #4]
 80045c2:	f245 5210 	movw	r2, #21776	; 0x5510
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d114      	bne.n	80045f4 <LCD_Display_Dir+0xbc>
			lcddev.wramcmd = 0X2C00;
 80045ca:	4b60      	ldr	r3, [pc, #384]	; (800474c <LCD_Display_Dir+0x214>)
 80045cc:	f44f 5230 	mov.w	r2, #11264	; 0x2c00
 80045d0:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2A00;
 80045d2:	4b5e      	ldr	r3, [pc, #376]	; (800474c <LCD_Display_Dir+0x214>)
 80045d4:	f44f 5228 	mov.w	r2, #10752	; 0x2a00
 80045d8:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2B00;
 80045da:	4b5c      	ldr	r3, [pc, #368]	; (800474c <LCD_Display_Dir+0x214>)
 80045dc:	f44f 522c 	mov.w	r2, #11008	; 0x2b00
 80045e0:	819a      	strh	r2, [r3, #12]
			lcddev.width = 480;
 80045e2:	4b5a      	ldr	r3, [pc, #360]	; (800474c <LCD_Display_Dir+0x214>)
 80045e4:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80045e8:	801a      	strh	r2, [r3, #0]
			lcddev.height = 800;
 80045ea:	4b58      	ldr	r3, [pc, #352]	; (800474c <LCD_Display_Dir+0x214>)
 80045ec:	f44f 7248 	mov.w	r2, #800	; 0x320
 80045f0:	805a      	strh	r2, [r3, #2]
 80045f2:	e0a3      	b.n	800473c <LCD_Display_Dir+0x204>
		} else if (lcddev.id == 0X1963) {
 80045f4:	4b55      	ldr	r3, [pc, #340]	; (800474c <LCD_Display_Dir+0x214>)
 80045f6:	889b      	ldrh	r3, [r3, #4]
 80045f8:	f641 1263 	movw	r2, #6499	; 0x1963
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d111      	bne.n	8004624 <LCD_Display_Dir+0xec>
			lcddev.wramcmd = 0X2C;	//设置写入GRAM的指令
 8004600:	4b52      	ldr	r3, [pc, #328]	; (800474c <LCD_Display_Dir+0x214>)
 8004602:	222c      	movs	r2, #44	; 0x2c
 8004604:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2B;	//设置写X坐标指令
 8004606:	4b51      	ldr	r3, [pc, #324]	; (800474c <LCD_Display_Dir+0x214>)
 8004608:	222b      	movs	r2, #43	; 0x2b
 800460a:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2A;	//设置写Y坐标指令
 800460c:	4b4f      	ldr	r3, [pc, #316]	; (800474c <LCD_Display_Dir+0x214>)
 800460e:	222a      	movs	r2, #42	; 0x2a
 8004610:	819a      	strh	r2, [r3, #12]
			lcddev.width = 480;		//设置宽度480
 8004612:	4b4e      	ldr	r3, [pc, #312]	; (800474c <LCD_Display_Dir+0x214>)
 8004614:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8004618:	801a      	strh	r2, [r3, #0]
			lcddev.height = 800;		//设置高度800
 800461a:	4b4c      	ldr	r3, [pc, #304]	; (800474c <LCD_Display_Dir+0x214>)
 800461c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8004620:	805a      	strh	r2, [r3, #2]
 8004622:	e08b      	b.n	800473c <LCD_Display_Dir+0x204>
		} else {
			lcddev.wramcmd = 0X22;
 8004624:	4b49      	ldr	r3, [pc, #292]	; (800474c <LCD_Display_Dir+0x214>)
 8004626:	2222      	movs	r2, #34	; 0x22
 8004628:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X20;
 800462a:	4b48      	ldr	r3, [pc, #288]	; (800474c <LCD_Display_Dir+0x214>)
 800462c:	2220      	movs	r2, #32
 800462e:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X21;
 8004630:	4b46      	ldr	r3, [pc, #280]	; (800474c <LCD_Display_Dir+0x214>)
 8004632:	2221      	movs	r2, #33	; 0x21
 8004634:	819a      	strh	r2, [r3, #12]
 8004636:	e081      	b.n	800473c <LCD_Display_Dir+0x204>
		}
	} else 				//横屏
	{
		lcddev.dir = 1;	//横屏
 8004638:	4b44      	ldr	r3, [pc, #272]	; (800474c <LCD_Display_Dir+0x214>)
 800463a:	2201      	movs	r2, #1
 800463c:	719a      	strb	r2, [r3, #6]
		lcddev.width = 320;
 800463e:	4b43      	ldr	r3, [pc, #268]	; (800474c <LCD_Display_Dir+0x214>)
 8004640:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004644:	801a      	strh	r2, [r3, #0]
		lcddev.height = 240;
 8004646:	4b41      	ldr	r3, [pc, #260]	; (800474c <LCD_Display_Dir+0x214>)
 8004648:	22f0      	movs	r2, #240	; 0xf0
 800464a:	805a      	strh	r2, [r3, #2]
		if (lcddev.id == 0X9341 || lcddev.id == 0X5310) {
 800464c:	4b3f      	ldr	r3, [pc, #252]	; (800474c <LCD_Display_Dir+0x214>)
 800464e:	889b      	ldrh	r3, [r3, #4]
 8004650:	f249 3241 	movw	r2, #37697	; 0x9341
 8004654:	4293      	cmp	r3, r2
 8004656:	d005      	beq.n	8004664 <LCD_Display_Dir+0x12c>
 8004658:	4b3c      	ldr	r3, [pc, #240]	; (800474c <LCD_Display_Dir+0x214>)
 800465a:	889b      	ldrh	r3, [r3, #4]
 800465c:	f245 3210 	movw	r2, #21264	; 0x5310
 8004660:	4293      	cmp	r3, r2
 8004662:	d109      	bne.n	8004678 <LCD_Display_Dir+0x140>
			lcddev.wramcmd = 0X2C;
 8004664:	4b39      	ldr	r3, [pc, #228]	; (800474c <LCD_Display_Dir+0x214>)
 8004666:	222c      	movs	r2, #44	; 0x2c
 8004668:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2A;
 800466a:	4b38      	ldr	r3, [pc, #224]	; (800474c <LCD_Display_Dir+0x214>)
 800466c:	222a      	movs	r2, #42	; 0x2a
 800466e:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2B;
 8004670:	4b36      	ldr	r3, [pc, #216]	; (800474c <LCD_Display_Dir+0x214>)
 8004672:	222b      	movs	r2, #43	; 0x2b
 8004674:	819a      	strh	r2, [r3, #12]
 8004676:	e04b      	b.n	8004710 <LCD_Display_Dir+0x1d8>
		} else if (lcddev.id == 0X6804) {
 8004678:	4b34      	ldr	r3, [pc, #208]	; (800474c <LCD_Display_Dir+0x214>)
 800467a:	889b      	ldrh	r3, [r3, #4]
 800467c:	f646 0204 	movw	r2, #26628	; 0x6804
 8004680:	4293      	cmp	r3, r2
 8004682:	d109      	bne.n	8004698 <LCD_Display_Dir+0x160>
			lcddev.wramcmd = 0X2C;
 8004684:	4b31      	ldr	r3, [pc, #196]	; (800474c <LCD_Display_Dir+0x214>)
 8004686:	222c      	movs	r2, #44	; 0x2c
 8004688:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2B;
 800468a:	4b30      	ldr	r3, [pc, #192]	; (800474c <LCD_Display_Dir+0x214>)
 800468c:	222b      	movs	r2, #43	; 0x2b
 800468e:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2A;
 8004690:	4b2e      	ldr	r3, [pc, #184]	; (800474c <LCD_Display_Dir+0x214>)
 8004692:	222a      	movs	r2, #42	; 0x2a
 8004694:	819a      	strh	r2, [r3, #12]
 8004696:	e03b      	b.n	8004710 <LCD_Display_Dir+0x1d8>
		} else if (lcddev.id == 0x5510) {
 8004698:	4b2c      	ldr	r3, [pc, #176]	; (800474c <LCD_Display_Dir+0x214>)
 800469a:	889b      	ldrh	r3, [r3, #4]
 800469c:	f245 5210 	movw	r2, #21776	; 0x5510
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d114      	bne.n	80046ce <LCD_Display_Dir+0x196>
			lcddev.wramcmd = 0X2C00;
 80046a4:	4b29      	ldr	r3, [pc, #164]	; (800474c <LCD_Display_Dir+0x214>)
 80046a6:	f44f 5230 	mov.w	r2, #11264	; 0x2c00
 80046aa:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2A00;
 80046ac:	4b27      	ldr	r3, [pc, #156]	; (800474c <LCD_Display_Dir+0x214>)
 80046ae:	f44f 5228 	mov.w	r2, #10752	; 0x2a00
 80046b2:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2B00;
 80046b4:	4b25      	ldr	r3, [pc, #148]	; (800474c <LCD_Display_Dir+0x214>)
 80046b6:	f44f 522c 	mov.w	r2, #11008	; 0x2b00
 80046ba:	819a      	strh	r2, [r3, #12]
			lcddev.width = 800;
 80046bc:	4b23      	ldr	r3, [pc, #140]	; (800474c <LCD_Display_Dir+0x214>)
 80046be:	f44f 7248 	mov.w	r2, #800	; 0x320
 80046c2:	801a      	strh	r2, [r3, #0]
			lcddev.height = 480;
 80046c4:	4b21      	ldr	r3, [pc, #132]	; (800474c <LCD_Display_Dir+0x214>)
 80046c6:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80046ca:	805a      	strh	r2, [r3, #2]
 80046cc:	e020      	b.n	8004710 <LCD_Display_Dir+0x1d8>
		} else if (lcddev.id == 0X1963) {
 80046ce:	4b1f      	ldr	r3, [pc, #124]	; (800474c <LCD_Display_Dir+0x214>)
 80046d0:	889b      	ldrh	r3, [r3, #4]
 80046d2:	f641 1263 	movw	r2, #6499	; 0x1963
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d111      	bne.n	80046fe <LCD_Display_Dir+0x1c6>
			lcddev.wramcmd = 0X2C;	//设置写入GRAM的指令
 80046da:	4b1c      	ldr	r3, [pc, #112]	; (800474c <LCD_Display_Dir+0x214>)
 80046dc:	222c      	movs	r2, #44	; 0x2c
 80046de:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2A;	//设置写X坐标指令
 80046e0:	4b1a      	ldr	r3, [pc, #104]	; (800474c <LCD_Display_Dir+0x214>)
 80046e2:	222a      	movs	r2, #42	; 0x2a
 80046e4:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2B;	//设置写Y坐标指令
 80046e6:	4b19      	ldr	r3, [pc, #100]	; (800474c <LCD_Display_Dir+0x214>)
 80046e8:	222b      	movs	r2, #43	; 0x2b
 80046ea:	819a      	strh	r2, [r3, #12]
			lcddev.width = 800;		//设置宽度800
 80046ec:	4b17      	ldr	r3, [pc, #92]	; (800474c <LCD_Display_Dir+0x214>)
 80046ee:	f44f 7248 	mov.w	r2, #800	; 0x320
 80046f2:	801a      	strh	r2, [r3, #0]
			lcddev.height = 480;		//设置高度480
 80046f4:	4b15      	ldr	r3, [pc, #84]	; (800474c <LCD_Display_Dir+0x214>)
 80046f6:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80046fa:	805a      	strh	r2, [r3, #2]
 80046fc:	e008      	b.n	8004710 <LCD_Display_Dir+0x1d8>
		} else {
			lcddev.wramcmd = 0X22;
 80046fe:	4b13      	ldr	r3, [pc, #76]	; (800474c <LCD_Display_Dir+0x214>)
 8004700:	2222      	movs	r2, #34	; 0x22
 8004702:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X21;
 8004704:	4b11      	ldr	r3, [pc, #68]	; (800474c <LCD_Display_Dir+0x214>)
 8004706:	2221      	movs	r2, #33	; 0x21
 8004708:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X20;
 800470a:	4b10      	ldr	r3, [pc, #64]	; (800474c <LCD_Display_Dir+0x214>)
 800470c:	2220      	movs	r2, #32
 800470e:	819a      	strh	r2, [r3, #12]
		}
		if (lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 8004710:	4b0e      	ldr	r3, [pc, #56]	; (800474c <LCD_Display_Dir+0x214>)
 8004712:	889b      	ldrh	r3, [r3, #4]
 8004714:	f646 0204 	movw	r2, #26628	; 0x6804
 8004718:	4293      	cmp	r3, r2
 800471a:	d005      	beq.n	8004728 <LCD_Display_Dir+0x1f0>
 800471c:	4b0b      	ldr	r3, [pc, #44]	; (800474c <LCD_Display_Dir+0x214>)
 800471e:	889b      	ldrh	r3, [r3, #4]
 8004720:	f245 3210 	movw	r2, #21264	; 0x5310
 8004724:	4293      	cmp	r3, r2
 8004726:	d109      	bne.n	800473c <LCD_Display_Dir+0x204>
			lcddev.width = 480;
 8004728:	4b08      	ldr	r3, [pc, #32]	; (800474c <LCD_Display_Dir+0x214>)
 800472a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800472e:	801a      	strh	r2, [r3, #0]
			lcddev.height = 320;
 8004730:	4b06      	ldr	r3, [pc, #24]	; (800474c <LCD_Display_Dir+0x214>)
 8004732:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004736:	805a      	strh	r2, [r3, #2]
 8004738:	e000      	b.n	800473c <LCD_Display_Dir+0x204>
			if (lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 800473a:	bf00      	nop
		}
	}
	LCD_Scan_Dir(DFT_SCAN_DIR);	//默认扫描方向
 800473c:	2000      	movs	r0, #0
 800473e:	f7ff f87d 	bl	800383c <LCD_Scan_Dir>
}
 8004742:	bf00      	nop
 8004744:	3708      	adds	r7, #8
 8004746:	46bd      	mov	sp, r7
 8004748:	bd80      	pop	{r7, pc}
 800474a:	bf00      	nop
 800474c:	200000b4 	.word	0x200000b4

08004750 <LCD_Init>:
	}
}
//初始化lcd
//该初始化函数可以初始化各种ALIENTEK出品的LCD液晶屏
//本函数占用较大flash,用户可以根据自己的实际情况,删掉未用到的LCD初始化代码.以节省空间.
void LCD_Init(void) {
 8004750:	b580      	push	{r7, lr}
 8004752:	b086      	sub	sp, #24
 8004754:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_Initure;

	__HAL_RCC_GPIOB_CLK_ENABLE();           	//开启GPIOB时钟
 8004756:	4b90      	ldr	r3, [pc, #576]	; (8004998 <LCD_Init+0x248>)
 8004758:	699b      	ldr	r3, [r3, #24]
 800475a:	4a8f      	ldr	r2, [pc, #572]	; (8004998 <LCD_Init+0x248>)
 800475c:	f043 0308 	orr.w	r3, r3, #8
 8004760:	6193      	str	r3, [r2, #24]
 8004762:	4b8d      	ldr	r3, [pc, #564]	; (8004998 <LCD_Init+0x248>)
 8004764:	699b      	ldr	r3, [r3, #24]
 8004766:	f003 0308 	and.w	r3, r3, #8
 800476a:	607b      	str	r3, [r7, #4]
 800476c:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOC_CLK_ENABLE();           	//开启GPIOC时钟
 800476e:	4b8a      	ldr	r3, [pc, #552]	; (8004998 <LCD_Init+0x248>)
 8004770:	699b      	ldr	r3, [r3, #24]
 8004772:	4a89      	ldr	r2, [pc, #548]	; (8004998 <LCD_Init+0x248>)
 8004774:	f043 0310 	orr.w	r3, r3, #16
 8004778:	6193      	str	r3, [r2, #24]
 800477a:	4b87      	ldr	r3, [pc, #540]	; (8004998 <LCD_Init+0x248>)
 800477c:	699b      	ldr	r3, [r3, #24]
 800477e:	f003 0310 	and.w	r3, r3, #16
 8004782:	603b      	str	r3, [r7, #0]
 8004784:	683b      	ldr	r3, [r7, #0]

	//PC6,7,8,9,10
	GPIO_Initure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 |\
 8004786:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 800478a:	60bb      	str	r3, [r7, #8]
 GPIO_PIN_9
			| GPIO_PIN_10;
	GPIO_Initure.Mode = GPIO_MODE_OUTPUT_PP;  	//推挽输出
 800478c:	2301      	movs	r3, #1
 800478e:	60fb      	str	r3, [r7, #12]
	GPIO_Initure.Pull = GPIO_PULLUP;          	//上拉
 8004790:	2301      	movs	r3, #1
 8004792:	613b      	str	r3, [r7, #16]
	GPIO_Initure.Speed = GPIO_SPEED_FREQ_HIGH;    	 	//高速
 8004794:	2303      	movs	r3, #3
 8004796:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOC, &GPIO_Initure);
 8004798:	f107 0308 	add.w	r3, r7, #8
 800479c:	4619      	mov	r1, r3
 800479e:	487f      	ldr	r0, [pc, #508]	; (800499c <LCD_Init+0x24c>)
 80047a0:	f7fc fa98 	bl	8000cd4 <HAL_GPIO_Init>

	//PB0~15
	GPIO_Initure.Pin = GPIO_PIN_All;				//PB推挽输出
 80047a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80047a8:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(GPIOB, &GPIO_Initure);
 80047aa:	f107 0308 	add.w	r3, r7, #8
 80047ae:	4619      	mov	r1, r3
 80047b0:	487b      	ldr	r0, [pc, #492]	; (80049a0 <LCD_Init+0x250>)
 80047b2:	f7fc fa8f 	bl	8000cd4 <HAL_GPIO_Init>

//	__HAL_AFIO_REMAP_SWJ_DISABLE();				//禁止JTAG

	HAL_Delay(50); // delay 50 ms
 80047b6:	2032      	movs	r0, #50	; 0x32
 80047b8:	f7fc f986 	bl	8000ac8 <HAL_Delay>
	LCD_WriteReg(0x0000, 0x0001);
 80047bc:	2101      	movs	r1, #1
 80047be:	2000      	movs	r0, #0
 80047c0:	f7fe fd2a 	bl	8003218 <LCD_WriteReg>
	HAL_Delay(50); // delay 50 ms
 80047c4:	2032      	movs	r0, #50	; 0x32
 80047c6:	f7fc f97f 	bl	8000ac8 <HAL_Delay>
	lcddev.id = LCD_ReadReg(0x0000);
 80047ca:	2000      	movs	r0, #0
 80047cc:	f7fe fd4e 	bl	800326c <LCD_ReadReg>
 80047d0:	4603      	mov	r3, r0
 80047d2:	461a      	mov	r2, r3
 80047d4:	4b73      	ldr	r3, [pc, #460]	; (80049a4 <LCD_Init+0x254>)
 80047d6:	809a      	strh	r2, [r3, #4]
	if (lcddev.id < 0XFF || lcddev.id == 0XFFFF || lcddev.id == 0X9300) //读到ID不正确,新增lcddev.id==0X9300判断，因为9341在未被复位的情况下会被读成9300
 80047d8:	4b72      	ldr	r3, [pc, #456]	; (80049a4 <LCD_Init+0x254>)
 80047da:	889b      	ldrh	r3, [r3, #4]
 80047dc:	2bfe      	cmp	r3, #254	; 0xfe
 80047de:	d90b      	bls.n	80047f8 <LCD_Init+0xa8>
 80047e0:	4b70      	ldr	r3, [pc, #448]	; (80049a4 <LCD_Init+0x254>)
 80047e2:	889b      	ldrh	r3, [r3, #4]
 80047e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d005      	beq.n	80047f8 <LCD_Init+0xa8>
 80047ec:	4b6d      	ldr	r3, [pc, #436]	; (80049a4 <LCD_Init+0x254>)
 80047ee:	889b      	ldrh	r3, [r3, #4]
 80047f0:	f5b3 4f13 	cmp.w	r3, #37632	; 0x9300
 80047f4:	f040 80c8 	bne.w	8004988 <LCD_Init+0x238>
			{
		//尝试9341 ID的读取
		LCD_WR_REG(0XD3);
 80047f8:	20d3      	movs	r0, #211	; 0xd3
 80047fa:	f7fe fc81 	bl	8003100 <LCD_WR_REG>
		LCD_RD_DATA(); 				//dummy read 	
 80047fe:	f7fe fcc7 	bl	8003190 <LCD_RD_DATA>
		LCD_RD_DATA();   	    	//读到0X00
 8004802:	f7fe fcc5 	bl	8003190 <LCD_RD_DATA>
		lcddev.id = LCD_RD_DATA();   	//读取93
 8004806:	f7fe fcc3 	bl	8003190 <LCD_RD_DATA>
 800480a:	4603      	mov	r3, r0
 800480c:	461a      	mov	r2, r3
 800480e:	4b65      	ldr	r3, [pc, #404]	; (80049a4 <LCD_Init+0x254>)
 8004810:	809a      	strh	r2, [r3, #4]
		lcddev.id <<= 8;
 8004812:	4b64      	ldr	r3, [pc, #400]	; (80049a4 <LCD_Init+0x254>)
 8004814:	889b      	ldrh	r3, [r3, #4]
 8004816:	021b      	lsls	r3, r3, #8
 8004818:	b29a      	uxth	r2, r3
 800481a:	4b62      	ldr	r3, [pc, #392]	; (80049a4 <LCD_Init+0x254>)
 800481c:	809a      	strh	r2, [r3, #4]
		lcddev.id |= LCD_RD_DATA();  	//读取41
 800481e:	f7fe fcb7 	bl	8003190 <LCD_RD_DATA>
 8004822:	4603      	mov	r3, r0
 8004824:	461a      	mov	r2, r3
 8004826:	4b5f      	ldr	r3, [pc, #380]	; (80049a4 <LCD_Init+0x254>)
 8004828:	889b      	ldrh	r3, [r3, #4]
 800482a:	4313      	orrs	r3, r2
 800482c:	b29a      	uxth	r2, r3
 800482e:	4b5d      	ldr	r3, [pc, #372]	; (80049a4 <LCD_Init+0x254>)
 8004830:	809a      	strh	r2, [r3, #4]
		if (lcddev.id != 0X9341)		//非9341,尝试是不是6804
 8004832:	4b5c      	ldr	r3, [pc, #368]	; (80049a4 <LCD_Init+0x254>)
 8004834:	889b      	ldrh	r3, [r3, #4]
 8004836:	f249 3241 	movw	r2, #37697	; 0x9341
 800483a:	4293      	cmp	r3, r2
 800483c:	f000 80a4 	beq.w	8004988 <LCD_Init+0x238>
				{
			LCD_WR_REG(0XBF);
 8004840:	20bf      	movs	r0, #191	; 0xbf
 8004842:	f7fe fc5d 	bl	8003100 <LCD_WR_REG>
			LCD_RD_DATA(); 			//dummy read 	 
 8004846:	f7fe fca3 	bl	8003190 <LCD_RD_DATA>
			LCD_RD_DATA();   	    //读回0X01
 800484a:	f7fe fca1 	bl	8003190 <LCD_RD_DATA>
			LCD_RD_DATA(); 			//读回0XD0
 800484e:	f7fe fc9f 	bl	8003190 <LCD_RD_DATA>
			lcddev.id = LCD_RD_DATA(); 			//这里读回0X68
 8004852:	f7fe fc9d 	bl	8003190 <LCD_RD_DATA>
 8004856:	4603      	mov	r3, r0
 8004858:	461a      	mov	r2, r3
 800485a:	4b52      	ldr	r3, [pc, #328]	; (80049a4 <LCD_Init+0x254>)
 800485c:	809a      	strh	r2, [r3, #4]
			lcddev.id <<= 8;
 800485e:	4b51      	ldr	r3, [pc, #324]	; (80049a4 <LCD_Init+0x254>)
 8004860:	889b      	ldrh	r3, [r3, #4]
 8004862:	021b      	lsls	r3, r3, #8
 8004864:	b29a      	uxth	r2, r3
 8004866:	4b4f      	ldr	r3, [pc, #316]	; (80049a4 <LCD_Init+0x254>)
 8004868:	809a      	strh	r2, [r3, #4]
			lcddev.id |= LCD_RD_DATA(); 			//这里读回0X04
 800486a:	f7fe fc91 	bl	8003190 <LCD_RD_DATA>
 800486e:	4603      	mov	r3, r0
 8004870:	461a      	mov	r2, r3
 8004872:	4b4c      	ldr	r3, [pc, #304]	; (80049a4 <LCD_Init+0x254>)
 8004874:	889b      	ldrh	r3, [r3, #4]
 8004876:	4313      	orrs	r3, r2
 8004878:	b29a      	uxth	r2, r3
 800487a:	4b4a      	ldr	r3, [pc, #296]	; (80049a4 <LCD_Init+0x254>)
 800487c:	809a      	strh	r2, [r3, #4]
			if (lcddev.id != 0X6804)	//也不是6804,尝试看看是不是NT35310
 800487e:	4b49      	ldr	r3, [pc, #292]	; (80049a4 <LCD_Init+0x254>)
 8004880:	889b      	ldrh	r3, [r3, #4]
 8004882:	f646 0204 	movw	r2, #26628	; 0x6804
 8004886:	4293      	cmp	r3, r2
 8004888:	d07e      	beq.n	8004988 <LCD_Init+0x238>
					{
				LCD_WR_REG(0XD4);
 800488a:	20d4      	movs	r0, #212	; 0xd4
 800488c:	f7fe fc38 	bl	8003100 <LCD_WR_REG>
				LCD_RD_DATA(); 				//dummy read  
 8004890:	f7fe fc7e 	bl	8003190 <LCD_RD_DATA>
				LCD_RD_DATA();   			//读回0X01	 
 8004894:	f7fe fc7c 	bl	8003190 <LCD_RD_DATA>
				lcddev.id = LCD_RD_DATA();	//读回0X53
 8004898:	f7fe fc7a 	bl	8003190 <LCD_RD_DATA>
 800489c:	4603      	mov	r3, r0
 800489e:	461a      	mov	r2, r3
 80048a0:	4b40      	ldr	r3, [pc, #256]	; (80049a4 <LCD_Init+0x254>)
 80048a2:	809a      	strh	r2, [r3, #4]
				lcddev.id <<= 8;
 80048a4:	4b3f      	ldr	r3, [pc, #252]	; (80049a4 <LCD_Init+0x254>)
 80048a6:	889b      	ldrh	r3, [r3, #4]
 80048a8:	021b      	lsls	r3, r3, #8
 80048aa:	b29a      	uxth	r2, r3
 80048ac:	4b3d      	ldr	r3, [pc, #244]	; (80049a4 <LCD_Init+0x254>)
 80048ae:	809a      	strh	r2, [r3, #4]
				lcddev.id |= LCD_RD_DATA();	//这里读回0X10
 80048b0:	f7fe fc6e 	bl	8003190 <LCD_RD_DATA>
 80048b4:	4603      	mov	r3, r0
 80048b6:	461a      	mov	r2, r3
 80048b8:	4b3a      	ldr	r3, [pc, #232]	; (80049a4 <LCD_Init+0x254>)
 80048ba:	889b      	ldrh	r3, [r3, #4]
 80048bc:	4313      	orrs	r3, r2
 80048be:	b29a      	uxth	r2, r3
 80048c0:	4b38      	ldr	r3, [pc, #224]	; (80049a4 <LCD_Init+0x254>)
 80048c2:	809a      	strh	r2, [r3, #4]
				if (lcddev.id != 0X5310)		//也不是NT35310,尝试看看是不是NT35510
 80048c4:	4b37      	ldr	r3, [pc, #220]	; (80049a4 <LCD_Init+0x254>)
 80048c6:	889b      	ldrh	r3, [r3, #4]
 80048c8:	f245 3210 	movw	r2, #21264	; 0x5310
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d05b      	beq.n	8004988 <LCD_Init+0x238>
						{
					LCD_WR_REG(0XDA00);
 80048d0:	f44f 405a 	mov.w	r0, #55808	; 0xda00
 80048d4:	f7fe fc14 	bl	8003100 <LCD_WR_REG>
					LCD_RD_DATA();   		//读回0X00	 
 80048d8:	f7fe fc5a 	bl	8003190 <LCD_RD_DATA>
					LCD_WR_REG(0XDB00);
 80048dc:	f44f 405b 	mov.w	r0, #56064	; 0xdb00
 80048e0:	f7fe fc0e 	bl	8003100 <LCD_WR_REG>
					lcddev.id = LCD_RD_DATA();   		//读回0X80
 80048e4:	f7fe fc54 	bl	8003190 <LCD_RD_DATA>
 80048e8:	4603      	mov	r3, r0
 80048ea:	461a      	mov	r2, r3
 80048ec:	4b2d      	ldr	r3, [pc, #180]	; (80049a4 <LCD_Init+0x254>)
 80048ee:	809a      	strh	r2, [r3, #4]
					lcddev.id <<= 8;
 80048f0:	4b2c      	ldr	r3, [pc, #176]	; (80049a4 <LCD_Init+0x254>)
 80048f2:	889b      	ldrh	r3, [r3, #4]
 80048f4:	021b      	lsls	r3, r3, #8
 80048f6:	b29a      	uxth	r2, r3
 80048f8:	4b2a      	ldr	r3, [pc, #168]	; (80049a4 <LCD_Init+0x254>)
 80048fa:	809a      	strh	r2, [r3, #4]
					LCD_WR_REG(0XDC00);
 80048fc:	f44f 405c 	mov.w	r0, #56320	; 0xdc00
 8004900:	f7fe fbfe 	bl	8003100 <LCD_WR_REG>
					lcddev.id |= LCD_RD_DATA();   		//读回0X00
 8004904:	f7fe fc44 	bl	8003190 <LCD_RD_DATA>
 8004908:	4603      	mov	r3, r0
 800490a:	461a      	mov	r2, r3
 800490c:	4b25      	ldr	r3, [pc, #148]	; (80049a4 <LCD_Init+0x254>)
 800490e:	889b      	ldrh	r3, [r3, #4]
 8004910:	4313      	orrs	r3, r2
 8004912:	b29a      	uxth	r2, r3
 8004914:	4b23      	ldr	r3, [pc, #140]	; (80049a4 <LCD_Init+0x254>)
 8004916:	809a      	strh	r2, [r3, #4]
					if (lcddev.id == 0x8000)
 8004918:	4b22      	ldr	r3, [pc, #136]	; (80049a4 <LCD_Init+0x254>)
 800491a:	889b      	ldrh	r3, [r3, #4]
 800491c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004920:	d103      	bne.n	800492a <LCD_Init+0x1da>
						lcddev.id = 0x5510;   		//NT35510读回的ID是8000H,为方便区分,我们强制设置为5510
 8004922:	4b20      	ldr	r3, [pc, #128]	; (80049a4 <LCD_Init+0x254>)
 8004924:	f245 5210 	movw	r2, #21776	; 0x5510
 8004928:	809a      	strh	r2, [r3, #4]
					if (lcddev.id != 0X5510)			//也不是NT5510,尝试看看是不是SSD1963
 800492a:	4b1e      	ldr	r3, [pc, #120]	; (80049a4 <LCD_Init+0x254>)
 800492c:	889b      	ldrh	r3, [r3, #4]
 800492e:	f245 5210 	movw	r2, #21776	; 0x5510
 8004932:	4293      	cmp	r3, r2
 8004934:	d028      	beq.n	8004988 <LCD_Init+0x238>
							{
						LCD_WR_REG(0XA1);
 8004936:	20a1      	movs	r0, #161	; 0xa1
 8004938:	f7fe fbe2 	bl	8003100 <LCD_WR_REG>
						lcddev.id = LCD_RD_DATA();
 800493c:	f7fe fc28 	bl	8003190 <LCD_RD_DATA>
 8004940:	4603      	mov	r3, r0
 8004942:	461a      	mov	r2, r3
 8004944:	4b17      	ldr	r3, [pc, #92]	; (80049a4 <LCD_Init+0x254>)
 8004946:	809a      	strh	r2, [r3, #4]
						lcddev.id = LCD_RD_DATA();	//读回0X57
 8004948:	f7fe fc22 	bl	8003190 <LCD_RD_DATA>
 800494c:	4603      	mov	r3, r0
 800494e:	461a      	mov	r2, r3
 8004950:	4b14      	ldr	r3, [pc, #80]	; (80049a4 <LCD_Init+0x254>)
 8004952:	809a      	strh	r2, [r3, #4]
						lcddev.id <<= 8;
 8004954:	4b13      	ldr	r3, [pc, #76]	; (80049a4 <LCD_Init+0x254>)
 8004956:	889b      	ldrh	r3, [r3, #4]
 8004958:	021b      	lsls	r3, r3, #8
 800495a:	b29a      	uxth	r2, r3
 800495c:	4b11      	ldr	r3, [pc, #68]	; (80049a4 <LCD_Init+0x254>)
 800495e:	809a      	strh	r2, [r3, #4]
						lcddev.id |= LCD_RD_DATA();	//读回0X61
 8004960:	f7fe fc16 	bl	8003190 <LCD_RD_DATA>
 8004964:	4603      	mov	r3, r0
 8004966:	461a      	mov	r2, r3
 8004968:	4b0e      	ldr	r3, [pc, #56]	; (80049a4 <LCD_Init+0x254>)
 800496a:	889b      	ldrh	r3, [r3, #4]
 800496c:	4313      	orrs	r3, r2
 800496e:	b29a      	uxth	r2, r3
 8004970:	4b0c      	ldr	r3, [pc, #48]	; (80049a4 <LCD_Init+0x254>)
 8004972:	809a      	strh	r2, [r3, #4]
						if (lcddev.id == 0X5761)
 8004974:	4b0b      	ldr	r3, [pc, #44]	; (80049a4 <LCD_Init+0x254>)
 8004976:	889b      	ldrh	r3, [r3, #4]
 8004978:	f245 7261 	movw	r2, #22369	; 0x5761
 800497c:	4293      	cmp	r3, r2
 800497e:	d103      	bne.n	8004988 <LCD_Init+0x238>
							lcddev.id = 0X1963;	//SSD1963读回的ID是5761H,为方便区分,我们强制设置为1963
 8004980:	4b08      	ldr	r3, [pc, #32]	; (80049a4 <LCD_Init+0x254>)
 8004982:	f641 1263 	movw	r2, #6499	; 0x1963
 8004986:	809a      	strh	r2, [r3, #4]
				}
			}
		}
	}
// 	printf(" LCD ID:%x\r\n",lcddev.id); //打印LCD ID
	if (lcddev.id == 0X9341)	//9341初始化
 8004988:	4b06      	ldr	r3, [pc, #24]	; (80049a4 <LCD_Init+0x254>)
 800498a:	889b      	ldrh	r3, [r3, #4]
 800498c:	f249 3241 	movw	r2, #37697	; 0x9341
 8004990:	4293      	cmp	r3, r2
 8004992:	f040 811f 	bne.w	8004bd4 <LCD_Init+0x484>
 8004996:	e007      	b.n	80049a8 <LCD_Init+0x258>
 8004998:	40021000 	.word	0x40021000
 800499c:	40011000 	.word	0x40011000
 80049a0:	40010c00 	.word	0x40010c00
 80049a4:	200000b4 	.word	0x200000b4
			{
		LCD_WR_REG(0xCF);
 80049a8:	20cf      	movs	r0, #207	; 0xcf
 80049aa:	f7fe fba9 	bl	8003100 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80049ae:	2000      	movs	r0, #0
 80049b0:	f7fe fbca 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC1);
 80049b4:	20c1      	movs	r0, #193	; 0xc1
 80049b6:	f7fe fbc7 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X30);
 80049ba:	2030      	movs	r0, #48	; 0x30
 80049bc:	f7fe fbc4 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_REG(0xED);
 80049c0:	20ed      	movs	r0, #237	; 0xed
 80049c2:	f7fe fb9d 	bl	8003100 <LCD_WR_REG>
		LCD_WR_DATAX(0x64);
 80049c6:	2064      	movs	r0, #100	; 0x64
 80049c8:	f7fe fbbe 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x03);
 80049cc:	2003      	movs	r0, #3
 80049ce:	f7fe fbbb 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X12);
 80049d2:	2012      	movs	r0, #18
 80049d4:	f7fe fbb8 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X81);
 80049d8:	2081      	movs	r0, #129	; 0x81
 80049da:	f7fe fbb5 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_REG(0xE8);
 80049de:	20e8      	movs	r0, #232	; 0xe8
 80049e0:	f7fe fb8e 	bl	8003100 <LCD_WR_REG>
		LCD_WR_DATAX(0x85);
 80049e4:	2085      	movs	r0, #133	; 0x85
 80049e6:	f7fe fbaf 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x10);
 80049ea:	2010      	movs	r0, #16
 80049ec:	f7fe fbac 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x7A);
 80049f0:	207a      	movs	r0, #122	; 0x7a
 80049f2:	f7fe fba9 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_REG(0xCB);
 80049f6:	20cb      	movs	r0, #203	; 0xcb
 80049f8:	f7fe fb82 	bl	8003100 <LCD_WR_REG>
		LCD_WR_DATAX(0x39);
 80049fc:	2039      	movs	r0, #57	; 0x39
 80049fe:	f7fe fba3 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2C);
 8004a02:	202c      	movs	r0, #44	; 0x2c
 8004a04:	f7fe fba0 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004a08:	2000      	movs	r0, #0
 8004a0a:	f7fe fb9d 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x34);
 8004a0e:	2034      	movs	r0, #52	; 0x34
 8004a10:	f7fe fb9a 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x02);
 8004a14:	2002      	movs	r0, #2
 8004a16:	f7fe fb97 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_REG(0xF7);
 8004a1a:	20f7      	movs	r0, #247	; 0xf7
 8004a1c:	f7fe fb70 	bl	8003100 <LCD_WR_REG>
		LCD_WR_DATAX(0x20);
 8004a20:	2020      	movs	r0, #32
 8004a22:	f7fe fb91 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_REG(0xEA);
 8004a26:	20ea      	movs	r0, #234	; 0xea
 8004a28:	f7fe fb6a 	bl	8003100 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8004a2c:	2000      	movs	r0, #0
 8004a2e:	f7fe fb8b 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004a32:	2000      	movs	r0, #0
 8004a34:	f7fe fb88 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_REG(0xC0);    //Power control 
 8004a38:	20c0      	movs	r0, #192	; 0xc0
 8004a3a:	f7fe fb61 	bl	8003100 <LCD_WR_REG>
		LCD_WR_DATAX(0x1B);   //VRH[5:0] 
 8004a3e:	201b      	movs	r0, #27
 8004a40:	f7fe fb82 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_REG(0xC1);    //Power control 
 8004a44:	20c1      	movs	r0, #193	; 0xc1
 8004a46:	f7fe fb5b 	bl	8003100 <LCD_WR_REG>
		LCD_WR_DATAX(0x01);   //SAP[2:0];BT[3:0] 
 8004a4a:	2001      	movs	r0, #1
 8004a4c:	f7fe fb7c 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_REG(0xC5);    //VCM control 
 8004a50:	20c5      	movs	r0, #197	; 0xc5
 8004a52:	f7fe fb55 	bl	8003100 <LCD_WR_REG>
		LCD_WR_DATAX(0x30); 	 //3F
 8004a56:	2030      	movs	r0, #48	; 0x30
 8004a58:	f7fe fb76 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x30); 	 //3C
 8004a5c:	2030      	movs	r0, #48	; 0x30
 8004a5e:	f7fe fb73 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_REG(0xC7);    //VCM control2 
 8004a62:	20c7      	movs	r0, #199	; 0xc7
 8004a64:	f7fe fb4c 	bl	8003100 <LCD_WR_REG>
		LCD_WR_DATAX(0XB7);
 8004a68:	20b7      	movs	r0, #183	; 0xb7
 8004a6a:	f7fe fb6d 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_REG(0x36);    // Memory Access Control 
 8004a6e:	2036      	movs	r0, #54	; 0x36
 8004a70:	f7fe fb46 	bl	8003100 <LCD_WR_REG>
		LCD_WR_DATAX(0x48);
 8004a74:	2048      	movs	r0, #72	; 0x48
 8004a76:	f7fe fb67 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_REG(0x3A);
 8004a7a:	203a      	movs	r0, #58	; 0x3a
 8004a7c:	f7fe fb40 	bl	8003100 <LCD_WR_REG>
		LCD_WR_DATAX(0x55);
 8004a80:	2055      	movs	r0, #85	; 0x55
 8004a82:	f7fe fb61 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_REG(0xB1);
 8004a86:	20b1      	movs	r0, #177	; 0xb1
 8004a88:	f7fe fb3a 	bl	8003100 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8004a8c:	2000      	movs	r0, #0
 8004a8e:	f7fe fb5b 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1A);
 8004a92:	201a      	movs	r0, #26
 8004a94:	f7fe fb58 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_REG(0xB6);    // Display Function Control 
 8004a98:	20b6      	movs	r0, #182	; 0xb6
 8004a9a:	f7fe fb31 	bl	8003100 <LCD_WR_REG>
		LCD_WR_DATAX(0x0A);
 8004a9e:	200a      	movs	r0, #10
 8004aa0:	f7fe fb52 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA2);
 8004aa4:	20a2      	movs	r0, #162	; 0xa2
 8004aa6:	f7fe fb4f 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_REG(0xF2);    // 3Gamma Function Disable 
 8004aaa:	20f2      	movs	r0, #242	; 0xf2
 8004aac:	f7fe fb28 	bl	8003100 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8004ab0:	2000      	movs	r0, #0
 8004ab2:	f7fe fb49 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_REG(0x26);    //Gamma curve selected 
 8004ab6:	2026      	movs	r0, #38	; 0x26
 8004ab8:	f7fe fb22 	bl	8003100 <LCD_WR_REG>
		LCD_WR_DATAX(0x01);
 8004abc:	2001      	movs	r0, #1
 8004abe:	f7fe fb43 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_REG(0xE0);    //Set Gamma 
 8004ac2:	20e0      	movs	r0, #224	; 0xe0
 8004ac4:	f7fe fb1c 	bl	8003100 <LCD_WR_REG>
		LCD_WR_DATAX(0x0F);
 8004ac8:	200f      	movs	r0, #15
 8004aca:	f7fe fb3d 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2A);
 8004ace:	202a      	movs	r0, #42	; 0x2a
 8004ad0:	f7fe fb3a 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x28);
 8004ad4:	2028      	movs	r0, #40	; 0x28
 8004ad6:	f7fe fb37 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x08);
 8004ada:	2008      	movs	r0, #8
 8004adc:	f7fe fb34 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0E);
 8004ae0:	200e      	movs	r0, #14
 8004ae2:	f7fe fb31 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x08);
 8004ae6:	2008      	movs	r0, #8
 8004ae8:	f7fe fb2e 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x54);
 8004aec:	2054      	movs	r0, #84	; 0x54
 8004aee:	f7fe fb2b 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0XA9);
 8004af2:	20a9      	movs	r0, #169	; 0xa9
 8004af4:	f7fe fb28 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x43);
 8004af8:	2043      	movs	r0, #67	; 0x43
 8004afa:	f7fe fb25 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0A);
 8004afe:	200a      	movs	r0, #10
 8004b00:	f7fe fb22 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0F);
 8004b04:	200f      	movs	r0, #15
 8004b06:	f7fe fb1f 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004b0a:	2000      	movs	r0, #0
 8004b0c:	f7fe fb1c 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004b10:	2000      	movs	r0, #0
 8004b12:	f7fe fb19 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004b16:	2000      	movs	r0, #0
 8004b18:	f7fe fb16 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004b1c:	2000      	movs	r0, #0
 8004b1e:	f7fe fb13 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_REG(0XE1);    //Set Gamma 
 8004b22:	20e1      	movs	r0, #225	; 0xe1
 8004b24:	f7fe faec 	bl	8003100 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8004b28:	2000      	movs	r0, #0
 8004b2a:	f7fe fb0d 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x15);
 8004b2e:	2015      	movs	r0, #21
 8004b30:	f7fe fb0a 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x17);
 8004b34:	2017      	movs	r0, #23
 8004b36:	f7fe fb07 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x07);
 8004b3a:	2007      	movs	r0, #7
 8004b3c:	f7fe fb04 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x11);
 8004b40:	2011      	movs	r0, #17
 8004b42:	f7fe fb01 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x06);
 8004b46:	2006      	movs	r0, #6
 8004b48:	f7fe fafe 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2B);
 8004b4c:	202b      	movs	r0, #43	; 0x2b
 8004b4e:	f7fe fafb 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x56);
 8004b52:	2056      	movs	r0, #86	; 0x56
 8004b54:	f7fe faf8 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 8004b58:	203c      	movs	r0, #60	; 0x3c
 8004b5a:	f7fe faf5 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x05);
 8004b5e:	2005      	movs	r0, #5
 8004b60:	f7fe faf2 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x10);
 8004b64:	2010      	movs	r0, #16
 8004b66:	f7fe faef 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0F);
 8004b6a:	200f      	movs	r0, #15
 8004b6c:	f7fe faec 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3F);
 8004b70:	203f      	movs	r0, #63	; 0x3f
 8004b72:	f7fe fae9 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3F);
 8004b76:	203f      	movs	r0, #63	; 0x3f
 8004b78:	f7fe fae6 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0F);
 8004b7c:	200f      	movs	r0, #15
 8004b7e:	f7fe fae3 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_REG(0x2B);
 8004b82:	202b      	movs	r0, #43	; 0x2b
 8004b84:	f7fe fabc 	bl	8003100 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8004b88:	2000      	movs	r0, #0
 8004b8a:	f7fe fadd 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004b8e:	2000      	movs	r0, #0
 8004b90:	f7fe fada 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x01);
 8004b94:	2001      	movs	r0, #1
 8004b96:	f7fe fad7 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3f);
 8004b9a:	203f      	movs	r0, #63	; 0x3f
 8004b9c:	f7fe fad4 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_REG(0x2A);
 8004ba0:	202a      	movs	r0, #42	; 0x2a
 8004ba2:	f7fe faad 	bl	8003100 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8004ba6:	2000      	movs	r0, #0
 8004ba8:	f7fe face 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004bac:	2000      	movs	r0, #0
 8004bae:	f7fe facb 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004bb2:	2000      	movs	r0, #0
 8004bb4:	f7fe fac8 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xef);
 8004bb8:	20ef      	movs	r0, #239	; 0xef
 8004bba:	f7fe fac5 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_REG(0x11); //Exit Sleep
 8004bbe:	2011      	movs	r0, #17
 8004bc0:	f7fe fa9e 	bl	8003100 <LCD_WR_REG>
		HAL_Delay(120);
 8004bc4:	2078      	movs	r0, #120	; 0x78
 8004bc6:	f7fb ff7f 	bl	8000ac8 <HAL_Delay>
		LCD_WR_REG(0x29); //display on	
 8004bca:	2029      	movs	r0, #41	; 0x29
 8004bcc:	f7fe fa98 	bl	8003100 <LCD_WR_REG>
 8004bd0:	f003 bcd8 	b.w	8008584 <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x6804) //6804初始化
 8004bd4:	4b58      	ldr	r3, [pc, #352]	; (8004d38 <LCD_Init+0x5e8>)
 8004bd6:	889b      	ldrh	r3, [r3, #4]
 8004bd8:	f646 0204 	movw	r2, #26628	; 0x6804
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	f040 80ad 	bne.w	8004d3c <LCD_Init+0x5ec>
			{
		LCD_WR_REG(0X11);
 8004be2:	2011      	movs	r0, #17
 8004be4:	f7fe fa8c 	bl	8003100 <LCD_WR_REG>
		HAL_Delay(20);
 8004be8:	2014      	movs	r0, #20
 8004bea:	f7fb ff6d 	bl	8000ac8 <HAL_Delay>
		LCD_WR_REG(0XD0); //VCI1  VCL  VGH  VGL DDVDH VREG1OUT power amplitude setting
 8004bee:	20d0      	movs	r0, #208	; 0xd0
 8004bf0:	f7fe fa86 	bl	8003100 <LCD_WR_REG>
		LCD_WR_DATAX(0X07);
 8004bf4:	2007      	movs	r0, #7
 8004bf6:	f7fe faa7 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X42);
 8004bfa:	2042      	movs	r0, #66	; 0x42
 8004bfc:	f7fe faa4 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X1D);
 8004c00:	201d      	movs	r0, #29
 8004c02:	f7fe faa1 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_REG(0XD1); //VCOMH VCOM_AC amplitude setting
 8004c06:	20d1      	movs	r0, #209	; 0xd1
 8004c08:	f7fe fa7a 	bl	8003100 <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 8004c0c:	2000      	movs	r0, #0
 8004c0e:	f7fe fa9b 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X1a);
 8004c12:	201a      	movs	r0, #26
 8004c14:	f7fe fa98 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X09);
 8004c18:	2009      	movs	r0, #9
 8004c1a:	f7fe fa95 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_REG(0XD2); //Operational Amplifier Circuit Constant Current Adjust , charge pump frequency setting
 8004c1e:	20d2      	movs	r0, #210	; 0xd2
 8004c20:	f7fe fa6e 	bl	8003100 <LCD_WR_REG>
		LCD_WR_DATAX(0X01);
 8004c24:	2001      	movs	r0, #1
 8004c26:	f7fe fa8f 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X22);
 8004c2a:	2022      	movs	r0, #34	; 0x22
 8004c2c:	f7fe fa8c 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_REG(0XC0); //REV SM GS
 8004c30:	20c0      	movs	r0, #192	; 0xc0
 8004c32:	f7fe fa65 	bl	8003100 <LCD_WR_REG>
		LCD_WR_DATAX(0X10);
 8004c36:	2010      	movs	r0, #16
 8004c38:	f7fe fa86 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X3B);
 8004c3c:	203b      	movs	r0, #59	; 0x3b
 8004c3e:	f7fe fa83 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 8004c42:	2000      	movs	r0, #0
 8004c44:	f7fe fa80 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X02);
 8004c48:	2002      	movs	r0, #2
 8004c4a:	f7fe fa7d 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X11);
 8004c4e:	2011      	movs	r0, #17
 8004c50:	f7fe fa7a 	bl	8003148 <LCD_WR_DATAX>

		LCD_WR_REG(0XC5); // Frame rate setting = 72HZ  when setting 0x03
 8004c54:	20c5      	movs	r0, #197	; 0xc5
 8004c56:	f7fe fa53 	bl	8003100 <LCD_WR_REG>
		LCD_WR_DATAX(0X03);
 8004c5a:	2003      	movs	r0, #3
 8004c5c:	f7fe fa74 	bl	8003148 <LCD_WR_DATAX>

		LCD_WR_REG(0XC8); //Gamma setting
 8004c60:	20c8      	movs	r0, #200	; 0xc8
 8004c62:	f7fe fa4d 	bl	8003100 <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 8004c66:	2000      	movs	r0, #0
 8004c68:	f7fe fa6e 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X25);
 8004c6c:	2025      	movs	r0, #37	; 0x25
 8004c6e:	f7fe fa6b 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X21);
 8004c72:	2021      	movs	r0, #33	; 0x21
 8004c74:	f7fe fa68 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X05);
 8004c78:	2005      	movs	r0, #5
 8004c7a:	f7fe fa65 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 8004c7e:	2000      	movs	r0, #0
 8004c80:	f7fe fa62 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X0a);
 8004c84:	200a      	movs	r0, #10
 8004c86:	f7fe fa5f 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X65);
 8004c8a:	2065      	movs	r0, #101	; 0x65
 8004c8c:	f7fe fa5c 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X25);
 8004c90:	2025      	movs	r0, #37	; 0x25
 8004c92:	f7fe fa59 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X77);
 8004c96:	2077      	movs	r0, #119	; 0x77
 8004c98:	f7fe fa56 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X50);
 8004c9c:	2050      	movs	r0, #80	; 0x50
 8004c9e:	f7fe fa53 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X0f);
 8004ca2:	200f      	movs	r0, #15
 8004ca4:	f7fe fa50 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 8004ca8:	2000      	movs	r0, #0
 8004caa:	f7fe fa4d 	bl	8003148 <LCD_WR_DATAX>

		LCD_WR_REG(0XF8);
 8004cae:	20f8      	movs	r0, #248	; 0xf8
 8004cb0:	f7fe fa26 	bl	8003100 <LCD_WR_REG>
		LCD_WR_DATAX(0X01);
 8004cb4:	2001      	movs	r0, #1
 8004cb6:	f7fe fa47 	bl	8003148 <LCD_WR_DATAX>

		LCD_WR_REG(0XFE);
 8004cba:	20fe      	movs	r0, #254	; 0xfe
 8004cbc:	f7fe fa20 	bl	8003100 <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 8004cc0:	2000      	movs	r0, #0
 8004cc2:	f7fe fa41 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X02);
 8004cc6:	2002      	movs	r0, #2
 8004cc8:	f7fe fa3e 	bl	8003148 <LCD_WR_DATAX>

		LCD_WR_REG(0X20); //Exit invert mode
 8004ccc:	2020      	movs	r0, #32
 8004cce:	f7fe fa17 	bl	8003100 <LCD_WR_REG>

		LCD_WR_REG(0X36);
 8004cd2:	2036      	movs	r0, #54	; 0x36
 8004cd4:	f7fe fa14 	bl	8003100 <LCD_WR_REG>
		LCD_WR_DATAX(0X08); //原来是a
 8004cd8:	2008      	movs	r0, #8
 8004cda:	f7fe fa35 	bl	8003148 <LCD_WR_DATAX>

		LCD_WR_REG(0X3A);
 8004cde:	203a      	movs	r0, #58	; 0x3a
 8004ce0:	f7fe fa0e 	bl	8003100 <LCD_WR_REG>
		LCD_WR_DATAX(0X55); //16位模式
 8004ce4:	2055      	movs	r0, #85	; 0x55
 8004ce6:	f7fe fa2f 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_REG(0X2B);
 8004cea:	202b      	movs	r0, #43	; 0x2b
 8004cec:	f7fe fa08 	bl	8003100 <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 8004cf0:	2000      	movs	r0, #0
 8004cf2:	f7fe fa29 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 8004cf6:	2000      	movs	r0, #0
 8004cf8:	f7fe fa26 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X01);
 8004cfc:	2001      	movs	r0, #1
 8004cfe:	f7fe fa23 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X3F);
 8004d02:	203f      	movs	r0, #63	; 0x3f
 8004d04:	f7fe fa20 	bl	8003148 <LCD_WR_DATAX>

		LCD_WR_REG(0X2A);
 8004d08:	202a      	movs	r0, #42	; 0x2a
 8004d0a:	f7fe f9f9 	bl	8003100 <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 8004d0e:	2000      	movs	r0, #0
 8004d10:	f7fe fa1a 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 8004d14:	2000      	movs	r0, #0
 8004d16:	f7fe fa17 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X01);
 8004d1a:	2001      	movs	r0, #1
 8004d1c:	f7fe fa14 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0XDF);
 8004d20:	20df      	movs	r0, #223	; 0xdf
 8004d22:	f7fe fa11 	bl	8003148 <LCD_WR_DATAX>
		HAL_Delay(120);
 8004d26:	2078      	movs	r0, #120	; 0x78
 8004d28:	f7fb fece 	bl	8000ac8 <HAL_Delay>
		LCD_WR_REG(0X29);
 8004d2c:	2029      	movs	r0, #41	; 0x29
 8004d2e:	f7fe f9e7 	bl	8003100 <LCD_WR_REG>
 8004d32:	f003 bc27 	b.w	8008584 <LCD_Init+0x3e34>
 8004d36:	bf00      	nop
 8004d38:	200000b4 	.word	0x200000b4
	} else if (lcddev.id == 0x5310) {
 8004d3c:	4b03      	ldr	r3, [pc, #12]	; (8004d4c <LCD_Init+0x5fc>)
 8004d3e:	889b      	ldrh	r3, [r3, #4]
 8004d40:	f245 3210 	movw	r2, #21264	; 0x5310
 8004d44:	4293      	cmp	r3, r2
 8004d46:	f040 877c 	bne.w	8005c42 <LCD_Init+0x14f2>
 8004d4a:	e001      	b.n	8004d50 <LCD_Init+0x600>
 8004d4c:	200000b4 	.word	0x200000b4
		LCD_WR_REG(0xED);
 8004d50:	20ed      	movs	r0, #237	; 0xed
 8004d52:	f7fe f9d5 	bl	8003100 <LCD_WR_REG>
		LCD_WR_DATAX(0x01);
 8004d56:	2001      	movs	r0, #1
 8004d58:	f7fe f9f6 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xFE);
 8004d5c:	20fe      	movs	r0, #254	; 0xfe
 8004d5e:	f7fe f9f3 	bl	8003148 <LCD_WR_DATAX>

		LCD_WR_REG(0xEE);
 8004d62:	20ee      	movs	r0, #238	; 0xee
 8004d64:	f7fe f9cc 	bl	8003100 <LCD_WR_REG>
		LCD_WR_DATAX(0xDE);
 8004d68:	20de      	movs	r0, #222	; 0xde
 8004d6a:	f7fe f9ed 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x21);
 8004d6e:	2021      	movs	r0, #33	; 0x21
 8004d70:	f7fe f9ea 	bl	8003148 <LCD_WR_DATAX>

		LCD_WR_REG(0xF1);
 8004d74:	20f1      	movs	r0, #241	; 0xf1
 8004d76:	f7fe f9c3 	bl	8003100 <LCD_WR_REG>
		LCD_WR_DATAX(0x01);
 8004d7a:	2001      	movs	r0, #1
 8004d7c:	f7fe f9e4 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_REG(0xDF);
 8004d80:	20df      	movs	r0, #223	; 0xdf
 8004d82:	f7fe f9bd 	bl	8003100 <LCD_WR_REG>
		LCD_WR_DATAX(0x10);
 8004d86:	2010      	movs	r0, #16
 8004d88:	f7fe f9de 	bl	8003148 <LCD_WR_DATAX>

		//VCOMvoltage//
		LCD_WR_REG(0xC4);
 8004d8c:	20c4      	movs	r0, #196	; 0xc4
 8004d8e:	f7fe f9b7 	bl	8003100 <LCD_WR_REG>
		LCD_WR_DATAX(0x8F);	  //5f
 8004d92:	208f      	movs	r0, #143	; 0x8f
 8004d94:	f7fe f9d8 	bl	8003148 <LCD_WR_DATAX>

		LCD_WR_REG(0xC6);
 8004d98:	20c6      	movs	r0, #198	; 0xc6
 8004d9a:	f7fe f9b1 	bl	8003100 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8004d9e:	2000      	movs	r0, #0
 8004da0:	f7fe f9d2 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE2);
 8004da4:	20e2      	movs	r0, #226	; 0xe2
 8004da6:	f7fe f9cf 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE2);
 8004daa:	20e2      	movs	r0, #226	; 0xe2
 8004dac:	f7fe f9cc 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE2);
 8004db0:	20e2      	movs	r0, #226	; 0xe2
 8004db2:	f7fe f9c9 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_REG(0xBF);
 8004db6:	20bf      	movs	r0, #191	; 0xbf
 8004db8:	f7fe f9a2 	bl	8003100 <LCD_WR_REG>
		LCD_WR_DATAX(0xAA);
 8004dbc:	20aa      	movs	r0, #170	; 0xaa
 8004dbe:	f7fe f9c3 	bl	8003148 <LCD_WR_DATAX>

		LCD_WR_REG(0xB0);
 8004dc2:	20b0      	movs	r0, #176	; 0xb0
 8004dc4:	f7fe f99c 	bl	8003100 <LCD_WR_REG>
		LCD_WR_DATAX(0x0D);
 8004dc8:	200d      	movs	r0, #13
 8004dca:	f7fe f9bd 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004dce:	2000      	movs	r0, #0
 8004dd0:	f7fe f9ba 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0D);
 8004dd4:	200d      	movs	r0, #13
 8004dd6:	f7fe f9b7 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004dda:	2000      	movs	r0, #0
 8004ddc:	f7fe f9b4 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x11);
 8004de0:	2011      	movs	r0, #17
 8004de2:	f7fe f9b1 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004de6:	2000      	movs	r0, #0
 8004de8:	f7fe f9ae 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x19);
 8004dec:	2019      	movs	r0, #25
 8004dee:	f7fe f9ab 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004df2:	2000      	movs	r0, #0
 8004df4:	f7fe f9a8 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x21);
 8004df8:	2021      	movs	r0, #33	; 0x21
 8004dfa:	f7fe f9a5 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004dfe:	2000      	movs	r0, #0
 8004e00:	f7fe f9a2 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2D);
 8004e04:	202d      	movs	r0, #45	; 0x2d
 8004e06:	f7fe f99f 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004e0a:	2000      	movs	r0, #0
 8004e0c:	f7fe f99c 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3D);
 8004e10:	203d      	movs	r0, #61	; 0x3d
 8004e12:	f7fe f999 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004e16:	2000      	movs	r0, #0
 8004e18:	f7fe f996 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5D);
 8004e1c:	205d      	movs	r0, #93	; 0x5d
 8004e1e:	f7fe f993 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004e22:	2000      	movs	r0, #0
 8004e24:	f7fe f990 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5D);
 8004e28:	205d      	movs	r0, #93	; 0x5d
 8004e2a:	f7fe f98d 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004e2e:	2000      	movs	r0, #0
 8004e30:	f7fe f98a 	bl	8003148 <LCD_WR_DATAX>

		LCD_WR_REG(0xB1);
 8004e34:	20b1      	movs	r0, #177	; 0xb1
 8004e36:	f7fe f963 	bl	8003100 <LCD_WR_REG>
		LCD_WR_DATAX(0x80);
 8004e3a:	2080      	movs	r0, #128	; 0x80
 8004e3c:	f7fe f984 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004e40:	2000      	movs	r0, #0
 8004e42:	f7fe f981 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x8B);
 8004e46:	208b      	movs	r0, #139	; 0x8b
 8004e48:	f7fe f97e 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004e4c:	2000      	movs	r0, #0
 8004e4e:	f7fe f97b 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x96);
 8004e52:	2096      	movs	r0, #150	; 0x96
 8004e54:	f7fe f978 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004e58:	2000      	movs	r0, #0
 8004e5a:	f7fe f975 	bl	8003148 <LCD_WR_DATAX>

		LCD_WR_REG(0xB2);
 8004e5e:	20b2      	movs	r0, #178	; 0xb2
 8004e60:	f7fe f94e 	bl	8003100 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8004e64:	2000      	movs	r0, #0
 8004e66:	f7fe f96f 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004e6a:	2000      	movs	r0, #0
 8004e6c:	f7fe f96c 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x02);
 8004e70:	2002      	movs	r0, #2
 8004e72:	f7fe f969 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004e76:	2000      	movs	r0, #0
 8004e78:	f7fe f966 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x03);
 8004e7c:	2003      	movs	r0, #3
 8004e7e:	f7fe f963 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004e82:	2000      	movs	r0, #0
 8004e84:	f7fe f960 	bl	8003148 <LCD_WR_DATAX>

		LCD_WR_REG(0xB3);
 8004e88:	20b3      	movs	r0, #179	; 0xb3
 8004e8a:	f7fe f939 	bl	8003100 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8004e8e:	2000      	movs	r0, #0
 8004e90:	f7fe f95a 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004e94:	2000      	movs	r0, #0
 8004e96:	f7fe f957 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004e9a:	2000      	movs	r0, #0
 8004e9c:	f7fe f954 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004ea0:	2000      	movs	r0, #0
 8004ea2:	f7fe f951 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004ea6:	2000      	movs	r0, #0
 8004ea8:	f7fe f94e 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004eac:	2000      	movs	r0, #0
 8004eae:	f7fe f94b 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004eb2:	2000      	movs	r0, #0
 8004eb4:	f7fe f948 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004eb8:	2000      	movs	r0, #0
 8004eba:	f7fe f945 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004ebe:	2000      	movs	r0, #0
 8004ec0:	f7fe f942 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004ec4:	2000      	movs	r0, #0
 8004ec6:	f7fe f93f 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004eca:	2000      	movs	r0, #0
 8004ecc:	f7fe f93c 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004ed0:	2000      	movs	r0, #0
 8004ed2:	f7fe f939 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004ed6:	2000      	movs	r0, #0
 8004ed8:	f7fe f936 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004edc:	2000      	movs	r0, #0
 8004ede:	f7fe f933 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004ee2:	2000      	movs	r0, #0
 8004ee4:	f7fe f930 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004ee8:	2000      	movs	r0, #0
 8004eea:	f7fe f92d 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004eee:	2000      	movs	r0, #0
 8004ef0:	f7fe f92a 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004ef4:	2000      	movs	r0, #0
 8004ef6:	f7fe f927 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004efa:	2000      	movs	r0, #0
 8004efc:	f7fe f924 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004f00:	2000      	movs	r0, #0
 8004f02:	f7fe f921 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004f06:	2000      	movs	r0, #0
 8004f08:	f7fe f91e 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004f0c:	2000      	movs	r0, #0
 8004f0e:	f7fe f91b 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004f12:	2000      	movs	r0, #0
 8004f14:	f7fe f918 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004f18:	2000      	movs	r0, #0
 8004f1a:	f7fe f915 	bl	8003148 <LCD_WR_DATAX>

		LCD_WR_REG(0xB4);
 8004f1e:	20b4      	movs	r0, #180	; 0xb4
 8004f20:	f7fe f8ee 	bl	8003100 <LCD_WR_REG>
		LCD_WR_DATAX(0x8B);
 8004f24:	208b      	movs	r0, #139	; 0x8b
 8004f26:	f7fe f90f 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004f2a:	2000      	movs	r0, #0
 8004f2c:	f7fe f90c 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x96);
 8004f30:	2096      	movs	r0, #150	; 0x96
 8004f32:	f7fe f909 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004f36:	2000      	movs	r0, #0
 8004f38:	f7fe f906 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA1);
 8004f3c:	20a1      	movs	r0, #161	; 0xa1
 8004f3e:	f7fe f903 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004f42:	2000      	movs	r0, #0
 8004f44:	f7fe f900 	bl	8003148 <LCD_WR_DATAX>

		LCD_WR_REG(0xB5);
 8004f48:	20b5      	movs	r0, #181	; 0xb5
 8004f4a:	f7fe f8d9 	bl	8003100 <LCD_WR_REG>
		LCD_WR_DATAX(0x02);
 8004f4e:	2002      	movs	r0, #2
 8004f50:	f7fe f8fa 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004f54:	2000      	movs	r0, #0
 8004f56:	f7fe f8f7 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x03);
 8004f5a:	2003      	movs	r0, #3
 8004f5c:	f7fe f8f4 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004f60:	2000      	movs	r0, #0
 8004f62:	f7fe f8f1 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x04);
 8004f66:	2004      	movs	r0, #4
 8004f68:	f7fe f8ee 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004f6c:	2000      	movs	r0, #0
 8004f6e:	f7fe f8eb 	bl	8003148 <LCD_WR_DATAX>

		LCD_WR_REG(0xB6);
 8004f72:	20b6      	movs	r0, #182	; 0xb6
 8004f74:	f7fe f8c4 	bl	8003100 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8004f78:	2000      	movs	r0, #0
 8004f7a:	f7fe f8e5 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004f7e:	2000      	movs	r0, #0
 8004f80:	f7fe f8e2 	bl	8003148 <LCD_WR_DATAX>

		LCD_WR_REG(0xB7);
 8004f84:	20b7      	movs	r0, #183	; 0xb7
 8004f86:	f7fe f8bb 	bl	8003100 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8004f8a:	2000      	movs	r0, #0
 8004f8c:	f7fe f8dc 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004f90:	2000      	movs	r0, #0
 8004f92:	f7fe f8d9 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3F);
 8004f96:	203f      	movs	r0, #63	; 0x3f
 8004f98:	f7fe f8d6 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004f9c:	2000      	movs	r0, #0
 8004f9e:	f7fe f8d3 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5E);
 8004fa2:	205e      	movs	r0, #94	; 0x5e
 8004fa4:	f7fe f8d0 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004fa8:	2000      	movs	r0, #0
 8004faa:	f7fe f8cd 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x64);
 8004fae:	2064      	movs	r0, #100	; 0x64
 8004fb0:	f7fe f8ca 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004fb4:	2000      	movs	r0, #0
 8004fb6:	f7fe f8c7 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x8C);
 8004fba:	208c      	movs	r0, #140	; 0x8c
 8004fbc:	f7fe f8c4 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004fc0:	2000      	movs	r0, #0
 8004fc2:	f7fe f8c1 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xAC);
 8004fc6:	20ac      	movs	r0, #172	; 0xac
 8004fc8:	f7fe f8be 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004fcc:	2000      	movs	r0, #0
 8004fce:	f7fe f8bb 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDC);
 8004fd2:	20dc      	movs	r0, #220	; 0xdc
 8004fd4:	f7fe f8b8 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004fd8:	2000      	movs	r0, #0
 8004fda:	f7fe f8b5 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x70);
 8004fde:	2070      	movs	r0, #112	; 0x70
 8004fe0:	f7fe f8b2 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004fe4:	2000      	movs	r0, #0
 8004fe6:	f7fe f8af 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x90);
 8004fea:	2090      	movs	r0, #144	; 0x90
 8004fec:	f7fe f8ac 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004ff0:	2000      	movs	r0, #0
 8004ff2:	f7fe f8a9 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xEB);
 8004ff6:	20eb      	movs	r0, #235	; 0xeb
 8004ff8:	f7fe f8a6 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004ffc:	2000      	movs	r0, #0
 8004ffe:	f7fe f8a3 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDC);
 8005002:	20dc      	movs	r0, #220	; 0xdc
 8005004:	f7fe f8a0 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005008:	2000      	movs	r0, #0
 800500a:	f7fe f89d 	bl	8003148 <LCD_WR_DATAX>

		LCD_WR_REG(0xB8);
 800500e:	20b8      	movs	r0, #184	; 0xb8
 8005010:	f7fe f876 	bl	8003100 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8005014:	2000      	movs	r0, #0
 8005016:	f7fe f897 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800501a:	2000      	movs	r0, #0
 800501c:	f7fe f894 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005020:	2000      	movs	r0, #0
 8005022:	f7fe f891 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005026:	2000      	movs	r0, #0
 8005028:	f7fe f88e 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800502c:	2000      	movs	r0, #0
 800502e:	f7fe f88b 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005032:	2000      	movs	r0, #0
 8005034:	f7fe f888 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005038:	2000      	movs	r0, #0
 800503a:	f7fe f885 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800503e:	2000      	movs	r0, #0
 8005040:	f7fe f882 	bl	8003148 <LCD_WR_DATAX>

		LCD_WR_REG(0xBA);
 8005044:	20ba      	movs	r0, #186	; 0xba
 8005046:	f7fe f85b 	bl	8003100 <LCD_WR_REG>
		LCD_WR_DATAX(0x24);
 800504a:	2024      	movs	r0, #36	; 0x24
 800504c:	f7fe f87c 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005050:	2000      	movs	r0, #0
 8005052:	f7fe f879 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005056:	2000      	movs	r0, #0
 8005058:	f7fe f876 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800505c:	2000      	movs	r0, #0
 800505e:	f7fe f873 	bl	8003148 <LCD_WR_DATAX>

		LCD_WR_REG(0xC1);
 8005062:	20c1      	movs	r0, #193	; 0xc1
 8005064:	f7fe f84c 	bl	8003100 <LCD_WR_REG>
		LCD_WR_DATAX(0x20);
 8005068:	2020      	movs	r0, #32
 800506a:	f7fe f86d 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800506e:	2000      	movs	r0, #0
 8005070:	f7fe f86a 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x54);
 8005074:	2054      	movs	r0, #84	; 0x54
 8005076:	f7fe f867 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800507a:	2000      	movs	r0, #0
 800507c:	f7fe f864 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xFF);
 8005080:	20ff      	movs	r0, #255	; 0xff
 8005082:	f7fe f861 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005086:	2000      	movs	r0, #0
 8005088:	f7fe f85e 	bl	8003148 <LCD_WR_DATAX>

		LCD_WR_REG(0xC2);
 800508c:	20c2      	movs	r0, #194	; 0xc2
 800508e:	f7fe f837 	bl	8003100 <LCD_WR_REG>
		LCD_WR_DATAX(0x0A);
 8005092:	200a      	movs	r0, #10
 8005094:	f7fe f858 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005098:	2000      	movs	r0, #0
 800509a:	f7fe f855 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x04);
 800509e:	2004      	movs	r0, #4
 80050a0:	f7fe f852 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80050a4:	2000      	movs	r0, #0
 80050a6:	f7fe f84f 	bl	8003148 <LCD_WR_DATAX>

		LCD_WR_REG(0xC3);
 80050aa:	20c3      	movs	r0, #195	; 0xc3
 80050ac:	f7fe f828 	bl	8003100 <LCD_WR_REG>
		LCD_WR_DATAX(0x3C);
 80050b0:	203c      	movs	r0, #60	; 0x3c
 80050b2:	f7fe f849 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80050b6:	2000      	movs	r0, #0
 80050b8:	f7fe f846 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3A);
 80050bc:	203a      	movs	r0, #58	; 0x3a
 80050be:	f7fe f843 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80050c2:	2000      	movs	r0, #0
 80050c4:	f7fe f840 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x39);
 80050c8:	2039      	movs	r0, #57	; 0x39
 80050ca:	f7fe f83d 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80050ce:	2000      	movs	r0, #0
 80050d0:	f7fe f83a 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x37);
 80050d4:	2037      	movs	r0, #55	; 0x37
 80050d6:	f7fe f837 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80050da:	2000      	movs	r0, #0
 80050dc:	f7fe f834 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 80050e0:	203c      	movs	r0, #60	; 0x3c
 80050e2:	f7fe f831 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80050e6:	2000      	movs	r0, #0
 80050e8:	f7fe f82e 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x36);
 80050ec:	2036      	movs	r0, #54	; 0x36
 80050ee:	f7fe f82b 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80050f2:	2000      	movs	r0, #0
 80050f4:	f7fe f828 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x32);
 80050f8:	2032      	movs	r0, #50	; 0x32
 80050fa:	f7fe f825 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80050fe:	2000      	movs	r0, #0
 8005100:	f7fe f822 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2F);
 8005104:	202f      	movs	r0, #47	; 0x2f
 8005106:	f7fe f81f 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800510a:	2000      	movs	r0, #0
 800510c:	f7fe f81c 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2C);
 8005110:	202c      	movs	r0, #44	; 0x2c
 8005112:	f7fe f819 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005116:	2000      	movs	r0, #0
 8005118:	f7fe f816 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x29);
 800511c:	2029      	movs	r0, #41	; 0x29
 800511e:	f7fe f813 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005122:	2000      	movs	r0, #0
 8005124:	f7fe f810 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x26);
 8005128:	2026      	movs	r0, #38	; 0x26
 800512a:	f7fe f80d 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800512e:	2000      	movs	r0, #0
 8005130:	f7fe f80a 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x24);
 8005134:	2024      	movs	r0, #36	; 0x24
 8005136:	f7fe f807 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800513a:	2000      	movs	r0, #0
 800513c:	f7fe f804 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x24);
 8005140:	2024      	movs	r0, #36	; 0x24
 8005142:	f7fe f801 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005146:	2000      	movs	r0, #0
 8005148:	f7fd fffe 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x23);
 800514c:	2023      	movs	r0, #35	; 0x23
 800514e:	f7fd fffb 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005152:	2000      	movs	r0, #0
 8005154:	f7fd fff8 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 8005158:	203c      	movs	r0, #60	; 0x3c
 800515a:	f7fd fff5 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800515e:	2000      	movs	r0, #0
 8005160:	f7fd fff2 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x36);
 8005164:	2036      	movs	r0, #54	; 0x36
 8005166:	f7fd ffef 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800516a:	2000      	movs	r0, #0
 800516c:	f7fd ffec 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x32);
 8005170:	2032      	movs	r0, #50	; 0x32
 8005172:	f7fd ffe9 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005176:	2000      	movs	r0, #0
 8005178:	f7fd ffe6 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2F);
 800517c:	202f      	movs	r0, #47	; 0x2f
 800517e:	f7fd ffe3 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005182:	2000      	movs	r0, #0
 8005184:	f7fd ffe0 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2C);
 8005188:	202c      	movs	r0, #44	; 0x2c
 800518a:	f7fd ffdd 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800518e:	2000      	movs	r0, #0
 8005190:	f7fd ffda 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x29);
 8005194:	2029      	movs	r0, #41	; 0x29
 8005196:	f7fd ffd7 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800519a:	2000      	movs	r0, #0
 800519c:	f7fd ffd4 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x26);
 80051a0:	2026      	movs	r0, #38	; 0x26
 80051a2:	f7fd ffd1 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80051a6:	2000      	movs	r0, #0
 80051a8:	f7fd ffce 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x24);
 80051ac:	2024      	movs	r0, #36	; 0x24
 80051ae:	f7fd ffcb 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80051b2:	2000      	movs	r0, #0
 80051b4:	f7fd ffc8 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x24);
 80051b8:	2024      	movs	r0, #36	; 0x24
 80051ba:	f7fd ffc5 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80051be:	2000      	movs	r0, #0
 80051c0:	f7fd ffc2 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x23);
 80051c4:	2023      	movs	r0, #35	; 0x23
 80051c6:	f7fd ffbf 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80051ca:	2000      	movs	r0, #0
 80051cc:	f7fd ffbc 	bl	8003148 <LCD_WR_DATAX>

		LCD_WR_REG(0xC4);
 80051d0:	20c4      	movs	r0, #196	; 0xc4
 80051d2:	f7fd ff95 	bl	8003100 <LCD_WR_REG>
		LCD_WR_DATAX(0x62);
 80051d6:	2062      	movs	r0, #98	; 0x62
 80051d8:	f7fd ffb6 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80051dc:	2000      	movs	r0, #0
 80051de:	f7fd ffb3 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x05);
 80051e2:	2005      	movs	r0, #5
 80051e4:	f7fd ffb0 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80051e8:	2000      	movs	r0, #0
 80051ea:	f7fd ffad 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x84);
 80051ee:	2084      	movs	r0, #132	; 0x84
 80051f0:	f7fd ffaa 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80051f4:	2000      	movs	r0, #0
 80051f6:	f7fd ffa7 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF0);
 80051fa:	20f0      	movs	r0, #240	; 0xf0
 80051fc:	f7fd ffa4 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005200:	2000      	movs	r0, #0
 8005202:	f7fd ffa1 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x18);
 8005206:	2018      	movs	r0, #24
 8005208:	f7fd ff9e 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800520c:	2000      	movs	r0, #0
 800520e:	f7fd ff9b 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA4);
 8005212:	20a4      	movs	r0, #164	; 0xa4
 8005214:	f7fd ff98 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005218:	2000      	movs	r0, #0
 800521a:	f7fd ff95 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x18);
 800521e:	2018      	movs	r0, #24
 8005220:	f7fd ff92 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005224:	2000      	movs	r0, #0
 8005226:	f7fd ff8f 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x50);
 800522a:	2050      	movs	r0, #80	; 0x50
 800522c:	f7fd ff8c 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005230:	2000      	movs	r0, #0
 8005232:	f7fd ff89 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0C);
 8005236:	200c      	movs	r0, #12
 8005238:	f7fd ff86 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800523c:	2000      	movs	r0, #0
 800523e:	f7fd ff83 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x17);
 8005242:	2017      	movs	r0, #23
 8005244:	f7fd ff80 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005248:	2000      	movs	r0, #0
 800524a:	f7fd ff7d 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x95);
 800524e:	2095      	movs	r0, #149	; 0x95
 8005250:	f7fd ff7a 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005254:	2000      	movs	r0, #0
 8005256:	f7fd ff77 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 800525a:	20f3      	movs	r0, #243	; 0xf3
 800525c:	f7fd ff74 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005260:	2000      	movs	r0, #0
 8005262:	f7fd ff71 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE6);
 8005266:	20e6      	movs	r0, #230	; 0xe6
 8005268:	f7fd ff6e 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800526c:	2000      	movs	r0, #0
 800526e:	f7fd ff6b 	bl	8003148 <LCD_WR_DATAX>

		LCD_WR_REG(0xC5);
 8005272:	20c5      	movs	r0, #197	; 0xc5
 8005274:	f7fd ff44 	bl	8003100 <LCD_WR_REG>
		LCD_WR_DATAX(0x32);
 8005278:	2032      	movs	r0, #50	; 0x32
 800527a:	f7fd ff65 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800527e:	2000      	movs	r0, #0
 8005280:	f7fd ff62 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 8005284:	2044      	movs	r0, #68	; 0x44
 8005286:	f7fd ff5f 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800528a:	2000      	movs	r0, #0
 800528c:	f7fd ff5c 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x65);
 8005290:	2065      	movs	r0, #101	; 0x65
 8005292:	f7fd ff59 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005296:	2000      	movs	r0, #0
 8005298:	f7fd ff56 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x76);
 800529c:	2076      	movs	r0, #118	; 0x76
 800529e:	f7fd ff53 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80052a2:	2000      	movs	r0, #0
 80052a4:	f7fd ff50 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 80052a8:	2088      	movs	r0, #136	; 0x88
 80052aa:	f7fd ff4d 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80052ae:	2000      	movs	r0, #0
 80052b0:	f7fd ff4a 	bl	8003148 <LCD_WR_DATAX>

		LCD_WR_REG(0xC6);
 80052b4:	20c6      	movs	r0, #198	; 0xc6
 80052b6:	f7fd ff23 	bl	8003100 <LCD_WR_REG>
		LCD_WR_DATAX(0x20);
 80052ba:	2020      	movs	r0, #32
 80052bc:	f7fd ff44 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80052c0:	2000      	movs	r0, #0
 80052c2:	f7fd ff41 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x17);
 80052c6:	2017      	movs	r0, #23
 80052c8:	f7fd ff3e 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80052cc:	2000      	movs	r0, #0
 80052ce:	f7fd ff3b 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x01);
 80052d2:	2001      	movs	r0, #1
 80052d4:	f7fd ff38 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80052d8:	2000      	movs	r0, #0
 80052da:	f7fd ff35 	bl	8003148 <LCD_WR_DATAX>

		LCD_WR_REG(0xC7);
 80052de:	20c7      	movs	r0, #199	; 0xc7
 80052e0:	f7fd ff0e 	bl	8003100 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80052e4:	2000      	movs	r0, #0
 80052e6:	f7fd ff2f 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80052ea:	2000      	movs	r0, #0
 80052ec:	f7fd ff2c 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80052f0:	2000      	movs	r0, #0
 80052f2:	f7fd ff29 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80052f6:	2000      	movs	r0, #0
 80052f8:	f7fd ff26 	bl	8003148 <LCD_WR_DATAX>

		LCD_WR_REG(0xC8);
 80052fc:	20c8      	movs	r0, #200	; 0xc8
 80052fe:	f7fd feff 	bl	8003100 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8005302:	2000      	movs	r0, #0
 8005304:	f7fd ff20 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005308:	2000      	movs	r0, #0
 800530a:	f7fd ff1d 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800530e:	2000      	movs	r0, #0
 8005310:	f7fd ff1a 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005314:	2000      	movs	r0, #0
 8005316:	f7fd ff17 	bl	8003148 <LCD_WR_DATAX>

		LCD_WR_REG(0xC9);
 800531a:	20c9      	movs	r0, #201	; 0xc9
 800531c:	f7fd fef0 	bl	8003100 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8005320:	2000      	movs	r0, #0
 8005322:	f7fd ff11 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005326:	2000      	movs	r0, #0
 8005328:	f7fd ff0e 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800532c:	2000      	movs	r0, #0
 800532e:	f7fd ff0b 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005332:	2000      	movs	r0, #0
 8005334:	f7fd ff08 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005338:	2000      	movs	r0, #0
 800533a:	f7fd ff05 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800533e:	2000      	movs	r0, #0
 8005340:	f7fd ff02 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005344:	2000      	movs	r0, #0
 8005346:	f7fd feff 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800534a:	2000      	movs	r0, #0
 800534c:	f7fd fefc 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005350:	2000      	movs	r0, #0
 8005352:	f7fd fef9 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005356:	2000      	movs	r0, #0
 8005358:	f7fd fef6 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800535c:	2000      	movs	r0, #0
 800535e:	f7fd fef3 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005362:	2000      	movs	r0, #0
 8005364:	f7fd fef0 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005368:	2000      	movs	r0, #0
 800536a:	f7fd feed 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800536e:	2000      	movs	r0, #0
 8005370:	f7fd feea 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005374:	2000      	movs	r0, #0
 8005376:	f7fd fee7 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800537a:	2000      	movs	r0, #0
 800537c:	f7fd fee4 	bl	8003148 <LCD_WR_DATAX>

		LCD_WR_REG(0xE0);
 8005380:	20e0      	movs	r0, #224	; 0xe0
 8005382:	f7fd febd 	bl	8003100 <LCD_WR_REG>
		LCD_WR_DATAX(0x16);
 8005386:	2016      	movs	r0, #22
 8005388:	f7fd fede 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800538c:	2000      	movs	r0, #0
 800538e:	f7fd fedb 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1C);
 8005392:	201c      	movs	r0, #28
 8005394:	f7fd fed8 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005398:	2000      	movs	r0, #0
 800539a:	f7fd fed5 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x21);
 800539e:	2021      	movs	r0, #33	; 0x21
 80053a0:	f7fd fed2 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80053a4:	2000      	movs	r0, #0
 80053a6:	f7fd fecf 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x36);
 80053aa:	2036      	movs	r0, #54	; 0x36
 80053ac:	f7fd fecc 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80053b0:	2000      	movs	r0, #0
 80053b2:	f7fd fec9 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x46);
 80053b6:	2046      	movs	r0, #70	; 0x46
 80053b8:	f7fd fec6 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80053bc:	2000      	movs	r0, #0
 80053be:	f7fd fec3 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x52);
 80053c2:	2052      	movs	r0, #82	; 0x52
 80053c4:	f7fd fec0 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80053c8:	2000      	movs	r0, #0
 80053ca:	f7fd febd 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x64);
 80053ce:	2064      	movs	r0, #100	; 0x64
 80053d0:	f7fd feba 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80053d4:	2000      	movs	r0, #0
 80053d6:	f7fd feb7 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x7A);
 80053da:	207a      	movs	r0, #122	; 0x7a
 80053dc:	f7fd feb4 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80053e0:	2000      	movs	r0, #0
 80053e2:	f7fd feb1 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x8B);
 80053e6:	208b      	movs	r0, #139	; 0x8b
 80053e8:	f7fd feae 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80053ec:	2000      	movs	r0, #0
 80053ee:	f7fd feab 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 80053f2:	2099      	movs	r0, #153	; 0x99
 80053f4:	f7fd fea8 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80053f8:	2000      	movs	r0, #0
 80053fa:	f7fd fea5 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA8);
 80053fe:	20a8      	movs	r0, #168	; 0xa8
 8005400:	f7fd fea2 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005404:	2000      	movs	r0, #0
 8005406:	f7fd fe9f 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB9);
 800540a:	20b9      	movs	r0, #185	; 0xb9
 800540c:	f7fd fe9c 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005410:	2000      	movs	r0, #0
 8005412:	f7fd fe99 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC4);
 8005416:	20c4      	movs	r0, #196	; 0xc4
 8005418:	f7fd fe96 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800541c:	2000      	movs	r0, #0
 800541e:	f7fd fe93 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xCA);
 8005422:	20ca      	movs	r0, #202	; 0xca
 8005424:	f7fd fe90 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005428:	2000      	movs	r0, #0
 800542a:	f7fd fe8d 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD2);
 800542e:	20d2      	movs	r0, #210	; 0xd2
 8005430:	f7fd fe8a 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005434:	2000      	movs	r0, #0
 8005436:	f7fd fe87 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD9);
 800543a:	20d9      	movs	r0, #217	; 0xd9
 800543c:	f7fd fe84 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005440:	2000      	movs	r0, #0
 8005442:	f7fd fe81 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE0);
 8005446:	20e0      	movs	r0, #224	; 0xe0
 8005448:	f7fd fe7e 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800544c:	2000      	movs	r0, #0
 800544e:	f7fd fe7b 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 8005452:	20f3      	movs	r0, #243	; 0xf3
 8005454:	f7fd fe78 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005458:	2000      	movs	r0, #0
 800545a:	f7fd fe75 	bl	8003148 <LCD_WR_DATAX>

		LCD_WR_REG(0xE1);
 800545e:	20e1      	movs	r0, #225	; 0xe1
 8005460:	f7fd fe4e 	bl	8003100 <LCD_WR_REG>
		LCD_WR_DATAX(0x16);
 8005464:	2016      	movs	r0, #22
 8005466:	f7fd fe6f 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800546a:	2000      	movs	r0, #0
 800546c:	f7fd fe6c 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1C);
 8005470:	201c      	movs	r0, #28
 8005472:	f7fd fe69 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005476:	2000      	movs	r0, #0
 8005478:	f7fd fe66 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x22);
 800547c:	2022      	movs	r0, #34	; 0x22
 800547e:	f7fd fe63 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005482:	2000      	movs	r0, #0
 8005484:	f7fd fe60 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x36);
 8005488:	2036      	movs	r0, #54	; 0x36
 800548a:	f7fd fe5d 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800548e:	2000      	movs	r0, #0
 8005490:	f7fd fe5a 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x45);
 8005494:	2045      	movs	r0, #69	; 0x45
 8005496:	f7fd fe57 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800549a:	2000      	movs	r0, #0
 800549c:	f7fd fe54 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x52);
 80054a0:	2052      	movs	r0, #82	; 0x52
 80054a2:	f7fd fe51 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80054a6:	2000      	movs	r0, #0
 80054a8:	f7fd fe4e 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x64);
 80054ac:	2064      	movs	r0, #100	; 0x64
 80054ae:	f7fd fe4b 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80054b2:	2000      	movs	r0, #0
 80054b4:	f7fd fe48 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x7A);
 80054b8:	207a      	movs	r0, #122	; 0x7a
 80054ba:	f7fd fe45 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80054be:	2000      	movs	r0, #0
 80054c0:	f7fd fe42 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x8B);
 80054c4:	208b      	movs	r0, #139	; 0x8b
 80054c6:	f7fd fe3f 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80054ca:	2000      	movs	r0, #0
 80054cc:	f7fd fe3c 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 80054d0:	2099      	movs	r0, #153	; 0x99
 80054d2:	f7fd fe39 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80054d6:	2000      	movs	r0, #0
 80054d8:	f7fd fe36 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA8);
 80054dc:	20a8      	movs	r0, #168	; 0xa8
 80054de:	f7fd fe33 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80054e2:	2000      	movs	r0, #0
 80054e4:	f7fd fe30 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB9);
 80054e8:	20b9      	movs	r0, #185	; 0xb9
 80054ea:	f7fd fe2d 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80054ee:	2000      	movs	r0, #0
 80054f0:	f7fd fe2a 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC4);
 80054f4:	20c4      	movs	r0, #196	; 0xc4
 80054f6:	f7fd fe27 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80054fa:	2000      	movs	r0, #0
 80054fc:	f7fd fe24 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xCA);
 8005500:	20ca      	movs	r0, #202	; 0xca
 8005502:	f7fd fe21 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005506:	2000      	movs	r0, #0
 8005508:	f7fd fe1e 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD2);
 800550c:	20d2      	movs	r0, #210	; 0xd2
 800550e:	f7fd fe1b 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005512:	2000      	movs	r0, #0
 8005514:	f7fd fe18 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD8);
 8005518:	20d8      	movs	r0, #216	; 0xd8
 800551a:	f7fd fe15 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800551e:	2000      	movs	r0, #0
 8005520:	f7fd fe12 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE0);
 8005524:	20e0      	movs	r0, #224	; 0xe0
 8005526:	f7fd fe0f 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800552a:	2000      	movs	r0, #0
 800552c:	f7fd fe0c 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 8005530:	20f3      	movs	r0, #243	; 0xf3
 8005532:	f7fd fe09 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005536:	2000      	movs	r0, #0
 8005538:	f7fd fe06 	bl	8003148 <LCD_WR_DATAX>

		LCD_WR_REG(0xE2);
 800553c:	20e2      	movs	r0, #226	; 0xe2
 800553e:	f7fd fddf 	bl	8003100 <LCD_WR_REG>
		LCD_WR_DATAX(0x05);
 8005542:	2005      	movs	r0, #5
 8005544:	f7fd fe00 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005548:	2000      	movs	r0, #0
 800554a:	f7fd fdfd 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0B);
 800554e:	200b      	movs	r0, #11
 8005550:	f7fd fdfa 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005554:	2000      	movs	r0, #0
 8005556:	f7fd fdf7 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1B);
 800555a:	201b      	movs	r0, #27
 800555c:	f7fd fdf4 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005560:	2000      	movs	r0, #0
 8005562:	f7fd fdf1 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x34);
 8005566:	2034      	movs	r0, #52	; 0x34
 8005568:	f7fd fdee 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800556c:	2000      	movs	r0, #0
 800556e:	f7fd fdeb 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 8005572:	2044      	movs	r0, #68	; 0x44
 8005574:	f7fd fde8 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005578:	2000      	movs	r0, #0
 800557a:	f7fd fde5 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x4F);
 800557e:	204f      	movs	r0, #79	; 0x4f
 8005580:	f7fd fde2 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005584:	2000      	movs	r0, #0
 8005586:	f7fd fddf 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x61);
 800558a:	2061      	movs	r0, #97	; 0x61
 800558c:	f7fd fddc 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005590:	2000      	movs	r0, #0
 8005592:	f7fd fdd9 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x79);
 8005596:	2079      	movs	r0, #121	; 0x79
 8005598:	f7fd fdd6 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800559c:	2000      	movs	r0, #0
 800559e:	f7fd fdd3 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 80055a2:	2088      	movs	r0, #136	; 0x88
 80055a4:	f7fd fdd0 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80055a8:	2000      	movs	r0, #0
 80055aa:	f7fd fdcd 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x97);
 80055ae:	2097      	movs	r0, #151	; 0x97
 80055b0:	f7fd fdca 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80055b4:	2000      	movs	r0, #0
 80055b6:	f7fd fdc7 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA6);
 80055ba:	20a6      	movs	r0, #166	; 0xa6
 80055bc:	f7fd fdc4 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80055c0:	2000      	movs	r0, #0
 80055c2:	f7fd fdc1 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB7);
 80055c6:	20b7      	movs	r0, #183	; 0xb7
 80055c8:	f7fd fdbe 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80055cc:	2000      	movs	r0, #0
 80055ce:	f7fd fdbb 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC2);
 80055d2:	20c2      	movs	r0, #194	; 0xc2
 80055d4:	f7fd fdb8 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80055d8:	2000      	movs	r0, #0
 80055da:	f7fd fdb5 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC7);
 80055de:	20c7      	movs	r0, #199	; 0xc7
 80055e0:	f7fd fdb2 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80055e4:	2000      	movs	r0, #0
 80055e6:	f7fd fdaf 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD1);
 80055ea:	20d1      	movs	r0, #209	; 0xd1
 80055ec:	f7fd fdac 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80055f0:	2000      	movs	r0, #0
 80055f2:	f7fd fda9 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD6);
 80055f6:	20d6      	movs	r0, #214	; 0xd6
 80055f8:	f7fd fda6 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80055fc:	2000      	movs	r0, #0
 80055fe:	f7fd fda3 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDD);
 8005602:	20dd      	movs	r0, #221	; 0xdd
 8005604:	f7fd fda0 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005608:	2000      	movs	r0, #0
 800560a:	f7fd fd9d 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 800560e:	20f3      	movs	r0, #243	; 0xf3
 8005610:	f7fd fd9a 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005614:	2000      	movs	r0, #0
 8005616:	f7fd fd97 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_REG(0xE3);
 800561a:	20e3      	movs	r0, #227	; 0xe3
 800561c:	f7fd fd70 	bl	8003100 <LCD_WR_REG>
		LCD_WR_DATAX(0x05);
 8005620:	2005      	movs	r0, #5
 8005622:	f7fd fd91 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005626:	2000      	movs	r0, #0
 8005628:	f7fd fd8e 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA);
 800562c:	200a      	movs	r0, #10
 800562e:	f7fd fd8b 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005632:	2000      	movs	r0, #0
 8005634:	f7fd fd88 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1C);
 8005638:	201c      	movs	r0, #28
 800563a:	f7fd fd85 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800563e:	2000      	movs	r0, #0
 8005640:	f7fd fd82 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x33);
 8005644:	2033      	movs	r0, #51	; 0x33
 8005646:	f7fd fd7f 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800564a:	2000      	movs	r0, #0
 800564c:	f7fd fd7c 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 8005650:	2044      	movs	r0, #68	; 0x44
 8005652:	f7fd fd79 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005656:	2000      	movs	r0, #0
 8005658:	f7fd fd76 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x50);
 800565c:	2050      	movs	r0, #80	; 0x50
 800565e:	f7fd fd73 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005662:	2000      	movs	r0, #0
 8005664:	f7fd fd70 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x62);
 8005668:	2062      	movs	r0, #98	; 0x62
 800566a:	f7fd fd6d 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800566e:	2000      	movs	r0, #0
 8005670:	f7fd fd6a 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x78);
 8005674:	2078      	movs	r0, #120	; 0x78
 8005676:	f7fd fd67 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800567a:	2000      	movs	r0, #0
 800567c:	f7fd fd64 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 8005680:	2088      	movs	r0, #136	; 0x88
 8005682:	f7fd fd61 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005686:	2000      	movs	r0, #0
 8005688:	f7fd fd5e 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x97);
 800568c:	2097      	movs	r0, #151	; 0x97
 800568e:	f7fd fd5b 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005692:	2000      	movs	r0, #0
 8005694:	f7fd fd58 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA6);
 8005698:	20a6      	movs	r0, #166	; 0xa6
 800569a:	f7fd fd55 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800569e:	2000      	movs	r0, #0
 80056a0:	f7fd fd52 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB7);
 80056a4:	20b7      	movs	r0, #183	; 0xb7
 80056a6:	f7fd fd4f 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80056aa:	2000      	movs	r0, #0
 80056ac:	f7fd fd4c 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC2);
 80056b0:	20c2      	movs	r0, #194	; 0xc2
 80056b2:	f7fd fd49 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80056b6:	2000      	movs	r0, #0
 80056b8:	f7fd fd46 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC7);
 80056bc:	20c7      	movs	r0, #199	; 0xc7
 80056be:	f7fd fd43 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80056c2:	2000      	movs	r0, #0
 80056c4:	f7fd fd40 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD1);
 80056c8:	20d1      	movs	r0, #209	; 0xd1
 80056ca:	f7fd fd3d 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80056ce:	2000      	movs	r0, #0
 80056d0:	f7fd fd3a 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD5);
 80056d4:	20d5      	movs	r0, #213	; 0xd5
 80056d6:	f7fd fd37 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80056da:	2000      	movs	r0, #0
 80056dc:	f7fd fd34 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDD);
 80056e0:	20dd      	movs	r0, #221	; 0xdd
 80056e2:	f7fd fd31 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80056e6:	2000      	movs	r0, #0
 80056e8:	f7fd fd2e 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 80056ec:	20f3      	movs	r0, #243	; 0xf3
 80056ee:	f7fd fd2b 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80056f2:	2000      	movs	r0, #0
 80056f4:	f7fd fd28 	bl	8003148 <LCD_WR_DATAX>

		LCD_WR_REG(0xE4);
 80056f8:	20e4      	movs	r0, #228	; 0xe4
 80056fa:	f7fd fd01 	bl	8003100 <LCD_WR_REG>
		LCD_WR_DATAX(0x01);
 80056fe:	2001      	movs	r0, #1
 8005700:	f7fd fd22 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005704:	2000      	movs	r0, #0
 8005706:	f7fd fd1f 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x01);
 800570a:	2001      	movs	r0, #1
 800570c:	f7fd fd1c 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005710:	2000      	movs	r0, #0
 8005712:	f7fd fd19 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x02);
 8005716:	2002      	movs	r0, #2
 8005718:	f7fd fd16 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800571c:	2000      	movs	r0, #0
 800571e:	f7fd fd13 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2A);
 8005722:	202a      	movs	r0, #42	; 0x2a
 8005724:	f7fd fd10 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005728:	2000      	movs	r0, #0
 800572a:	f7fd fd0d 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 800572e:	203c      	movs	r0, #60	; 0x3c
 8005730:	f7fd fd0a 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005734:	2000      	movs	r0, #0
 8005736:	f7fd fd07 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x4B);
 800573a:	204b      	movs	r0, #75	; 0x4b
 800573c:	f7fd fd04 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005740:	2000      	movs	r0, #0
 8005742:	f7fd fd01 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5D);
 8005746:	205d      	movs	r0, #93	; 0x5d
 8005748:	f7fd fcfe 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800574c:	2000      	movs	r0, #0
 800574e:	f7fd fcfb 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x74);
 8005752:	2074      	movs	r0, #116	; 0x74
 8005754:	f7fd fcf8 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005758:	2000      	movs	r0, #0
 800575a:	f7fd fcf5 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x84);
 800575e:	2084      	movs	r0, #132	; 0x84
 8005760:	f7fd fcf2 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005764:	2000      	movs	r0, #0
 8005766:	f7fd fcef 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x93);
 800576a:	2093      	movs	r0, #147	; 0x93
 800576c:	f7fd fcec 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005770:	2000      	movs	r0, #0
 8005772:	f7fd fce9 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA2);
 8005776:	20a2      	movs	r0, #162	; 0xa2
 8005778:	f7fd fce6 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800577c:	2000      	movs	r0, #0
 800577e:	f7fd fce3 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB3);
 8005782:	20b3      	movs	r0, #179	; 0xb3
 8005784:	f7fd fce0 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005788:	2000      	movs	r0, #0
 800578a:	f7fd fcdd 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBE);
 800578e:	20be      	movs	r0, #190	; 0xbe
 8005790:	f7fd fcda 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005794:	2000      	movs	r0, #0
 8005796:	f7fd fcd7 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC4);
 800579a:	20c4      	movs	r0, #196	; 0xc4
 800579c:	f7fd fcd4 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80057a0:	2000      	movs	r0, #0
 80057a2:	f7fd fcd1 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xCD);
 80057a6:	20cd      	movs	r0, #205	; 0xcd
 80057a8:	f7fd fcce 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80057ac:	2000      	movs	r0, #0
 80057ae:	f7fd fccb 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD3);
 80057b2:	20d3      	movs	r0, #211	; 0xd3
 80057b4:	f7fd fcc8 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80057b8:	2000      	movs	r0, #0
 80057ba:	f7fd fcc5 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDD);
 80057be:	20dd      	movs	r0, #221	; 0xdd
 80057c0:	f7fd fcc2 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80057c4:	2000      	movs	r0, #0
 80057c6:	f7fd fcbf 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 80057ca:	20f3      	movs	r0, #243	; 0xf3
 80057cc:	f7fd fcbc 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80057d0:	2000      	movs	r0, #0
 80057d2:	f7fd fcb9 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_REG(0xE5);
 80057d6:	20e5      	movs	r0, #229	; 0xe5
 80057d8:	f7fd fc92 	bl	8003100 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80057dc:	2000      	movs	r0, #0
 80057de:	f7fd fcb3 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80057e2:	2000      	movs	r0, #0
 80057e4:	f7fd fcb0 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80057e8:	2000      	movs	r0, #0
 80057ea:	f7fd fcad 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80057ee:	2000      	movs	r0, #0
 80057f0:	f7fd fcaa 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x02);
 80057f4:	2002      	movs	r0, #2
 80057f6:	f7fd fca7 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80057fa:	2000      	movs	r0, #0
 80057fc:	f7fd fca4 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x29);
 8005800:	2029      	movs	r0, #41	; 0x29
 8005802:	f7fd fca1 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005806:	2000      	movs	r0, #0
 8005808:	f7fd fc9e 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 800580c:	203c      	movs	r0, #60	; 0x3c
 800580e:	f7fd fc9b 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005812:	2000      	movs	r0, #0
 8005814:	f7fd fc98 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x4B);
 8005818:	204b      	movs	r0, #75	; 0x4b
 800581a:	f7fd fc95 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800581e:	2000      	movs	r0, #0
 8005820:	f7fd fc92 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5D);
 8005824:	205d      	movs	r0, #93	; 0x5d
 8005826:	f7fd fc8f 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800582a:	2000      	movs	r0, #0
 800582c:	f7fd fc8c 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x74);
 8005830:	2074      	movs	r0, #116	; 0x74
 8005832:	f7fd fc89 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005836:	2000      	movs	r0, #0
 8005838:	f7fd fc86 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x84);
 800583c:	2084      	movs	r0, #132	; 0x84
 800583e:	f7fd fc83 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005842:	2000      	movs	r0, #0
 8005844:	f7fd fc80 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x93);
 8005848:	2093      	movs	r0, #147	; 0x93
 800584a:	f7fd fc7d 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800584e:	2000      	movs	r0, #0
 8005850:	f7fd fc7a 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA2);
 8005854:	20a2      	movs	r0, #162	; 0xa2
 8005856:	f7fd fc77 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800585a:	2000      	movs	r0, #0
 800585c:	f7fd fc74 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB3);
 8005860:	20b3      	movs	r0, #179	; 0xb3
 8005862:	f7fd fc71 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005866:	2000      	movs	r0, #0
 8005868:	f7fd fc6e 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBE);
 800586c:	20be      	movs	r0, #190	; 0xbe
 800586e:	f7fd fc6b 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005872:	2000      	movs	r0, #0
 8005874:	f7fd fc68 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC4);
 8005878:	20c4      	movs	r0, #196	; 0xc4
 800587a:	f7fd fc65 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800587e:	2000      	movs	r0, #0
 8005880:	f7fd fc62 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xCD);
 8005884:	20cd      	movs	r0, #205	; 0xcd
 8005886:	f7fd fc5f 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800588a:	2000      	movs	r0, #0
 800588c:	f7fd fc5c 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD3);
 8005890:	20d3      	movs	r0, #211	; 0xd3
 8005892:	f7fd fc59 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005896:	2000      	movs	r0, #0
 8005898:	f7fd fc56 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDC);
 800589c:	20dc      	movs	r0, #220	; 0xdc
 800589e:	f7fd fc53 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80058a2:	2000      	movs	r0, #0
 80058a4:	f7fd fc50 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 80058a8:	20f3      	movs	r0, #243	; 0xf3
 80058aa:	f7fd fc4d 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80058ae:	2000      	movs	r0, #0
 80058b0:	f7fd fc4a 	bl	8003148 <LCD_WR_DATAX>

		LCD_WR_REG(0xE6);
 80058b4:	20e6      	movs	r0, #230	; 0xe6
 80058b6:	f7fd fc23 	bl	8003100 <LCD_WR_REG>
		LCD_WR_DATAX(0x11);
 80058ba:	2011      	movs	r0, #17
 80058bc:	f7fd fc44 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80058c0:	2000      	movs	r0, #0
 80058c2:	f7fd fc41 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x34);
 80058c6:	2034      	movs	r0, #52	; 0x34
 80058c8:	f7fd fc3e 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80058cc:	2000      	movs	r0, #0
 80058ce:	f7fd fc3b 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x56);
 80058d2:	2056      	movs	r0, #86	; 0x56
 80058d4:	f7fd fc38 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80058d8:	2000      	movs	r0, #0
 80058da:	f7fd fc35 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x76);
 80058de:	2076      	movs	r0, #118	; 0x76
 80058e0:	f7fd fc32 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80058e4:	2000      	movs	r0, #0
 80058e6:	f7fd fc2f 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x77);
 80058ea:	2077      	movs	r0, #119	; 0x77
 80058ec:	f7fd fc2c 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80058f0:	2000      	movs	r0, #0
 80058f2:	f7fd fc29 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 80058f6:	2066      	movs	r0, #102	; 0x66
 80058f8:	f7fd fc26 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80058fc:	2000      	movs	r0, #0
 80058fe:	f7fd fc23 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 8005902:	2088      	movs	r0, #136	; 0x88
 8005904:	f7fd fc20 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005908:	2000      	movs	r0, #0
 800590a:	f7fd fc1d 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 800590e:	2099      	movs	r0, #153	; 0x99
 8005910:	f7fd fc1a 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005914:	2000      	movs	r0, #0
 8005916:	f7fd fc17 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBB);
 800591a:	20bb      	movs	r0, #187	; 0xbb
 800591c:	f7fd fc14 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005920:	2000      	movs	r0, #0
 8005922:	f7fd fc11 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 8005926:	2099      	movs	r0, #153	; 0x99
 8005928:	f7fd fc0e 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800592c:	2000      	movs	r0, #0
 800592e:	f7fd fc0b 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 8005932:	2066      	movs	r0, #102	; 0x66
 8005934:	f7fd fc08 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005938:	2000      	movs	r0, #0
 800593a:	f7fd fc05 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 800593e:	2055      	movs	r0, #85	; 0x55
 8005940:	f7fd fc02 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005944:	2000      	movs	r0, #0
 8005946:	f7fd fbff 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 800594a:	2055      	movs	r0, #85	; 0x55
 800594c:	f7fd fbfc 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005950:	2000      	movs	r0, #0
 8005952:	f7fd fbf9 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x45);
 8005956:	2045      	movs	r0, #69	; 0x45
 8005958:	f7fd fbf6 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800595c:	2000      	movs	r0, #0
 800595e:	f7fd fbf3 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x43);
 8005962:	2043      	movs	r0, #67	; 0x43
 8005964:	f7fd fbf0 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005968:	2000      	movs	r0, #0
 800596a:	f7fd fbed 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 800596e:	2044      	movs	r0, #68	; 0x44
 8005970:	f7fd fbea 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005974:	2000      	movs	r0, #0
 8005976:	f7fd fbe7 	bl	8003148 <LCD_WR_DATAX>

		LCD_WR_REG(0xE7);
 800597a:	20e7      	movs	r0, #231	; 0xe7
 800597c:	f7fd fbc0 	bl	8003100 <LCD_WR_REG>
		LCD_WR_DATAX(0x32);
 8005980:	2032      	movs	r0, #50	; 0x32
 8005982:	f7fd fbe1 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005986:	2000      	movs	r0, #0
 8005988:	f7fd fbde 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 800598c:	2055      	movs	r0, #85	; 0x55
 800598e:	f7fd fbdb 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005992:	2000      	movs	r0, #0
 8005994:	f7fd fbd8 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x76);
 8005998:	2076      	movs	r0, #118	; 0x76
 800599a:	f7fd fbd5 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800599e:	2000      	movs	r0, #0
 80059a0:	f7fd fbd2 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 80059a4:	2066      	movs	r0, #102	; 0x66
 80059a6:	f7fd fbcf 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80059aa:	2000      	movs	r0, #0
 80059ac:	f7fd fbcc 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x67);
 80059b0:	2067      	movs	r0, #103	; 0x67
 80059b2:	f7fd fbc9 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80059b6:	2000      	movs	r0, #0
 80059b8:	f7fd fbc6 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x67);
 80059bc:	2067      	movs	r0, #103	; 0x67
 80059be:	f7fd fbc3 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80059c2:	2000      	movs	r0, #0
 80059c4:	f7fd fbc0 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x87);
 80059c8:	2087      	movs	r0, #135	; 0x87
 80059ca:	f7fd fbbd 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80059ce:	2000      	movs	r0, #0
 80059d0:	f7fd fbba 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 80059d4:	2099      	movs	r0, #153	; 0x99
 80059d6:	f7fd fbb7 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80059da:	2000      	movs	r0, #0
 80059dc:	f7fd fbb4 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBB);
 80059e0:	20bb      	movs	r0, #187	; 0xbb
 80059e2:	f7fd fbb1 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80059e6:	2000      	movs	r0, #0
 80059e8:	f7fd fbae 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 80059ec:	2099      	movs	r0, #153	; 0x99
 80059ee:	f7fd fbab 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80059f2:	2000      	movs	r0, #0
 80059f4:	f7fd fba8 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x77);
 80059f8:	2077      	movs	r0, #119	; 0x77
 80059fa:	f7fd fba5 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80059fe:	2000      	movs	r0, #0
 8005a00:	f7fd fba2 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 8005a04:	2044      	movs	r0, #68	; 0x44
 8005a06:	f7fd fb9f 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005a0a:	2000      	movs	r0, #0
 8005a0c:	f7fd fb9c 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x56);
 8005a10:	2056      	movs	r0, #86	; 0x56
 8005a12:	f7fd fb99 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005a16:	2000      	movs	r0, #0
 8005a18:	f7fd fb96 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x23);
 8005a1c:	2023      	movs	r0, #35	; 0x23
 8005a1e:	f7fd fb93 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005a22:	2000      	movs	r0, #0
 8005a24:	f7fd fb90 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x33);
 8005a28:	2033      	movs	r0, #51	; 0x33
 8005a2a:	f7fd fb8d 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005a2e:	2000      	movs	r0, #0
 8005a30:	f7fd fb8a 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x45);
 8005a34:	2045      	movs	r0, #69	; 0x45
 8005a36:	f7fd fb87 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005a3a:	2000      	movs	r0, #0
 8005a3c:	f7fd fb84 	bl	8003148 <LCD_WR_DATAX>

		LCD_WR_REG(0xE8);
 8005a40:	20e8      	movs	r0, #232	; 0xe8
 8005a42:	f7fd fb5d 	bl	8003100 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8005a46:	2000      	movs	r0, #0
 8005a48:	f7fd fb7e 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005a4c:	2000      	movs	r0, #0
 8005a4e:	f7fd fb7b 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 8005a52:	2099      	movs	r0, #153	; 0x99
 8005a54:	f7fd fb78 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005a58:	2000      	movs	r0, #0
 8005a5a:	f7fd fb75 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x87);
 8005a5e:	2087      	movs	r0, #135	; 0x87
 8005a60:	f7fd fb72 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005a64:	2000      	movs	r0, #0
 8005a66:	f7fd fb6f 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 8005a6a:	2088      	movs	r0, #136	; 0x88
 8005a6c:	f7fd fb6c 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005a70:	2000      	movs	r0, #0
 8005a72:	f7fd fb69 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x77);
 8005a76:	2077      	movs	r0, #119	; 0x77
 8005a78:	f7fd fb66 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005a7c:	2000      	movs	r0, #0
 8005a7e:	f7fd fb63 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 8005a82:	2066      	movs	r0, #102	; 0x66
 8005a84:	f7fd fb60 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005a88:	2000      	movs	r0, #0
 8005a8a:	f7fd fb5d 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 8005a8e:	2088      	movs	r0, #136	; 0x88
 8005a90:	f7fd fb5a 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005a94:	2000      	movs	r0, #0
 8005a96:	f7fd fb57 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xAA);
 8005a9a:	20aa      	movs	r0, #170	; 0xaa
 8005a9c:	f7fd fb54 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005aa0:	2000      	movs	r0, #0
 8005aa2:	f7fd fb51 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBB);
 8005aa6:	20bb      	movs	r0, #187	; 0xbb
 8005aa8:	f7fd fb4e 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005aac:	2000      	movs	r0, #0
 8005aae:	f7fd fb4b 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 8005ab2:	2099      	movs	r0, #153	; 0x99
 8005ab4:	f7fd fb48 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005ab8:	2000      	movs	r0, #0
 8005aba:	f7fd fb45 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 8005abe:	2066      	movs	r0, #102	; 0x66
 8005ac0:	f7fd fb42 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005ac4:	2000      	movs	r0, #0
 8005ac6:	f7fd fb3f 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 8005aca:	2055      	movs	r0, #85	; 0x55
 8005acc:	f7fd fb3c 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005ad0:	2000      	movs	r0, #0
 8005ad2:	f7fd fb39 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 8005ad6:	2055      	movs	r0, #85	; 0x55
 8005ad8:	f7fd fb36 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005adc:	2000      	movs	r0, #0
 8005ade:	f7fd fb33 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 8005ae2:	2044      	movs	r0, #68	; 0x44
 8005ae4:	f7fd fb30 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005ae8:	2000      	movs	r0, #0
 8005aea:	f7fd fb2d 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 8005aee:	2044      	movs	r0, #68	; 0x44
 8005af0:	f7fd fb2a 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005af4:	2000      	movs	r0, #0
 8005af6:	f7fd fb27 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 8005afa:	2055      	movs	r0, #85	; 0x55
 8005afc:	f7fd fb24 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005b00:	2000      	movs	r0, #0
 8005b02:	f7fd fb21 	bl	8003148 <LCD_WR_DATAX>

		LCD_WR_REG(0xE9);
 8005b06:	20e9      	movs	r0, #233	; 0xe9
 8005b08:	f7fd fafa 	bl	8003100 <LCD_WR_REG>
		LCD_WR_DATAX(0xAA);
 8005b0c:	20aa      	movs	r0, #170	; 0xaa
 8005b0e:	f7fd fb1b 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005b12:	2000      	movs	r0, #0
 8005b14:	f7fd fb18 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005b18:	2000      	movs	r0, #0
 8005b1a:	f7fd fb15 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005b1e:	2000      	movs	r0, #0
 8005b20:	f7fd fb12 	bl	8003148 <LCD_WR_DATAX>

		LCD_WR_REG(0x00);
 8005b24:	2000      	movs	r0, #0
 8005b26:	f7fd faeb 	bl	8003100 <LCD_WR_REG>
		LCD_WR_DATAX(0xAA);
 8005b2a:	20aa      	movs	r0, #170	; 0xaa
 8005b2c:	f7fd fb0c 	bl	8003148 <LCD_WR_DATAX>

		LCD_WR_REG(0xCF);
 8005b30:	20cf      	movs	r0, #207	; 0xcf
 8005b32:	f7fd fae5 	bl	8003100 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8005b36:	2000      	movs	r0, #0
 8005b38:	f7fd fb06 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005b3c:	2000      	movs	r0, #0
 8005b3e:	f7fd fb03 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005b42:	2000      	movs	r0, #0
 8005b44:	f7fd fb00 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005b48:	2000      	movs	r0, #0
 8005b4a:	f7fd fafd 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005b4e:	2000      	movs	r0, #0
 8005b50:	f7fd fafa 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005b54:	2000      	movs	r0, #0
 8005b56:	f7fd faf7 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005b5a:	2000      	movs	r0, #0
 8005b5c:	f7fd faf4 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005b60:	2000      	movs	r0, #0
 8005b62:	f7fd faf1 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005b66:	2000      	movs	r0, #0
 8005b68:	f7fd faee 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005b6c:	2000      	movs	r0, #0
 8005b6e:	f7fd faeb 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005b72:	2000      	movs	r0, #0
 8005b74:	f7fd fae8 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005b78:	2000      	movs	r0, #0
 8005b7a:	f7fd fae5 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005b7e:	2000      	movs	r0, #0
 8005b80:	f7fd fae2 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005b84:	2000      	movs	r0, #0
 8005b86:	f7fd fadf 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005b8a:	2000      	movs	r0, #0
 8005b8c:	f7fd fadc 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005b90:	2000      	movs	r0, #0
 8005b92:	f7fd fad9 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005b96:	2000      	movs	r0, #0
 8005b98:	f7fd fad6 	bl	8003148 <LCD_WR_DATAX>

		LCD_WR_REG(0xF0);
 8005b9c:	20f0      	movs	r0, #240	; 0xf0
 8005b9e:	f7fd faaf 	bl	8003100 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8005ba2:	2000      	movs	r0, #0
 8005ba4:	f7fd fad0 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x50);
 8005ba8:	2050      	movs	r0, #80	; 0x50
 8005baa:	f7fd facd 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005bae:	2000      	movs	r0, #0
 8005bb0:	f7fd faca 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005bb4:	2000      	movs	r0, #0
 8005bb6:	f7fd fac7 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005bba:	2000      	movs	r0, #0
 8005bbc:	f7fd fac4 	bl	8003148 <LCD_WR_DATAX>

		LCD_WR_REG(0xF3);
 8005bc0:	20f3      	movs	r0, #243	; 0xf3
 8005bc2:	f7fd fa9d 	bl	8003100 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8005bc6:	2000      	movs	r0, #0
 8005bc8:	f7fd fabe 	bl	8003148 <LCD_WR_DATAX>

		LCD_WR_REG(0xF9);
 8005bcc:	20f9      	movs	r0, #249	; 0xf9
 8005bce:	f7fd fa97 	bl	8003100 <LCD_WR_REG>
		LCD_WR_DATAX(0x06);
 8005bd2:	2006      	movs	r0, #6
 8005bd4:	f7fd fab8 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x10);
 8005bd8:	2010      	movs	r0, #16
 8005bda:	f7fd fab5 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x29);
 8005bde:	2029      	movs	r0, #41	; 0x29
 8005be0:	f7fd fab2 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005be4:	2000      	movs	r0, #0
 8005be6:	f7fd faaf 	bl	8003148 <LCD_WR_DATAX>

		LCD_WR_REG(0x3A);
 8005bea:	203a      	movs	r0, #58	; 0x3a
 8005bec:	f7fd fa88 	bl	8003100 <LCD_WR_REG>
		LCD_WR_DATAX(0x55);	//66
 8005bf0:	2055      	movs	r0, #85	; 0x55
 8005bf2:	f7fd faa9 	bl	8003148 <LCD_WR_DATAX>

		LCD_WR_REG(0x11);
 8005bf6:	2011      	movs	r0, #17
 8005bf8:	f7fd fa82 	bl	8003100 <LCD_WR_REG>
		HAL_Delay(100);
 8005bfc:	2064      	movs	r0, #100	; 0x64
 8005bfe:	f7fa ff63 	bl	8000ac8 <HAL_Delay>
		LCD_WR_REG(0x29);
 8005c02:	2029      	movs	r0, #41	; 0x29
 8005c04:	f7fd fa7c 	bl	8003100 <LCD_WR_REG>
		LCD_WR_REG(0x35);
 8005c08:	2035      	movs	r0, #53	; 0x35
 8005c0a:	f7fd fa79 	bl	8003100 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8005c0e:	2000      	movs	r0, #0
 8005c10:	f7fd fa9a 	bl	8003148 <LCD_WR_DATAX>

		LCD_WR_REG(0x51);
 8005c14:	2051      	movs	r0, #81	; 0x51
 8005c16:	f7fd fa73 	bl	8003100 <LCD_WR_REG>
		LCD_WR_DATAX(0xFF);
 8005c1a:	20ff      	movs	r0, #255	; 0xff
 8005c1c:	f7fd fa94 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_REG(0x53);
 8005c20:	2053      	movs	r0, #83	; 0x53
 8005c22:	f7fd fa6d 	bl	8003100 <LCD_WR_REG>
		LCD_WR_DATAX(0x2C);
 8005c26:	202c      	movs	r0, #44	; 0x2c
 8005c28:	f7fd fa8e 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_REG(0x55);
 8005c2c:	2055      	movs	r0, #85	; 0x55
 8005c2e:	f7fd fa67 	bl	8003100 <LCD_WR_REG>
		LCD_WR_DATAX(0x82);
 8005c32:	2082      	movs	r0, #130	; 0x82
 8005c34:	f7fd fa88 	bl	8003148 <LCD_WR_DATAX>
		LCD_WR_REG(0x2c);
 8005c38:	202c      	movs	r0, #44	; 0x2c
 8005c3a:	f7fd fa61 	bl	8003100 <LCD_WR_REG>
 8005c3e:	f002 bca1 	b.w	8008584 <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x5510) {
 8005c42:	4b04      	ldr	r3, [pc, #16]	; (8005c54 <LCD_Init+0x1504>)
 8005c44:	889b      	ldrh	r3, [r3, #4]
 8005c46:	f245 5210 	movw	r2, #21776	; 0x5510
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	f040 8782 	bne.w	8006b54 <LCD_Init+0x2404>
 8005c50:	e002      	b.n	8005c58 <LCD_Init+0x1508>
 8005c52:	bf00      	nop
 8005c54:	200000b4 	.word	0x200000b4
		LCD_WriteReg(0xF000, 0x55);
 8005c58:	2155      	movs	r1, #85	; 0x55
 8005c5a:	f44f 4070 	mov.w	r0, #61440	; 0xf000
 8005c5e:	f7fd fadb 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xF001, 0xAA);
 8005c62:	21aa      	movs	r1, #170	; 0xaa
 8005c64:	f24f 0001 	movw	r0, #61441	; 0xf001
 8005c68:	f7fd fad6 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xF002, 0x52);
 8005c6c:	2152      	movs	r1, #82	; 0x52
 8005c6e:	f24f 0002 	movw	r0, #61442	; 0xf002
 8005c72:	f7fd fad1 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xF003, 0x08);
 8005c76:	2108      	movs	r1, #8
 8005c78:	f24f 0003 	movw	r0, #61443	; 0xf003
 8005c7c:	f7fd facc 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xF004, 0x01);
 8005c80:	2101      	movs	r1, #1
 8005c82:	f24f 0004 	movw	r0, #61444	; 0xf004
 8005c86:	f7fd fac7 	bl	8003218 <LCD_WriteReg>
		//AVDD Set AVDD 5.2V
		LCD_WriteReg(0xB000, 0x0D);
 8005c8a:	210d      	movs	r1, #13
 8005c8c:	f44f 4030 	mov.w	r0, #45056	; 0xb000
 8005c90:	f7fd fac2 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xB001, 0x0D);
 8005c94:	210d      	movs	r1, #13
 8005c96:	f24b 0001 	movw	r0, #45057	; 0xb001
 8005c9a:	f7fd fabd 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xB002, 0x0D);
 8005c9e:	210d      	movs	r1, #13
 8005ca0:	f24b 0002 	movw	r0, #45058	; 0xb002
 8005ca4:	f7fd fab8 	bl	8003218 <LCD_WriteReg>
		//AVDD ratio
		LCD_WriteReg(0xB600, 0x34);
 8005ca8:	2134      	movs	r1, #52	; 0x34
 8005caa:	f44f 4036 	mov.w	r0, #46592	; 0xb600
 8005cae:	f7fd fab3 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xB601, 0x34);
 8005cb2:	2134      	movs	r1, #52	; 0x34
 8005cb4:	f24b 6001 	movw	r0, #46593	; 0xb601
 8005cb8:	f7fd faae 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xB602, 0x34);
 8005cbc:	2134      	movs	r1, #52	; 0x34
 8005cbe:	f24b 6002 	movw	r0, #46594	; 0xb602
 8005cc2:	f7fd faa9 	bl	8003218 <LCD_WriteReg>
		//AVEE -5.2V
		LCD_WriteReg(0xB100, 0x0D);
 8005cc6:	210d      	movs	r1, #13
 8005cc8:	f44f 4031 	mov.w	r0, #45312	; 0xb100
 8005ccc:	f7fd faa4 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xB101, 0x0D);
 8005cd0:	210d      	movs	r1, #13
 8005cd2:	f24b 1001 	movw	r0, #45313	; 0xb101
 8005cd6:	f7fd fa9f 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xB102, 0x0D);
 8005cda:	210d      	movs	r1, #13
 8005cdc:	f24b 1002 	movw	r0, #45314	; 0xb102
 8005ce0:	f7fd fa9a 	bl	8003218 <LCD_WriteReg>
		//AVEE ratio
		LCD_WriteReg(0xB700, 0x34);
 8005ce4:	2134      	movs	r1, #52	; 0x34
 8005ce6:	f44f 4037 	mov.w	r0, #46848	; 0xb700
 8005cea:	f7fd fa95 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xB701, 0x34);
 8005cee:	2134      	movs	r1, #52	; 0x34
 8005cf0:	f24b 7001 	movw	r0, #46849	; 0xb701
 8005cf4:	f7fd fa90 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xB702, 0x34);
 8005cf8:	2134      	movs	r1, #52	; 0x34
 8005cfa:	f24b 7002 	movw	r0, #46850	; 0xb702
 8005cfe:	f7fd fa8b 	bl	8003218 <LCD_WriteReg>
		//VCL -2.5V
		LCD_WriteReg(0xB200, 0x00);
 8005d02:	2100      	movs	r1, #0
 8005d04:	f44f 4032 	mov.w	r0, #45568	; 0xb200
 8005d08:	f7fd fa86 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xB201, 0x00);
 8005d0c:	2100      	movs	r1, #0
 8005d0e:	f24b 2001 	movw	r0, #45569	; 0xb201
 8005d12:	f7fd fa81 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xB202, 0x00);
 8005d16:	2100      	movs	r1, #0
 8005d18:	f24b 2002 	movw	r0, #45570	; 0xb202
 8005d1c:	f7fd fa7c 	bl	8003218 <LCD_WriteReg>
		//VCL ratio
		LCD_WriteReg(0xB800, 0x24);
 8005d20:	2124      	movs	r1, #36	; 0x24
 8005d22:	f44f 4038 	mov.w	r0, #47104	; 0xb800
 8005d26:	f7fd fa77 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xB801, 0x24);
 8005d2a:	2124      	movs	r1, #36	; 0x24
 8005d2c:	f64b 0001 	movw	r0, #47105	; 0xb801
 8005d30:	f7fd fa72 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xB802, 0x24);
 8005d34:	2124      	movs	r1, #36	; 0x24
 8005d36:	f64b 0002 	movw	r0, #47106	; 0xb802
 8005d3a:	f7fd fa6d 	bl	8003218 <LCD_WriteReg>
		//VGH 15V (Free pump)
		LCD_WriteReg(0xBF00, 0x01);
 8005d3e:	2101      	movs	r1, #1
 8005d40:	f44f 403f 	mov.w	r0, #48896	; 0xbf00
 8005d44:	f7fd fa68 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xB300, 0x0F);
 8005d48:	210f      	movs	r1, #15
 8005d4a:	f44f 4033 	mov.w	r0, #45824	; 0xb300
 8005d4e:	f7fd fa63 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xB301, 0x0F);
 8005d52:	210f      	movs	r1, #15
 8005d54:	f24b 3001 	movw	r0, #45825	; 0xb301
 8005d58:	f7fd fa5e 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xB302, 0x0F);
 8005d5c:	210f      	movs	r1, #15
 8005d5e:	f24b 3002 	movw	r0, #45826	; 0xb302
 8005d62:	f7fd fa59 	bl	8003218 <LCD_WriteReg>
		//VGH ratio
		LCD_WriteReg(0xB900, 0x34);
 8005d66:	2134      	movs	r1, #52	; 0x34
 8005d68:	f44f 4039 	mov.w	r0, #47360	; 0xb900
 8005d6c:	f7fd fa54 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xB901, 0x34);
 8005d70:	2134      	movs	r1, #52	; 0x34
 8005d72:	f64b 1001 	movw	r0, #47361	; 0xb901
 8005d76:	f7fd fa4f 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xB902, 0x34);
 8005d7a:	2134      	movs	r1, #52	; 0x34
 8005d7c:	f64b 1002 	movw	r0, #47362	; 0xb902
 8005d80:	f7fd fa4a 	bl	8003218 <LCD_WriteReg>
		//VGL_REG -10V
		LCD_WriteReg(0xB500, 0x08);
 8005d84:	2108      	movs	r1, #8
 8005d86:	f44f 4035 	mov.w	r0, #46336	; 0xb500
 8005d8a:	f7fd fa45 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xB501, 0x08);
 8005d8e:	2108      	movs	r1, #8
 8005d90:	f24b 5001 	movw	r0, #46337	; 0xb501
 8005d94:	f7fd fa40 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xB502, 0x08);
 8005d98:	2108      	movs	r1, #8
 8005d9a:	f24b 5002 	movw	r0, #46338	; 0xb502
 8005d9e:	f7fd fa3b 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xC200, 0x03);
 8005da2:	2103      	movs	r1, #3
 8005da4:	f44f 4042 	mov.w	r0, #49664	; 0xc200
 8005da8:	f7fd fa36 	bl	8003218 <LCD_WriteReg>
		//VGLX ratio
		LCD_WriteReg(0xBA00, 0x24);
 8005dac:	2124      	movs	r1, #36	; 0x24
 8005dae:	f44f 403a 	mov.w	r0, #47616	; 0xba00
 8005db2:	f7fd fa31 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xBA01, 0x24);
 8005db6:	2124      	movs	r1, #36	; 0x24
 8005db8:	f64b 2001 	movw	r0, #47617	; 0xba01
 8005dbc:	f7fd fa2c 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xBA02, 0x24);
 8005dc0:	2124      	movs	r1, #36	; 0x24
 8005dc2:	f64b 2002 	movw	r0, #47618	; 0xba02
 8005dc6:	f7fd fa27 	bl	8003218 <LCD_WriteReg>
		//VGMP/VGSP 4.5V/0V
		LCD_WriteReg(0xBC00, 0x00);
 8005dca:	2100      	movs	r1, #0
 8005dcc:	f44f 403c 	mov.w	r0, #48128	; 0xbc00
 8005dd0:	f7fd fa22 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xBC01, 0x78);
 8005dd4:	2178      	movs	r1, #120	; 0x78
 8005dd6:	f64b 4001 	movw	r0, #48129	; 0xbc01
 8005dda:	f7fd fa1d 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xBC02, 0x00);
 8005dde:	2100      	movs	r1, #0
 8005de0:	f64b 4002 	movw	r0, #48130	; 0xbc02
 8005de4:	f7fd fa18 	bl	8003218 <LCD_WriteReg>
		//VGMN/VGSN -4.5V/0V
		LCD_WriteReg(0xBD00, 0x00);
 8005de8:	2100      	movs	r1, #0
 8005dea:	f44f 403d 	mov.w	r0, #48384	; 0xbd00
 8005dee:	f7fd fa13 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xBD01, 0x78);
 8005df2:	2178      	movs	r1, #120	; 0x78
 8005df4:	f64b 5001 	movw	r0, #48385	; 0xbd01
 8005df8:	f7fd fa0e 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xBD02, 0x00);
 8005dfc:	2100      	movs	r1, #0
 8005dfe:	f64b 5002 	movw	r0, #48386	; 0xbd02
 8005e02:	f7fd fa09 	bl	8003218 <LCD_WriteReg>
		//VCOM
		LCD_WriteReg(0xBE00, 0x00);
 8005e06:	2100      	movs	r1, #0
 8005e08:	f44f 403e 	mov.w	r0, #48640	; 0xbe00
 8005e0c:	f7fd fa04 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xBE01, 0x64);
 8005e10:	2164      	movs	r1, #100	; 0x64
 8005e12:	f64b 6001 	movw	r0, #48641	; 0xbe01
 8005e16:	f7fd f9ff 	bl	8003218 <LCD_WriteReg>
		//Gamma Setting
		LCD_WriteReg(0xD100, 0x00);
 8005e1a:	2100      	movs	r1, #0
 8005e1c:	f44f 4051 	mov.w	r0, #53504	; 0xd100
 8005e20:	f7fd f9fa 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD101, 0x33);
 8005e24:	2133      	movs	r1, #51	; 0x33
 8005e26:	f24d 1001 	movw	r0, #53505	; 0xd101
 8005e2a:	f7fd f9f5 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD102, 0x00);
 8005e2e:	2100      	movs	r1, #0
 8005e30:	f24d 1002 	movw	r0, #53506	; 0xd102
 8005e34:	f7fd f9f0 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD103, 0x34);
 8005e38:	2134      	movs	r1, #52	; 0x34
 8005e3a:	f24d 1003 	movw	r0, #53507	; 0xd103
 8005e3e:	f7fd f9eb 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD104, 0x00);
 8005e42:	2100      	movs	r1, #0
 8005e44:	f24d 1004 	movw	r0, #53508	; 0xd104
 8005e48:	f7fd f9e6 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD105, 0x3A);
 8005e4c:	213a      	movs	r1, #58	; 0x3a
 8005e4e:	f24d 1005 	movw	r0, #53509	; 0xd105
 8005e52:	f7fd f9e1 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD106, 0x00);
 8005e56:	2100      	movs	r1, #0
 8005e58:	f24d 1006 	movw	r0, #53510	; 0xd106
 8005e5c:	f7fd f9dc 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD107, 0x4A);
 8005e60:	214a      	movs	r1, #74	; 0x4a
 8005e62:	f24d 1007 	movw	r0, #53511	; 0xd107
 8005e66:	f7fd f9d7 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD108, 0x00);
 8005e6a:	2100      	movs	r1, #0
 8005e6c:	f24d 1008 	movw	r0, #53512	; 0xd108
 8005e70:	f7fd f9d2 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD109, 0x5C);
 8005e74:	215c      	movs	r1, #92	; 0x5c
 8005e76:	f24d 1009 	movw	r0, #53513	; 0xd109
 8005e7a:	f7fd f9cd 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD10A, 0x00);
 8005e7e:	2100      	movs	r1, #0
 8005e80:	f24d 100a 	movw	r0, #53514	; 0xd10a
 8005e84:	f7fd f9c8 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD10B, 0x81);
 8005e88:	2181      	movs	r1, #129	; 0x81
 8005e8a:	f24d 100b 	movw	r0, #53515	; 0xd10b
 8005e8e:	f7fd f9c3 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD10C, 0x00);
 8005e92:	2100      	movs	r1, #0
 8005e94:	f24d 100c 	movw	r0, #53516	; 0xd10c
 8005e98:	f7fd f9be 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD10D, 0xA6);
 8005e9c:	21a6      	movs	r1, #166	; 0xa6
 8005e9e:	f24d 100d 	movw	r0, #53517	; 0xd10d
 8005ea2:	f7fd f9b9 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD10E, 0x00);
 8005ea6:	2100      	movs	r1, #0
 8005ea8:	f24d 100e 	movw	r0, #53518	; 0xd10e
 8005eac:	f7fd f9b4 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD10F, 0xE5);
 8005eb0:	21e5      	movs	r1, #229	; 0xe5
 8005eb2:	f24d 100f 	movw	r0, #53519	; 0xd10f
 8005eb6:	f7fd f9af 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD110, 0x01);
 8005eba:	2101      	movs	r1, #1
 8005ebc:	f24d 1010 	movw	r0, #53520	; 0xd110
 8005ec0:	f7fd f9aa 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD111, 0x13);
 8005ec4:	2113      	movs	r1, #19
 8005ec6:	f24d 1011 	movw	r0, #53521	; 0xd111
 8005eca:	f7fd f9a5 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD112, 0x01);
 8005ece:	2101      	movs	r1, #1
 8005ed0:	f24d 1012 	movw	r0, #53522	; 0xd112
 8005ed4:	f7fd f9a0 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD113, 0x54);
 8005ed8:	2154      	movs	r1, #84	; 0x54
 8005eda:	f24d 1013 	movw	r0, #53523	; 0xd113
 8005ede:	f7fd f99b 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD114, 0x01);
 8005ee2:	2101      	movs	r1, #1
 8005ee4:	f24d 1014 	movw	r0, #53524	; 0xd114
 8005ee8:	f7fd f996 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD115, 0x82);
 8005eec:	2182      	movs	r1, #130	; 0x82
 8005eee:	f24d 1015 	movw	r0, #53525	; 0xd115
 8005ef2:	f7fd f991 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD116, 0x01);
 8005ef6:	2101      	movs	r1, #1
 8005ef8:	f24d 1016 	movw	r0, #53526	; 0xd116
 8005efc:	f7fd f98c 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD117, 0xCA);
 8005f00:	21ca      	movs	r1, #202	; 0xca
 8005f02:	f24d 1017 	movw	r0, #53527	; 0xd117
 8005f06:	f7fd f987 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD118, 0x02);
 8005f0a:	2102      	movs	r1, #2
 8005f0c:	f24d 1018 	movw	r0, #53528	; 0xd118
 8005f10:	f7fd f982 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD119, 0x00);
 8005f14:	2100      	movs	r1, #0
 8005f16:	f24d 1019 	movw	r0, #53529	; 0xd119
 8005f1a:	f7fd f97d 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD11A, 0x02);
 8005f1e:	2102      	movs	r1, #2
 8005f20:	f24d 101a 	movw	r0, #53530	; 0xd11a
 8005f24:	f7fd f978 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD11B, 0x01);
 8005f28:	2101      	movs	r1, #1
 8005f2a:	f24d 101b 	movw	r0, #53531	; 0xd11b
 8005f2e:	f7fd f973 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD11C, 0x02);
 8005f32:	2102      	movs	r1, #2
 8005f34:	f24d 101c 	movw	r0, #53532	; 0xd11c
 8005f38:	f7fd f96e 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD11D, 0x34);
 8005f3c:	2134      	movs	r1, #52	; 0x34
 8005f3e:	f24d 101d 	movw	r0, #53533	; 0xd11d
 8005f42:	f7fd f969 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD11E, 0x02);
 8005f46:	2102      	movs	r1, #2
 8005f48:	f24d 101e 	movw	r0, #53534	; 0xd11e
 8005f4c:	f7fd f964 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD11F, 0x67);
 8005f50:	2167      	movs	r1, #103	; 0x67
 8005f52:	f24d 101f 	movw	r0, #53535	; 0xd11f
 8005f56:	f7fd f95f 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD120, 0x02);
 8005f5a:	2102      	movs	r1, #2
 8005f5c:	f24d 1020 	movw	r0, #53536	; 0xd120
 8005f60:	f7fd f95a 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD121, 0x84);
 8005f64:	2184      	movs	r1, #132	; 0x84
 8005f66:	f24d 1021 	movw	r0, #53537	; 0xd121
 8005f6a:	f7fd f955 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD122, 0x02);
 8005f6e:	2102      	movs	r1, #2
 8005f70:	f24d 1022 	movw	r0, #53538	; 0xd122
 8005f74:	f7fd f950 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD123, 0xA4);
 8005f78:	21a4      	movs	r1, #164	; 0xa4
 8005f7a:	f24d 1023 	movw	r0, #53539	; 0xd123
 8005f7e:	f7fd f94b 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD124, 0x02);
 8005f82:	2102      	movs	r1, #2
 8005f84:	f24d 1024 	movw	r0, #53540	; 0xd124
 8005f88:	f7fd f946 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD125, 0xB7);
 8005f8c:	21b7      	movs	r1, #183	; 0xb7
 8005f8e:	f24d 1025 	movw	r0, #53541	; 0xd125
 8005f92:	f7fd f941 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD126, 0x02);
 8005f96:	2102      	movs	r1, #2
 8005f98:	f24d 1026 	movw	r0, #53542	; 0xd126
 8005f9c:	f7fd f93c 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD127, 0xCF);
 8005fa0:	21cf      	movs	r1, #207	; 0xcf
 8005fa2:	f24d 1027 	movw	r0, #53543	; 0xd127
 8005fa6:	f7fd f937 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD128, 0x02);
 8005faa:	2102      	movs	r1, #2
 8005fac:	f24d 1028 	movw	r0, #53544	; 0xd128
 8005fb0:	f7fd f932 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD129, 0xDE);
 8005fb4:	21de      	movs	r1, #222	; 0xde
 8005fb6:	f24d 1029 	movw	r0, #53545	; 0xd129
 8005fba:	f7fd f92d 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD12A, 0x02);
 8005fbe:	2102      	movs	r1, #2
 8005fc0:	f24d 102a 	movw	r0, #53546	; 0xd12a
 8005fc4:	f7fd f928 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD12B, 0xF2);
 8005fc8:	21f2      	movs	r1, #242	; 0xf2
 8005fca:	f24d 102b 	movw	r0, #53547	; 0xd12b
 8005fce:	f7fd f923 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD12C, 0x02);
 8005fd2:	2102      	movs	r1, #2
 8005fd4:	f24d 102c 	movw	r0, #53548	; 0xd12c
 8005fd8:	f7fd f91e 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD12D, 0xFE);
 8005fdc:	21fe      	movs	r1, #254	; 0xfe
 8005fde:	f24d 102d 	movw	r0, #53549	; 0xd12d
 8005fe2:	f7fd f919 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD12E, 0x03);
 8005fe6:	2103      	movs	r1, #3
 8005fe8:	f24d 102e 	movw	r0, #53550	; 0xd12e
 8005fec:	f7fd f914 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD12F, 0x10);
 8005ff0:	2110      	movs	r1, #16
 8005ff2:	f24d 102f 	movw	r0, #53551	; 0xd12f
 8005ff6:	f7fd f90f 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD130, 0x03);
 8005ffa:	2103      	movs	r1, #3
 8005ffc:	f24d 1030 	movw	r0, #53552	; 0xd130
 8006000:	f7fd f90a 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD131, 0x33);
 8006004:	2133      	movs	r1, #51	; 0x33
 8006006:	f24d 1031 	movw	r0, #53553	; 0xd131
 800600a:	f7fd f905 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD132, 0x03);
 800600e:	2103      	movs	r1, #3
 8006010:	f24d 1032 	movw	r0, #53554	; 0xd132
 8006014:	f7fd f900 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD133, 0x6D);
 8006018:	216d      	movs	r1, #109	; 0x6d
 800601a:	f24d 1033 	movw	r0, #53555	; 0xd133
 800601e:	f7fd f8fb 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD200, 0x00);
 8006022:	2100      	movs	r1, #0
 8006024:	f44f 4052 	mov.w	r0, #53760	; 0xd200
 8006028:	f7fd f8f6 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD201, 0x33);
 800602c:	2133      	movs	r1, #51	; 0x33
 800602e:	f24d 2001 	movw	r0, #53761	; 0xd201
 8006032:	f7fd f8f1 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD202, 0x00);
 8006036:	2100      	movs	r1, #0
 8006038:	f24d 2002 	movw	r0, #53762	; 0xd202
 800603c:	f7fd f8ec 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD203, 0x34);
 8006040:	2134      	movs	r1, #52	; 0x34
 8006042:	f24d 2003 	movw	r0, #53763	; 0xd203
 8006046:	f7fd f8e7 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD204, 0x00);
 800604a:	2100      	movs	r1, #0
 800604c:	f24d 2004 	movw	r0, #53764	; 0xd204
 8006050:	f7fd f8e2 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD205, 0x3A);
 8006054:	213a      	movs	r1, #58	; 0x3a
 8006056:	f24d 2005 	movw	r0, #53765	; 0xd205
 800605a:	f7fd f8dd 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD206, 0x00);
 800605e:	2100      	movs	r1, #0
 8006060:	f24d 2006 	movw	r0, #53766	; 0xd206
 8006064:	f7fd f8d8 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD207, 0x4A);
 8006068:	214a      	movs	r1, #74	; 0x4a
 800606a:	f24d 2007 	movw	r0, #53767	; 0xd207
 800606e:	f7fd f8d3 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD208, 0x00);
 8006072:	2100      	movs	r1, #0
 8006074:	f24d 2008 	movw	r0, #53768	; 0xd208
 8006078:	f7fd f8ce 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD209, 0x5C);
 800607c:	215c      	movs	r1, #92	; 0x5c
 800607e:	f24d 2009 	movw	r0, #53769	; 0xd209
 8006082:	f7fd f8c9 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD20A, 0x00);
 8006086:	2100      	movs	r1, #0
 8006088:	f24d 200a 	movw	r0, #53770	; 0xd20a
 800608c:	f7fd f8c4 	bl	8003218 <LCD_WriteReg>

		LCD_WriteReg(0xD20B, 0x81);
 8006090:	2181      	movs	r1, #129	; 0x81
 8006092:	f24d 200b 	movw	r0, #53771	; 0xd20b
 8006096:	f7fd f8bf 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD20C, 0x00);
 800609a:	2100      	movs	r1, #0
 800609c:	f24d 200c 	movw	r0, #53772	; 0xd20c
 80060a0:	f7fd f8ba 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD20D, 0xA6);
 80060a4:	21a6      	movs	r1, #166	; 0xa6
 80060a6:	f24d 200d 	movw	r0, #53773	; 0xd20d
 80060aa:	f7fd f8b5 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD20E, 0x00);
 80060ae:	2100      	movs	r1, #0
 80060b0:	f24d 200e 	movw	r0, #53774	; 0xd20e
 80060b4:	f7fd f8b0 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD20F, 0xE5);
 80060b8:	21e5      	movs	r1, #229	; 0xe5
 80060ba:	f24d 200f 	movw	r0, #53775	; 0xd20f
 80060be:	f7fd f8ab 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD210, 0x01);
 80060c2:	2101      	movs	r1, #1
 80060c4:	f24d 2010 	movw	r0, #53776	; 0xd210
 80060c8:	f7fd f8a6 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD211, 0x13);
 80060cc:	2113      	movs	r1, #19
 80060ce:	f24d 2011 	movw	r0, #53777	; 0xd211
 80060d2:	f7fd f8a1 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD212, 0x01);
 80060d6:	2101      	movs	r1, #1
 80060d8:	f24d 2012 	movw	r0, #53778	; 0xd212
 80060dc:	f7fd f89c 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD213, 0x54);
 80060e0:	2154      	movs	r1, #84	; 0x54
 80060e2:	f24d 2013 	movw	r0, #53779	; 0xd213
 80060e6:	f7fd f897 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD214, 0x01);
 80060ea:	2101      	movs	r1, #1
 80060ec:	f24d 2014 	movw	r0, #53780	; 0xd214
 80060f0:	f7fd f892 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD215, 0x82);
 80060f4:	2182      	movs	r1, #130	; 0x82
 80060f6:	f24d 2015 	movw	r0, #53781	; 0xd215
 80060fa:	f7fd f88d 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD216, 0x01);
 80060fe:	2101      	movs	r1, #1
 8006100:	f24d 2016 	movw	r0, #53782	; 0xd216
 8006104:	f7fd f888 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD217, 0xCA);
 8006108:	21ca      	movs	r1, #202	; 0xca
 800610a:	f24d 2017 	movw	r0, #53783	; 0xd217
 800610e:	f7fd f883 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD218, 0x02);
 8006112:	2102      	movs	r1, #2
 8006114:	f24d 2018 	movw	r0, #53784	; 0xd218
 8006118:	f7fd f87e 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD219, 0x00);
 800611c:	2100      	movs	r1, #0
 800611e:	f24d 2019 	movw	r0, #53785	; 0xd219
 8006122:	f7fd f879 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD21A, 0x02);
 8006126:	2102      	movs	r1, #2
 8006128:	f24d 201a 	movw	r0, #53786	; 0xd21a
 800612c:	f7fd f874 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD21B, 0x01);
 8006130:	2101      	movs	r1, #1
 8006132:	f24d 201b 	movw	r0, #53787	; 0xd21b
 8006136:	f7fd f86f 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD21C, 0x02);
 800613a:	2102      	movs	r1, #2
 800613c:	f24d 201c 	movw	r0, #53788	; 0xd21c
 8006140:	f7fd f86a 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD21D, 0x34);
 8006144:	2134      	movs	r1, #52	; 0x34
 8006146:	f24d 201d 	movw	r0, #53789	; 0xd21d
 800614a:	f7fd f865 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD21E, 0x02);
 800614e:	2102      	movs	r1, #2
 8006150:	f24d 201e 	movw	r0, #53790	; 0xd21e
 8006154:	f7fd f860 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD21F, 0x67);
 8006158:	2167      	movs	r1, #103	; 0x67
 800615a:	f24d 201f 	movw	r0, #53791	; 0xd21f
 800615e:	f7fd f85b 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD220, 0x02);
 8006162:	2102      	movs	r1, #2
 8006164:	f24d 2020 	movw	r0, #53792	; 0xd220
 8006168:	f7fd f856 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD221, 0x84);
 800616c:	2184      	movs	r1, #132	; 0x84
 800616e:	f24d 2021 	movw	r0, #53793	; 0xd221
 8006172:	f7fd f851 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD222, 0x02);
 8006176:	2102      	movs	r1, #2
 8006178:	f24d 2022 	movw	r0, #53794	; 0xd222
 800617c:	f7fd f84c 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD223, 0xA4);
 8006180:	21a4      	movs	r1, #164	; 0xa4
 8006182:	f24d 2023 	movw	r0, #53795	; 0xd223
 8006186:	f7fd f847 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD224, 0x02);
 800618a:	2102      	movs	r1, #2
 800618c:	f24d 2024 	movw	r0, #53796	; 0xd224
 8006190:	f7fd f842 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD225, 0xB7);
 8006194:	21b7      	movs	r1, #183	; 0xb7
 8006196:	f24d 2025 	movw	r0, #53797	; 0xd225
 800619a:	f7fd f83d 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD226, 0x02);
 800619e:	2102      	movs	r1, #2
 80061a0:	f24d 2026 	movw	r0, #53798	; 0xd226
 80061a4:	f7fd f838 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD227, 0xCF);
 80061a8:	21cf      	movs	r1, #207	; 0xcf
 80061aa:	f24d 2027 	movw	r0, #53799	; 0xd227
 80061ae:	f7fd f833 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD228, 0x02);
 80061b2:	2102      	movs	r1, #2
 80061b4:	f24d 2028 	movw	r0, #53800	; 0xd228
 80061b8:	f7fd f82e 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD229, 0xDE);
 80061bc:	21de      	movs	r1, #222	; 0xde
 80061be:	f24d 2029 	movw	r0, #53801	; 0xd229
 80061c2:	f7fd f829 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD22A, 0x02);
 80061c6:	2102      	movs	r1, #2
 80061c8:	f24d 202a 	movw	r0, #53802	; 0xd22a
 80061cc:	f7fd f824 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD22B, 0xF2);
 80061d0:	21f2      	movs	r1, #242	; 0xf2
 80061d2:	f24d 202b 	movw	r0, #53803	; 0xd22b
 80061d6:	f7fd f81f 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD22C, 0x02);
 80061da:	2102      	movs	r1, #2
 80061dc:	f24d 202c 	movw	r0, #53804	; 0xd22c
 80061e0:	f7fd f81a 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD22D, 0xFE);
 80061e4:	21fe      	movs	r1, #254	; 0xfe
 80061e6:	f24d 202d 	movw	r0, #53805	; 0xd22d
 80061ea:	f7fd f815 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD22E, 0x03);
 80061ee:	2103      	movs	r1, #3
 80061f0:	f24d 202e 	movw	r0, #53806	; 0xd22e
 80061f4:	f7fd f810 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD22F, 0x10);
 80061f8:	2110      	movs	r1, #16
 80061fa:	f24d 202f 	movw	r0, #53807	; 0xd22f
 80061fe:	f7fd f80b 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD230, 0x03);
 8006202:	2103      	movs	r1, #3
 8006204:	f24d 2030 	movw	r0, #53808	; 0xd230
 8006208:	f7fd f806 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD231, 0x33);
 800620c:	2133      	movs	r1, #51	; 0x33
 800620e:	f24d 2031 	movw	r0, #53809	; 0xd231
 8006212:	f7fd f801 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD232, 0x03);
 8006216:	2103      	movs	r1, #3
 8006218:	f24d 2032 	movw	r0, #53810	; 0xd232
 800621c:	f7fc fffc 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD233, 0x6D);
 8006220:	216d      	movs	r1, #109	; 0x6d
 8006222:	f24d 2033 	movw	r0, #53811	; 0xd233
 8006226:	f7fc fff7 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD300, 0x00);
 800622a:	2100      	movs	r1, #0
 800622c:	f44f 4053 	mov.w	r0, #54016	; 0xd300
 8006230:	f7fc fff2 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD301, 0x33);
 8006234:	2133      	movs	r1, #51	; 0x33
 8006236:	f24d 3001 	movw	r0, #54017	; 0xd301
 800623a:	f7fc ffed 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD302, 0x00);
 800623e:	2100      	movs	r1, #0
 8006240:	f24d 3002 	movw	r0, #54018	; 0xd302
 8006244:	f7fc ffe8 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD303, 0x34);
 8006248:	2134      	movs	r1, #52	; 0x34
 800624a:	f24d 3003 	movw	r0, #54019	; 0xd303
 800624e:	f7fc ffe3 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD304, 0x00);
 8006252:	2100      	movs	r1, #0
 8006254:	f24d 3004 	movw	r0, #54020	; 0xd304
 8006258:	f7fc ffde 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD305, 0x3A);
 800625c:	213a      	movs	r1, #58	; 0x3a
 800625e:	f24d 3005 	movw	r0, #54021	; 0xd305
 8006262:	f7fc ffd9 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD306, 0x00);
 8006266:	2100      	movs	r1, #0
 8006268:	f24d 3006 	movw	r0, #54022	; 0xd306
 800626c:	f7fc ffd4 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD307, 0x4A);
 8006270:	214a      	movs	r1, #74	; 0x4a
 8006272:	f24d 3007 	movw	r0, #54023	; 0xd307
 8006276:	f7fc ffcf 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD308, 0x00);
 800627a:	2100      	movs	r1, #0
 800627c:	f24d 3008 	movw	r0, #54024	; 0xd308
 8006280:	f7fc ffca 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD309, 0x5C);
 8006284:	215c      	movs	r1, #92	; 0x5c
 8006286:	f24d 3009 	movw	r0, #54025	; 0xd309
 800628a:	f7fc ffc5 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD30A, 0x00);
 800628e:	2100      	movs	r1, #0
 8006290:	f24d 300a 	movw	r0, #54026	; 0xd30a
 8006294:	f7fc ffc0 	bl	8003218 <LCD_WriteReg>

		LCD_WriteReg(0xD30B, 0x81);
 8006298:	2181      	movs	r1, #129	; 0x81
 800629a:	f24d 300b 	movw	r0, #54027	; 0xd30b
 800629e:	f7fc ffbb 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD30C, 0x00);
 80062a2:	2100      	movs	r1, #0
 80062a4:	f24d 300c 	movw	r0, #54028	; 0xd30c
 80062a8:	f7fc ffb6 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD30D, 0xA6);
 80062ac:	21a6      	movs	r1, #166	; 0xa6
 80062ae:	f24d 300d 	movw	r0, #54029	; 0xd30d
 80062b2:	f7fc ffb1 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD30E, 0x00);
 80062b6:	2100      	movs	r1, #0
 80062b8:	f24d 300e 	movw	r0, #54030	; 0xd30e
 80062bc:	f7fc ffac 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD30F, 0xE5);
 80062c0:	21e5      	movs	r1, #229	; 0xe5
 80062c2:	f24d 300f 	movw	r0, #54031	; 0xd30f
 80062c6:	f7fc ffa7 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD310, 0x01);
 80062ca:	2101      	movs	r1, #1
 80062cc:	f24d 3010 	movw	r0, #54032	; 0xd310
 80062d0:	f7fc ffa2 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD311, 0x13);
 80062d4:	2113      	movs	r1, #19
 80062d6:	f24d 3011 	movw	r0, #54033	; 0xd311
 80062da:	f7fc ff9d 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD312, 0x01);
 80062de:	2101      	movs	r1, #1
 80062e0:	f24d 3012 	movw	r0, #54034	; 0xd312
 80062e4:	f7fc ff98 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD313, 0x54);
 80062e8:	2154      	movs	r1, #84	; 0x54
 80062ea:	f24d 3013 	movw	r0, #54035	; 0xd313
 80062ee:	f7fc ff93 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD314, 0x01);
 80062f2:	2101      	movs	r1, #1
 80062f4:	f24d 3014 	movw	r0, #54036	; 0xd314
 80062f8:	f7fc ff8e 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD315, 0x82);
 80062fc:	2182      	movs	r1, #130	; 0x82
 80062fe:	f24d 3015 	movw	r0, #54037	; 0xd315
 8006302:	f7fc ff89 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD316, 0x01);
 8006306:	2101      	movs	r1, #1
 8006308:	f24d 3016 	movw	r0, #54038	; 0xd316
 800630c:	f7fc ff84 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD317, 0xCA);
 8006310:	21ca      	movs	r1, #202	; 0xca
 8006312:	f24d 3017 	movw	r0, #54039	; 0xd317
 8006316:	f7fc ff7f 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD318, 0x02);
 800631a:	2102      	movs	r1, #2
 800631c:	f24d 3018 	movw	r0, #54040	; 0xd318
 8006320:	f7fc ff7a 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD319, 0x00);
 8006324:	2100      	movs	r1, #0
 8006326:	f24d 3019 	movw	r0, #54041	; 0xd319
 800632a:	f7fc ff75 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD31A, 0x02);
 800632e:	2102      	movs	r1, #2
 8006330:	f24d 301a 	movw	r0, #54042	; 0xd31a
 8006334:	f7fc ff70 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD31B, 0x01);
 8006338:	2101      	movs	r1, #1
 800633a:	f24d 301b 	movw	r0, #54043	; 0xd31b
 800633e:	f7fc ff6b 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD31C, 0x02);
 8006342:	2102      	movs	r1, #2
 8006344:	f24d 301c 	movw	r0, #54044	; 0xd31c
 8006348:	f7fc ff66 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD31D, 0x34);
 800634c:	2134      	movs	r1, #52	; 0x34
 800634e:	f24d 301d 	movw	r0, #54045	; 0xd31d
 8006352:	f7fc ff61 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD31E, 0x02);
 8006356:	2102      	movs	r1, #2
 8006358:	f24d 301e 	movw	r0, #54046	; 0xd31e
 800635c:	f7fc ff5c 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD31F, 0x67);
 8006360:	2167      	movs	r1, #103	; 0x67
 8006362:	f24d 301f 	movw	r0, #54047	; 0xd31f
 8006366:	f7fc ff57 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD320, 0x02);
 800636a:	2102      	movs	r1, #2
 800636c:	f24d 3020 	movw	r0, #54048	; 0xd320
 8006370:	f7fc ff52 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD321, 0x84);
 8006374:	2184      	movs	r1, #132	; 0x84
 8006376:	f24d 3021 	movw	r0, #54049	; 0xd321
 800637a:	f7fc ff4d 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD322, 0x02);
 800637e:	2102      	movs	r1, #2
 8006380:	f24d 3022 	movw	r0, #54050	; 0xd322
 8006384:	f7fc ff48 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD323, 0xA4);
 8006388:	21a4      	movs	r1, #164	; 0xa4
 800638a:	f24d 3023 	movw	r0, #54051	; 0xd323
 800638e:	f7fc ff43 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD324, 0x02);
 8006392:	2102      	movs	r1, #2
 8006394:	f24d 3024 	movw	r0, #54052	; 0xd324
 8006398:	f7fc ff3e 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD325, 0xB7);
 800639c:	21b7      	movs	r1, #183	; 0xb7
 800639e:	f24d 3025 	movw	r0, #54053	; 0xd325
 80063a2:	f7fc ff39 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD326, 0x02);
 80063a6:	2102      	movs	r1, #2
 80063a8:	f24d 3026 	movw	r0, #54054	; 0xd326
 80063ac:	f7fc ff34 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD327, 0xCF);
 80063b0:	21cf      	movs	r1, #207	; 0xcf
 80063b2:	f24d 3027 	movw	r0, #54055	; 0xd327
 80063b6:	f7fc ff2f 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD328, 0x02);
 80063ba:	2102      	movs	r1, #2
 80063bc:	f24d 3028 	movw	r0, #54056	; 0xd328
 80063c0:	f7fc ff2a 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD329, 0xDE);
 80063c4:	21de      	movs	r1, #222	; 0xde
 80063c6:	f24d 3029 	movw	r0, #54057	; 0xd329
 80063ca:	f7fc ff25 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD32A, 0x02);
 80063ce:	2102      	movs	r1, #2
 80063d0:	f24d 302a 	movw	r0, #54058	; 0xd32a
 80063d4:	f7fc ff20 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD32B, 0xF2);
 80063d8:	21f2      	movs	r1, #242	; 0xf2
 80063da:	f24d 302b 	movw	r0, #54059	; 0xd32b
 80063de:	f7fc ff1b 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD32C, 0x02);
 80063e2:	2102      	movs	r1, #2
 80063e4:	f24d 302c 	movw	r0, #54060	; 0xd32c
 80063e8:	f7fc ff16 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD32D, 0xFE);
 80063ec:	21fe      	movs	r1, #254	; 0xfe
 80063ee:	f24d 302d 	movw	r0, #54061	; 0xd32d
 80063f2:	f7fc ff11 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD32E, 0x03);
 80063f6:	2103      	movs	r1, #3
 80063f8:	f24d 302e 	movw	r0, #54062	; 0xd32e
 80063fc:	f7fc ff0c 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD32F, 0x10);
 8006400:	2110      	movs	r1, #16
 8006402:	f24d 302f 	movw	r0, #54063	; 0xd32f
 8006406:	f7fc ff07 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD330, 0x03);
 800640a:	2103      	movs	r1, #3
 800640c:	f24d 3030 	movw	r0, #54064	; 0xd330
 8006410:	f7fc ff02 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD331, 0x33);
 8006414:	2133      	movs	r1, #51	; 0x33
 8006416:	f24d 3031 	movw	r0, #54065	; 0xd331
 800641a:	f7fc fefd 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD332, 0x03);
 800641e:	2103      	movs	r1, #3
 8006420:	f24d 3032 	movw	r0, #54066	; 0xd332
 8006424:	f7fc fef8 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD333, 0x6D);
 8006428:	216d      	movs	r1, #109	; 0x6d
 800642a:	f24d 3033 	movw	r0, #54067	; 0xd333
 800642e:	f7fc fef3 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD400, 0x00);
 8006432:	2100      	movs	r1, #0
 8006434:	f44f 4054 	mov.w	r0, #54272	; 0xd400
 8006438:	f7fc feee 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD401, 0x33);
 800643c:	2133      	movs	r1, #51	; 0x33
 800643e:	f24d 4001 	movw	r0, #54273	; 0xd401
 8006442:	f7fc fee9 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD402, 0x00);
 8006446:	2100      	movs	r1, #0
 8006448:	f24d 4002 	movw	r0, #54274	; 0xd402
 800644c:	f7fc fee4 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD403, 0x34);
 8006450:	2134      	movs	r1, #52	; 0x34
 8006452:	f24d 4003 	movw	r0, #54275	; 0xd403
 8006456:	f7fc fedf 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD404, 0x00);
 800645a:	2100      	movs	r1, #0
 800645c:	f24d 4004 	movw	r0, #54276	; 0xd404
 8006460:	f7fc feda 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD405, 0x3A);
 8006464:	213a      	movs	r1, #58	; 0x3a
 8006466:	f24d 4005 	movw	r0, #54277	; 0xd405
 800646a:	f7fc fed5 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD406, 0x00);
 800646e:	2100      	movs	r1, #0
 8006470:	f24d 4006 	movw	r0, #54278	; 0xd406
 8006474:	f7fc fed0 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD407, 0x4A);
 8006478:	214a      	movs	r1, #74	; 0x4a
 800647a:	f24d 4007 	movw	r0, #54279	; 0xd407
 800647e:	f7fc fecb 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD408, 0x00);
 8006482:	2100      	movs	r1, #0
 8006484:	f24d 4008 	movw	r0, #54280	; 0xd408
 8006488:	f7fc fec6 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD409, 0x5C);
 800648c:	215c      	movs	r1, #92	; 0x5c
 800648e:	f24d 4009 	movw	r0, #54281	; 0xd409
 8006492:	f7fc fec1 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD40A, 0x00);
 8006496:	2100      	movs	r1, #0
 8006498:	f24d 400a 	movw	r0, #54282	; 0xd40a
 800649c:	f7fc febc 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD40B, 0x81);
 80064a0:	2181      	movs	r1, #129	; 0x81
 80064a2:	f24d 400b 	movw	r0, #54283	; 0xd40b
 80064a6:	f7fc feb7 	bl	8003218 <LCD_WriteReg>

		LCD_WriteReg(0xD40C, 0x00);
 80064aa:	2100      	movs	r1, #0
 80064ac:	f24d 400c 	movw	r0, #54284	; 0xd40c
 80064b0:	f7fc feb2 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD40D, 0xA6);
 80064b4:	21a6      	movs	r1, #166	; 0xa6
 80064b6:	f24d 400d 	movw	r0, #54285	; 0xd40d
 80064ba:	f7fc fead 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD40E, 0x00);
 80064be:	2100      	movs	r1, #0
 80064c0:	f24d 400e 	movw	r0, #54286	; 0xd40e
 80064c4:	f7fc fea8 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD40F, 0xE5);
 80064c8:	21e5      	movs	r1, #229	; 0xe5
 80064ca:	f24d 400f 	movw	r0, #54287	; 0xd40f
 80064ce:	f7fc fea3 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD410, 0x01);
 80064d2:	2101      	movs	r1, #1
 80064d4:	f24d 4010 	movw	r0, #54288	; 0xd410
 80064d8:	f7fc fe9e 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD411, 0x13);
 80064dc:	2113      	movs	r1, #19
 80064de:	f24d 4011 	movw	r0, #54289	; 0xd411
 80064e2:	f7fc fe99 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD412, 0x01);
 80064e6:	2101      	movs	r1, #1
 80064e8:	f24d 4012 	movw	r0, #54290	; 0xd412
 80064ec:	f7fc fe94 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD413, 0x54);
 80064f0:	2154      	movs	r1, #84	; 0x54
 80064f2:	f24d 4013 	movw	r0, #54291	; 0xd413
 80064f6:	f7fc fe8f 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD414, 0x01);
 80064fa:	2101      	movs	r1, #1
 80064fc:	f24d 4014 	movw	r0, #54292	; 0xd414
 8006500:	f7fc fe8a 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD415, 0x82);
 8006504:	2182      	movs	r1, #130	; 0x82
 8006506:	f24d 4015 	movw	r0, #54293	; 0xd415
 800650a:	f7fc fe85 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD416, 0x01);
 800650e:	2101      	movs	r1, #1
 8006510:	f24d 4016 	movw	r0, #54294	; 0xd416
 8006514:	f7fc fe80 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD417, 0xCA);
 8006518:	21ca      	movs	r1, #202	; 0xca
 800651a:	f24d 4017 	movw	r0, #54295	; 0xd417
 800651e:	f7fc fe7b 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD418, 0x02);
 8006522:	2102      	movs	r1, #2
 8006524:	f24d 4018 	movw	r0, #54296	; 0xd418
 8006528:	f7fc fe76 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD419, 0x00);
 800652c:	2100      	movs	r1, #0
 800652e:	f24d 4019 	movw	r0, #54297	; 0xd419
 8006532:	f7fc fe71 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD41A, 0x02);
 8006536:	2102      	movs	r1, #2
 8006538:	f24d 401a 	movw	r0, #54298	; 0xd41a
 800653c:	f7fc fe6c 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD41B, 0x01);
 8006540:	2101      	movs	r1, #1
 8006542:	f24d 401b 	movw	r0, #54299	; 0xd41b
 8006546:	f7fc fe67 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD41C, 0x02);
 800654a:	2102      	movs	r1, #2
 800654c:	f24d 401c 	movw	r0, #54300	; 0xd41c
 8006550:	f7fc fe62 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD41D, 0x34);
 8006554:	2134      	movs	r1, #52	; 0x34
 8006556:	f24d 401d 	movw	r0, #54301	; 0xd41d
 800655a:	f7fc fe5d 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD41E, 0x02);
 800655e:	2102      	movs	r1, #2
 8006560:	f24d 401e 	movw	r0, #54302	; 0xd41e
 8006564:	f7fc fe58 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD41F, 0x67);
 8006568:	2167      	movs	r1, #103	; 0x67
 800656a:	f24d 401f 	movw	r0, #54303	; 0xd41f
 800656e:	f7fc fe53 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD420, 0x02);
 8006572:	2102      	movs	r1, #2
 8006574:	f24d 4020 	movw	r0, #54304	; 0xd420
 8006578:	f7fc fe4e 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD421, 0x84);
 800657c:	2184      	movs	r1, #132	; 0x84
 800657e:	f24d 4021 	movw	r0, #54305	; 0xd421
 8006582:	f7fc fe49 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD422, 0x02);
 8006586:	2102      	movs	r1, #2
 8006588:	f24d 4022 	movw	r0, #54306	; 0xd422
 800658c:	f7fc fe44 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD423, 0xA4);
 8006590:	21a4      	movs	r1, #164	; 0xa4
 8006592:	f24d 4023 	movw	r0, #54307	; 0xd423
 8006596:	f7fc fe3f 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD424, 0x02);
 800659a:	2102      	movs	r1, #2
 800659c:	f24d 4024 	movw	r0, #54308	; 0xd424
 80065a0:	f7fc fe3a 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD425, 0xB7);
 80065a4:	21b7      	movs	r1, #183	; 0xb7
 80065a6:	f24d 4025 	movw	r0, #54309	; 0xd425
 80065aa:	f7fc fe35 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD426, 0x02);
 80065ae:	2102      	movs	r1, #2
 80065b0:	f24d 4026 	movw	r0, #54310	; 0xd426
 80065b4:	f7fc fe30 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD427, 0xCF);
 80065b8:	21cf      	movs	r1, #207	; 0xcf
 80065ba:	f24d 4027 	movw	r0, #54311	; 0xd427
 80065be:	f7fc fe2b 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD428, 0x02);
 80065c2:	2102      	movs	r1, #2
 80065c4:	f24d 4028 	movw	r0, #54312	; 0xd428
 80065c8:	f7fc fe26 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD429, 0xDE);
 80065cc:	21de      	movs	r1, #222	; 0xde
 80065ce:	f24d 4029 	movw	r0, #54313	; 0xd429
 80065d2:	f7fc fe21 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD42A, 0x02);
 80065d6:	2102      	movs	r1, #2
 80065d8:	f24d 402a 	movw	r0, #54314	; 0xd42a
 80065dc:	f7fc fe1c 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD42B, 0xF2);
 80065e0:	21f2      	movs	r1, #242	; 0xf2
 80065e2:	f24d 402b 	movw	r0, #54315	; 0xd42b
 80065e6:	f7fc fe17 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD42C, 0x02);
 80065ea:	2102      	movs	r1, #2
 80065ec:	f24d 402c 	movw	r0, #54316	; 0xd42c
 80065f0:	f7fc fe12 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD42D, 0xFE);
 80065f4:	21fe      	movs	r1, #254	; 0xfe
 80065f6:	f24d 402d 	movw	r0, #54317	; 0xd42d
 80065fa:	f7fc fe0d 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD42E, 0x03);
 80065fe:	2103      	movs	r1, #3
 8006600:	f24d 402e 	movw	r0, #54318	; 0xd42e
 8006604:	f7fc fe08 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD42F, 0x10);
 8006608:	2110      	movs	r1, #16
 800660a:	f24d 402f 	movw	r0, #54319	; 0xd42f
 800660e:	f7fc fe03 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD430, 0x03);
 8006612:	2103      	movs	r1, #3
 8006614:	f24d 4030 	movw	r0, #54320	; 0xd430
 8006618:	f7fc fdfe 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD431, 0x33);
 800661c:	2133      	movs	r1, #51	; 0x33
 800661e:	f24d 4031 	movw	r0, #54321	; 0xd431
 8006622:	f7fc fdf9 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD432, 0x03);
 8006626:	2103      	movs	r1, #3
 8006628:	f24d 4032 	movw	r0, #54322	; 0xd432
 800662c:	f7fc fdf4 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD433, 0x6D);
 8006630:	216d      	movs	r1, #109	; 0x6d
 8006632:	f24d 4033 	movw	r0, #54323	; 0xd433
 8006636:	f7fc fdef 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD500, 0x00);
 800663a:	2100      	movs	r1, #0
 800663c:	f44f 4055 	mov.w	r0, #54528	; 0xd500
 8006640:	f7fc fdea 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD501, 0x33);
 8006644:	2133      	movs	r1, #51	; 0x33
 8006646:	f24d 5001 	movw	r0, #54529	; 0xd501
 800664a:	f7fc fde5 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD502, 0x00);
 800664e:	2100      	movs	r1, #0
 8006650:	f24d 5002 	movw	r0, #54530	; 0xd502
 8006654:	f7fc fde0 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD503, 0x34);
 8006658:	2134      	movs	r1, #52	; 0x34
 800665a:	f24d 5003 	movw	r0, #54531	; 0xd503
 800665e:	f7fc fddb 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD504, 0x00);
 8006662:	2100      	movs	r1, #0
 8006664:	f24d 5004 	movw	r0, #54532	; 0xd504
 8006668:	f7fc fdd6 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD505, 0x3A);
 800666c:	213a      	movs	r1, #58	; 0x3a
 800666e:	f24d 5005 	movw	r0, #54533	; 0xd505
 8006672:	f7fc fdd1 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD506, 0x00);
 8006676:	2100      	movs	r1, #0
 8006678:	f24d 5006 	movw	r0, #54534	; 0xd506
 800667c:	f7fc fdcc 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD507, 0x4A);
 8006680:	214a      	movs	r1, #74	; 0x4a
 8006682:	f24d 5007 	movw	r0, #54535	; 0xd507
 8006686:	f7fc fdc7 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD508, 0x00);
 800668a:	2100      	movs	r1, #0
 800668c:	f24d 5008 	movw	r0, #54536	; 0xd508
 8006690:	f7fc fdc2 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD509, 0x5C);
 8006694:	215c      	movs	r1, #92	; 0x5c
 8006696:	f24d 5009 	movw	r0, #54537	; 0xd509
 800669a:	f7fc fdbd 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD50A, 0x00);
 800669e:	2100      	movs	r1, #0
 80066a0:	f24d 500a 	movw	r0, #54538	; 0xd50a
 80066a4:	f7fc fdb8 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD50B, 0x81);
 80066a8:	2181      	movs	r1, #129	; 0x81
 80066aa:	f24d 500b 	movw	r0, #54539	; 0xd50b
 80066ae:	f7fc fdb3 	bl	8003218 <LCD_WriteReg>

		LCD_WriteReg(0xD50C, 0x00);
 80066b2:	2100      	movs	r1, #0
 80066b4:	f24d 500c 	movw	r0, #54540	; 0xd50c
 80066b8:	f7fc fdae 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD50D, 0xA6);
 80066bc:	21a6      	movs	r1, #166	; 0xa6
 80066be:	f24d 500d 	movw	r0, #54541	; 0xd50d
 80066c2:	f7fc fda9 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD50E, 0x00);
 80066c6:	2100      	movs	r1, #0
 80066c8:	f24d 500e 	movw	r0, #54542	; 0xd50e
 80066cc:	f7fc fda4 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD50F, 0xE5);
 80066d0:	21e5      	movs	r1, #229	; 0xe5
 80066d2:	f24d 500f 	movw	r0, #54543	; 0xd50f
 80066d6:	f7fc fd9f 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD510, 0x01);
 80066da:	2101      	movs	r1, #1
 80066dc:	f24d 5010 	movw	r0, #54544	; 0xd510
 80066e0:	f7fc fd9a 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD511, 0x13);
 80066e4:	2113      	movs	r1, #19
 80066e6:	f24d 5011 	movw	r0, #54545	; 0xd511
 80066ea:	f7fc fd95 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD512, 0x01);
 80066ee:	2101      	movs	r1, #1
 80066f0:	f24d 5012 	movw	r0, #54546	; 0xd512
 80066f4:	f7fc fd90 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD513, 0x54);
 80066f8:	2154      	movs	r1, #84	; 0x54
 80066fa:	f24d 5013 	movw	r0, #54547	; 0xd513
 80066fe:	f7fc fd8b 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD514, 0x01);
 8006702:	2101      	movs	r1, #1
 8006704:	f24d 5014 	movw	r0, #54548	; 0xd514
 8006708:	f7fc fd86 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD515, 0x82);
 800670c:	2182      	movs	r1, #130	; 0x82
 800670e:	f24d 5015 	movw	r0, #54549	; 0xd515
 8006712:	f7fc fd81 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD516, 0x01);
 8006716:	2101      	movs	r1, #1
 8006718:	f24d 5016 	movw	r0, #54550	; 0xd516
 800671c:	f7fc fd7c 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD517, 0xCA);
 8006720:	21ca      	movs	r1, #202	; 0xca
 8006722:	f24d 5017 	movw	r0, #54551	; 0xd517
 8006726:	f7fc fd77 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD518, 0x02);
 800672a:	2102      	movs	r1, #2
 800672c:	f24d 5018 	movw	r0, #54552	; 0xd518
 8006730:	f7fc fd72 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD519, 0x00);
 8006734:	2100      	movs	r1, #0
 8006736:	f24d 5019 	movw	r0, #54553	; 0xd519
 800673a:	f7fc fd6d 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD51A, 0x02);
 800673e:	2102      	movs	r1, #2
 8006740:	f24d 501a 	movw	r0, #54554	; 0xd51a
 8006744:	f7fc fd68 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD51B, 0x01);
 8006748:	2101      	movs	r1, #1
 800674a:	f24d 501b 	movw	r0, #54555	; 0xd51b
 800674e:	f7fc fd63 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD51C, 0x02);
 8006752:	2102      	movs	r1, #2
 8006754:	f24d 501c 	movw	r0, #54556	; 0xd51c
 8006758:	f7fc fd5e 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD51D, 0x34);
 800675c:	2134      	movs	r1, #52	; 0x34
 800675e:	f24d 501d 	movw	r0, #54557	; 0xd51d
 8006762:	f7fc fd59 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD51E, 0x02);
 8006766:	2102      	movs	r1, #2
 8006768:	f24d 501e 	movw	r0, #54558	; 0xd51e
 800676c:	f7fc fd54 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD51F, 0x67);
 8006770:	2167      	movs	r1, #103	; 0x67
 8006772:	f24d 501f 	movw	r0, #54559	; 0xd51f
 8006776:	f7fc fd4f 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD520, 0x02);
 800677a:	2102      	movs	r1, #2
 800677c:	f24d 5020 	movw	r0, #54560	; 0xd520
 8006780:	f7fc fd4a 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD521, 0x84);
 8006784:	2184      	movs	r1, #132	; 0x84
 8006786:	f24d 5021 	movw	r0, #54561	; 0xd521
 800678a:	f7fc fd45 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD522, 0x02);
 800678e:	2102      	movs	r1, #2
 8006790:	f24d 5022 	movw	r0, #54562	; 0xd522
 8006794:	f7fc fd40 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD523, 0xA4);
 8006798:	21a4      	movs	r1, #164	; 0xa4
 800679a:	f24d 5023 	movw	r0, #54563	; 0xd523
 800679e:	f7fc fd3b 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD524, 0x02);
 80067a2:	2102      	movs	r1, #2
 80067a4:	f24d 5024 	movw	r0, #54564	; 0xd524
 80067a8:	f7fc fd36 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD525, 0xB7);
 80067ac:	21b7      	movs	r1, #183	; 0xb7
 80067ae:	f24d 5025 	movw	r0, #54565	; 0xd525
 80067b2:	f7fc fd31 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD526, 0x02);
 80067b6:	2102      	movs	r1, #2
 80067b8:	f24d 5026 	movw	r0, #54566	; 0xd526
 80067bc:	f7fc fd2c 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD527, 0xCF);
 80067c0:	21cf      	movs	r1, #207	; 0xcf
 80067c2:	f24d 5027 	movw	r0, #54567	; 0xd527
 80067c6:	f7fc fd27 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD528, 0x02);
 80067ca:	2102      	movs	r1, #2
 80067cc:	f24d 5028 	movw	r0, #54568	; 0xd528
 80067d0:	f7fc fd22 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD529, 0xDE);
 80067d4:	21de      	movs	r1, #222	; 0xde
 80067d6:	f24d 5029 	movw	r0, #54569	; 0xd529
 80067da:	f7fc fd1d 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD52A, 0x02);
 80067de:	2102      	movs	r1, #2
 80067e0:	f24d 502a 	movw	r0, #54570	; 0xd52a
 80067e4:	f7fc fd18 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD52B, 0xF2);
 80067e8:	21f2      	movs	r1, #242	; 0xf2
 80067ea:	f24d 502b 	movw	r0, #54571	; 0xd52b
 80067ee:	f7fc fd13 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD52C, 0x02);
 80067f2:	2102      	movs	r1, #2
 80067f4:	f24d 502c 	movw	r0, #54572	; 0xd52c
 80067f8:	f7fc fd0e 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD52D, 0xFE);
 80067fc:	21fe      	movs	r1, #254	; 0xfe
 80067fe:	f24d 502d 	movw	r0, #54573	; 0xd52d
 8006802:	f7fc fd09 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD52E, 0x03);
 8006806:	2103      	movs	r1, #3
 8006808:	f24d 502e 	movw	r0, #54574	; 0xd52e
 800680c:	f7fc fd04 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD52F, 0x10);
 8006810:	2110      	movs	r1, #16
 8006812:	f24d 502f 	movw	r0, #54575	; 0xd52f
 8006816:	f7fc fcff 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD530, 0x03);
 800681a:	2103      	movs	r1, #3
 800681c:	f24d 5030 	movw	r0, #54576	; 0xd530
 8006820:	f7fc fcfa 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD531, 0x33);
 8006824:	2133      	movs	r1, #51	; 0x33
 8006826:	f24d 5031 	movw	r0, #54577	; 0xd531
 800682a:	f7fc fcf5 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD532, 0x03);
 800682e:	2103      	movs	r1, #3
 8006830:	f24d 5032 	movw	r0, #54578	; 0xd532
 8006834:	f7fc fcf0 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD533, 0x6D);
 8006838:	216d      	movs	r1, #109	; 0x6d
 800683a:	f24d 5033 	movw	r0, #54579	; 0xd533
 800683e:	f7fc fceb 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD600, 0x00);
 8006842:	2100      	movs	r1, #0
 8006844:	f44f 4056 	mov.w	r0, #54784	; 0xd600
 8006848:	f7fc fce6 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD601, 0x33);
 800684c:	2133      	movs	r1, #51	; 0x33
 800684e:	f24d 6001 	movw	r0, #54785	; 0xd601
 8006852:	f7fc fce1 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD602, 0x00);
 8006856:	2100      	movs	r1, #0
 8006858:	f24d 6002 	movw	r0, #54786	; 0xd602
 800685c:	f7fc fcdc 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD603, 0x34);
 8006860:	2134      	movs	r1, #52	; 0x34
 8006862:	f24d 6003 	movw	r0, #54787	; 0xd603
 8006866:	f7fc fcd7 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD604, 0x00);
 800686a:	2100      	movs	r1, #0
 800686c:	f24d 6004 	movw	r0, #54788	; 0xd604
 8006870:	f7fc fcd2 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD605, 0x3A);
 8006874:	213a      	movs	r1, #58	; 0x3a
 8006876:	f24d 6005 	movw	r0, #54789	; 0xd605
 800687a:	f7fc fccd 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD606, 0x00);
 800687e:	2100      	movs	r1, #0
 8006880:	f24d 6006 	movw	r0, #54790	; 0xd606
 8006884:	f7fc fcc8 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD607, 0x4A);
 8006888:	214a      	movs	r1, #74	; 0x4a
 800688a:	f24d 6007 	movw	r0, #54791	; 0xd607
 800688e:	f7fc fcc3 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD608, 0x00);
 8006892:	2100      	movs	r1, #0
 8006894:	f24d 6008 	movw	r0, #54792	; 0xd608
 8006898:	f7fc fcbe 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD609, 0x5C);
 800689c:	215c      	movs	r1, #92	; 0x5c
 800689e:	f24d 6009 	movw	r0, #54793	; 0xd609
 80068a2:	f7fc fcb9 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD60A, 0x00);
 80068a6:	2100      	movs	r1, #0
 80068a8:	f24d 600a 	movw	r0, #54794	; 0xd60a
 80068ac:	f7fc fcb4 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD60B, 0x81);
 80068b0:	2181      	movs	r1, #129	; 0x81
 80068b2:	f24d 600b 	movw	r0, #54795	; 0xd60b
 80068b6:	f7fc fcaf 	bl	8003218 <LCD_WriteReg>

		LCD_WriteReg(0xD60C, 0x00);
 80068ba:	2100      	movs	r1, #0
 80068bc:	f24d 600c 	movw	r0, #54796	; 0xd60c
 80068c0:	f7fc fcaa 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD60D, 0xA6);
 80068c4:	21a6      	movs	r1, #166	; 0xa6
 80068c6:	f24d 600d 	movw	r0, #54797	; 0xd60d
 80068ca:	f7fc fca5 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD60E, 0x00);
 80068ce:	2100      	movs	r1, #0
 80068d0:	f24d 600e 	movw	r0, #54798	; 0xd60e
 80068d4:	f7fc fca0 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD60F, 0xE5);
 80068d8:	21e5      	movs	r1, #229	; 0xe5
 80068da:	f24d 600f 	movw	r0, #54799	; 0xd60f
 80068de:	f7fc fc9b 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD610, 0x01);
 80068e2:	2101      	movs	r1, #1
 80068e4:	f24d 6010 	movw	r0, #54800	; 0xd610
 80068e8:	f7fc fc96 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD611, 0x13);
 80068ec:	2113      	movs	r1, #19
 80068ee:	f24d 6011 	movw	r0, #54801	; 0xd611
 80068f2:	f7fc fc91 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD612, 0x01);
 80068f6:	2101      	movs	r1, #1
 80068f8:	f24d 6012 	movw	r0, #54802	; 0xd612
 80068fc:	f7fc fc8c 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD613, 0x54);
 8006900:	2154      	movs	r1, #84	; 0x54
 8006902:	f24d 6013 	movw	r0, #54803	; 0xd613
 8006906:	f7fc fc87 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD614, 0x01);
 800690a:	2101      	movs	r1, #1
 800690c:	f24d 6014 	movw	r0, #54804	; 0xd614
 8006910:	f7fc fc82 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD615, 0x82);
 8006914:	2182      	movs	r1, #130	; 0x82
 8006916:	f24d 6015 	movw	r0, #54805	; 0xd615
 800691a:	f7fc fc7d 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD616, 0x01);
 800691e:	2101      	movs	r1, #1
 8006920:	f24d 6016 	movw	r0, #54806	; 0xd616
 8006924:	f7fc fc78 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD617, 0xCA);
 8006928:	21ca      	movs	r1, #202	; 0xca
 800692a:	f24d 6017 	movw	r0, #54807	; 0xd617
 800692e:	f7fc fc73 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD618, 0x02);
 8006932:	2102      	movs	r1, #2
 8006934:	f24d 6018 	movw	r0, #54808	; 0xd618
 8006938:	f7fc fc6e 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD619, 0x00);
 800693c:	2100      	movs	r1, #0
 800693e:	f24d 6019 	movw	r0, #54809	; 0xd619
 8006942:	f7fc fc69 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD61A, 0x02);
 8006946:	2102      	movs	r1, #2
 8006948:	f24d 601a 	movw	r0, #54810	; 0xd61a
 800694c:	f7fc fc64 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD61B, 0x01);
 8006950:	2101      	movs	r1, #1
 8006952:	f24d 601b 	movw	r0, #54811	; 0xd61b
 8006956:	f7fc fc5f 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD61C, 0x02);
 800695a:	2102      	movs	r1, #2
 800695c:	f24d 601c 	movw	r0, #54812	; 0xd61c
 8006960:	f7fc fc5a 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD61D, 0x34);
 8006964:	2134      	movs	r1, #52	; 0x34
 8006966:	f24d 601d 	movw	r0, #54813	; 0xd61d
 800696a:	f7fc fc55 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD61E, 0x02);
 800696e:	2102      	movs	r1, #2
 8006970:	f24d 601e 	movw	r0, #54814	; 0xd61e
 8006974:	f7fc fc50 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD61F, 0x67);
 8006978:	2167      	movs	r1, #103	; 0x67
 800697a:	f24d 601f 	movw	r0, #54815	; 0xd61f
 800697e:	f7fc fc4b 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD620, 0x02);
 8006982:	2102      	movs	r1, #2
 8006984:	f24d 6020 	movw	r0, #54816	; 0xd620
 8006988:	f7fc fc46 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD621, 0x84);
 800698c:	2184      	movs	r1, #132	; 0x84
 800698e:	f24d 6021 	movw	r0, #54817	; 0xd621
 8006992:	f7fc fc41 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD622, 0x02);
 8006996:	2102      	movs	r1, #2
 8006998:	f24d 6022 	movw	r0, #54818	; 0xd622
 800699c:	f7fc fc3c 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD623, 0xA4);
 80069a0:	21a4      	movs	r1, #164	; 0xa4
 80069a2:	f24d 6023 	movw	r0, #54819	; 0xd623
 80069a6:	f7fc fc37 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD624, 0x02);
 80069aa:	2102      	movs	r1, #2
 80069ac:	f24d 6024 	movw	r0, #54820	; 0xd624
 80069b0:	f7fc fc32 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD625, 0xB7);
 80069b4:	21b7      	movs	r1, #183	; 0xb7
 80069b6:	f24d 6025 	movw	r0, #54821	; 0xd625
 80069ba:	f7fc fc2d 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD626, 0x02);
 80069be:	2102      	movs	r1, #2
 80069c0:	f24d 6026 	movw	r0, #54822	; 0xd626
 80069c4:	f7fc fc28 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD627, 0xCF);
 80069c8:	21cf      	movs	r1, #207	; 0xcf
 80069ca:	f24d 6027 	movw	r0, #54823	; 0xd627
 80069ce:	f7fc fc23 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD628, 0x02);
 80069d2:	2102      	movs	r1, #2
 80069d4:	f24d 6028 	movw	r0, #54824	; 0xd628
 80069d8:	f7fc fc1e 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD629, 0xDE);
 80069dc:	21de      	movs	r1, #222	; 0xde
 80069de:	f24d 6029 	movw	r0, #54825	; 0xd629
 80069e2:	f7fc fc19 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD62A, 0x02);
 80069e6:	2102      	movs	r1, #2
 80069e8:	f24d 602a 	movw	r0, #54826	; 0xd62a
 80069ec:	f7fc fc14 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD62B, 0xF2);
 80069f0:	21f2      	movs	r1, #242	; 0xf2
 80069f2:	f24d 602b 	movw	r0, #54827	; 0xd62b
 80069f6:	f7fc fc0f 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD62C, 0x02);
 80069fa:	2102      	movs	r1, #2
 80069fc:	f24d 602c 	movw	r0, #54828	; 0xd62c
 8006a00:	f7fc fc0a 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD62D, 0xFE);
 8006a04:	21fe      	movs	r1, #254	; 0xfe
 8006a06:	f24d 602d 	movw	r0, #54829	; 0xd62d
 8006a0a:	f7fc fc05 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD62E, 0x03);
 8006a0e:	2103      	movs	r1, #3
 8006a10:	f24d 602e 	movw	r0, #54830	; 0xd62e
 8006a14:	f7fc fc00 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD62F, 0x10);
 8006a18:	2110      	movs	r1, #16
 8006a1a:	f24d 602f 	movw	r0, #54831	; 0xd62f
 8006a1e:	f7fc fbfb 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD630, 0x03);
 8006a22:	2103      	movs	r1, #3
 8006a24:	f24d 6030 	movw	r0, #54832	; 0xd630
 8006a28:	f7fc fbf6 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD631, 0x33);
 8006a2c:	2133      	movs	r1, #51	; 0x33
 8006a2e:	f24d 6031 	movw	r0, #54833	; 0xd631
 8006a32:	f7fc fbf1 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD632, 0x03);
 8006a36:	2103      	movs	r1, #3
 8006a38:	f24d 6032 	movw	r0, #54834	; 0xd632
 8006a3c:	f7fc fbec 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xD633, 0x6D);
 8006a40:	216d      	movs	r1, #109	; 0x6d
 8006a42:	f24d 6033 	movw	r0, #54835	; 0xd633
 8006a46:	f7fc fbe7 	bl	8003218 <LCD_WriteReg>
		//LV2 Page 0 enable
		LCD_WriteReg(0xF000, 0x55);
 8006a4a:	2155      	movs	r1, #85	; 0x55
 8006a4c:	f44f 4070 	mov.w	r0, #61440	; 0xf000
 8006a50:	f7fc fbe2 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xF001, 0xAA);
 8006a54:	21aa      	movs	r1, #170	; 0xaa
 8006a56:	f24f 0001 	movw	r0, #61441	; 0xf001
 8006a5a:	f7fc fbdd 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xF002, 0x52);
 8006a5e:	2152      	movs	r1, #82	; 0x52
 8006a60:	f24f 0002 	movw	r0, #61442	; 0xf002
 8006a64:	f7fc fbd8 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xF003, 0x08);
 8006a68:	2108      	movs	r1, #8
 8006a6a:	f24f 0003 	movw	r0, #61443	; 0xf003
 8006a6e:	f7fc fbd3 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xF004, 0x00);
 8006a72:	2100      	movs	r1, #0
 8006a74:	f24f 0004 	movw	r0, #61444	; 0xf004
 8006a78:	f7fc fbce 	bl	8003218 <LCD_WriteReg>
		//Display control
		LCD_WriteReg(0xB100, 0xCC);
 8006a7c:	21cc      	movs	r1, #204	; 0xcc
 8006a7e:	f44f 4031 	mov.w	r0, #45312	; 0xb100
 8006a82:	f7fc fbc9 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xB101, 0x00);
 8006a86:	2100      	movs	r1, #0
 8006a88:	f24b 1001 	movw	r0, #45313	; 0xb101
 8006a8c:	f7fc fbc4 	bl	8003218 <LCD_WriteReg>
		//Source hold time
		LCD_WriteReg(0xB600, 0x05);
 8006a90:	2105      	movs	r1, #5
 8006a92:	f44f 4036 	mov.w	r0, #46592	; 0xb600
 8006a96:	f7fc fbbf 	bl	8003218 <LCD_WriteReg>
		//Gate EQ control
		LCD_WriteReg(0xB700, 0x70);
 8006a9a:	2170      	movs	r1, #112	; 0x70
 8006a9c:	f44f 4037 	mov.w	r0, #46848	; 0xb700
 8006aa0:	f7fc fbba 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xB701, 0x70);
 8006aa4:	2170      	movs	r1, #112	; 0x70
 8006aa6:	f24b 7001 	movw	r0, #46849	; 0xb701
 8006aaa:	f7fc fbb5 	bl	8003218 <LCD_WriteReg>
		//Source EQ control (Mode 2)
		LCD_WriteReg(0xB800, 0x01);
 8006aae:	2101      	movs	r1, #1
 8006ab0:	f44f 4038 	mov.w	r0, #47104	; 0xb800
 8006ab4:	f7fc fbb0 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xB801, 0x03);
 8006ab8:	2103      	movs	r1, #3
 8006aba:	f64b 0001 	movw	r0, #47105	; 0xb801
 8006abe:	f7fc fbab 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xB802, 0x03);
 8006ac2:	2103      	movs	r1, #3
 8006ac4:	f64b 0002 	movw	r0, #47106	; 0xb802
 8006ac8:	f7fc fba6 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xB803, 0x03);
 8006acc:	2103      	movs	r1, #3
 8006ace:	f64b 0003 	movw	r0, #47107	; 0xb803
 8006ad2:	f7fc fba1 	bl	8003218 <LCD_WriteReg>
		//Inversion mode (2-dot)
		LCD_WriteReg(0xBC00, 0x02);
 8006ad6:	2102      	movs	r1, #2
 8006ad8:	f44f 403c 	mov.w	r0, #48128	; 0xbc00
 8006adc:	f7fc fb9c 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xBC01, 0x00);
 8006ae0:	2100      	movs	r1, #0
 8006ae2:	f64b 4001 	movw	r0, #48129	; 0xbc01
 8006ae6:	f7fc fb97 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xBC02, 0x00);
 8006aea:	2100      	movs	r1, #0
 8006aec:	f64b 4002 	movw	r0, #48130	; 0xbc02
 8006af0:	f7fc fb92 	bl	8003218 <LCD_WriteReg>
		//Timing control 4H w/ 4-delay
		LCD_WriteReg(0xC900, 0xD0);
 8006af4:	21d0      	movs	r1, #208	; 0xd0
 8006af6:	f44f 4049 	mov.w	r0, #51456	; 0xc900
 8006afa:	f7fc fb8d 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xC901, 0x02);
 8006afe:	2102      	movs	r1, #2
 8006b00:	f64c 1001 	movw	r0, #51457	; 0xc901
 8006b04:	f7fc fb88 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xC902, 0x50);
 8006b08:	2150      	movs	r1, #80	; 0x50
 8006b0a:	f64c 1002 	movw	r0, #51458	; 0xc902
 8006b0e:	f7fc fb83 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xC903, 0x50);
 8006b12:	2150      	movs	r1, #80	; 0x50
 8006b14:	f64c 1003 	movw	r0, #51459	; 0xc903
 8006b18:	f7fc fb7e 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xC904, 0x50);
 8006b1c:	2150      	movs	r1, #80	; 0x50
 8006b1e:	f64c 1004 	movw	r0, #51460	; 0xc904
 8006b22:	f7fc fb79 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x3500, 0x00);
 8006b26:	2100      	movs	r1, #0
 8006b28:	f44f 5054 	mov.w	r0, #13568	; 0x3500
 8006b2c:	f7fc fb74 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x3A00, 0x55);  //16-bit/pixel
 8006b30:	2155      	movs	r1, #85	; 0x55
 8006b32:	f44f 5068 	mov.w	r0, #14848	; 0x3a00
 8006b36:	f7fc fb6f 	bl	8003218 <LCD_WriteReg>
		LCD_WR_REG(0x1100);
 8006b3a:	f44f 5088 	mov.w	r0, #4352	; 0x1100
 8006b3e:	f7fc fadf 	bl	8003100 <LCD_WR_REG>
//		delay_us(120); // us
		HAL_Delay(1);
 8006b42:	2001      	movs	r0, #1
 8006b44:	f7f9 ffc0 	bl	8000ac8 <HAL_Delay>
		LCD_WR_REG(0x2900);
 8006b48:	f44f 5024 	mov.w	r0, #10496	; 0x2900
 8006b4c:	f7fc fad8 	bl	8003100 <LCD_WR_REG>
 8006b50:	f001 bd18 	b.w	8008584 <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x9325)  //9325
 8006b54:	4bec      	ldr	r3, [pc, #944]	; (8006f08 <LCD_Init+0x27b8>)
 8006b56:	889b      	ldrh	r3, [r3, #4]
 8006b58:	f249 3225 	movw	r2, #37669	; 0x9325
 8006b5c:	4293      	cmp	r3, r2
 8006b5e:	f040 80d7 	bne.w	8006d10 <LCD_Init+0x25c0>
			{
		LCD_WriteReg(0x00E5, 0x78F0);
 8006b62:	f647 01f0 	movw	r1, #30960	; 0x78f0
 8006b66:	20e5      	movs	r0, #229	; 0xe5
 8006b68:	f7fc fb56 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0001, 0x0100);
 8006b6c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006b70:	2001      	movs	r0, #1
 8006b72:	f7fc fb51 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0700);
 8006b76:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8006b7a:	2002      	movs	r0, #2
 8006b7c:	f7fc fb4c 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0x1030);
 8006b80:	f241 0130 	movw	r1, #4144	; 0x1030
 8006b84:	2003      	movs	r0, #3
 8006b86:	f7fc fb47 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0004, 0x0000);
 8006b8a:	2100      	movs	r1, #0
 8006b8c:	2004      	movs	r0, #4
 8006b8e:	f7fc fb43 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x0202);
 8006b92:	f240 2102 	movw	r1, #514	; 0x202
 8006b96:	2008      	movs	r0, #8
 8006b98:	f7fc fb3e 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0009, 0x0000);
 8006b9c:	2100      	movs	r1, #0
 8006b9e:	2009      	movs	r0, #9
 8006ba0:	f7fc fb3a 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x000A, 0x0000);
 8006ba4:	2100      	movs	r1, #0
 8006ba6:	200a      	movs	r0, #10
 8006ba8:	f7fc fb36 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000);
 8006bac:	2100      	movs	r1, #0
 8006bae:	200c      	movs	r0, #12
 8006bb0:	f7fc fb32 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x000D, 0x0000);
 8006bb4:	2100      	movs	r1, #0
 8006bb6:	200d      	movs	r0, #13
 8006bb8:	f7fc fb2e 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000);
 8006bbc:	2100      	movs	r1, #0
 8006bbe:	200f      	movs	r0, #15
 8006bc0:	f7fc fb2a 	bl	8003218 <LCD_WriteReg>
		//power on sequence VGHVGL
		LCD_WriteReg(0x0010, 0x0000);
 8006bc4:	2100      	movs	r1, #0
 8006bc6:	2010      	movs	r0, #16
 8006bc8:	f7fc fb26 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0007);
 8006bcc:	2107      	movs	r1, #7
 8006bce:	2011      	movs	r0, #17
 8006bd0:	f7fc fb22 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x0000);
 8006bd4:	2100      	movs	r1, #0
 8006bd6:	2012      	movs	r0, #18
 8006bd8:	f7fc fb1e 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0000);
 8006bdc:	2100      	movs	r1, #0
 8006bde:	2013      	movs	r0, #19
 8006be0:	f7fc fb1a 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0000);
 8006be4:	2100      	movs	r1, #0
 8006be6:	2007      	movs	r0, #7
 8006be8:	f7fc fb16 	bl	8003218 <LCD_WriteReg>
		//vgh 
		LCD_WriteReg(0x0010, 0x1690);
 8006bec:	f241 6190 	movw	r1, #5776	; 0x1690
 8006bf0:	2010      	movs	r0, #16
 8006bf2:	f7fc fb11 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0227);
 8006bf6:	f240 2127 	movw	r1, #551	; 0x227
 8006bfa:	2011      	movs	r0, #17
 8006bfc:	f7fc fb0c 	bl	8003218 <LCD_WriteReg>
		//delayms(100);
		//vregiout 
		LCD_WriteReg(0x0012, 0x009D); //0x001b
 8006c00:	219d      	movs	r1, #157	; 0x9d
 8006c02:	2012      	movs	r0, #18
 8006c04:	f7fc fb08 	bl	8003218 <LCD_WriteReg>
		//delayms(100); 
		//vom amplitude
		LCD_WriteReg(0x0013, 0x1900);
 8006c08:	f44f 51c8 	mov.w	r1, #6400	; 0x1900
 8006c0c:	2013      	movs	r0, #19
 8006c0e:	f7fc fb03 	bl	8003218 <LCD_WriteReg>
		//delayms(100); 
		//vom H
		LCD_WriteReg(0x0029, 0x0025);
 8006c12:	2125      	movs	r1, #37	; 0x25
 8006c14:	2029      	movs	r0, #41	; 0x29
 8006c16:	f7fc faff 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x002B, 0x000D);
 8006c1a:	210d      	movs	r1, #13
 8006c1c:	202b      	movs	r0, #43	; 0x2b
 8006c1e:	f7fc fafb 	bl	8003218 <LCD_WriteReg>
		//gamma
		LCD_WriteReg(0x0030, 0x0007);
 8006c22:	2107      	movs	r1, #7
 8006c24:	2030      	movs	r0, #48	; 0x30
 8006c26:	f7fc faf7 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0303);
 8006c2a:	f240 3103 	movw	r1, #771	; 0x303
 8006c2e:	2031      	movs	r0, #49	; 0x31
 8006c30:	f7fc faf2 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0003);		// 0006
 8006c34:	2103      	movs	r1, #3
 8006c36:	2032      	movs	r0, #50	; 0x32
 8006c38:	f7fc faee 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0206);
 8006c3c:	f240 2106 	movw	r1, #518	; 0x206
 8006c40:	2035      	movs	r0, #53	; 0x35
 8006c42:	f7fc fae9 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x0008);
 8006c46:	2108      	movs	r1, #8
 8006c48:	2036      	movs	r0, #54	; 0x36
 8006c4a:	f7fc fae5 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0406);
 8006c4e:	f240 4106 	movw	r1, #1030	; 0x406
 8006c52:	2037      	movs	r0, #55	; 0x37
 8006c54:	f7fc fae0 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0304);		//0200
 8006c58:	f44f 7141 	mov.w	r1, #772	; 0x304
 8006c5c:	2038      	movs	r0, #56	; 0x38
 8006c5e:	f7fc fadb 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0007);
 8006c62:	2107      	movs	r1, #7
 8006c64:	2039      	movs	r0, #57	; 0x39
 8006c66:	f7fc fad7 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x003C, 0x0602);		// 0504
 8006c6a:	f240 6102 	movw	r1, #1538	; 0x602
 8006c6e:	203c      	movs	r0, #60	; 0x3c
 8006c70:	f7fc fad2 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x003D, 0x0008);
 8006c74:	2108      	movs	r1, #8
 8006c76:	203d      	movs	r0, #61	; 0x3d
 8006c78:	f7fc face 	bl	8003218 <LCD_WriteReg>
		//ram
		LCD_WriteReg(0x0050, 0x0000);
 8006c7c:	2100      	movs	r1, #0
 8006c7e:	2050      	movs	r0, #80	; 0x50
 8006c80:	f7fc faca 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00EF);
 8006c84:	21ef      	movs	r1, #239	; 0xef
 8006c86:	2051      	movs	r0, #81	; 0x51
 8006c88:	f7fc fac6 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000);
 8006c8c:	2100      	movs	r1, #0
 8006c8e:	2052      	movs	r0, #82	; 0x52
 8006c90:	f7fc fac2 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013F);
 8006c94:	f240 113f 	movw	r1, #319	; 0x13f
 8006c98:	2053      	movs	r0, #83	; 0x53
 8006c9a:	f7fc fabd 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0060, 0xA700);
 8006c9e:	f44f 4127 	mov.w	r1, #42752	; 0xa700
 8006ca2:	2060      	movs	r0, #96	; 0x60
 8006ca4:	f7fc fab8 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001);
 8006ca8:	2101      	movs	r1, #1
 8006caa:	2061      	movs	r0, #97	; 0x61
 8006cac:	f7fc fab4 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x006A, 0x0000);
 8006cb0:	2100      	movs	r1, #0
 8006cb2:	206a      	movs	r0, #106	; 0x6a
 8006cb4:	f7fc fab0 	bl	8003218 <LCD_WriteReg>
		//
		LCD_WriteReg(0x0080, 0x0000);
 8006cb8:	2100      	movs	r1, #0
 8006cba:	2080      	movs	r0, #128	; 0x80
 8006cbc:	f7fc faac 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0081, 0x0000);
 8006cc0:	2100      	movs	r1, #0
 8006cc2:	2081      	movs	r0, #129	; 0x81
 8006cc4:	f7fc faa8 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0082, 0x0000);
 8006cc8:	2100      	movs	r1, #0
 8006cca:	2082      	movs	r0, #130	; 0x82
 8006ccc:	f7fc faa4 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0083, 0x0000);
 8006cd0:	2100      	movs	r1, #0
 8006cd2:	2083      	movs	r0, #131	; 0x83
 8006cd4:	f7fc faa0 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0084, 0x0000);
 8006cd8:	2100      	movs	r1, #0
 8006cda:	2084      	movs	r0, #132	; 0x84
 8006cdc:	f7fc fa9c 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0085, 0x0000);
 8006ce0:	2100      	movs	r1, #0
 8006ce2:	2085      	movs	r0, #133	; 0x85
 8006ce4:	f7fc fa98 	bl	8003218 <LCD_WriteReg>
		//
		LCD_WriteReg(0x0090, 0x0010);
 8006ce8:	2110      	movs	r1, #16
 8006cea:	2090      	movs	r0, #144	; 0x90
 8006cec:	f7fc fa94 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0600);
 8006cf0:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006cf4:	2092      	movs	r0, #146	; 0x92
 8006cf6:	f7fc fa8f 	bl	8003218 <LCD_WriteReg>

		LCD_WriteReg(0x0007, 0x0133);
 8006cfa:	f240 1133 	movw	r1, #307	; 0x133
 8006cfe:	2007      	movs	r0, #7
 8006d00:	f7fc fa8a 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x00, 0x0022);		//
 8006d04:	2122      	movs	r1, #34	; 0x22
 8006d06:	2000      	movs	r0, #0
 8006d08:	f7fc fa86 	bl	8003218 <LCD_WriteReg>
 8006d0c:	f001 bc3a 	b.w	8008584 <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x9328)		//ILI9328   OK
 8006d10:	4b7d      	ldr	r3, [pc, #500]	; (8006f08 <LCD_Init+0x27b8>)
 8006d12:	889b      	ldrh	r3, [r3, #4]
 8006d14:	f249 3228 	movw	r2, #37672	; 0x9328
 8006d18:	4293      	cmp	r3, r2
 8006d1a:	f040 80f7 	bne.w	8006f0c <LCD_Init+0x27bc>
			{
		LCD_WriteReg(0x00EC, 0x108F);		// internal timeing
 8006d1e:	f241 018f 	movw	r1, #4239	; 0x108f
 8006d22:	20ec      	movs	r0, #236	; 0xec
 8006d24:	f7fc fa78 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x00EF, 0x1234);		// ADD
 8006d28:	f241 2134 	movw	r1, #4660	; 0x1234
 8006d2c:	20ef      	movs	r0, #239	; 0xef
 8006d2e:	f7fc fa73 	bl	8003218 <LCD_WriteReg>
		//LCD_WriteReg(0x00e7,0x0010);      
		//LCD_WriteReg(0x0000,0x0001);//开启内部时钟
		LCD_WriteReg(0x0001, 0x0100);
 8006d32:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006d36:	2001      	movs	r0, #1
 8006d38:	f7fc fa6e 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0700);        //电源开启
 8006d3c:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8006d40:	2002      	movs	r0, #2
 8006d42:	f7fc fa69 	bl	8003218 <LCD_WriteReg>
		// 1  1   0    D->U	L->R
		// 0  0   1	   R->L U->D
		// 1  0   1    U->D	R->L
		// 0  1   1    L->R U->D 正常就用这个.
		// 1  1   1	   U->D	L->R
		LCD_WriteReg(0x0003, (1 << 12) | (3 << 4) | (0 << 3));		//65K
 8006d46:	f241 0130 	movw	r1, #4144	; 0x1030
 8006d4a:	2003      	movs	r0, #3
 8006d4c:	f7fc fa64 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0004, 0x0000);
 8006d50:	2100      	movs	r1, #0
 8006d52:	2004      	movs	r0, #4
 8006d54:	f7fc fa60 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x0202);
 8006d58:	f240 2102 	movw	r1, #514	; 0x202
 8006d5c:	2008      	movs	r0, #8
 8006d5e:	f7fc fa5b 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0009, 0x0000);
 8006d62:	2100      	movs	r1, #0
 8006d64:	2009      	movs	r0, #9
 8006d66:	f7fc fa57 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x000a, 0x0000);		//display setting
 8006d6a:	2100      	movs	r1, #0
 8006d6c:	200a      	movs	r0, #10
 8006d6e:	f7fc fa53 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x000c, 0x0001);		//display setting
 8006d72:	2101      	movs	r1, #1
 8006d74:	200c      	movs	r0, #12
 8006d76:	f7fc fa4f 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x000d, 0x0000);		//0f3c
 8006d7a:	2100      	movs	r1, #0
 8006d7c:	200d      	movs	r0, #13
 8006d7e:	f7fc fa4b 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x000f, 0x0000);
 8006d82:	2100      	movs	r1, #0
 8006d84:	200f      	movs	r0, #15
 8006d86:	f7fc fa47 	bl	8003218 <LCD_WriteReg>
		//电源配置
		LCD_WriteReg(0x0010, 0x0000);
 8006d8a:	2100      	movs	r1, #0
 8006d8c:	2010      	movs	r0, #16
 8006d8e:	f7fc fa43 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0007);
 8006d92:	2107      	movs	r1, #7
 8006d94:	2011      	movs	r0, #17
 8006d96:	f7fc fa3f 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x0000);
 8006d9a:	2100      	movs	r1, #0
 8006d9c:	2012      	movs	r0, #18
 8006d9e:	f7fc fa3b 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0000);
 8006da2:	2100      	movs	r1, #0
 8006da4:	2013      	movs	r0, #19
 8006da6:	f7fc fa37 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0001);
 8006daa:	2101      	movs	r1, #1
 8006dac:	2007      	movs	r0, #7
 8006dae:	f7fc fa33 	bl	8003218 <LCD_WriteReg>
		HAL_Delay(50);
 8006db2:	2032      	movs	r0, #50	; 0x32
 8006db4:	f7f9 fe88 	bl	8000ac8 <HAL_Delay>
		LCD_WriteReg(0x0010, 0x1490);
 8006db8:	f241 4190 	movw	r1, #5264	; 0x1490
 8006dbc:	2010      	movs	r0, #16
 8006dbe:	f7fc fa2b 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0227);
 8006dc2:	f240 2127 	movw	r1, #551	; 0x227
 8006dc6:	2011      	movs	r0, #17
 8006dc8:	f7fc fa26 	bl	8003218 <LCD_WriteReg>
		HAL_Delay(50);
 8006dcc:	2032      	movs	r0, #50	; 0x32
 8006dce:	f7f9 fe7b 	bl	8000ac8 <HAL_Delay>
		LCD_WriteReg(0x0012, 0x008A);
 8006dd2:	218a      	movs	r1, #138	; 0x8a
 8006dd4:	2012      	movs	r0, #18
 8006dd6:	f7fc fa1f 	bl	8003218 <LCD_WriteReg>
		HAL_Delay(50);
 8006dda:	2032      	movs	r0, #50	; 0x32
 8006ddc:	f7f9 fe74 	bl	8000ac8 <HAL_Delay>
		LCD_WriteReg(0x0013, 0x1a00);
 8006de0:	f44f 51d0 	mov.w	r1, #6656	; 0x1a00
 8006de4:	2013      	movs	r0, #19
 8006de6:	f7fc fa17 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0029, 0x0006);
 8006dea:	2106      	movs	r1, #6
 8006dec:	2029      	movs	r0, #41	; 0x29
 8006dee:	f7fc fa13 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x002b, 0x000d);
 8006df2:	210d      	movs	r1, #13
 8006df4:	202b      	movs	r0, #43	; 0x2b
 8006df6:	f7fc fa0f 	bl	8003218 <LCD_WriteReg>
		HAL_Delay(50);
 8006dfa:	2032      	movs	r0, #50	; 0x32
 8006dfc:	f7f9 fe64 	bl	8000ac8 <HAL_Delay>
		LCD_WriteReg(0x0020, 0x0000);
 8006e00:	2100      	movs	r1, #0
 8006e02:	2020      	movs	r0, #32
 8006e04:	f7fc fa08 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x0000);
 8006e08:	2100      	movs	r1, #0
 8006e0a:	2021      	movs	r0, #33	; 0x21
 8006e0c:	f7fc fa04 	bl	8003218 <LCD_WriteReg>
		HAL_Delay(50);
 8006e10:	2032      	movs	r0, #50	; 0x32
 8006e12:	f7f9 fe59 	bl	8000ac8 <HAL_Delay>
		//伽马校正
		LCD_WriteReg(0x0030, 0x0000);
 8006e16:	2100      	movs	r1, #0
 8006e18:	2030      	movs	r0, #48	; 0x30
 8006e1a:	f7fc f9fd 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0604);
 8006e1e:	f240 6104 	movw	r1, #1540	; 0x604
 8006e22:	2031      	movs	r0, #49	; 0x31
 8006e24:	f7fc f9f8 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0305);
 8006e28:	f240 3105 	movw	r1, #773	; 0x305
 8006e2c:	2032      	movs	r0, #50	; 0x32
 8006e2e:	f7fc f9f3 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0000);
 8006e32:	2100      	movs	r1, #0
 8006e34:	2035      	movs	r0, #53	; 0x35
 8006e36:	f7fc f9ef 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x0C09);
 8006e3a:	f640 4109 	movw	r1, #3081	; 0xc09
 8006e3e:	2036      	movs	r0, #54	; 0x36
 8006e40:	f7fc f9ea 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0204);
 8006e44:	f44f 7101 	mov.w	r1, #516	; 0x204
 8006e48:	2037      	movs	r0, #55	; 0x37
 8006e4a:	f7fc f9e5 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0301);
 8006e4e:	f240 3101 	movw	r1, #769	; 0x301
 8006e52:	2038      	movs	r0, #56	; 0x38
 8006e54:	f7fc f9e0 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0707);
 8006e58:	f240 7107 	movw	r1, #1799	; 0x707
 8006e5c:	2039      	movs	r0, #57	; 0x39
 8006e5e:	f7fc f9db 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x003c, 0x0000);
 8006e62:	2100      	movs	r1, #0
 8006e64:	203c      	movs	r0, #60	; 0x3c
 8006e66:	f7fc f9d7 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x003d, 0x0a0a);
 8006e6a:	f640 210a 	movw	r1, #2570	; 0xa0a
 8006e6e:	203d      	movs	r0, #61	; 0x3d
 8006e70:	f7fc f9d2 	bl	8003218 <LCD_WriteReg>
		HAL_Delay(50);
 8006e74:	2032      	movs	r0, #50	; 0x32
 8006e76:	f7f9 fe27 	bl	8000ac8 <HAL_Delay>
		LCD_WriteReg(0x0050, 0x0000); //水平GRAM起始位置
 8006e7a:	2100      	movs	r1, #0
 8006e7c:	2050      	movs	r0, #80	; 0x50
 8006e7e:	f7fc f9cb 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00ef); //水平GRAM终止位置
 8006e82:	21ef      	movs	r1, #239	; 0xef
 8006e84:	2051      	movs	r0, #81	; 0x51
 8006e86:	f7fc f9c7 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000); //垂直GRAM起始位置
 8006e8a:	2100      	movs	r1, #0
 8006e8c:	2052      	movs	r0, #82	; 0x52
 8006e8e:	f7fc f9c3 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013f); //垂直GRAM终止位置
 8006e92:	f240 113f 	movw	r1, #319	; 0x13f
 8006e96:	2053      	movs	r0, #83	; 0x53
 8006e98:	f7fc f9be 	bl	8003218 <LCD_WriteReg>

		LCD_WriteReg(0x0060, 0xa700);
 8006e9c:	f44f 4127 	mov.w	r1, #42752	; 0xa700
 8006ea0:	2060      	movs	r0, #96	; 0x60
 8006ea2:	f7fc f9b9 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001);
 8006ea6:	2101      	movs	r1, #1
 8006ea8:	2061      	movs	r0, #97	; 0x61
 8006eaa:	f7fc f9b5 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x006a, 0x0000);
 8006eae:	2100      	movs	r1, #0
 8006eb0:	206a      	movs	r0, #106	; 0x6a
 8006eb2:	f7fc f9b1 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0080, 0x0000);
 8006eb6:	2100      	movs	r1, #0
 8006eb8:	2080      	movs	r0, #128	; 0x80
 8006eba:	f7fc f9ad 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0081, 0x0000);
 8006ebe:	2100      	movs	r1, #0
 8006ec0:	2081      	movs	r0, #129	; 0x81
 8006ec2:	f7fc f9a9 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0082, 0x0000);
 8006ec6:	2100      	movs	r1, #0
 8006ec8:	2082      	movs	r0, #130	; 0x82
 8006eca:	f7fc f9a5 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0083, 0x0000);
 8006ece:	2100      	movs	r1, #0
 8006ed0:	2083      	movs	r0, #131	; 0x83
 8006ed2:	f7fc f9a1 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0084, 0x0000);
 8006ed6:	2100      	movs	r1, #0
 8006ed8:	2084      	movs	r0, #132	; 0x84
 8006eda:	f7fc f99d 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0085, 0x0000);
 8006ede:	2100      	movs	r1, #0
 8006ee0:	2085      	movs	r0, #133	; 0x85
 8006ee2:	f7fc f999 	bl	8003218 <LCD_WriteReg>

		LCD_WriteReg(0x0090, 0x0010);
 8006ee6:	2110      	movs	r1, #16
 8006ee8:	2090      	movs	r0, #144	; 0x90
 8006eea:	f7fc f995 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0600);
 8006eee:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006ef2:	2092      	movs	r0, #146	; 0x92
 8006ef4:	f7fc f990 	bl	8003218 <LCD_WriteReg>
		//开启显示设置
		LCD_WriteReg(0x0007, 0x0133);
 8006ef8:	f240 1133 	movw	r1, #307	; 0x133
 8006efc:	2007      	movs	r0, #7
 8006efe:	f7fc f98b 	bl	8003218 <LCD_WriteReg>
 8006f02:	f001 bb3f 	b.w	8008584 <LCD_Init+0x3e34>
 8006f06:	bf00      	nop
 8006f08:	200000b4 	.word	0x200000b4
	} else if (lcddev.id == 0x9320) //测试OK.
 8006f0c:	4bce      	ldr	r3, [pc, #824]	; (8007248 <LCD_Init+0x2af8>)
 8006f0e:	889b      	ldrh	r3, [r3, #4]
 8006f10:	f249 3220 	movw	r2, #37664	; 0x9320
 8006f14:	4293      	cmp	r3, r2
 8006f16:	f040 80ad 	bne.w	8007074 <LCD_Init+0x2924>
			{
		LCD_WriteReg(0x00, 0x0000);
 8006f1a:	2100      	movs	r1, #0
 8006f1c:	2000      	movs	r0, #0
 8006f1e:	f7fc f97b 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x01, 0x0100);	//Driver Output Contral.
 8006f22:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006f26:	2001      	movs	r0, #1
 8006f28:	f7fc f976 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x02, 0x0700);	//LCD Driver Waveform Contral.
 8006f2c:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8006f30:	2002      	movs	r0, #2
 8006f32:	f7fc f971 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x03, 0x1030);	//Entry Mode Set.
 8006f36:	f241 0130 	movw	r1, #4144	; 0x1030
 8006f3a:	2003      	movs	r0, #3
 8006f3c:	f7fc f96c 	bl	8003218 <LCD_WriteReg>
		//LCD_WriteReg(0x03,0x1018);	//Entry Mode Set.

		LCD_WriteReg(0x04, 0x0000);	//Scalling Contral.
 8006f40:	2100      	movs	r1, #0
 8006f42:	2004      	movs	r0, #4
 8006f44:	f7fc f968 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x08, 0x0202);	//Display Contral 2.(0x0207)
 8006f48:	f240 2102 	movw	r1, #514	; 0x202
 8006f4c:	2008      	movs	r0, #8
 8006f4e:	f7fc f963 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x09, 0x0000);	//Display Contral 3.(0x0000)
 8006f52:	2100      	movs	r1, #0
 8006f54:	2009      	movs	r0, #9
 8006f56:	f7fc f95f 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0a, 0x0000);	//Frame Cycle Contal.(0x0000)
 8006f5a:	2100      	movs	r1, #0
 8006f5c:	200a      	movs	r0, #10
 8006f5e:	f7fc f95b 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0c, (1 << 0));	//Extern Display Interface Contral 1.(0x0000)
 8006f62:	2101      	movs	r1, #1
 8006f64:	200c      	movs	r0, #12
 8006f66:	f7fc f957 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0d, 0x0000);	//Frame Maker Position.
 8006f6a:	2100      	movs	r1, #0
 8006f6c:	200d      	movs	r0, #13
 8006f6e:	f7fc f953 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0f, 0x0000);	//Extern Display Interface Contral 2.
 8006f72:	2100      	movs	r1, #0
 8006f74:	200f      	movs	r0, #15
 8006f76:	f7fc f94f 	bl	8003218 <LCD_WriteReg>
		HAL_Delay(50);
 8006f7a:	2032      	movs	r0, #50	; 0x32
 8006f7c:	f7f9 fda4 	bl	8000ac8 <HAL_Delay>
		LCD_WriteReg(0x07, 0x0101);	//Display Contral.
 8006f80:	f240 1101 	movw	r1, #257	; 0x101
 8006f84:	2007      	movs	r0, #7
 8006f86:	f7fc f947 	bl	8003218 <LCD_WriteReg>
		HAL_Delay(50);
 8006f8a:	2032      	movs	r0, #50	; 0x32
 8006f8c:	f7f9 fd9c 	bl	8000ac8 <HAL_Delay>
		LCD_WriteReg(0x10, (1 << 12) | (0 << 8) | (1 << 7) | (1 << 6) | (0 << 4));//Power Control 1.(0x16b0)
 8006f90:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
 8006f94:	2010      	movs	r0, #16
 8006f96:	f7fc f93f 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x11, 0x0007);								//Power Control 2.(0x0001)
 8006f9a:	2107      	movs	r1, #7
 8006f9c:	2011      	movs	r0, #17
 8006f9e:	f7fc f93b 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x12, (1 << 8) | (1 << 4) | (0 << 0));	//Power Control 3.(0x0138)
 8006fa2:	f44f 7188 	mov.w	r1, #272	; 0x110
 8006fa6:	2012      	movs	r0, #18
 8006fa8:	f7fc f936 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x13, 0x0b00);								//Power Control 4.
 8006fac:	f44f 6130 	mov.w	r1, #2816	; 0xb00
 8006fb0:	2013      	movs	r0, #19
 8006fb2:	f7fc f931 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x29, 0x0000);								//Power Control 7.
 8006fb6:	2100      	movs	r1, #0
 8006fb8:	2029      	movs	r0, #41	; 0x29
 8006fba:	f7fc f92d 	bl	8003218 <LCD_WriteReg>

		LCD_WriteReg(0x2b, (1 << 14) | (1 << 4));
 8006fbe:	f244 0110 	movw	r1, #16400	; 0x4010
 8006fc2:	202b      	movs	r0, #43	; 0x2b
 8006fc4:	f7fc f928 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x50, 0);	//Set X Star
 8006fc8:	2100      	movs	r1, #0
 8006fca:	2050      	movs	r0, #80	; 0x50
 8006fcc:	f7fc f924 	bl	8003218 <LCD_WriteReg>
		//水平GRAM终止位置Set X End.
		LCD_WriteReg(0x51, 239);	//Set Y Star
 8006fd0:	21ef      	movs	r1, #239	; 0xef
 8006fd2:	2051      	movs	r0, #81	; 0x51
 8006fd4:	f7fc f920 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x52, 0);	//Set Y End.t.
 8006fd8:	2100      	movs	r1, #0
 8006fda:	2052      	movs	r0, #82	; 0x52
 8006fdc:	f7fc f91c 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x53, 319);	//
 8006fe0:	f240 113f 	movw	r1, #319	; 0x13f
 8006fe4:	2053      	movs	r0, #83	; 0x53
 8006fe6:	f7fc f917 	bl	8003218 <LCD_WriteReg>

		LCD_WriteReg(0x60, 0x2700);	//Driver Output Control.
 8006fea:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8006fee:	2060      	movs	r0, #96	; 0x60
 8006ff0:	f7fc f912 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x61, 0x0001);	//Driver Output Control.
 8006ff4:	2101      	movs	r1, #1
 8006ff6:	2061      	movs	r0, #97	; 0x61
 8006ff8:	f7fc f90e 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x6a, 0x0000);	//Vertical Srcoll Control.
 8006ffc:	2100      	movs	r1, #0
 8006ffe:	206a      	movs	r0, #106	; 0x6a
 8007000:	f7fc f90a 	bl	8003218 <LCD_WriteReg>

		LCD_WriteReg(0x80, 0x0000);	//Display Position? Partial Display 1.
 8007004:	2100      	movs	r1, #0
 8007006:	2080      	movs	r0, #128	; 0x80
 8007008:	f7fc f906 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x81, 0x0000);	//RAM Address Start? Partial Display 1.
 800700c:	2100      	movs	r1, #0
 800700e:	2081      	movs	r0, #129	; 0x81
 8007010:	f7fc f902 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x82, 0x0000);	//RAM Address End-Partial Display 1.
 8007014:	2100      	movs	r1, #0
 8007016:	2082      	movs	r0, #130	; 0x82
 8007018:	f7fc f8fe 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x83, 0x0000);	//Displsy Position? Partial Display 2.
 800701c:	2100      	movs	r1, #0
 800701e:	2083      	movs	r0, #131	; 0x83
 8007020:	f7fc f8fa 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x84, 0x0000);	//RAM Address Start? Partial Display 2.
 8007024:	2100      	movs	r1, #0
 8007026:	2084      	movs	r0, #132	; 0x84
 8007028:	f7fc f8f6 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x85, 0x0000);	//RAM Address End? Partial Display 2.
 800702c:	2100      	movs	r1, #0
 800702e:	2085      	movs	r0, #133	; 0x85
 8007030:	f7fc f8f2 	bl	8003218 <LCD_WriteReg>

		LCD_WriteReg(0x90, (0 << 7) | (16 << 0));	//Frame Cycle Contral.(0x0013)
 8007034:	2110      	movs	r1, #16
 8007036:	2090      	movs	r0, #144	; 0x90
 8007038:	f7fc f8ee 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x92, 0x0000);	//Panel Interface Contral 2.(0x0000)
 800703c:	2100      	movs	r1, #0
 800703e:	2092      	movs	r0, #146	; 0x92
 8007040:	f7fc f8ea 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x93, 0x0001);	//Panel Interface Contral 3.
 8007044:	2101      	movs	r1, #1
 8007046:	2093      	movs	r0, #147	; 0x93
 8007048:	f7fc f8e6 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x95, 0x0110);	//Frame Cycle Contral.(0x0110)
 800704c:	f44f 7188 	mov.w	r1, #272	; 0x110
 8007050:	2095      	movs	r0, #149	; 0x95
 8007052:	f7fc f8e1 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x97, (0 << 8));	//
 8007056:	2100      	movs	r1, #0
 8007058:	2097      	movs	r0, #151	; 0x97
 800705a:	f7fc f8dd 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x98, 0x0000);	//Frame Cycle Contral.
 800705e:	2100      	movs	r1, #0
 8007060:	2098      	movs	r0, #152	; 0x98
 8007062:	f7fc f8d9 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x07, 0x0173);	//(0x0173)
 8007066:	f240 1173 	movw	r1, #371	; 0x173
 800706a:	2007      	movs	r0, #7
 800706c:	f7fc f8d4 	bl	8003218 <LCD_WriteReg>
 8007070:	f001 ba88 	b.w	8008584 <LCD_Init+0x3e34>
	} else if (lcddev.id == 0X9331)	//OK |/|/|
 8007074:	4b74      	ldr	r3, [pc, #464]	; (8007248 <LCD_Init+0x2af8>)
 8007076:	889b      	ldrh	r3, [r3, #4]
 8007078:	f249 3231 	movw	r2, #37681	; 0x9331
 800707c:	4293      	cmp	r3, r2
 800707e:	f040 80e5 	bne.w	800724c <LCD_Init+0x2afc>
			{
		LCD_WriteReg(0x00E7, 0x1014);
 8007082:	f241 0114 	movw	r1, #4116	; 0x1014
 8007086:	20e7      	movs	r0, #231	; 0xe7
 8007088:	f7fc f8c6 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0001, 0x0100); // set SS and SM bit
 800708c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007090:	2001      	movs	r0, #1
 8007092:	f7fc f8c1 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0200); // set 1 line inversion
 8007096:	f44f 7100 	mov.w	r1, #512	; 0x200
 800709a:	2002      	movs	r0, #2
 800709c:	f7fc f8bc 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0003, (1 << 12) | (3 << 4) | (1 << 3)); //65K
 80070a0:	f241 0138 	movw	r1, #4152	; 0x1038
 80070a4:	2003      	movs	r0, #3
 80070a6:	f7fc f8b7 	bl	8003218 <LCD_WriteReg>
		//LCD_WriteReg(0x0003, 0x1030); // set GRAM write direction and BGR=1.
		LCD_WriteReg(0x0008, 0x0202); // set the back porch and front porch
 80070aa:	f240 2102 	movw	r1, #514	; 0x202
 80070ae:	2008      	movs	r0, #8
 80070b0:	f7fc f8b2 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0009, 0x0000); // set non-display area refresh cycle ISC[3:0]
 80070b4:	2100      	movs	r1, #0
 80070b6:	2009      	movs	r0, #9
 80070b8:	f7fc f8ae 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x000A, 0x0000); // FMARK function
 80070bc:	2100      	movs	r1, #0
 80070be:	200a      	movs	r0, #10
 80070c0:	f7fc f8aa 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000); // RGB interface setting
 80070c4:	2100      	movs	r1, #0
 80070c6:	200c      	movs	r0, #12
 80070c8:	f7fc f8a6 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x000D, 0x0000); // Frame marker Position
 80070cc:	2100      	movs	r1, #0
 80070ce:	200d      	movs	r0, #13
 80070d0:	f7fc f8a2 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000); // RGB interface polarity
 80070d4:	2100      	movs	r1, #0
 80070d6:	200f      	movs	r0, #15
 80070d8:	f7fc f89e 	bl	8003218 <LCD_WriteReg>
		//*************Power On sequence ****************//
		LCD_WriteReg(0x0010, 0x0000); // SAP, BT[3:0], AP, DSTB, SLP, STB
 80070dc:	2100      	movs	r1, #0
 80070de:	2010      	movs	r0, #16
 80070e0:	f7fc f89a 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0007); // DC1[2:0], DC0[2:0], VC[2:0]
 80070e4:	2107      	movs	r1, #7
 80070e6:	2011      	movs	r0, #17
 80070e8:	f7fc f896 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x0000); // VREG1OUT voltage
 80070ec:	2100      	movs	r1, #0
 80070ee:	2012      	movs	r0, #18
 80070f0:	f7fc f892 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0000); // VDV[4:0] for VCOM amplitude
 80070f4:	2100      	movs	r1, #0
 80070f6:	2013      	movs	r0, #19
 80070f8:	f7fc f88e 	bl	8003218 <LCD_WriteReg>
		HAL_Delay(200); // Dis-charge capacitor power voltage
 80070fc:	20c8      	movs	r0, #200	; 0xc8
 80070fe:	f7f9 fce3 	bl	8000ac8 <HAL_Delay>
		LCD_WriteReg(0x0010, 0x1690); // SAP, BT[3:0], AP, DSTB, SLP, STB
 8007102:	f241 6190 	movw	r1, #5776	; 0x1690
 8007106:	2010      	movs	r0, #16
 8007108:	f7fc f886 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0227); // DC1[2:0], DC0[2:0], VC[2:0]
 800710c:	f240 2127 	movw	r1, #551	; 0x227
 8007110:	2011      	movs	r0, #17
 8007112:	f7fc f881 	bl	8003218 <LCD_WriteReg>
		HAL_Delay(50); // Delay 50ms
 8007116:	2032      	movs	r0, #50	; 0x32
 8007118:	f7f9 fcd6 	bl	8000ac8 <HAL_Delay>
		LCD_WriteReg(0x0012, 0x000C); // Internal reference voltage= Vci;
 800711c:	210c      	movs	r1, #12
 800711e:	2012      	movs	r0, #18
 8007120:	f7fc f87a 	bl	8003218 <LCD_WriteReg>
		HAL_Delay(50); // Delay 50ms
 8007124:	2032      	movs	r0, #50	; 0x32
 8007126:	f7f9 fccf 	bl	8000ac8 <HAL_Delay>
		LCD_WriteReg(0x0013, 0x0800); // Set VDV[4:0] for VCOM amplitude
 800712a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800712e:	2013      	movs	r0, #19
 8007130:	f7fc f872 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0029, 0x0011); // Set VCM[5:0] for VCOMH
 8007134:	2111      	movs	r1, #17
 8007136:	2029      	movs	r0, #41	; 0x29
 8007138:	f7fc f86e 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x002B, 0x000B); // Set Frame Rate
 800713c:	210b      	movs	r1, #11
 800713e:	202b      	movs	r0, #43	; 0x2b
 8007140:	f7fc f86a 	bl	8003218 <LCD_WriteReg>
		HAL_Delay(50); // Delay 50ms
 8007144:	2032      	movs	r0, #50	; 0x32
 8007146:	f7f9 fcbf 	bl	8000ac8 <HAL_Delay>
		LCD_WriteReg(0x0020, 0x0000); // GRAM horizontal Address
 800714a:	2100      	movs	r1, #0
 800714c:	2020      	movs	r0, #32
 800714e:	f7fc f863 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x013f); // GRAM Vertical Address
 8007152:	f240 113f 	movw	r1, #319	; 0x13f
 8007156:	2021      	movs	r0, #33	; 0x21
 8007158:	f7fc f85e 	bl	8003218 <LCD_WriteReg>
		// ----------- Adjust the Gamma Curve ----------//
		LCD_WriteReg(0x0030, 0x0000);
 800715c:	2100      	movs	r1, #0
 800715e:	2030      	movs	r0, #48	; 0x30
 8007160:	f7fc f85a 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0106);
 8007164:	f44f 7183 	mov.w	r1, #262	; 0x106
 8007168:	2031      	movs	r0, #49	; 0x31
 800716a:	f7fc f855 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0000);
 800716e:	2100      	movs	r1, #0
 8007170:	2032      	movs	r0, #50	; 0x32
 8007172:	f7fc f851 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0204);
 8007176:	f44f 7101 	mov.w	r1, #516	; 0x204
 800717a:	2035      	movs	r0, #53	; 0x35
 800717c:	f7fc f84c 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x160A);
 8007180:	f241 610a 	movw	r1, #5642	; 0x160a
 8007184:	2036      	movs	r0, #54	; 0x36
 8007186:	f7fc f847 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0707);
 800718a:	f240 7107 	movw	r1, #1799	; 0x707
 800718e:	2037      	movs	r0, #55	; 0x37
 8007190:	f7fc f842 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0106);
 8007194:	f44f 7183 	mov.w	r1, #262	; 0x106
 8007198:	2038      	movs	r0, #56	; 0x38
 800719a:	f7fc f83d 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0707);
 800719e:	f240 7107 	movw	r1, #1799	; 0x707
 80071a2:	2039      	movs	r0, #57	; 0x39
 80071a4:	f7fc f838 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x003C, 0x0402);
 80071a8:	f240 4102 	movw	r1, #1026	; 0x402
 80071ac:	203c      	movs	r0, #60	; 0x3c
 80071ae:	f7fc f833 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x003D, 0x0C0F);
 80071b2:	f640 410f 	movw	r1, #3087	; 0xc0f
 80071b6:	203d      	movs	r0, #61	; 0x3d
 80071b8:	f7fc f82e 	bl	8003218 <LCD_WriteReg>
		//------------------ Set GRAM area ---------------//
		LCD_WriteReg(0x0050, 0x0000); // Horizontal GRAM Start Address
 80071bc:	2100      	movs	r1, #0
 80071be:	2050      	movs	r0, #80	; 0x50
 80071c0:	f7fc f82a 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00EF); // Horizontal GRAM End Address
 80071c4:	21ef      	movs	r1, #239	; 0xef
 80071c6:	2051      	movs	r0, #81	; 0x51
 80071c8:	f7fc f826 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000); // Vertical GRAM Start Address
 80071cc:	2100      	movs	r1, #0
 80071ce:	2052      	movs	r0, #82	; 0x52
 80071d0:	f7fc f822 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013F); // Vertical GRAM Start Address
 80071d4:	f240 113f 	movw	r1, #319	; 0x13f
 80071d8:	2053      	movs	r0, #83	; 0x53
 80071da:	f7fc f81d 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0060, 0x2700); // Gate Scan Line
 80071de:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 80071e2:	2060      	movs	r0, #96	; 0x60
 80071e4:	f7fc f818 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001); // NDL,VLE, REV 
 80071e8:	2101      	movs	r1, #1
 80071ea:	2061      	movs	r0, #97	; 0x61
 80071ec:	f7fc f814 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x006A, 0x0000); // set scrolling line
 80071f0:	2100      	movs	r1, #0
 80071f2:	206a      	movs	r0, #106	; 0x6a
 80071f4:	f7fc f810 	bl	8003218 <LCD_WriteReg>
		//-------------- Partial Display Control ---------//
		LCD_WriteReg(0x0080, 0x0000);
 80071f8:	2100      	movs	r1, #0
 80071fa:	2080      	movs	r0, #128	; 0x80
 80071fc:	f7fc f80c 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0081, 0x0000);
 8007200:	2100      	movs	r1, #0
 8007202:	2081      	movs	r0, #129	; 0x81
 8007204:	f7fc f808 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0082, 0x0000);
 8007208:	2100      	movs	r1, #0
 800720a:	2082      	movs	r0, #130	; 0x82
 800720c:	f7fc f804 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0083, 0x0000);
 8007210:	2100      	movs	r1, #0
 8007212:	2083      	movs	r0, #131	; 0x83
 8007214:	f7fc f800 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0084, 0x0000);
 8007218:	2100      	movs	r1, #0
 800721a:	2084      	movs	r0, #132	; 0x84
 800721c:	f7fb fffc 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0085, 0x0000);
 8007220:	2100      	movs	r1, #0
 8007222:	2085      	movs	r0, #133	; 0x85
 8007224:	f7fb fff8 	bl	8003218 <LCD_WriteReg>
		//-------------- Panel Control -------------------//
		LCD_WriteReg(0x0090, 0x0010);
 8007228:	2110      	movs	r1, #16
 800722a:	2090      	movs	r0, #144	; 0x90
 800722c:	f7fb fff4 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0600);
 8007230:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8007234:	2092      	movs	r0, #146	; 0x92
 8007236:	f7fb ffef 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0133); // 262K color and display ON
 800723a:	f240 1133 	movw	r1, #307	; 0x133
 800723e:	2007      	movs	r0, #7
 8007240:	f7fb ffea 	bl	8003218 <LCD_WriteReg>
 8007244:	f001 b99e 	b.w	8008584 <LCD_Init+0x3e34>
 8007248:	200000b4 	.word	0x200000b4
	} else if (lcddev.id == 0x5408) {
 800724c:	4be2      	ldr	r3, [pc, #904]	; (80075d8 <LCD_Init+0x2e88>)
 800724e:	889b      	ldrh	r3, [r3, #4]
 8007250:	f245 4208 	movw	r2, #21512	; 0x5408
 8007254:	4293      	cmp	r3, r2
 8007256:	f040 80a3 	bne.w	80073a0 <LCD_Init+0x2c50>
		LCD_WriteReg(0x01, 0x0100);
 800725a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800725e:	2001      	movs	r0, #1
 8007260:	f7fb ffda 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x02, 0x0700); //LCD Driving Waveform Contral
 8007264:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8007268:	2002      	movs	r0, #2
 800726a:	f7fb ffd5 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x03, 0x1030); //Entry Mode设置
 800726e:	f241 0130 	movw	r1, #4144	; 0x1030
 8007272:	2003      	movs	r0, #3
 8007274:	f7fb ffd0 	bl	8003218 <LCD_WriteReg>
		//指针从左至右自上而下的自动增模式
		//Normal Mode(Window Mode disable)
		//RGB格式
		//16位数据2次传输的8总线设置
		LCD_WriteReg(0x04, 0x0000); //Scalling Control register
 8007278:	2100      	movs	r1, #0
 800727a:	2004      	movs	r0, #4
 800727c:	f7fb ffcc 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x08, 0x0207); //Display Control 2
 8007280:	f240 2107 	movw	r1, #519	; 0x207
 8007284:	2008      	movs	r0, #8
 8007286:	f7fb ffc7 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x09, 0x0000); //Display Control 3
 800728a:	2100      	movs	r1, #0
 800728c:	2009      	movs	r0, #9
 800728e:	f7fb ffc3 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0A, 0x0000); //Frame Cycle Control
 8007292:	2100      	movs	r1, #0
 8007294:	200a      	movs	r0, #10
 8007296:	f7fb ffbf 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0C, 0x0000); //External Display Interface Control 1
 800729a:	2100      	movs	r1, #0
 800729c:	200c      	movs	r0, #12
 800729e:	f7fb ffbb 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0D, 0x0000); //Frame Maker Position
 80072a2:	2100      	movs	r1, #0
 80072a4:	200d      	movs	r0, #13
 80072a6:	f7fb ffb7 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0F, 0x0000); //External Display Interface Control 2
 80072aa:	2100      	movs	r1, #0
 80072ac:	200f      	movs	r0, #15
 80072ae:	f7fb ffb3 	bl	8003218 <LCD_WriteReg>
		HAL_Delay(20);
 80072b2:	2014      	movs	r0, #20
 80072b4:	f7f9 fc08 	bl	8000ac8 <HAL_Delay>
		//TFT 液晶彩色图像显示方法14
		LCD_WriteReg(0x10, 0x16B0); //0x14B0 //Power Control 1
 80072b8:	f241 61b0 	movw	r1, #5808	; 0x16b0
 80072bc:	2010      	movs	r0, #16
 80072be:	f7fb ffab 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x11, 0x0001); //0x0007 //Power Control 2
 80072c2:	2101      	movs	r1, #1
 80072c4:	2011      	movs	r0, #17
 80072c6:	f7fb ffa7 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x17, 0x0001); //0x0000 //Power Control 3
 80072ca:	2101      	movs	r1, #1
 80072cc:	2017      	movs	r0, #23
 80072ce:	f7fb ffa3 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x12, 0x0138); //0x013B //Power Control 4
 80072d2:	f44f 719c 	mov.w	r1, #312	; 0x138
 80072d6:	2012      	movs	r0, #18
 80072d8:	f7fb ff9e 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x13, 0x0800); //0x0800 //Power Control 5
 80072dc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80072e0:	2013      	movs	r0, #19
 80072e2:	f7fb ff99 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x29, 0x0009); //NVM read data 2
 80072e6:	2109      	movs	r1, #9
 80072e8:	2029      	movs	r0, #41	; 0x29
 80072ea:	f7fb ff95 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x2a, 0x0009); //NVM read data 3
 80072ee:	2109      	movs	r1, #9
 80072f0:	202a      	movs	r0, #42	; 0x2a
 80072f2:	f7fb ff91 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0xa4, 0x0000);
 80072f6:	2100      	movs	r1, #0
 80072f8:	20a4      	movs	r0, #164	; 0xa4
 80072fa:	f7fb ff8d 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x50, 0x0000); //设置操作窗口的X轴开始列
 80072fe:	2100      	movs	r1, #0
 8007300:	2050      	movs	r0, #80	; 0x50
 8007302:	f7fb ff89 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x51, 0x00EF); //设置操作窗口的X轴结束列
 8007306:	21ef      	movs	r1, #239	; 0xef
 8007308:	2051      	movs	r0, #81	; 0x51
 800730a:	f7fb ff85 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x52, 0x0000); //设置操作窗口的Y轴开始行
 800730e:	2100      	movs	r1, #0
 8007310:	2052      	movs	r0, #82	; 0x52
 8007312:	f7fb ff81 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x53, 0x013F); //设置操作窗口的Y轴结束行
 8007316:	f240 113f 	movw	r1, #319	; 0x13f
 800731a:	2053      	movs	r0, #83	; 0x53
 800731c:	f7fb ff7c 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x60, 0x2700); //Driver Output Control
 8007320:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8007324:	2060      	movs	r0, #96	; 0x60
 8007326:	f7fb ff77 	bl	8003218 <LCD_WriteReg>
		//设置屏幕的点数以及扫描的起始行
		LCD_WriteReg(0x61, 0x0001); //Driver Output Control
 800732a:	2101      	movs	r1, #1
 800732c:	2061      	movs	r0, #97	; 0x61
 800732e:	f7fb ff73 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x6A, 0x0000); //Vertical Scroll Control
 8007332:	2100      	movs	r1, #0
 8007334:	206a      	movs	r0, #106	; 0x6a
 8007336:	f7fb ff6f 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x80, 0x0000); //Display Position – Partial Display 1
 800733a:	2100      	movs	r1, #0
 800733c:	2080      	movs	r0, #128	; 0x80
 800733e:	f7fb ff6b 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x81, 0x0000); //RAM Address Start – Partial Display 1
 8007342:	2100      	movs	r1, #0
 8007344:	2081      	movs	r0, #129	; 0x81
 8007346:	f7fb ff67 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x82, 0x0000); //RAM address End - Partial Display 1
 800734a:	2100      	movs	r1, #0
 800734c:	2082      	movs	r0, #130	; 0x82
 800734e:	f7fb ff63 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x83, 0x0000); //Display Position – Partial Display 2
 8007352:	2100      	movs	r1, #0
 8007354:	2083      	movs	r0, #131	; 0x83
 8007356:	f7fb ff5f 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x84, 0x0000); //RAM Address Start – Partial Display 2
 800735a:	2100      	movs	r1, #0
 800735c:	2084      	movs	r0, #132	; 0x84
 800735e:	f7fb ff5b 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x85, 0x0000); //RAM address End – Partail Display2
 8007362:	2100      	movs	r1, #0
 8007364:	2085      	movs	r0, #133	; 0x85
 8007366:	f7fb ff57 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x90, 0x0013); //Frame Cycle Control
 800736a:	2113      	movs	r1, #19
 800736c:	2090      	movs	r0, #144	; 0x90
 800736e:	f7fb ff53 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x92, 0x0000);  //Panel Interface Control 2
 8007372:	2100      	movs	r1, #0
 8007374:	2092      	movs	r0, #146	; 0x92
 8007376:	f7fb ff4f 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x93, 0x0003); //Panel Interface control 3
 800737a:	2103      	movs	r1, #3
 800737c:	2093      	movs	r0, #147	; 0x93
 800737e:	f7fb ff4b 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x95, 0x0110);  //Frame Cycle Control
 8007382:	f44f 7188 	mov.w	r1, #272	; 0x110
 8007386:	2095      	movs	r0, #149	; 0x95
 8007388:	f7fb ff46 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x07, 0x0173);
 800738c:	f240 1173 	movw	r1, #371	; 0x173
 8007390:	2007      	movs	r0, #7
 8007392:	f7fb ff41 	bl	8003218 <LCD_WriteReg>
		HAL_Delay(50);
 8007396:	2032      	movs	r0, #50	; 0x32
 8007398:	f7f9 fb96 	bl	8000ac8 <HAL_Delay>
 800739c:	f001 b8f2 	b.w	8008584 <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x1505)  //OK
 80073a0:	4b8d      	ldr	r3, [pc, #564]	; (80075d8 <LCD_Init+0x2e88>)
 80073a2:	889b      	ldrh	r3, [r3, #4]
 80073a4:	f241 5205 	movw	r2, #5381	; 0x1505
 80073a8:	4293      	cmp	r3, r2
 80073aa:	f040 8117 	bne.w	80075dc <LCD_Init+0x2e8c>
			{
		// second release on 3/5  ,luminance is acceptable,water wave appear during camera preview
		LCD_WriteReg(0x0007, 0x0000);
 80073ae:	2100      	movs	r1, #0
 80073b0:	2007      	movs	r0, #7
 80073b2:	f7fb ff31 	bl	8003218 <LCD_WriteReg>
		HAL_Delay(50);
 80073b6:	2032      	movs	r0, #50	; 0x32
 80073b8:	f7f9 fb86 	bl	8000ac8 <HAL_Delay>
		LCD_WriteReg(0x0012, 0x011C);  //0x011A   why need to set several times?
 80073bc:	f44f 718e 	mov.w	r1, #284	; 0x11c
 80073c0:	2012      	movs	r0, #18
 80073c2:	f7fb ff29 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x00A4, 0x0001);  //NVM
 80073c6:	2101      	movs	r1, #1
 80073c8:	20a4      	movs	r0, #164	; 0xa4
 80073ca:	f7fb ff25 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x000F);
 80073ce:	210f      	movs	r1, #15
 80073d0:	2008      	movs	r0, #8
 80073d2:	f7fb ff21 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x000A, 0x0008);
 80073d6:	2108      	movs	r1, #8
 80073d8:	200a      	movs	r0, #10
 80073da:	f7fb ff1d 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x000D, 0x0008);
 80073de:	2108      	movs	r1, #8
 80073e0:	200d      	movs	r0, #13
 80073e2:	f7fb ff19 	bl	8003218 <LCD_WriteReg>
		//伽马校正
		LCD_WriteReg(0x0030, 0x0707);
 80073e6:	f240 7107 	movw	r1, #1799	; 0x707
 80073ea:	2030      	movs	r0, #48	; 0x30
 80073ec:	f7fb ff14 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0007); //0x0707
 80073f0:	2107      	movs	r1, #7
 80073f2:	2031      	movs	r0, #49	; 0x31
 80073f4:	f7fb ff10 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0603);
 80073f8:	f240 6103 	movw	r1, #1539	; 0x603
 80073fc:	2032      	movs	r0, #50	; 0x32
 80073fe:	f7fb ff0b 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0033, 0x0700);
 8007402:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8007406:	2033      	movs	r0, #51	; 0x33
 8007408:	f7fb ff06 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0034, 0x0202);
 800740c:	f240 2102 	movw	r1, #514	; 0x202
 8007410:	2034      	movs	r0, #52	; 0x34
 8007412:	f7fb ff01 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0002); //?0x0606
 8007416:	2102      	movs	r1, #2
 8007418:	2035      	movs	r0, #53	; 0x35
 800741a:	f7fb fefd 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x1F0F);
 800741e:	f641 710f 	movw	r1, #7951	; 0x1f0f
 8007422:	2036      	movs	r0, #54	; 0x36
 8007424:	f7fb fef8 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0707); //0x0f0f  0x0105
 8007428:	f240 7107 	movw	r1, #1799	; 0x707
 800742c:	2037      	movs	r0, #55	; 0x37
 800742e:	f7fb fef3 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0000);
 8007432:	2100      	movs	r1, #0
 8007434:	2038      	movs	r0, #56	; 0x38
 8007436:	f7fb feef 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0000);
 800743a:	2100      	movs	r1, #0
 800743c:	2039      	movs	r0, #57	; 0x39
 800743e:	f7fb feeb 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x003A, 0x0707);
 8007442:	f240 7107 	movw	r1, #1799	; 0x707
 8007446:	203a      	movs	r0, #58	; 0x3a
 8007448:	f7fb fee6 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x003B, 0x0000); //0x0303
 800744c:	2100      	movs	r1, #0
 800744e:	203b      	movs	r0, #59	; 0x3b
 8007450:	f7fb fee2 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x003C, 0x0007); //?0x0707
 8007454:	2107      	movs	r1, #7
 8007456:	203c      	movs	r0, #60	; 0x3c
 8007458:	f7fb fede 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x003D, 0x0000); //0x1313//0x1f08
 800745c:	2100      	movs	r1, #0
 800745e:	203d      	movs	r0, #61	; 0x3d
 8007460:	f7fb feda 	bl	8003218 <LCD_WriteReg>
		HAL_Delay(50);
 8007464:	2032      	movs	r0, #50	; 0x32
 8007466:	f7f9 fb2f 	bl	8000ac8 <HAL_Delay>
		LCD_WriteReg(0x0007, 0x0001);
 800746a:	2101      	movs	r1, #1
 800746c:	2007      	movs	r0, #7
 800746e:	f7fb fed3 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0017, 0x0001); //开启电源
 8007472:	2101      	movs	r1, #1
 8007474:	2017      	movs	r0, #23
 8007476:	f7fb fecf 	bl	8003218 <LCD_WriteReg>
		HAL_Delay(50);
 800747a:	2032      	movs	r0, #50	; 0x32
 800747c:	f7f9 fb24 	bl	8000ac8 <HAL_Delay>
		//电源配置
		LCD_WriteReg(0x0010, 0x17A0);
 8007480:	f44f 51bd 	mov.w	r1, #6048	; 0x17a0
 8007484:	2010      	movs	r0, #16
 8007486:	f7fb fec7 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0217); //reference voltage VC[2:0]   Vciout = 1.00*Vcivl
 800748a:	f240 2117 	movw	r1, #535	; 0x217
 800748e:	2011      	movs	r0, #17
 8007490:	f7fb fec2 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x011E); //0x011c  //Vreg1out = Vcilvl*1.80   is it the same as Vgama1out ?
 8007494:	f44f 718f 	mov.w	r1, #286	; 0x11e
 8007498:	2012      	movs	r0, #18
 800749a:	f7fb febd 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0F00); //VDV[4:0]-->VCOM Amplitude VcomL = VcomH - Vcom Ampl
 800749e:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 80074a2:	2013      	movs	r0, #19
 80074a4:	f7fb feb8 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x002A, 0x0000);
 80074a8:	2100      	movs	r1, #0
 80074aa:	202a      	movs	r0, #42	; 0x2a
 80074ac:	f7fb feb4 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0029, 0x000A); //0x0001F  Vcomh = VCM1[4:0]*Vreg1out    gate source voltage??
 80074b0:	210a      	movs	r1, #10
 80074b2:	2029      	movs	r0, #41	; 0x29
 80074b4:	f7fb feb0 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x013E); // 0x013C  power supply on
 80074b8:	f44f 719f 	mov.w	r1, #318	; 0x13e
 80074bc:	2012      	movs	r0, #18
 80074be:	f7fb feab 	bl	8003218 <LCD_WriteReg>
		//Coordinates Control//
		LCD_WriteReg(0x0050, 0x0000);        //0x0e00
 80074c2:	2100      	movs	r1, #0
 80074c4:	2050      	movs	r0, #80	; 0x50
 80074c6:	f7fb fea7 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00EF);
 80074ca:	21ef      	movs	r1, #239	; 0xef
 80074cc:	2051      	movs	r0, #81	; 0x51
 80074ce:	f7fb fea3 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000);
 80074d2:	2100      	movs	r1, #0
 80074d4:	2052      	movs	r0, #82	; 0x52
 80074d6:	f7fb fe9f 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013F);
 80074da:	f240 113f 	movw	r1, #319	; 0x13f
 80074de:	2053      	movs	r0, #83	; 0x53
 80074e0:	f7fb fe9a 	bl	8003218 <LCD_WriteReg>
		//Pannel Image Control//
		LCD_WriteReg(0x0060, 0x2700);
 80074e4:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 80074e8:	2060      	movs	r0, #96	; 0x60
 80074ea:	f7fb fe95 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001);
 80074ee:	2101      	movs	r1, #1
 80074f0:	2061      	movs	r0, #97	; 0x61
 80074f2:	f7fb fe91 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x006A, 0x0000);
 80074f6:	2100      	movs	r1, #0
 80074f8:	206a      	movs	r0, #106	; 0x6a
 80074fa:	f7fb fe8d 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0080, 0x0000);
 80074fe:	2100      	movs	r1, #0
 8007500:	2080      	movs	r0, #128	; 0x80
 8007502:	f7fb fe89 	bl	8003218 <LCD_WriteReg>
		//Partial Image Control//
		LCD_WriteReg(0x0081, 0x0000);
 8007506:	2100      	movs	r1, #0
 8007508:	2081      	movs	r0, #129	; 0x81
 800750a:	f7fb fe85 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0082, 0x0000);
 800750e:	2100      	movs	r1, #0
 8007510:	2082      	movs	r0, #130	; 0x82
 8007512:	f7fb fe81 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0083, 0x0000);
 8007516:	2100      	movs	r1, #0
 8007518:	2083      	movs	r0, #131	; 0x83
 800751a:	f7fb fe7d 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0084, 0x0000);
 800751e:	2100      	movs	r1, #0
 8007520:	2084      	movs	r0, #132	; 0x84
 8007522:	f7fb fe79 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0085, 0x0000);
 8007526:	2100      	movs	r1, #0
 8007528:	2085      	movs	r0, #133	; 0x85
 800752a:	f7fb fe75 	bl	8003218 <LCD_WriteReg>
		//Panel Interface Control//
		LCD_WriteReg(0x0090, 0x0013);        //0x0010 frenqucy
 800752e:	2113      	movs	r1, #19
 8007530:	2090      	movs	r0, #144	; 0x90
 8007532:	f7fb fe71 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0300);
 8007536:	f44f 7140 	mov.w	r1, #768	; 0x300
 800753a:	2092      	movs	r0, #146	; 0x92
 800753c:	f7fb fe6c 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0093, 0x0005);
 8007540:	2105      	movs	r1, #5
 8007542:	2093      	movs	r0, #147	; 0x93
 8007544:	f7fb fe68 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0095, 0x0000);
 8007548:	2100      	movs	r1, #0
 800754a:	2095      	movs	r0, #149	; 0x95
 800754c:	f7fb fe64 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0097, 0x0000);
 8007550:	2100      	movs	r1, #0
 8007552:	2097      	movs	r0, #151	; 0x97
 8007554:	f7fb fe60 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0098, 0x0000);
 8007558:	2100      	movs	r1, #0
 800755a:	2098      	movs	r0, #152	; 0x98
 800755c:	f7fb fe5c 	bl	8003218 <LCD_WriteReg>

		LCD_WriteReg(0x0001, 0x0100);
 8007560:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007564:	2001      	movs	r0, #1
 8007566:	f7fb fe57 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0700);
 800756a:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 800756e:	2002      	movs	r0, #2
 8007570:	f7fb fe52 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0x1038);        //扫描方向 上->下  左->右
 8007574:	f241 0138 	movw	r1, #4152	; 0x1038
 8007578:	2003      	movs	r0, #3
 800757a:	f7fb fe4d 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0004, 0x0000);
 800757e:	2100      	movs	r1, #0
 8007580:	2004      	movs	r0, #4
 8007582:	f7fb fe49 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000);
 8007586:	2100      	movs	r1, #0
 8007588:	200c      	movs	r0, #12
 800758a:	f7fb fe45 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000);
 800758e:	2100      	movs	r1, #0
 8007590:	200f      	movs	r0, #15
 8007592:	f7fb fe41 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0020, 0x0000);
 8007596:	2100      	movs	r1, #0
 8007598:	2020      	movs	r0, #32
 800759a:	f7fb fe3d 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x0000);
 800759e:	2100      	movs	r1, #0
 80075a0:	2021      	movs	r0, #33	; 0x21
 80075a2:	f7fb fe39 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0021);
 80075a6:	2121      	movs	r1, #33	; 0x21
 80075a8:	2007      	movs	r0, #7
 80075aa:	f7fb fe35 	bl	8003218 <LCD_WriteReg>
		HAL_Delay(20);
 80075ae:	2014      	movs	r0, #20
 80075b0:	f7f9 fa8a 	bl	8000ac8 <HAL_Delay>
		LCD_WriteReg(0x0007, 0x0061);
 80075b4:	2161      	movs	r1, #97	; 0x61
 80075b6:	2007      	movs	r0, #7
 80075b8:	f7fb fe2e 	bl	8003218 <LCD_WriteReg>
		HAL_Delay(20);
 80075bc:	2014      	movs	r0, #20
 80075be:	f7f9 fa83 	bl	8000ac8 <HAL_Delay>
		LCD_WriteReg(0x0007, 0x0173);
 80075c2:	f240 1173 	movw	r1, #371	; 0x173
 80075c6:	2007      	movs	r0, #7
 80075c8:	f7fb fe26 	bl	8003218 <LCD_WriteReg>
		HAL_Delay(20);
 80075cc:	2014      	movs	r0, #20
 80075ce:	f7f9 fa7b 	bl	8000ac8 <HAL_Delay>
 80075d2:	f000 bfd7 	b.w	8008584 <LCD_Init+0x3e34>
 80075d6:	bf00      	nop
 80075d8:	200000b4 	.word	0x200000b4
	} else if (lcddev.id == 0xB505) {
 80075dc:	4bf0      	ldr	r3, [pc, #960]	; (80079a0 <LCD_Init+0x3250>)
 80075de:	889b      	ldrh	r3, [r3, #4]
 80075e0:	f24b 5205 	movw	r2, #46341	; 0xb505
 80075e4:	4293      	cmp	r3, r2
 80075e6:	f040 8103 	bne.w	80077f0 <LCD_Init+0x30a0>
		LCD_WriteReg(0x0000, 0x0000);
 80075ea:	2100      	movs	r1, #0
 80075ec:	2000      	movs	r0, #0
 80075ee:	f7fb fe13 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 80075f2:	2100      	movs	r1, #0
 80075f4:	2000      	movs	r0, #0
 80075f6:	f7fb fe0f 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 80075fa:	2100      	movs	r1, #0
 80075fc:	2000      	movs	r0, #0
 80075fe:	f7fb fe0b 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 8007602:	2100      	movs	r1, #0
 8007604:	2000      	movs	r0, #0
 8007606:	f7fb fe07 	bl	8003218 <LCD_WriteReg>

		LCD_WriteReg(0x00a4, 0x0001);
 800760a:	2101      	movs	r1, #1
 800760c:	20a4      	movs	r0, #164	; 0xa4
 800760e:	f7fb fe03 	bl	8003218 <LCD_WriteReg>
		HAL_Delay(20);
 8007612:	2014      	movs	r0, #20
 8007614:	f7f9 fa58 	bl	8000ac8 <HAL_Delay>
		LCD_WriteReg(0x0060, 0x2700);
 8007618:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 800761c:	2060      	movs	r0, #96	; 0x60
 800761e:	f7fb fdfb 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x0202);
 8007622:	f240 2102 	movw	r1, #514	; 0x202
 8007626:	2008      	movs	r0, #8
 8007628:	f7fb fdf6 	bl	8003218 <LCD_WriteReg>

		LCD_WriteReg(0x0030, 0x0214);
 800762c:	f44f 7105 	mov.w	r1, #532	; 0x214
 8007630:	2030      	movs	r0, #48	; 0x30
 8007632:	f7fb fdf1 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x3715);
 8007636:	f243 7115 	movw	r1, #14101	; 0x3715
 800763a:	2031      	movs	r0, #49	; 0x31
 800763c:	f7fb fdec 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0604);
 8007640:	f240 6104 	movw	r1, #1540	; 0x604
 8007644:	2032      	movs	r0, #50	; 0x32
 8007646:	f7fb fde7 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0033, 0x0e16);
 800764a:	f640 6116 	movw	r1, #3606	; 0xe16
 800764e:	2033      	movs	r0, #51	; 0x33
 8007650:	f7fb fde2 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0034, 0x2211);
 8007654:	f242 2111 	movw	r1, #8721	; 0x2211
 8007658:	2034      	movs	r0, #52	; 0x34
 800765a:	f7fb fddd 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x1500);
 800765e:	f44f 51a8 	mov.w	r1, #5376	; 0x1500
 8007662:	2035      	movs	r0, #53	; 0x35
 8007664:	f7fb fdd8 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x8507);
 8007668:	f248 5107 	movw	r1, #34055	; 0x8507
 800766c:	2036      	movs	r0, #54	; 0x36
 800766e:	f7fb fdd3 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x1407);
 8007672:	f241 4107 	movw	r1, #5127	; 0x1407
 8007676:	2037      	movs	r0, #55	; 0x37
 8007678:	f7fb fdce 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x1403);
 800767c:	f241 4103 	movw	r1, #5123	; 0x1403
 8007680:	2038      	movs	r0, #56	; 0x38
 8007682:	f7fb fdc9 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0020);
 8007686:	2120      	movs	r1, #32
 8007688:	2039      	movs	r0, #57	; 0x39
 800768a:	f7fb fdc5 	bl	8003218 <LCD_WriteReg>

		LCD_WriteReg(0x0090, 0x001a);
 800768e:	211a      	movs	r1, #26
 8007690:	2090      	movs	r0, #144	; 0x90
 8007692:	f7fb fdc1 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0010, 0x0000);
 8007696:	2100      	movs	r1, #0
 8007698:	2010      	movs	r0, #16
 800769a:	f7fb fdbd 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0007);
 800769e:	2107      	movs	r1, #7
 80076a0:	2011      	movs	r0, #17
 80076a2:	f7fb fdb9 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x0000);
 80076a6:	2100      	movs	r1, #0
 80076a8:	2012      	movs	r0, #18
 80076aa:	f7fb fdb5 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0000);
 80076ae:	2100      	movs	r1, #0
 80076b0:	2013      	movs	r0, #19
 80076b2:	f7fb fdb1 	bl	8003218 <LCD_WriteReg>
		HAL_Delay(20);
 80076b6:	2014      	movs	r0, #20
 80076b8:	f7f9 fa06 	bl	8000ac8 <HAL_Delay>

		LCD_WriteReg(0x0010, 0x0730);
 80076bc:	f44f 61e6 	mov.w	r1, #1840	; 0x730
 80076c0:	2010      	movs	r0, #16
 80076c2:	f7fb fda9 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0137);
 80076c6:	f240 1137 	movw	r1, #311	; 0x137
 80076ca:	2011      	movs	r0, #17
 80076cc:	f7fb fda4 	bl	8003218 <LCD_WriteReg>
		HAL_Delay(20);
 80076d0:	2014      	movs	r0, #20
 80076d2:	f7f9 f9f9 	bl	8000ac8 <HAL_Delay>

		LCD_WriteReg(0x0012, 0x01b8);
 80076d6:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
 80076da:	2012      	movs	r0, #18
 80076dc:	f7fb fd9c 	bl	8003218 <LCD_WriteReg>
		HAL_Delay(20);
 80076e0:	2014      	movs	r0, #20
 80076e2:	f7f9 f9f1 	bl	8000ac8 <HAL_Delay>

		LCD_WriteReg(0x0013, 0x0f00);
 80076e6:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 80076ea:	2013      	movs	r0, #19
 80076ec:	f7fb fd94 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x002a, 0x0080);
 80076f0:	2180      	movs	r1, #128	; 0x80
 80076f2:	202a      	movs	r0, #42	; 0x2a
 80076f4:	f7fb fd90 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0029, 0x0048);
 80076f8:	2148      	movs	r1, #72	; 0x48
 80076fa:	2029      	movs	r0, #41	; 0x29
 80076fc:	f7fb fd8c 	bl	8003218 <LCD_WriteReg>
		HAL_Delay(20);
 8007700:	2014      	movs	r0, #20
 8007702:	f7f9 f9e1 	bl	8000ac8 <HAL_Delay>

		LCD_WriteReg(0x0001, 0x0100);
 8007706:	f44f 7180 	mov.w	r1, #256	; 0x100
 800770a:	2001      	movs	r0, #1
 800770c:	f7fb fd84 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0700);
 8007710:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8007714:	2002      	movs	r0, #2
 8007716:	f7fb fd7f 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0x1038);        //扫描方向 上->下  左->右
 800771a:	f241 0138 	movw	r1, #4152	; 0x1038
 800771e:	2003      	movs	r0, #3
 8007720:	f7fb fd7a 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x0202);
 8007724:	f240 2102 	movw	r1, #514	; 0x202
 8007728:	2008      	movs	r0, #8
 800772a:	f7fb fd75 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x000a, 0x0000);
 800772e:	2100      	movs	r1, #0
 8007730:	200a      	movs	r0, #10
 8007732:	f7fb fd71 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x000c, 0x0000);
 8007736:	2100      	movs	r1, #0
 8007738:	200c      	movs	r0, #12
 800773a:	f7fb fd6d 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x000d, 0x0000);
 800773e:	2100      	movs	r1, #0
 8007740:	200d      	movs	r0, #13
 8007742:	f7fb fd69 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x000e, 0x0030);
 8007746:	2130      	movs	r1, #48	; 0x30
 8007748:	200e      	movs	r0, #14
 800774a:	f7fb fd65 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0050, 0x0000);
 800774e:	2100      	movs	r1, #0
 8007750:	2050      	movs	r0, #80	; 0x50
 8007752:	f7fb fd61 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00ef);
 8007756:	21ef      	movs	r1, #239	; 0xef
 8007758:	2051      	movs	r0, #81	; 0x51
 800775a:	f7fb fd5d 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000);
 800775e:	2100      	movs	r1, #0
 8007760:	2052      	movs	r0, #82	; 0x52
 8007762:	f7fb fd59 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013f);
 8007766:	f240 113f 	movw	r1, #319	; 0x13f
 800776a:	2053      	movs	r0, #83	; 0x53
 800776c:	f7fb fd54 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0060, 0x2700);
 8007770:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8007774:	2060      	movs	r0, #96	; 0x60
 8007776:	f7fb fd4f 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001);
 800777a:	2101      	movs	r1, #1
 800777c:	2061      	movs	r0, #97	; 0x61
 800777e:	f7fb fd4b 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x006a, 0x0000);
 8007782:	2100      	movs	r1, #0
 8007784:	206a      	movs	r0, #106	; 0x6a
 8007786:	f7fb fd47 	bl	8003218 <LCD_WriteReg>
		//LCD_WriteReg(0x0080,0x0000);
		//LCD_WriteReg(0x0081,0x0000);
		LCD_WriteReg(0x0090, 0X0011);
 800778a:	2111      	movs	r1, #17
 800778c:	2090      	movs	r0, #144	; 0x90
 800778e:	f7fb fd43 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0600);
 8007792:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8007796:	2092      	movs	r0, #146	; 0x92
 8007798:	f7fb fd3e 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0093, 0x0402);
 800779c:	f240 4102 	movw	r1, #1026	; 0x402
 80077a0:	2093      	movs	r0, #147	; 0x93
 80077a2:	f7fb fd39 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0094, 0x0002);
 80077a6:	2102      	movs	r1, #2
 80077a8:	2094      	movs	r0, #148	; 0x94
 80077aa:	f7fb fd35 	bl	8003218 <LCD_WriteReg>
		HAL_Delay(20);
 80077ae:	2014      	movs	r0, #20
 80077b0:	f7f9 f98a 	bl	8000ac8 <HAL_Delay>

		LCD_WriteReg(0x0007, 0x0001);
 80077b4:	2101      	movs	r1, #1
 80077b6:	2007      	movs	r0, #7
 80077b8:	f7fb fd2e 	bl	8003218 <LCD_WriteReg>
		HAL_Delay(20);
 80077bc:	2014      	movs	r0, #20
 80077be:	f7f9 f983 	bl	8000ac8 <HAL_Delay>
		LCD_WriteReg(0x0007, 0x0061);
 80077c2:	2161      	movs	r1, #97	; 0x61
 80077c4:	2007      	movs	r0, #7
 80077c6:	f7fb fd27 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0173);
 80077ca:	f240 1173 	movw	r1, #371	; 0x173
 80077ce:	2007      	movs	r0, #7
 80077d0:	f7fb fd22 	bl	8003218 <LCD_WriteReg>

		LCD_WriteReg(0x0020, 0x0000);
 80077d4:	2100      	movs	r1, #0
 80077d6:	2020      	movs	r0, #32
 80077d8:	f7fb fd1e 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x0000);
 80077dc:	2100      	movs	r1, #0
 80077de:	2021      	movs	r0, #33	; 0x21
 80077e0:	f7fb fd1a 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x00, 0x22);
 80077e4:	2122      	movs	r1, #34	; 0x22
 80077e6:	2000      	movs	r0, #0
 80077e8:	f7fb fd16 	bl	8003218 <LCD_WriteReg>
 80077ec:	f000 beca 	b.w	8008584 <LCD_Init+0x3e34>
	} else if (lcddev.id == 0xC505) {
 80077f0:	4b6b      	ldr	r3, [pc, #428]	; (80079a0 <LCD_Init+0x3250>)
 80077f2:	889b      	ldrh	r3, [r3, #4]
 80077f4:	f24c 5205 	movw	r2, #50437	; 0xc505
 80077f8:	4293      	cmp	r3, r2
 80077fa:	f040 80d3 	bne.w	80079a4 <LCD_Init+0x3254>
		LCD_WriteReg(0x0000, 0x0000);
 80077fe:	2100      	movs	r1, #0
 8007800:	2000      	movs	r0, #0
 8007802:	f7fb fd09 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 8007806:	2100      	movs	r1, #0
 8007808:	2000      	movs	r0, #0
 800780a:	f7fb fd05 	bl	8003218 <LCD_WriteReg>
		HAL_Delay(20);
 800780e:	2014      	movs	r0, #20
 8007810:	f7f9 f95a 	bl	8000ac8 <HAL_Delay>
		LCD_WriteReg(0x0000, 0x0000);
 8007814:	2100      	movs	r1, #0
 8007816:	2000      	movs	r0, #0
 8007818:	f7fb fcfe 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 800781c:	2100      	movs	r1, #0
 800781e:	2000      	movs	r0, #0
 8007820:	f7fb fcfa 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 8007824:	2100      	movs	r1, #0
 8007826:	2000      	movs	r0, #0
 8007828:	f7fb fcf6 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 800782c:	2100      	movs	r1, #0
 800782e:	2000      	movs	r0, #0
 8007830:	f7fb fcf2 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x00a4, 0x0001);
 8007834:	2101      	movs	r1, #1
 8007836:	20a4      	movs	r0, #164	; 0xa4
 8007838:	f7fb fcee 	bl	8003218 <LCD_WriteReg>
		HAL_Delay(20);
 800783c:	2014      	movs	r0, #20
 800783e:	f7f9 f943 	bl	8000ac8 <HAL_Delay>
		LCD_WriteReg(0x0060, 0x2700);
 8007842:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8007846:	2060      	movs	r0, #96	; 0x60
 8007848:	f7fb fce6 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x0806);
 800784c:	f640 0106 	movw	r1, #2054	; 0x806
 8007850:	2008      	movs	r0, #8
 8007852:	f7fb fce1 	bl	8003218 <LCD_WriteReg>

		LCD_WriteReg(0x0030, 0x0703);		//gamma setting
 8007856:	f240 7103 	movw	r1, #1795	; 0x703
 800785a:	2030      	movs	r0, #48	; 0x30
 800785c:	f7fb fcdc 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0001);
 8007860:	2101      	movs	r1, #1
 8007862:	2031      	movs	r0, #49	; 0x31
 8007864:	f7fb fcd8 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0004);
 8007868:	2104      	movs	r1, #4
 800786a:	2032      	movs	r0, #50	; 0x32
 800786c:	f7fb fcd4 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0033, 0x0102);
 8007870:	f44f 7181 	mov.w	r1, #258	; 0x102
 8007874:	2033      	movs	r0, #51	; 0x33
 8007876:	f7fb fccf 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0034, 0x0300);
 800787a:	f44f 7140 	mov.w	r1, #768	; 0x300
 800787e:	2034      	movs	r0, #52	; 0x34
 8007880:	f7fb fcca 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0103);
 8007884:	f240 1103 	movw	r1, #259	; 0x103
 8007888:	2035      	movs	r0, #53	; 0x35
 800788a:	f7fb fcc5 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x001F);
 800788e:	211f      	movs	r1, #31
 8007890:	2036      	movs	r0, #54	; 0x36
 8007892:	f7fb fcc1 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0703);
 8007896:	f240 7103 	movw	r1, #1795	; 0x703
 800789a:	2037      	movs	r0, #55	; 0x37
 800789c:	f7fb fcbc 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0001);
 80078a0:	2101      	movs	r1, #1
 80078a2:	2038      	movs	r0, #56	; 0x38
 80078a4:	f7fb fcb8 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0004);
 80078a8:	2104      	movs	r1, #4
 80078aa:	2039      	movs	r0, #57	; 0x39
 80078ac:	f7fb fcb4 	bl	8003218 <LCD_WriteReg>

		LCD_WriteReg(0x0090, 0x0015);	//80Hz
 80078b0:	2115      	movs	r1, #21
 80078b2:	2090      	movs	r0, #144	; 0x90
 80078b4:	f7fb fcb0 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0010, 0X0410);	//BT,AP
 80078b8:	f44f 6182 	mov.w	r1, #1040	; 0x410
 80078bc:	2010      	movs	r0, #16
 80078be:	f7fb fcab 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0247);	//DC1,DC0,VC
 80078c2:	f240 2147 	movw	r1, #583	; 0x247
 80078c6:	2011      	movs	r0, #17
 80078c8:	f7fb fca6 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x01BC);
 80078cc:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 80078d0:	2012      	movs	r0, #18
 80078d2:	f7fb fca1 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0e00);
 80078d6:	f44f 6160 	mov.w	r1, #3584	; 0xe00
 80078da:	2013      	movs	r0, #19
 80078dc:	f7fb fc9c 	bl	8003218 <LCD_WriteReg>
		HAL_Delay(120);
 80078e0:	2078      	movs	r0, #120	; 0x78
 80078e2:	f7f9 f8f1 	bl	8000ac8 <HAL_Delay>
		LCD_WriteReg(0x0001, 0x0100);
 80078e6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80078ea:	2001      	movs	r0, #1
 80078ec:	f7fb fc94 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0200);
 80078f0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80078f4:	2002      	movs	r0, #2
 80078f6:	f7fb fc8f 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0x1030);
 80078fa:	f241 0130 	movw	r1, #4144	; 0x1030
 80078fe:	2003      	movs	r0, #3
 8007900:	f7fb fc8a 	bl	8003218 <LCD_WriteReg>

		LCD_WriteReg(0x000A, 0x0008);
 8007904:	2108      	movs	r1, #8
 8007906:	200a      	movs	r0, #10
 8007908:	f7fb fc86 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000);
 800790c:	2100      	movs	r1, #0
 800790e:	200c      	movs	r0, #12
 8007910:	f7fb fc82 	bl	8003218 <LCD_WriteReg>

		LCD_WriteReg(0x000E, 0x0020);
 8007914:	2120      	movs	r1, #32
 8007916:	200e      	movs	r0, #14
 8007918:	f7fb fc7e 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000);
 800791c:	2100      	movs	r1, #0
 800791e:	200f      	movs	r0, #15
 8007920:	f7fb fc7a 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0020, 0x0000);	//H Start
 8007924:	2100      	movs	r1, #0
 8007926:	2020      	movs	r0, #32
 8007928:	f7fb fc76 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x0000);	//V Start
 800792c:	2100      	movs	r1, #0
 800792e:	2021      	movs	r0, #33	; 0x21
 8007930:	f7fb fc72 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x002A, 0x003D);	//vcom2
 8007934:	213d      	movs	r1, #61	; 0x3d
 8007936:	202a      	movs	r0, #42	; 0x2a
 8007938:	f7fb fc6e 	bl	8003218 <LCD_WriteReg>
		HAL_Delay(20);
 800793c:	2014      	movs	r0, #20
 800793e:	f7f9 f8c3 	bl	8000ac8 <HAL_Delay>
		LCD_WriteReg(0x0029, 0x002d);
 8007942:	212d      	movs	r1, #45	; 0x2d
 8007944:	2029      	movs	r0, #41	; 0x29
 8007946:	f7fb fc67 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0050, 0x0000);
 800794a:	2100      	movs	r1, #0
 800794c:	2050      	movs	r0, #80	; 0x50
 800794e:	f7fb fc63 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0xD0EF);
 8007952:	f24d 01ef 	movw	r1, #53487	; 0xd0ef
 8007956:	2051      	movs	r0, #81	; 0x51
 8007958:	f7fb fc5e 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000);
 800795c:	2100      	movs	r1, #0
 800795e:	2052      	movs	r0, #82	; 0x52
 8007960:	f7fb fc5a 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013F);
 8007964:	f240 113f 	movw	r1, #319	; 0x13f
 8007968:	2053      	movs	r0, #83	; 0x53
 800796a:	f7fb fc55 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0000);
 800796e:	2100      	movs	r1, #0
 8007970:	2061      	movs	r0, #97	; 0x61
 8007972:	f7fb fc51 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x006A, 0x0000);
 8007976:	2100      	movs	r1, #0
 8007978:	206a      	movs	r0, #106	; 0x6a
 800797a:	f7fb fc4d 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0300);
 800797e:	f44f 7140 	mov.w	r1, #768	; 0x300
 8007982:	2092      	movs	r0, #146	; 0x92
 8007984:	f7fb fc48 	bl	8003218 <LCD_WriteReg>

		LCD_WriteReg(0x0093, 0x0005);
 8007988:	2105      	movs	r1, #5
 800798a:	2093      	movs	r0, #147	; 0x93
 800798c:	f7fb fc44 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0100);
 8007990:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007994:	2007      	movs	r0, #7
 8007996:	f7fb fc3f 	bl	8003218 <LCD_WriteReg>
 800799a:	f000 bdf3 	b.w	8008584 <LCD_Init+0x3e34>
 800799e:	bf00      	nop
 80079a0:	200000b4 	.word	0x200000b4
	} else if (lcddev.id == 0x8989)	//OK |/|/|
 80079a4:	4bc2      	ldr	r3, [pc, #776]	; (8007cb0 <LCD_Init+0x3560>)
 80079a6:	889b      	ldrh	r3, [r3, #4]
 80079a8:	f648 1289 	movw	r2, #35209	; 0x8989
 80079ac:	4293      	cmp	r3, r2
 80079ae:	f040 80bc 	bne.w	8007b2a <LCD_Init+0x33da>
			{
		LCD_WriteReg(0x0000, 0x0001);	//打开晶振
 80079b2:	2101      	movs	r1, #1
 80079b4:	2000      	movs	r0, #0
 80079b6:	f7fb fc2f 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0xA8A4);	//0xA8A4
 80079ba:	f64a 01a4 	movw	r1, #43172	; 0xa8a4
 80079be:	2003      	movs	r0, #3
 80079c0:	f7fb fc2a 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000);
 80079c4:	2100      	movs	r1, #0
 80079c6:	200c      	movs	r0, #12
 80079c8:	f7fb fc26 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x000D, 0x080C);
 80079cc:	f640 010c 	movw	r1, #2060	; 0x80c
 80079d0:	200d      	movs	r0, #13
 80079d2:	f7fb fc21 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x000E, 0x2B00);
 80079d6:	f44f 512c 	mov.w	r1, #11008	; 0x2b00
 80079da:	200e      	movs	r0, #14
 80079dc:	f7fb fc1c 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x001E, 0x00B0);
 80079e0:	21b0      	movs	r1, #176	; 0xb0
 80079e2:	201e      	movs	r0, #30
 80079e4:	f7fb fc18 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0001, 0x2B3F);	//驱动输出控制320*240  0x6B3F
 80079e8:	f642 313f 	movw	r1, #11071	; 0x2b3f
 80079ec:	2001      	movs	r0, #1
 80079ee:	f7fb fc13 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0600);
 80079f2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80079f6:	2002      	movs	r0, #2
 80079f8:	f7fb fc0e 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0010, 0x0000);
 80079fc:	2100      	movs	r1, #0
 80079fe:	2010      	movs	r0, #16
 8007a00:	f7fb fc0a 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x6078); //定义数据格式  16位色 		横屏 0x6058
 8007a04:	f246 0178 	movw	r1, #24696	; 0x6078
 8007a08:	2011      	movs	r0, #17
 8007a0a:	f7fb fc05 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0005, 0x0000);
 8007a0e:	2100      	movs	r1, #0
 8007a10:	2005      	movs	r0, #5
 8007a12:	f7fb fc01 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0006, 0x0000);
 8007a16:	2100      	movs	r1, #0
 8007a18:	2006      	movs	r0, #6
 8007a1a:	f7fb fbfd 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0016, 0xEF1C);
 8007a1e:	f64e 711c 	movw	r1, #61212	; 0xef1c
 8007a22:	2016      	movs	r0, #22
 8007a24:	f7fb fbf8 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0017, 0x0003);
 8007a28:	2103      	movs	r1, #3
 8007a2a:	2017      	movs	r0, #23
 8007a2c:	f7fb fbf4 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0233); //0x0233
 8007a30:	f240 2133 	movw	r1, #563	; 0x233
 8007a34:	2007      	movs	r0, #7
 8007a36:	f7fb fbef 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x000B, 0x0000);
 8007a3a:	2100      	movs	r1, #0
 8007a3c:	200b      	movs	r0, #11
 8007a3e:	f7fb fbeb 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000); //扫描开始地址
 8007a42:	2100      	movs	r1, #0
 8007a44:	200f      	movs	r0, #15
 8007a46:	f7fb fbe7 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0041, 0x0000);
 8007a4a:	2100      	movs	r1, #0
 8007a4c:	2041      	movs	r0, #65	; 0x41
 8007a4e:	f7fb fbe3 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0042, 0x0000);
 8007a52:	2100      	movs	r1, #0
 8007a54:	2042      	movs	r0, #66	; 0x42
 8007a56:	f7fb fbdf 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0048, 0x0000);
 8007a5a:	2100      	movs	r1, #0
 8007a5c:	2048      	movs	r0, #72	; 0x48
 8007a5e:	f7fb fbdb 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0049, 0x013F);
 8007a62:	f240 113f 	movw	r1, #319	; 0x13f
 8007a66:	2049      	movs	r0, #73	; 0x49
 8007a68:	f7fb fbd6 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x004A, 0x0000);
 8007a6c:	2100      	movs	r1, #0
 8007a6e:	204a      	movs	r0, #74	; 0x4a
 8007a70:	f7fb fbd2 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x004B, 0x0000);
 8007a74:	2100      	movs	r1, #0
 8007a76:	204b      	movs	r0, #75	; 0x4b
 8007a78:	f7fb fbce 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0044, 0xEF00);
 8007a7c:	f44f 416f 	mov.w	r1, #61184	; 0xef00
 8007a80:	2044      	movs	r0, #68	; 0x44
 8007a82:	f7fb fbc9 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0045, 0x0000);
 8007a86:	2100      	movs	r1, #0
 8007a88:	2045      	movs	r0, #69	; 0x45
 8007a8a:	f7fb fbc5 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0046, 0x013F);
 8007a8e:	f240 113f 	movw	r1, #319	; 0x13f
 8007a92:	2046      	movs	r0, #70	; 0x46
 8007a94:	f7fb fbc0 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0030, 0x0707);
 8007a98:	f240 7107 	movw	r1, #1799	; 0x707
 8007a9c:	2030      	movs	r0, #48	; 0x30
 8007a9e:	f7fb fbbb 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0204);
 8007aa2:	f44f 7101 	mov.w	r1, #516	; 0x204
 8007aa6:	2031      	movs	r0, #49	; 0x31
 8007aa8:	f7fb fbb6 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0204);
 8007aac:	f44f 7101 	mov.w	r1, #516	; 0x204
 8007ab0:	2032      	movs	r0, #50	; 0x32
 8007ab2:	f7fb fbb1 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0033, 0x0502);
 8007ab6:	f240 5102 	movw	r1, #1282	; 0x502
 8007aba:	2033      	movs	r0, #51	; 0x33
 8007abc:	f7fb fbac 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0034, 0x0507);
 8007ac0:	f240 5107 	movw	r1, #1287	; 0x507
 8007ac4:	2034      	movs	r0, #52	; 0x34
 8007ac6:	f7fb fba7 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0204);
 8007aca:	f44f 7101 	mov.w	r1, #516	; 0x204
 8007ace:	2035      	movs	r0, #53	; 0x35
 8007ad0:	f7fb fba2 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x0204);
 8007ad4:	f44f 7101 	mov.w	r1, #516	; 0x204
 8007ad8:	2036      	movs	r0, #54	; 0x36
 8007ada:	f7fb fb9d 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0502);
 8007ade:	f240 5102 	movw	r1, #1282	; 0x502
 8007ae2:	2037      	movs	r0, #55	; 0x37
 8007ae4:	f7fb fb98 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x003A, 0x0302);
 8007ae8:	f240 3102 	movw	r1, #770	; 0x302
 8007aec:	203a      	movs	r0, #58	; 0x3a
 8007aee:	f7fb fb93 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x003B, 0x0302);
 8007af2:	f240 3102 	movw	r1, #770	; 0x302
 8007af6:	203b      	movs	r0, #59	; 0x3b
 8007af8:	f7fb fb8e 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0023, 0x0000);
 8007afc:	2100      	movs	r1, #0
 8007afe:	2023      	movs	r0, #35	; 0x23
 8007b00:	f7fb fb8a 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0024, 0x0000);
 8007b04:	2100      	movs	r1, #0
 8007b06:	2024      	movs	r0, #36	; 0x24
 8007b08:	f7fb fb86 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x0025, 0x8000);
 8007b0c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007b10:	2025      	movs	r0, #37	; 0x25
 8007b12:	f7fb fb81 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x004f, 0);        //行首址0
 8007b16:	2100      	movs	r1, #0
 8007b18:	204f      	movs	r0, #79	; 0x4f
 8007b1a:	f7fb fb7d 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0x004e, 0);        //列首址0
 8007b1e:	2100      	movs	r1, #0
 8007b20:	204e      	movs	r0, #78	; 0x4e
 8007b22:	f7fb fb79 	bl	8003218 <LCD_WriteReg>
 8007b26:	f000 bd2d 	b.w	8008584 <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x4531)        //OK |/|/|
 8007b2a:	4b61      	ldr	r3, [pc, #388]	; (8007cb0 <LCD_Init+0x3560>)
 8007b2c:	889b      	ldrh	r3, [r3, #4]
 8007b2e:	f244 5231 	movw	r2, #17713	; 0x4531
 8007b32:	4293      	cmp	r3, r2
 8007b34:	f040 80be 	bne.w	8007cb4 <LCD_Init+0x3564>
			{
		LCD_WriteReg(0X00, 0X0001);
 8007b38:	2101      	movs	r1, #1
 8007b3a:	2000      	movs	r0, #0
 8007b3c:	f7fb fb6c 	bl	8003218 <LCD_WriteReg>
		HAL_Delay(10);
 8007b40:	200a      	movs	r0, #10
 8007b42:	f7f8 ffc1 	bl	8000ac8 <HAL_Delay>
		LCD_WriteReg(0X10, 0X1628);
 8007b46:	f241 6128 	movw	r1, #5672	; 0x1628
 8007b4a:	2010      	movs	r0, #16
 8007b4c:	f7fb fb64 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0X12, 0X000e);        //0x0006
 8007b50:	210e      	movs	r1, #14
 8007b52:	2012      	movs	r0, #18
 8007b54:	f7fb fb60 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0X13, 0X0A39);
 8007b58:	f640 2139 	movw	r1, #2617	; 0xa39
 8007b5c:	2013      	movs	r0, #19
 8007b5e:	f7fb fb5b 	bl	8003218 <LCD_WriteReg>
		HAL_Delay(10);
 8007b62:	200a      	movs	r0, #10
 8007b64:	f7f8 ffb0 	bl	8000ac8 <HAL_Delay>
		LCD_WriteReg(0X11, 0X0040);
 8007b68:	2140      	movs	r1, #64	; 0x40
 8007b6a:	2011      	movs	r0, #17
 8007b6c:	f7fb fb54 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0X15, 0X0050);
 8007b70:	2150      	movs	r1, #80	; 0x50
 8007b72:	2015      	movs	r0, #21
 8007b74:	f7fb fb50 	bl	8003218 <LCD_WriteReg>
		HAL_Delay(10);
 8007b78:	200a      	movs	r0, #10
 8007b7a:	f7f8 ffa5 	bl	8000ac8 <HAL_Delay>
		LCD_WriteReg(0X12, 0X001e);        //16
 8007b7e:	211e      	movs	r1, #30
 8007b80:	2012      	movs	r0, #18
 8007b82:	f7fb fb49 	bl	8003218 <LCD_WriteReg>
		HAL_Delay(10);
 8007b86:	200a      	movs	r0, #10
 8007b88:	f7f8 ff9e 	bl	8000ac8 <HAL_Delay>
		LCD_WriteReg(0X10, 0X1620);
 8007b8c:	f44f 51b1 	mov.w	r1, #5664	; 0x1620
 8007b90:	2010      	movs	r0, #16
 8007b92:	f7fb fb41 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0X13, 0X2A39);
 8007b96:	f642 2139 	movw	r1, #10809	; 0x2a39
 8007b9a:	2013      	movs	r0, #19
 8007b9c:	f7fb fb3c 	bl	8003218 <LCD_WriteReg>
		HAL_Delay(10);
 8007ba0:	200a      	movs	r0, #10
 8007ba2:	f7f8 ff91 	bl	8000ac8 <HAL_Delay>
		LCD_WriteReg(0X01, 0X0100);
 8007ba6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007baa:	2001      	movs	r0, #1
 8007bac:	f7fb fb34 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0X02, 0X0300);
 8007bb0:	f44f 7140 	mov.w	r1, #768	; 0x300
 8007bb4:	2002      	movs	r0, #2
 8007bb6:	f7fb fb2f 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0X03, 0X1038);        //改变方向的
 8007bba:	f241 0138 	movw	r1, #4152	; 0x1038
 8007bbe:	2003      	movs	r0, #3
 8007bc0:	f7fb fb2a 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0X08, 0X0202);
 8007bc4:	f240 2102 	movw	r1, #514	; 0x202
 8007bc8:	2008      	movs	r0, #8
 8007bca:	f7fb fb25 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0X0A, 0X0008);
 8007bce:	2108      	movs	r1, #8
 8007bd0:	200a      	movs	r0, #10
 8007bd2:	f7fb fb21 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0X30, 0X0000);
 8007bd6:	2100      	movs	r1, #0
 8007bd8:	2030      	movs	r0, #48	; 0x30
 8007bda:	f7fb fb1d 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0X31, 0X0402);
 8007bde:	f240 4102 	movw	r1, #1026	; 0x402
 8007be2:	2031      	movs	r0, #49	; 0x31
 8007be4:	f7fb fb18 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0X32, 0X0106);
 8007be8:	f44f 7183 	mov.w	r1, #262	; 0x106
 8007bec:	2032      	movs	r0, #50	; 0x32
 8007bee:	f7fb fb13 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0X33, 0X0503);
 8007bf2:	f240 5103 	movw	r1, #1283	; 0x503
 8007bf6:	2033      	movs	r0, #51	; 0x33
 8007bf8:	f7fb fb0e 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0X34, 0X0104);
 8007bfc:	f44f 7182 	mov.w	r1, #260	; 0x104
 8007c00:	2034      	movs	r0, #52	; 0x34
 8007c02:	f7fb fb09 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0X35, 0X0301);
 8007c06:	f240 3101 	movw	r1, #769	; 0x301
 8007c0a:	2035      	movs	r0, #53	; 0x35
 8007c0c:	f7fb fb04 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0X36, 0X0707);
 8007c10:	f240 7107 	movw	r1, #1799	; 0x707
 8007c14:	2036      	movs	r0, #54	; 0x36
 8007c16:	f7fb faff 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0X37, 0X0305);
 8007c1a:	f240 3105 	movw	r1, #773	; 0x305
 8007c1e:	2037      	movs	r0, #55	; 0x37
 8007c20:	f7fb fafa 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0X38, 0X0208);
 8007c24:	f44f 7102 	mov.w	r1, #520	; 0x208
 8007c28:	2038      	movs	r0, #56	; 0x38
 8007c2a:	f7fb faf5 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0X39, 0X0F0B);
 8007c2e:	f640 710b 	movw	r1, #3851	; 0xf0b
 8007c32:	2039      	movs	r0, #57	; 0x39
 8007c34:	f7fb faf0 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0X41, 0X0002);
 8007c38:	2102      	movs	r1, #2
 8007c3a:	2041      	movs	r0, #65	; 0x41
 8007c3c:	f7fb faec 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0X60, 0X2700);
 8007c40:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8007c44:	2060      	movs	r0, #96	; 0x60
 8007c46:	f7fb fae7 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0X61, 0X0001);
 8007c4a:	2101      	movs	r1, #1
 8007c4c:	2061      	movs	r0, #97	; 0x61
 8007c4e:	f7fb fae3 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0X90, 0X0210);
 8007c52:	f44f 7104 	mov.w	r1, #528	; 0x210
 8007c56:	2090      	movs	r0, #144	; 0x90
 8007c58:	f7fb fade 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0X92, 0X010A);
 8007c5c:	f44f 7185 	mov.w	r1, #266	; 0x10a
 8007c60:	2092      	movs	r0, #146	; 0x92
 8007c62:	f7fb fad9 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0X93, 0X0004);
 8007c66:	2104      	movs	r1, #4
 8007c68:	2093      	movs	r0, #147	; 0x93
 8007c6a:	f7fb fad5 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0XA0, 0X0100);
 8007c6e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007c72:	20a0      	movs	r0, #160	; 0xa0
 8007c74:	f7fb fad0 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0001);
 8007c78:	2101      	movs	r1, #1
 8007c7a:	2007      	movs	r0, #7
 8007c7c:	f7fb facc 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0021);
 8007c80:	2121      	movs	r1, #33	; 0x21
 8007c82:	2007      	movs	r0, #7
 8007c84:	f7fb fac8 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0023);
 8007c88:	2123      	movs	r1, #35	; 0x23
 8007c8a:	2007      	movs	r0, #7
 8007c8c:	f7fb fac4 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0033);
 8007c90:	2133      	movs	r1, #51	; 0x33
 8007c92:	2007      	movs	r0, #7
 8007c94:	f7fb fac0 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0133);
 8007c98:	f240 1133 	movw	r1, #307	; 0x133
 8007c9c:	2007      	movs	r0, #7
 8007c9e:	f7fb fabb 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0XA0, 0X0000);
 8007ca2:	2100      	movs	r1, #0
 8007ca4:	20a0      	movs	r0, #160	; 0xa0
 8007ca6:	f7fb fab7 	bl	8003218 <LCD_WriteReg>
 8007caa:	f000 bc6b 	b.w	8008584 <LCD_Init+0x3e34>
 8007cae:	bf00      	nop
 8007cb0:	200000b4 	.word	0x200000b4
	} else if (lcddev.id == 0x4535) {
 8007cb4:	4b5b      	ldr	r3, [pc, #364]	; (8007e24 <LCD_Init+0x36d4>)
 8007cb6:	889b      	ldrh	r3, [r3, #4]
 8007cb8:	f244 5235 	movw	r2, #17717	; 0x4535
 8007cbc:	4293      	cmp	r3, r2
 8007cbe:	f040 80b3 	bne.w	8007e28 <LCD_Init+0x36d8>
		LCD_WriteReg(0X15, 0X0030);
 8007cc2:	2130      	movs	r1, #48	; 0x30
 8007cc4:	2015      	movs	r0, #21
 8007cc6:	f7fb faa7 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0X9A, 0X0010);
 8007cca:	2110      	movs	r1, #16
 8007ccc:	209a      	movs	r0, #154	; 0x9a
 8007cce:	f7fb faa3 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0X11, 0X0020);
 8007cd2:	2120      	movs	r1, #32
 8007cd4:	2011      	movs	r0, #17
 8007cd6:	f7fb fa9f 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0X10, 0X3428);
 8007cda:	f243 4128 	movw	r1, #13352	; 0x3428
 8007cde:	2010      	movs	r0, #16
 8007ce0:	f7fb fa9a 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0X12, 0X0002);        //16
 8007ce4:	2102      	movs	r1, #2
 8007ce6:	2012      	movs	r0, #18
 8007ce8:	f7fb fa96 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0X13, 0X1038);
 8007cec:	f241 0138 	movw	r1, #4152	; 0x1038
 8007cf0:	2013      	movs	r0, #19
 8007cf2:	f7fb fa91 	bl	8003218 <LCD_WriteReg>
		HAL_Delay(40);
 8007cf6:	2028      	movs	r0, #40	; 0x28
 8007cf8:	f7f8 fee6 	bl	8000ac8 <HAL_Delay>
		LCD_WriteReg(0X12, 0X0012);        //16
 8007cfc:	2112      	movs	r1, #18
 8007cfe:	2012      	movs	r0, #18
 8007d00:	f7fb fa8a 	bl	8003218 <LCD_WriteReg>
		HAL_Delay(40);
 8007d04:	2028      	movs	r0, #40	; 0x28
 8007d06:	f7f8 fedf 	bl	8000ac8 <HAL_Delay>
		LCD_WriteReg(0X10, 0X3420);
 8007d0a:	f243 4120 	movw	r1, #13344	; 0x3420
 8007d0e:	2010      	movs	r0, #16
 8007d10:	f7fb fa82 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0X13, 0X3038);
 8007d14:	f243 0138 	movw	r1, #12344	; 0x3038
 8007d18:	2013      	movs	r0, #19
 8007d1a:	f7fb fa7d 	bl	8003218 <LCD_WriteReg>
		HAL_Delay(70);
 8007d1e:	2046      	movs	r0, #70	; 0x46
 8007d20:	f7f8 fed2 	bl	8000ac8 <HAL_Delay>
		LCD_WriteReg(0X30, 0X0000);
 8007d24:	2100      	movs	r1, #0
 8007d26:	2030      	movs	r0, #48	; 0x30
 8007d28:	f7fb fa76 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0X31, 0X0402);
 8007d2c:	f240 4102 	movw	r1, #1026	; 0x402
 8007d30:	2031      	movs	r0, #49	; 0x31
 8007d32:	f7fb fa71 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0X32, 0X0307);
 8007d36:	f240 3107 	movw	r1, #775	; 0x307
 8007d3a:	2032      	movs	r0, #50	; 0x32
 8007d3c:	f7fb fa6c 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0X33, 0X0304);
 8007d40:	f44f 7141 	mov.w	r1, #772	; 0x304
 8007d44:	2033      	movs	r0, #51	; 0x33
 8007d46:	f7fb fa67 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0X34, 0X0004);
 8007d4a:	2104      	movs	r1, #4
 8007d4c:	2034      	movs	r0, #52	; 0x34
 8007d4e:	f7fb fa63 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0X35, 0X0401);
 8007d52:	f240 4101 	movw	r1, #1025	; 0x401
 8007d56:	2035      	movs	r0, #53	; 0x35
 8007d58:	f7fb fa5e 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0X36, 0X0707);
 8007d5c:	f240 7107 	movw	r1, #1799	; 0x707
 8007d60:	2036      	movs	r0, #54	; 0x36
 8007d62:	f7fb fa59 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0X37, 0X0305);
 8007d66:	f240 3105 	movw	r1, #773	; 0x305
 8007d6a:	2037      	movs	r0, #55	; 0x37
 8007d6c:	f7fb fa54 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0X38, 0X0610);
 8007d70:	f44f 61c2 	mov.w	r1, #1552	; 0x610
 8007d74:	2038      	movs	r0, #56	; 0x38
 8007d76:	f7fb fa4f 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0X39, 0X0610);
 8007d7a:	f44f 61c2 	mov.w	r1, #1552	; 0x610
 8007d7e:	2039      	movs	r0, #57	; 0x39
 8007d80:	f7fb fa4a 	bl	8003218 <LCD_WriteReg>

		LCD_WriteReg(0X01, 0X0100);
 8007d84:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007d88:	2001      	movs	r0, #1
 8007d8a:	f7fb fa45 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0X02, 0X0300);
 8007d8e:	f44f 7140 	mov.w	r1, #768	; 0x300
 8007d92:	2002      	movs	r0, #2
 8007d94:	f7fb fa40 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0X03, 0X1030);        //改变方向的
 8007d98:	f241 0130 	movw	r1, #4144	; 0x1030
 8007d9c:	2003      	movs	r0, #3
 8007d9e:	f7fb fa3b 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0X08, 0X0808);
 8007da2:	f640 0108 	movw	r1, #2056	; 0x808
 8007da6:	2008      	movs	r0, #8
 8007da8:	f7fb fa36 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0X0A, 0X0008);
 8007dac:	2108      	movs	r1, #8
 8007dae:	200a      	movs	r0, #10
 8007db0:	f7fb fa32 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0X60, 0X2700);
 8007db4:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8007db8:	2060      	movs	r0, #96	; 0x60
 8007dba:	f7fb fa2d 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0X61, 0X0001);
 8007dbe:	2101      	movs	r1, #1
 8007dc0:	2061      	movs	r0, #97	; 0x61
 8007dc2:	f7fb fa29 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0X90, 0X013E);
 8007dc6:	f44f 719f 	mov.w	r1, #318	; 0x13e
 8007dca:	2090      	movs	r0, #144	; 0x90
 8007dcc:	f7fb fa24 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0X92, 0X0100);
 8007dd0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007dd4:	2092      	movs	r0, #146	; 0x92
 8007dd6:	f7fb fa1f 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0X93, 0X0100);
 8007dda:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007dde:	2093      	movs	r0, #147	; 0x93
 8007de0:	f7fb fa1a 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0XA0, 0X3000);
 8007de4:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8007de8:	20a0      	movs	r0, #160	; 0xa0
 8007dea:	f7fb fa15 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0XA3, 0X0010);
 8007dee:	2110      	movs	r1, #16
 8007df0:	20a3      	movs	r0, #163	; 0xa3
 8007df2:	f7fb fa11 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0001);
 8007df6:	2101      	movs	r1, #1
 8007df8:	2007      	movs	r0, #7
 8007dfa:	f7fb fa0d 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0021);
 8007dfe:	2121      	movs	r1, #33	; 0x21
 8007e00:	2007      	movs	r0, #7
 8007e02:	f7fb fa09 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0023);
 8007e06:	2123      	movs	r1, #35	; 0x23
 8007e08:	2007      	movs	r0, #7
 8007e0a:	f7fb fa05 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0033);
 8007e0e:	2133      	movs	r1, #51	; 0x33
 8007e10:	2007      	movs	r0, #7
 8007e12:	f7fb fa01 	bl	8003218 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0133);
 8007e16:	f240 1133 	movw	r1, #307	; 0x133
 8007e1a:	2007      	movs	r0, #7
 8007e1c:	f7fb f9fc 	bl	8003218 <LCD_WriteReg>
 8007e20:	e3b0      	b.n	8008584 <LCD_Init+0x3e34>
 8007e22:	bf00      	nop
 8007e24:	200000b4 	.word	0x200000b4
	} else if (lcddev.id == 0X1963) {
 8007e28:	4ba8      	ldr	r3, [pc, #672]	; (80080cc <LCD_Init+0x397c>)
 8007e2a:	889b      	ldrh	r3, [r3, #4]
 8007e2c:	f641 1263 	movw	r2, #6499	; 0x1963
 8007e30:	4293      	cmp	r3, r2
 8007e32:	f040 83a7 	bne.w	8008584 <LCD_Init+0x3e34>
		LCD_WR_REG(0xE2);	//Set PLL with OSC = 10MHz (hardware),	Multiplier N = 35, 250MHz < VCO < 800MHz = OSC*(N+1), VCO = 300MHz
 8007e36:	20e2      	movs	r0, #226	; 0xe2
 8007e38:	f7fb f962 	bl	8003100 <LCD_WR_REG>
		LCD_WR_DATA(0x1D);		//参数1 
 8007e3c:	4ba4      	ldr	r3, [pc, #656]	; (80080d0 <LCD_Init+0x3980>)
 8007e3e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007e42:	611a      	str	r2, [r3, #16]
 8007e44:	4ba2      	ldr	r3, [pc, #648]	; (80080d0 <LCD_Init+0x3980>)
 8007e46:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007e4a:	615a      	str	r2, [r3, #20]
 8007e4c:	4ba1      	ldr	r3, [pc, #644]	; (80080d4 <LCD_Init+0x3984>)
 8007e4e:	221d      	movs	r2, #29
 8007e50:	60da      	str	r2, [r3, #12]
 8007e52:	4b9f      	ldr	r3, [pc, #636]	; (80080d0 <LCD_Init+0x3980>)
 8007e54:	2280      	movs	r2, #128	; 0x80
 8007e56:	615a      	str	r2, [r3, #20]
 8007e58:	4b9d      	ldr	r3, [pc, #628]	; (80080d0 <LCD_Init+0x3980>)
 8007e5a:	2280      	movs	r2, #128	; 0x80
 8007e5c:	611a      	str	r2, [r3, #16]
 8007e5e:	4b9c      	ldr	r3, [pc, #624]	; (80080d0 <LCD_Init+0x3980>)
 8007e60:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007e64:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x02);		//参数2 Divider M = 2, PLL = 300/(M+1) = 100MHz
 8007e66:	4b9a      	ldr	r3, [pc, #616]	; (80080d0 <LCD_Init+0x3980>)
 8007e68:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007e6c:	611a      	str	r2, [r3, #16]
 8007e6e:	4b98      	ldr	r3, [pc, #608]	; (80080d0 <LCD_Init+0x3980>)
 8007e70:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007e74:	615a      	str	r2, [r3, #20]
 8007e76:	4b97      	ldr	r3, [pc, #604]	; (80080d4 <LCD_Init+0x3984>)
 8007e78:	2202      	movs	r2, #2
 8007e7a:	60da      	str	r2, [r3, #12]
 8007e7c:	4b94      	ldr	r3, [pc, #592]	; (80080d0 <LCD_Init+0x3980>)
 8007e7e:	2280      	movs	r2, #128	; 0x80
 8007e80:	615a      	str	r2, [r3, #20]
 8007e82:	4b93      	ldr	r3, [pc, #588]	; (80080d0 <LCD_Init+0x3980>)
 8007e84:	2280      	movs	r2, #128	; 0x80
 8007e86:	611a      	str	r2, [r3, #16]
 8007e88:	4b91      	ldr	r3, [pc, #580]	; (80080d0 <LCD_Init+0x3980>)
 8007e8a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007e8e:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x04);		//参数3 Validate M and N values   
 8007e90:	4b8f      	ldr	r3, [pc, #572]	; (80080d0 <LCD_Init+0x3980>)
 8007e92:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007e96:	611a      	str	r2, [r3, #16]
 8007e98:	4b8d      	ldr	r3, [pc, #564]	; (80080d0 <LCD_Init+0x3980>)
 8007e9a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007e9e:	615a      	str	r2, [r3, #20]
 8007ea0:	4b8c      	ldr	r3, [pc, #560]	; (80080d4 <LCD_Init+0x3984>)
 8007ea2:	2204      	movs	r2, #4
 8007ea4:	60da      	str	r2, [r3, #12]
 8007ea6:	4b8a      	ldr	r3, [pc, #552]	; (80080d0 <LCD_Init+0x3980>)
 8007ea8:	2280      	movs	r2, #128	; 0x80
 8007eaa:	615a      	str	r2, [r3, #20]
 8007eac:	4b88      	ldr	r3, [pc, #544]	; (80080d0 <LCD_Init+0x3980>)
 8007eae:	2280      	movs	r2, #128	; 0x80
 8007eb0:	611a      	str	r2, [r3, #16]
 8007eb2:	4b87      	ldr	r3, [pc, #540]	; (80080d0 <LCD_Init+0x3980>)
 8007eb4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007eb8:	611a      	str	r2, [r3, #16]
//		delay_us(100);
		HAL_Delay(1);
 8007eba:	2001      	movs	r0, #1
 8007ebc:	f7f8 fe04 	bl	8000ac8 <HAL_Delay>
		LCD_WR_REG(0xE0);		// Start PLL command
 8007ec0:	20e0      	movs	r0, #224	; 0xe0
 8007ec2:	f7fb f91d 	bl	8003100 <LCD_WR_REG>
		LCD_WR_DATA(0x01);		// enable PLL
 8007ec6:	4b82      	ldr	r3, [pc, #520]	; (80080d0 <LCD_Init+0x3980>)
 8007ec8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007ecc:	611a      	str	r2, [r3, #16]
 8007ece:	4b80      	ldr	r3, [pc, #512]	; (80080d0 <LCD_Init+0x3980>)
 8007ed0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007ed4:	615a      	str	r2, [r3, #20]
 8007ed6:	4b7f      	ldr	r3, [pc, #508]	; (80080d4 <LCD_Init+0x3984>)
 8007ed8:	2201      	movs	r2, #1
 8007eda:	60da      	str	r2, [r3, #12]
 8007edc:	4b7c      	ldr	r3, [pc, #496]	; (80080d0 <LCD_Init+0x3980>)
 8007ede:	2280      	movs	r2, #128	; 0x80
 8007ee0:	615a      	str	r2, [r3, #20]
 8007ee2:	4b7b      	ldr	r3, [pc, #492]	; (80080d0 <LCD_Init+0x3980>)
 8007ee4:	2280      	movs	r2, #128	; 0x80
 8007ee6:	611a      	str	r2, [r3, #16]
 8007ee8:	4b79      	ldr	r3, [pc, #484]	; (80080d0 <LCD_Init+0x3980>)
 8007eea:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007eee:	611a      	str	r2, [r3, #16]
		HAL_Delay(10);
 8007ef0:	200a      	movs	r0, #10
 8007ef2:	f7f8 fde9 	bl	8000ac8 <HAL_Delay>
		LCD_WR_REG(0xE0);		// Start PLL command again
 8007ef6:	20e0      	movs	r0, #224	; 0xe0
 8007ef8:	f7fb f902 	bl	8003100 <LCD_WR_REG>
		LCD_WR_DATA(0x03);		// now, use PLL output as system clock	
 8007efc:	4b74      	ldr	r3, [pc, #464]	; (80080d0 <LCD_Init+0x3980>)
 8007efe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007f02:	611a      	str	r2, [r3, #16]
 8007f04:	4b72      	ldr	r3, [pc, #456]	; (80080d0 <LCD_Init+0x3980>)
 8007f06:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007f0a:	615a      	str	r2, [r3, #20]
 8007f0c:	4b71      	ldr	r3, [pc, #452]	; (80080d4 <LCD_Init+0x3984>)
 8007f0e:	2203      	movs	r2, #3
 8007f10:	60da      	str	r2, [r3, #12]
 8007f12:	4b6f      	ldr	r3, [pc, #444]	; (80080d0 <LCD_Init+0x3980>)
 8007f14:	2280      	movs	r2, #128	; 0x80
 8007f16:	615a      	str	r2, [r3, #20]
 8007f18:	4b6d      	ldr	r3, [pc, #436]	; (80080d0 <LCD_Init+0x3980>)
 8007f1a:	2280      	movs	r2, #128	; 0x80
 8007f1c:	611a      	str	r2, [r3, #16]
 8007f1e:	4b6c      	ldr	r3, [pc, #432]	; (80080d0 <LCD_Init+0x3980>)
 8007f20:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007f24:	611a      	str	r2, [r3, #16]
		HAL_Delay(12);
 8007f26:	200c      	movs	r0, #12
 8007f28:	f7f8 fdce 	bl	8000ac8 <HAL_Delay>
		LCD_WR_REG(0x01);		//软复位
 8007f2c:	2001      	movs	r0, #1
 8007f2e:	f7fb f8e7 	bl	8003100 <LCD_WR_REG>
		HAL_Delay(10);
 8007f32:	200a      	movs	r0, #10
 8007f34:	f7f8 fdc8 	bl	8000ac8 <HAL_Delay>

		LCD_WR_REG(0xE6);		//设置像素频率,33Mhz
 8007f38:	20e6      	movs	r0, #230	; 0xe6
 8007f3a:	f7fb f8e1 	bl	8003100 <LCD_WR_REG>
		LCD_WR_DATA(0x2F);
 8007f3e:	4b64      	ldr	r3, [pc, #400]	; (80080d0 <LCD_Init+0x3980>)
 8007f40:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007f44:	611a      	str	r2, [r3, #16]
 8007f46:	4b62      	ldr	r3, [pc, #392]	; (80080d0 <LCD_Init+0x3980>)
 8007f48:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007f4c:	615a      	str	r2, [r3, #20]
 8007f4e:	4b61      	ldr	r3, [pc, #388]	; (80080d4 <LCD_Init+0x3984>)
 8007f50:	222f      	movs	r2, #47	; 0x2f
 8007f52:	60da      	str	r2, [r3, #12]
 8007f54:	4b5e      	ldr	r3, [pc, #376]	; (80080d0 <LCD_Init+0x3980>)
 8007f56:	2280      	movs	r2, #128	; 0x80
 8007f58:	615a      	str	r2, [r3, #20]
 8007f5a:	4b5d      	ldr	r3, [pc, #372]	; (80080d0 <LCD_Init+0x3980>)
 8007f5c:	2280      	movs	r2, #128	; 0x80
 8007f5e:	611a      	str	r2, [r3, #16]
 8007f60:	4b5b      	ldr	r3, [pc, #364]	; (80080d0 <LCD_Init+0x3980>)
 8007f62:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007f66:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0xFF);
 8007f68:	4b59      	ldr	r3, [pc, #356]	; (80080d0 <LCD_Init+0x3980>)
 8007f6a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007f6e:	611a      	str	r2, [r3, #16]
 8007f70:	4b57      	ldr	r3, [pc, #348]	; (80080d0 <LCD_Init+0x3980>)
 8007f72:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007f76:	615a      	str	r2, [r3, #20]
 8007f78:	4b56      	ldr	r3, [pc, #344]	; (80080d4 <LCD_Init+0x3984>)
 8007f7a:	22ff      	movs	r2, #255	; 0xff
 8007f7c:	60da      	str	r2, [r3, #12]
 8007f7e:	4b54      	ldr	r3, [pc, #336]	; (80080d0 <LCD_Init+0x3980>)
 8007f80:	2280      	movs	r2, #128	; 0x80
 8007f82:	615a      	str	r2, [r3, #20]
 8007f84:	4b52      	ldr	r3, [pc, #328]	; (80080d0 <LCD_Init+0x3980>)
 8007f86:	2280      	movs	r2, #128	; 0x80
 8007f88:	611a      	str	r2, [r3, #16]
 8007f8a:	4b51      	ldr	r3, [pc, #324]	; (80080d0 <LCD_Init+0x3980>)
 8007f8c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007f90:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0xFF);
 8007f92:	4b4f      	ldr	r3, [pc, #316]	; (80080d0 <LCD_Init+0x3980>)
 8007f94:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007f98:	611a      	str	r2, [r3, #16]
 8007f9a:	4b4d      	ldr	r3, [pc, #308]	; (80080d0 <LCD_Init+0x3980>)
 8007f9c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007fa0:	615a      	str	r2, [r3, #20]
 8007fa2:	4b4c      	ldr	r3, [pc, #304]	; (80080d4 <LCD_Init+0x3984>)
 8007fa4:	22ff      	movs	r2, #255	; 0xff
 8007fa6:	60da      	str	r2, [r3, #12]
 8007fa8:	4b49      	ldr	r3, [pc, #292]	; (80080d0 <LCD_Init+0x3980>)
 8007faa:	2280      	movs	r2, #128	; 0x80
 8007fac:	615a      	str	r2, [r3, #20]
 8007fae:	4b48      	ldr	r3, [pc, #288]	; (80080d0 <LCD_Init+0x3980>)
 8007fb0:	2280      	movs	r2, #128	; 0x80
 8007fb2:	611a      	str	r2, [r3, #16]
 8007fb4:	4b46      	ldr	r3, [pc, #280]	; (80080d0 <LCD_Init+0x3980>)
 8007fb6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007fba:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0xB0);		//设置LCD模式
 8007fbc:	20b0      	movs	r0, #176	; 0xb0
 8007fbe:	f7fb f89f 	bl	8003100 <LCD_WR_REG>
		LCD_WR_DATA(0x20);		//24位模式
 8007fc2:	4b43      	ldr	r3, [pc, #268]	; (80080d0 <LCD_Init+0x3980>)
 8007fc4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007fc8:	611a      	str	r2, [r3, #16]
 8007fca:	4b41      	ldr	r3, [pc, #260]	; (80080d0 <LCD_Init+0x3980>)
 8007fcc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007fd0:	615a      	str	r2, [r3, #20]
 8007fd2:	4b40      	ldr	r3, [pc, #256]	; (80080d4 <LCD_Init+0x3984>)
 8007fd4:	2220      	movs	r2, #32
 8007fd6:	60da      	str	r2, [r3, #12]
 8007fd8:	4b3d      	ldr	r3, [pc, #244]	; (80080d0 <LCD_Init+0x3980>)
 8007fda:	2280      	movs	r2, #128	; 0x80
 8007fdc:	615a      	str	r2, [r3, #20]
 8007fde:	4b3c      	ldr	r3, [pc, #240]	; (80080d0 <LCD_Init+0x3980>)
 8007fe0:	2280      	movs	r2, #128	; 0x80
 8007fe2:	611a      	str	r2, [r3, #16]
 8007fe4:	4b3a      	ldr	r3, [pc, #232]	; (80080d0 <LCD_Init+0x3980>)
 8007fe6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007fea:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);		//TFT 模式 
 8007fec:	4b38      	ldr	r3, [pc, #224]	; (80080d0 <LCD_Init+0x3980>)
 8007fee:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007ff2:	611a      	str	r2, [r3, #16]
 8007ff4:	4b36      	ldr	r3, [pc, #216]	; (80080d0 <LCD_Init+0x3980>)
 8007ff6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007ffa:	615a      	str	r2, [r3, #20]
 8007ffc:	4b35      	ldr	r3, [pc, #212]	; (80080d4 <LCD_Init+0x3984>)
 8007ffe:	2200      	movs	r2, #0
 8008000:	60da      	str	r2, [r3, #12]
 8008002:	4b33      	ldr	r3, [pc, #204]	; (80080d0 <LCD_Init+0x3980>)
 8008004:	2280      	movs	r2, #128	; 0x80
 8008006:	615a      	str	r2, [r3, #20]
 8008008:	4b31      	ldr	r3, [pc, #196]	; (80080d0 <LCD_Init+0x3980>)
 800800a:	2280      	movs	r2, #128	; 0x80
 800800c:	611a      	str	r2, [r3, #16]
 800800e:	4b30      	ldr	r3, [pc, #192]	; (80080d0 <LCD_Init+0x3980>)
 8008010:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008014:	611a      	str	r2, [r3, #16]

		LCD_WR_DATA((SSD_HOR_RESOLUTION-1)>>8);		//设置LCD水平像素
 8008016:	4b2e      	ldr	r3, [pc, #184]	; (80080d0 <LCD_Init+0x3980>)
 8008018:	f44f 7280 	mov.w	r2, #256	; 0x100
 800801c:	611a      	str	r2, [r3, #16]
 800801e:	4b2c      	ldr	r3, [pc, #176]	; (80080d0 <LCD_Init+0x3980>)
 8008020:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008024:	615a      	str	r2, [r3, #20]
 8008026:	4b2b      	ldr	r3, [pc, #172]	; (80080d4 <LCD_Init+0x3984>)
 8008028:	2203      	movs	r2, #3
 800802a:	60da      	str	r2, [r3, #12]
 800802c:	4b28      	ldr	r3, [pc, #160]	; (80080d0 <LCD_Init+0x3980>)
 800802e:	2280      	movs	r2, #128	; 0x80
 8008030:	615a      	str	r2, [r3, #20]
 8008032:	4b27      	ldr	r3, [pc, #156]	; (80080d0 <LCD_Init+0x3980>)
 8008034:	2280      	movs	r2, #128	; 0x80
 8008036:	611a      	str	r2, [r3, #16]
 8008038:	4b25      	ldr	r3, [pc, #148]	; (80080d0 <LCD_Init+0x3980>)
 800803a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800803e:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HOR_RESOLUTION-1);
 8008040:	4b23      	ldr	r3, [pc, #140]	; (80080d0 <LCD_Init+0x3980>)
 8008042:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008046:	611a      	str	r2, [r3, #16]
 8008048:	4b21      	ldr	r3, [pc, #132]	; (80080d0 <LCD_Init+0x3980>)
 800804a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800804e:	615a      	str	r2, [r3, #20]
 8008050:	4b20      	ldr	r3, [pc, #128]	; (80080d4 <LCD_Init+0x3984>)
 8008052:	f240 321f 	movw	r2, #799	; 0x31f
 8008056:	60da      	str	r2, [r3, #12]
 8008058:	4b1d      	ldr	r3, [pc, #116]	; (80080d0 <LCD_Init+0x3980>)
 800805a:	2280      	movs	r2, #128	; 0x80
 800805c:	615a      	str	r2, [r3, #20]
 800805e:	4b1c      	ldr	r3, [pc, #112]	; (80080d0 <LCD_Init+0x3980>)
 8008060:	2280      	movs	r2, #128	; 0x80
 8008062:	611a      	str	r2, [r3, #16]
 8008064:	4b1a      	ldr	r3, [pc, #104]	; (80080d0 <LCD_Init+0x3980>)
 8008066:	f44f 7200 	mov.w	r2, #512	; 0x200
 800806a:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA((SSD_VER_RESOLUTION-1)>>8);		//设置LCD垂直像素
 800806c:	4b18      	ldr	r3, [pc, #96]	; (80080d0 <LCD_Init+0x3980>)
 800806e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008072:	611a      	str	r2, [r3, #16]
 8008074:	4b16      	ldr	r3, [pc, #88]	; (80080d0 <LCD_Init+0x3980>)
 8008076:	f44f 7200 	mov.w	r2, #512	; 0x200
 800807a:	615a      	str	r2, [r3, #20]
 800807c:	4b15      	ldr	r3, [pc, #84]	; (80080d4 <LCD_Init+0x3984>)
 800807e:	2201      	movs	r2, #1
 8008080:	60da      	str	r2, [r3, #12]
 8008082:	4b13      	ldr	r3, [pc, #76]	; (80080d0 <LCD_Init+0x3980>)
 8008084:	2280      	movs	r2, #128	; 0x80
 8008086:	615a      	str	r2, [r3, #20]
 8008088:	4b11      	ldr	r3, [pc, #68]	; (80080d0 <LCD_Init+0x3980>)
 800808a:	2280      	movs	r2, #128	; 0x80
 800808c:	611a      	str	r2, [r3, #16]
 800808e:	4b10      	ldr	r3, [pc, #64]	; (80080d0 <LCD_Init+0x3980>)
 8008090:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008094:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VER_RESOLUTION-1);
 8008096:	4b0e      	ldr	r3, [pc, #56]	; (80080d0 <LCD_Init+0x3980>)
 8008098:	f44f 7280 	mov.w	r2, #256	; 0x100
 800809c:	611a      	str	r2, [r3, #16]
 800809e:	4b0c      	ldr	r3, [pc, #48]	; (80080d0 <LCD_Init+0x3980>)
 80080a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80080a4:	615a      	str	r2, [r3, #20]
 80080a6:	4b0b      	ldr	r3, [pc, #44]	; (80080d4 <LCD_Init+0x3984>)
 80080a8:	f240 12df 	movw	r2, #479	; 0x1df
 80080ac:	60da      	str	r2, [r3, #12]
 80080ae:	4b08      	ldr	r3, [pc, #32]	; (80080d0 <LCD_Init+0x3980>)
 80080b0:	2280      	movs	r2, #128	; 0x80
 80080b2:	615a      	str	r2, [r3, #20]
 80080b4:	4b06      	ldr	r3, [pc, #24]	; (80080d0 <LCD_Init+0x3980>)
 80080b6:	2280      	movs	r2, #128	; 0x80
 80080b8:	611a      	str	r2, [r3, #16]
 80080ba:	4b05      	ldr	r3, [pc, #20]	; (80080d0 <LCD_Init+0x3980>)
 80080bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80080c0:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);		//RGB序列 
 80080c2:	4b03      	ldr	r3, [pc, #12]	; (80080d0 <LCD_Init+0x3980>)
 80080c4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80080c8:	e006      	b.n	80080d8 <LCD_Init+0x3988>
 80080ca:	bf00      	nop
 80080cc:	200000b4 	.word	0x200000b4
 80080d0:	40011000 	.word	0x40011000
 80080d4:	40010c00 	.word	0x40010c00
 80080d8:	611a      	str	r2, [r3, #16]
 80080da:	4ba3      	ldr	r3, [pc, #652]	; (8008368 <LCD_Init+0x3c18>)
 80080dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80080e0:	615a      	str	r2, [r3, #20]
 80080e2:	4ba2      	ldr	r3, [pc, #648]	; (800836c <LCD_Init+0x3c1c>)
 80080e4:	2200      	movs	r2, #0
 80080e6:	60da      	str	r2, [r3, #12]
 80080e8:	4b9f      	ldr	r3, [pc, #636]	; (8008368 <LCD_Init+0x3c18>)
 80080ea:	2280      	movs	r2, #128	; 0x80
 80080ec:	615a      	str	r2, [r3, #20]
 80080ee:	4b9e      	ldr	r3, [pc, #632]	; (8008368 <LCD_Init+0x3c18>)
 80080f0:	2280      	movs	r2, #128	; 0x80
 80080f2:	611a      	str	r2, [r3, #16]
 80080f4:	4b9c      	ldr	r3, [pc, #624]	; (8008368 <LCD_Init+0x3c18>)
 80080f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80080fa:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0xB4);		//Set horizontal period
 80080fc:	20b4      	movs	r0, #180	; 0xb4
 80080fe:	f7fa ffff 	bl	8003100 <LCD_WR_REG>
		LCD_WR_DATA((SSD_HT-1)>>8);
 8008102:	4b99      	ldr	r3, [pc, #612]	; (8008368 <LCD_Init+0x3c18>)
 8008104:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008108:	611a      	str	r2, [r3, #16]
 800810a:	4b97      	ldr	r3, [pc, #604]	; (8008368 <LCD_Init+0x3c18>)
 800810c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008110:	615a      	str	r2, [r3, #20]
 8008112:	4b96      	ldr	r3, [pc, #600]	; (800836c <LCD_Init+0x3c1c>)
 8008114:	2204      	movs	r2, #4
 8008116:	60da      	str	r2, [r3, #12]
 8008118:	4b93      	ldr	r3, [pc, #588]	; (8008368 <LCD_Init+0x3c18>)
 800811a:	2280      	movs	r2, #128	; 0x80
 800811c:	615a      	str	r2, [r3, #20]
 800811e:	4b92      	ldr	r3, [pc, #584]	; (8008368 <LCD_Init+0x3c18>)
 8008120:	2280      	movs	r2, #128	; 0x80
 8008122:	611a      	str	r2, [r3, #16]
 8008124:	4b90      	ldr	r3, [pc, #576]	; (8008368 <LCD_Init+0x3c18>)
 8008126:	f44f 7200 	mov.w	r2, #512	; 0x200
 800812a:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HT-1);
 800812c:	4b8e      	ldr	r3, [pc, #568]	; (8008368 <LCD_Init+0x3c18>)
 800812e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008132:	611a      	str	r2, [r3, #16]
 8008134:	4b8c      	ldr	r3, [pc, #560]	; (8008368 <LCD_Init+0x3c18>)
 8008136:	f44f 7200 	mov.w	r2, #512	; 0x200
 800813a:	615a      	str	r2, [r3, #20]
 800813c:	4b8b      	ldr	r3, [pc, #556]	; (800836c <LCD_Init+0x3c1c>)
 800813e:	f240 421f 	movw	r2, #1055	; 0x41f
 8008142:	60da      	str	r2, [r3, #12]
 8008144:	4b88      	ldr	r3, [pc, #544]	; (8008368 <LCD_Init+0x3c18>)
 8008146:	2280      	movs	r2, #128	; 0x80
 8008148:	615a      	str	r2, [r3, #20]
 800814a:	4b87      	ldr	r3, [pc, #540]	; (8008368 <LCD_Init+0x3c18>)
 800814c:	2280      	movs	r2, #128	; 0x80
 800814e:	611a      	str	r2, [r3, #16]
 8008150:	4b85      	ldr	r3, [pc, #532]	; (8008368 <LCD_Init+0x3c18>)
 8008152:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008156:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HPS>>8);
 8008158:	4b83      	ldr	r3, [pc, #524]	; (8008368 <LCD_Init+0x3c18>)
 800815a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800815e:	611a      	str	r2, [r3, #16]
 8008160:	4b81      	ldr	r3, [pc, #516]	; (8008368 <LCD_Init+0x3c18>)
 8008162:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008166:	615a      	str	r2, [r3, #20]
 8008168:	4b80      	ldr	r3, [pc, #512]	; (800836c <LCD_Init+0x3c1c>)
 800816a:	2200      	movs	r2, #0
 800816c:	60da      	str	r2, [r3, #12]
 800816e:	4b7e      	ldr	r3, [pc, #504]	; (8008368 <LCD_Init+0x3c18>)
 8008170:	2280      	movs	r2, #128	; 0x80
 8008172:	615a      	str	r2, [r3, #20]
 8008174:	4b7c      	ldr	r3, [pc, #496]	; (8008368 <LCD_Init+0x3c18>)
 8008176:	2280      	movs	r2, #128	; 0x80
 8008178:	611a      	str	r2, [r3, #16]
 800817a:	4b7b      	ldr	r3, [pc, #492]	; (8008368 <LCD_Init+0x3c18>)
 800817c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008180:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HPS);
 8008182:	4b79      	ldr	r3, [pc, #484]	; (8008368 <LCD_Init+0x3c18>)
 8008184:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008188:	611a      	str	r2, [r3, #16]
 800818a:	4b77      	ldr	r3, [pc, #476]	; (8008368 <LCD_Init+0x3c18>)
 800818c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008190:	615a      	str	r2, [r3, #20]
 8008192:	4b76      	ldr	r3, [pc, #472]	; (800836c <LCD_Init+0x3c1c>)
 8008194:	222e      	movs	r2, #46	; 0x2e
 8008196:	60da      	str	r2, [r3, #12]
 8008198:	4b73      	ldr	r3, [pc, #460]	; (8008368 <LCD_Init+0x3c18>)
 800819a:	2280      	movs	r2, #128	; 0x80
 800819c:	615a      	str	r2, [r3, #20]
 800819e:	4b72      	ldr	r3, [pc, #456]	; (8008368 <LCD_Init+0x3c18>)
 80081a0:	2280      	movs	r2, #128	; 0x80
 80081a2:	611a      	str	r2, [r3, #16]
 80081a4:	4b70      	ldr	r3, [pc, #448]	; (8008368 <LCD_Init+0x3c18>)
 80081a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80081aa:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HOR_PULSE_WIDTH-1);
 80081ac:	4b6e      	ldr	r3, [pc, #440]	; (8008368 <LCD_Init+0x3c18>)
 80081ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80081b2:	611a      	str	r2, [r3, #16]
 80081b4:	4b6c      	ldr	r3, [pc, #432]	; (8008368 <LCD_Init+0x3c18>)
 80081b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80081ba:	615a      	str	r2, [r3, #20]
 80081bc:	4b6b      	ldr	r3, [pc, #428]	; (800836c <LCD_Init+0x3c1c>)
 80081be:	2200      	movs	r2, #0
 80081c0:	60da      	str	r2, [r3, #12]
 80081c2:	4b69      	ldr	r3, [pc, #420]	; (8008368 <LCD_Init+0x3c18>)
 80081c4:	2280      	movs	r2, #128	; 0x80
 80081c6:	615a      	str	r2, [r3, #20]
 80081c8:	4b67      	ldr	r3, [pc, #412]	; (8008368 <LCD_Init+0x3c18>)
 80081ca:	2280      	movs	r2, #128	; 0x80
 80081cc:	611a      	str	r2, [r3, #16]
 80081ce:	4b66      	ldr	r3, [pc, #408]	; (8008368 <LCD_Init+0x3c18>)
 80081d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80081d4:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 80081d6:	4b64      	ldr	r3, [pc, #400]	; (8008368 <LCD_Init+0x3c18>)
 80081d8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80081dc:	611a      	str	r2, [r3, #16]
 80081de:	4b62      	ldr	r3, [pc, #392]	; (8008368 <LCD_Init+0x3c18>)
 80081e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80081e4:	615a      	str	r2, [r3, #20]
 80081e6:	4b61      	ldr	r3, [pc, #388]	; (800836c <LCD_Init+0x3c1c>)
 80081e8:	2200      	movs	r2, #0
 80081ea:	60da      	str	r2, [r3, #12]
 80081ec:	4b5e      	ldr	r3, [pc, #376]	; (8008368 <LCD_Init+0x3c18>)
 80081ee:	2280      	movs	r2, #128	; 0x80
 80081f0:	615a      	str	r2, [r3, #20]
 80081f2:	4b5d      	ldr	r3, [pc, #372]	; (8008368 <LCD_Init+0x3c18>)
 80081f4:	2280      	movs	r2, #128	; 0x80
 80081f6:	611a      	str	r2, [r3, #16]
 80081f8:	4b5b      	ldr	r3, [pc, #364]	; (8008368 <LCD_Init+0x3c18>)
 80081fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80081fe:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 8008200:	4b59      	ldr	r3, [pc, #356]	; (8008368 <LCD_Init+0x3c18>)
 8008202:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008206:	611a      	str	r2, [r3, #16]
 8008208:	4b57      	ldr	r3, [pc, #348]	; (8008368 <LCD_Init+0x3c18>)
 800820a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800820e:	615a      	str	r2, [r3, #20]
 8008210:	4b56      	ldr	r3, [pc, #344]	; (800836c <LCD_Init+0x3c1c>)
 8008212:	2200      	movs	r2, #0
 8008214:	60da      	str	r2, [r3, #12]
 8008216:	4b54      	ldr	r3, [pc, #336]	; (8008368 <LCD_Init+0x3c18>)
 8008218:	2280      	movs	r2, #128	; 0x80
 800821a:	615a      	str	r2, [r3, #20]
 800821c:	4b52      	ldr	r3, [pc, #328]	; (8008368 <LCD_Init+0x3c18>)
 800821e:	2280      	movs	r2, #128	; 0x80
 8008220:	611a      	str	r2, [r3, #16]
 8008222:	4b51      	ldr	r3, [pc, #324]	; (8008368 <LCD_Init+0x3c18>)
 8008224:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008228:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 800822a:	4b4f      	ldr	r3, [pc, #316]	; (8008368 <LCD_Init+0x3c18>)
 800822c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008230:	611a      	str	r2, [r3, #16]
 8008232:	4b4d      	ldr	r3, [pc, #308]	; (8008368 <LCD_Init+0x3c18>)
 8008234:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008238:	615a      	str	r2, [r3, #20]
 800823a:	4b4c      	ldr	r3, [pc, #304]	; (800836c <LCD_Init+0x3c1c>)
 800823c:	2200      	movs	r2, #0
 800823e:	60da      	str	r2, [r3, #12]
 8008240:	4b49      	ldr	r3, [pc, #292]	; (8008368 <LCD_Init+0x3c18>)
 8008242:	2280      	movs	r2, #128	; 0x80
 8008244:	615a      	str	r2, [r3, #20]
 8008246:	4b48      	ldr	r3, [pc, #288]	; (8008368 <LCD_Init+0x3c18>)
 8008248:	2280      	movs	r2, #128	; 0x80
 800824a:	611a      	str	r2, [r3, #16]
 800824c:	4b46      	ldr	r3, [pc, #280]	; (8008368 <LCD_Init+0x3c18>)
 800824e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008252:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(0xB6);		//Set vertical period
 8008254:	20b6      	movs	r0, #182	; 0xb6
 8008256:	f7fa ff53 	bl	8003100 <LCD_WR_REG>
		LCD_WR_DATA((SSD_VT-1)>>8);
 800825a:	4b43      	ldr	r3, [pc, #268]	; (8008368 <LCD_Init+0x3c18>)
 800825c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008260:	611a      	str	r2, [r3, #16]
 8008262:	4b41      	ldr	r3, [pc, #260]	; (8008368 <LCD_Init+0x3c18>)
 8008264:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008268:	615a      	str	r2, [r3, #20]
 800826a:	4b40      	ldr	r3, [pc, #256]	; (800836c <LCD_Init+0x3c1c>)
 800826c:	2202      	movs	r2, #2
 800826e:	60da      	str	r2, [r3, #12]
 8008270:	4b3d      	ldr	r3, [pc, #244]	; (8008368 <LCD_Init+0x3c18>)
 8008272:	2280      	movs	r2, #128	; 0x80
 8008274:	615a      	str	r2, [r3, #20]
 8008276:	4b3c      	ldr	r3, [pc, #240]	; (8008368 <LCD_Init+0x3c18>)
 8008278:	2280      	movs	r2, #128	; 0x80
 800827a:	611a      	str	r2, [r3, #16]
 800827c:	4b3a      	ldr	r3, [pc, #232]	; (8008368 <LCD_Init+0x3c18>)
 800827e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008282:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VT-1);
 8008284:	4b38      	ldr	r3, [pc, #224]	; (8008368 <LCD_Init+0x3c18>)
 8008286:	f44f 7280 	mov.w	r2, #256	; 0x100
 800828a:	611a      	str	r2, [r3, #16]
 800828c:	4b36      	ldr	r3, [pc, #216]	; (8008368 <LCD_Init+0x3c18>)
 800828e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008292:	615a      	str	r2, [r3, #20]
 8008294:	4b35      	ldr	r3, [pc, #212]	; (800836c <LCD_Init+0x3c1c>)
 8008296:	f44f 7203 	mov.w	r2, #524	; 0x20c
 800829a:	60da      	str	r2, [r3, #12]
 800829c:	4b32      	ldr	r3, [pc, #200]	; (8008368 <LCD_Init+0x3c18>)
 800829e:	2280      	movs	r2, #128	; 0x80
 80082a0:	615a      	str	r2, [r3, #20]
 80082a2:	4b31      	ldr	r3, [pc, #196]	; (8008368 <LCD_Init+0x3c18>)
 80082a4:	2280      	movs	r2, #128	; 0x80
 80082a6:	611a      	str	r2, [r3, #16]
 80082a8:	4b2f      	ldr	r3, [pc, #188]	; (8008368 <LCD_Init+0x3c18>)
 80082aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80082ae:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VPS>>8);
 80082b0:	4b2d      	ldr	r3, [pc, #180]	; (8008368 <LCD_Init+0x3c18>)
 80082b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80082b6:	611a      	str	r2, [r3, #16]
 80082b8:	4b2b      	ldr	r3, [pc, #172]	; (8008368 <LCD_Init+0x3c18>)
 80082ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80082be:	615a      	str	r2, [r3, #20]
 80082c0:	4b2a      	ldr	r3, [pc, #168]	; (800836c <LCD_Init+0x3c1c>)
 80082c2:	2200      	movs	r2, #0
 80082c4:	60da      	str	r2, [r3, #12]
 80082c6:	4b28      	ldr	r3, [pc, #160]	; (8008368 <LCD_Init+0x3c18>)
 80082c8:	2280      	movs	r2, #128	; 0x80
 80082ca:	615a      	str	r2, [r3, #20]
 80082cc:	4b26      	ldr	r3, [pc, #152]	; (8008368 <LCD_Init+0x3c18>)
 80082ce:	2280      	movs	r2, #128	; 0x80
 80082d0:	611a      	str	r2, [r3, #16]
 80082d2:	4b25      	ldr	r3, [pc, #148]	; (8008368 <LCD_Init+0x3c18>)
 80082d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80082d8:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VPS);
 80082da:	4b23      	ldr	r3, [pc, #140]	; (8008368 <LCD_Init+0x3c18>)
 80082dc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80082e0:	611a      	str	r2, [r3, #16]
 80082e2:	4b21      	ldr	r3, [pc, #132]	; (8008368 <LCD_Init+0x3c18>)
 80082e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80082e8:	615a      	str	r2, [r3, #20]
 80082ea:	4b20      	ldr	r3, [pc, #128]	; (800836c <LCD_Init+0x3c1c>)
 80082ec:	2217      	movs	r2, #23
 80082ee:	60da      	str	r2, [r3, #12]
 80082f0:	4b1d      	ldr	r3, [pc, #116]	; (8008368 <LCD_Init+0x3c18>)
 80082f2:	2280      	movs	r2, #128	; 0x80
 80082f4:	615a      	str	r2, [r3, #20]
 80082f6:	4b1c      	ldr	r3, [pc, #112]	; (8008368 <LCD_Init+0x3c18>)
 80082f8:	2280      	movs	r2, #128	; 0x80
 80082fa:	611a      	str	r2, [r3, #16]
 80082fc:	4b1a      	ldr	r3, [pc, #104]	; (8008368 <LCD_Init+0x3c18>)
 80082fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008302:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VER_FRONT_PORCH-1);
 8008304:	4b18      	ldr	r3, [pc, #96]	; (8008368 <LCD_Init+0x3c18>)
 8008306:	f44f 7280 	mov.w	r2, #256	; 0x100
 800830a:	611a      	str	r2, [r3, #16]
 800830c:	4b16      	ldr	r3, [pc, #88]	; (8008368 <LCD_Init+0x3c18>)
 800830e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008312:	615a      	str	r2, [r3, #20]
 8008314:	4b15      	ldr	r3, [pc, #84]	; (800836c <LCD_Init+0x3c1c>)
 8008316:	2215      	movs	r2, #21
 8008318:	60da      	str	r2, [r3, #12]
 800831a:	4b13      	ldr	r3, [pc, #76]	; (8008368 <LCD_Init+0x3c18>)
 800831c:	2280      	movs	r2, #128	; 0x80
 800831e:	615a      	str	r2, [r3, #20]
 8008320:	4b11      	ldr	r3, [pc, #68]	; (8008368 <LCD_Init+0x3c18>)
 8008322:	2280      	movs	r2, #128	; 0x80
 8008324:	611a      	str	r2, [r3, #16]
 8008326:	4b10      	ldr	r3, [pc, #64]	; (8008368 <LCD_Init+0x3c18>)
 8008328:	f44f 7200 	mov.w	r2, #512	; 0x200
 800832c:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 800832e:	4b0e      	ldr	r3, [pc, #56]	; (8008368 <LCD_Init+0x3c18>)
 8008330:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008334:	611a      	str	r2, [r3, #16]
 8008336:	4b0c      	ldr	r3, [pc, #48]	; (8008368 <LCD_Init+0x3c18>)
 8008338:	f44f 7200 	mov.w	r2, #512	; 0x200
 800833c:	615a      	str	r2, [r3, #20]
 800833e:	4b0b      	ldr	r3, [pc, #44]	; (800836c <LCD_Init+0x3c1c>)
 8008340:	2200      	movs	r2, #0
 8008342:	60da      	str	r2, [r3, #12]
 8008344:	4b08      	ldr	r3, [pc, #32]	; (8008368 <LCD_Init+0x3c18>)
 8008346:	2280      	movs	r2, #128	; 0x80
 8008348:	615a      	str	r2, [r3, #20]
 800834a:	4b07      	ldr	r3, [pc, #28]	; (8008368 <LCD_Init+0x3c18>)
 800834c:	2280      	movs	r2, #128	; 0x80
 800834e:	611a      	str	r2, [r3, #16]
 8008350:	4b05      	ldr	r3, [pc, #20]	; (8008368 <LCD_Init+0x3c18>)
 8008352:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008356:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 8008358:	4b03      	ldr	r3, [pc, #12]	; (8008368 <LCD_Init+0x3c18>)
 800835a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800835e:	611a      	str	r2, [r3, #16]
 8008360:	4b01      	ldr	r3, [pc, #4]	; (8008368 <LCD_Init+0x3c18>)
 8008362:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008366:	e003      	b.n	8008370 <LCD_Init+0x3c20>
 8008368:	40011000 	.word	0x40011000
 800836c:	40010c00 	.word	0x40010c00
 8008370:	615a      	str	r2, [r3, #20]
 8008372:	4b8b      	ldr	r3, [pc, #556]	; (80085a0 <LCD_Init+0x3e50>)
 8008374:	2200      	movs	r2, #0
 8008376:	60da      	str	r2, [r3, #12]
 8008378:	4b8a      	ldr	r3, [pc, #552]	; (80085a4 <LCD_Init+0x3e54>)
 800837a:	2280      	movs	r2, #128	; 0x80
 800837c:	615a      	str	r2, [r3, #20]
 800837e:	4b89      	ldr	r3, [pc, #548]	; (80085a4 <LCD_Init+0x3e54>)
 8008380:	2280      	movs	r2, #128	; 0x80
 8008382:	611a      	str	r2, [r3, #16]
 8008384:	4b87      	ldr	r3, [pc, #540]	; (80085a4 <LCD_Init+0x3e54>)
 8008386:	f44f 7200 	mov.w	r2, #512	; 0x200
 800838a:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0xF0);	//设置SSD1963与CPU接口为16bit  
 800838c:	20f0      	movs	r0, #240	; 0xf0
 800838e:	f7fa feb7 	bl	8003100 <LCD_WR_REG>
		LCD_WR_DATA(0x03);	//16-bit(565 format) data for 16bpp 
 8008392:	4b84      	ldr	r3, [pc, #528]	; (80085a4 <LCD_Init+0x3e54>)
 8008394:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008398:	611a      	str	r2, [r3, #16]
 800839a:	4b82      	ldr	r3, [pc, #520]	; (80085a4 <LCD_Init+0x3e54>)
 800839c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80083a0:	615a      	str	r2, [r3, #20]
 80083a2:	4b7f      	ldr	r3, [pc, #508]	; (80085a0 <LCD_Init+0x3e50>)
 80083a4:	2203      	movs	r2, #3
 80083a6:	60da      	str	r2, [r3, #12]
 80083a8:	4b7e      	ldr	r3, [pc, #504]	; (80085a4 <LCD_Init+0x3e54>)
 80083aa:	2280      	movs	r2, #128	; 0x80
 80083ac:	615a      	str	r2, [r3, #20]
 80083ae:	4b7d      	ldr	r3, [pc, #500]	; (80085a4 <LCD_Init+0x3e54>)
 80083b0:	2280      	movs	r2, #128	; 0x80
 80083b2:	611a      	str	r2, [r3, #16]
 80083b4:	4b7b      	ldr	r3, [pc, #492]	; (80085a4 <LCD_Init+0x3e54>)
 80083b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80083ba:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0x29);	//开启显示
 80083bc:	2029      	movs	r0, #41	; 0x29
 80083be:	f7fa fe9f 	bl	8003100 <LCD_WR_REG>
		//设置PWM输出  背光通过占空比可调 
		LCD_WR_REG(0xD0);	//设置自动白平衡DBC
 80083c2:	20d0      	movs	r0, #208	; 0xd0
 80083c4:	f7fa fe9c 	bl	8003100 <LCD_WR_REG>
		LCD_WR_DATA(0x00);	//disable
 80083c8:	4b76      	ldr	r3, [pc, #472]	; (80085a4 <LCD_Init+0x3e54>)
 80083ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 80083ce:	611a      	str	r2, [r3, #16]
 80083d0:	4b74      	ldr	r3, [pc, #464]	; (80085a4 <LCD_Init+0x3e54>)
 80083d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80083d6:	615a      	str	r2, [r3, #20]
 80083d8:	4b71      	ldr	r3, [pc, #452]	; (80085a0 <LCD_Init+0x3e50>)
 80083da:	2200      	movs	r2, #0
 80083dc:	60da      	str	r2, [r3, #12]
 80083de:	4b71      	ldr	r3, [pc, #452]	; (80085a4 <LCD_Init+0x3e54>)
 80083e0:	2280      	movs	r2, #128	; 0x80
 80083e2:	615a      	str	r2, [r3, #20]
 80083e4:	4b6f      	ldr	r3, [pc, #444]	; (80085a4 <LCD_Init+0x3e54>)
 80083e6:	2280      	movs	r2, #128	; 0x80
 80083e8:	611a      	str	r2, [r3, #16]
 80083ea:	4b6e      	ldr	r3, [pc, #440]	; (80085a4 <LCD_Init+0x3e54>)
 80083ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80083f0:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0xBE);	//配置PWM输出
 80083f2:	20be      	movs	r0, #190	; 0xbe
 80083f4:	f7fa fe84 	bl	8003100 <LCD_WR_REG>
		LCD_WR_DATA(0x05);	//1设置PWM频率
 80083f8:	4b6a      	ldr	r3, [pc, #424]	; (80085a4 <LCD_Init+0x3e54>)
 80083fa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80083fe:	611a      	str	r2, [r3, #16]
 8008400:	4b68      	ldr	r3, [pc, #416]	; (80085a4 <LCD_Init+0x3e54>)
 8008402:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008406:	615a      	str	r2, [r3, #20]
 8008408:	4b65      	ldr	r3, [pc, #404]	; (80085a0 <LCD_Init+0x3e50>)
 800840a:	2205      	movs	r2, #5
 800840c:	60da      	str	r2, [r3, #12]
 800840e:	4b65      	ldr	r3, [pc, #404]	; (80085a4 <LCD_Init+0x3e54>)
 8008410:	2280      	movs	r2, #128	; 0x80
 8008412:	615a      	str	r2, [r3, #20]
 8008414:	4b63      	ldr	r3, [pc, #396]	; (80085a4 <LCD_Init+0x3e54>)
 8008416:	2280      	movs	r2, #128	; 0x80
 8008418:	611a      	str	r2, [r3, #16]
 800841a:	4b62      	ldr	r3, [pc, #392]	; (80085a4 <LCD_Init+0x3e54>)
 800841c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008420:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0xFE);	//2设置PWM占空比
 8008422:	4b60      	ldr	r3, [pc, #384]	; (80085a4 <LCD_Init+0x3e54>)
 8008424:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008428:	611a      	str	r2, [r3, #16]
 800842a:	4b5e      	ldr	r3, [pc, #376]	; (80085a4 <LCD_Init+0x3e54>)
 800842c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008430:	615a      	str	r2, [r3, #20]
 8008432:	4b5b      	ldr	r3, [pc, #364]	; (80085a0 <LCD_Init+0x3e50>)
 8008434:	22fe      	movs	r2, #254	; 0xfe
 8008436:	60da      	str	r2, [r3, #12]
 8008438:	4b5a      	ldr	r3, [pc, #360]	; (80085a4 <LCD_Init+0x3e54>)
 800843a:	2280      	movs	r2, #128	; 0x80
 800843c:	615a      	str	r2, [r3, #20]
 800843e:	4b59      	ldr	r3, [pc, #356]	; (80085a4 <LCD_Init+0x3e54>)
 8008440:	2280      	movs	r2, #128	; 0x80
 8008442:	611a      	str	r2, [r3, #16]
 8008444:	4b57      	ldr	r3, [pc, #348]	; (80085a4 <LCD_Init+0x3e54>)
 8008446:	f44f 7200 	mov.w	r2, #512	; 0x200
 800844a:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x01);	//3设置C
 800844c:	4b55      	ldr	r3, [pc, #340]	; (80085a4 <LCD_Init+0x3e54>)
 800844e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008452:	611a      	str	r2, [r3, #16]
 8008454:	4b53      	ldr	r3, [pc, #332]	; (80085a4 <LCD_Init+0x3e54>)
 8008456:	f44f 7200 	mov.w	r2, #512	; 0x200
 800845a:	615a      	str	r2, [r3, #20]
 800845c:	4b50      	ldr	r3, [pc, #320]	; (80085a0 <LCD_Init+0x3e50>)
 800845e:	2201      	movs	r2, #1
 8008460:	60da      	str	r2, [r3, #12]
 8008462:	4b50      	ldr	r3, [pc, #320]	; (80085a4 <LCD_Init+0x3e54>)
 8008464:	2280      	movs	r2, #128	; 0x80
 8008466:	615a      	str	r2, [r3, #20]
 8008468:	4b4e      	ldr	r3, [pc, #312]	; (80085a4 <LCD_Init+0x3e54>)
 800846a:	2280      	movs	r2, #128	; 0x80
 800846c:	611a      	str	r2, [r3, #16]
 800846e:	4b4d      	ldr	r3, [pc, #308]	; (80085a4 <LCD_Init+0x3e54>)
 8008470:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008474:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);	//4设置D
 8008476:	4b4b      	ldr	r3, [pc, #300]	; (80085a4 <LCD_Init+0x3e54>)
 8008478:	f44f 7280 	mov.w	r2, #256	; 0x100
 800847c:	611a      	str	r2, [r3, #16]
 800847e:	4b49      	ldr	r3, [pc, #292]	; (80085a4 <LCD_Init+0x3e54>)
 8008480:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008484:	615a      	str	r2, [r3, #20]
 8008486:	4b46      	ldr	r3, [pc, #280]	; (80085a0 <LCD_Init+0x3e50>)
 8008488:	2200      	movs	r2, #0
 800848a:	60da      	str	r2, [r3, #12]
 800848c:	4b45      	ldr	r3, [pc, #276]	; (80085a4 <LCD_Init+0x3e54>)
 800848e:	2280      	movs	r2, #128	; 0x80
 8008490:	615a      	str	r2, [r3, #20]
 8008492:	4b44      	ldr	r3, [pc, #272]	; (80085a4 <LCD_Init+0x3e54>)
 8008494:	2280      	movs	r2, #128	; 0x80
 8008496:	611a      	str	r2, [r3, #16]
 8008498:	4b42      	ldr	r3, [pc, #264]	; (80085a4 <LCD_Init+0x3e54>)
 800849a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800849e:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);	//5设置E 
 80084a0:	4b40      	ldr	r3, [pc, #256]	; (80085a4 <LCD_Init+0x3e54>)
 80084a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80084a6:	611a      	str	r2, [r3, #16]
 80084a8:	4b3e      	ldr	r3, [pc, #248]	; (80085a4 <LCD_Init+0x3e54>)
 80084aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80084ae:	615a      	str	r2, [r3, #20]
 80084b0:	4b3b      	ldr	r3, [pc, #236]	; (80085a0 <LCD_Init+0x3e50>)
 80084b2:	2200      	movs	r2, #0
 80084b4:	60da      	str	r2, [r3, #12]
 80084b6:	4b3b      	ldr	r3, [pc, #236]	; (80085a4 <LCD_Init+0x3e54>)
 80084b8:	2280      	movs	r2, #128	; 0x80
 80084ba:	615a      	str	r2, [r3, #20]
 80084bc:	4b39      	ldr	r3, [pc, #228]	; (80085a4 <LCD_Init+0x3e54>)
 80084be:	2280      	movs	r2, #128	; 0x80
 80084c0:	611a      	str	r2, [r3, #16]
 80084c2:	4b38      	ldr	r3, [pc, #224]	; (80085a4 <LCD_Init+0x3e54>)
 80084c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80084c8:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);	//6设置F 
 80084ca:	4b36      	ldr	r3, [pc, #216]	; (80085a4 <LCD_Init+0x3e54>)
 80084cc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80084d0:	611a      	str	r2, [r3, #16]
 80084d2:	4b34      	ldr	r3, [pc, #208]	; (80085a4 <LCD_Init+0x3e54>)
 80084d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80084d8:	615a      	str	r2, [r3, #20]
 80084da:	4b31      	ldr	r3, [pc, #196]	; (80085a0 <LCD_Init+0x3e50>)
 80084dc:	2200      	movs	r2, #0
 80084de:	60da      	str	r2, [r3, #12]
 80084e0:	4b30      	ldr	r3, [pc, #192]	; (80085a4 <LCD_Init+0x3e54>)
 80084e2:	2280      	movs	r2, #128	; 0x80
 80084e4:	615a      	str	r2, [r3, #20]
 80084e6:	4b2f      	ldr	r3, [pc, #188]	; (80085a4 <LCD_Init+0x3e54>)
 80084e8:	2280      	movs	r2, #128	; 0x80
 80084ea:	611a      	str	r2, [r3, #16]
 80084ec:	4b2d      	ldr	r3, [pc, #180]	; (80085a4 <LCD_Init+0x3e54>)
 80084ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80084f2:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0xB8);	//设置GPIO配置
 80084f4:	20b8      	movs	r0, #184	; 0xb8
 80084f6:	f7fa fe03 	bl	8003100 <LCD_WR_REG>
		LCD_WR_DATA(0x03);	//2个IO口设置成输出
 80084fa:	4b2a      	ldr	r3, [pc, #168]	; (80085a4 <LCD_Init+0x3e54>)
 80084fc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008500:	611a      	str	r2, [r3, #16]
 8008502:	4b28      	ldr	r3, [pc, #160]	; (80085a4 <LCD_Init+0x3e54>)
 8008504:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008508:	615a      	str	r2, [r3, #20]
 800850a:	4b25      	ldr	r3, [pc, #148]	; (80085a0 <LCD_Init+0x3e50>)
 800850c:	2203      	movs	r2, #3
 800850e:	60da      	str	r2, [r3, #12]
 8008510:	4b24      	ldr	r3, [pc, #144]	; (80085a4 <LCD_Init+0x3e54>)
 8008512:	2280      	movs	r2, #128	; 0x80
 8008514:	615a      	str	r2, [r3, #20]
 8008516:	4b23      	ldr	r3, [pc, #140]	; (80085a4 <LCD_Init+0x3e54>)
 8008518:	2280      	movs	r2, #128	; 0x80
 800851a:	611a      	str	r2, [r3, #16]
 800851c:	4b21      	ldr	r3, [pc, #132]	; (80085a4 <LCD_Init+0x3e54>)
 800851e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008522:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x01);	//GPIO使用正常的IO功能 
 8008524:	4b1f      	ldr	r3, [pc, #124]	; (80085a4 <LCD_Init+0x3e54>)
 8008526:	f44f 7280 	mov.w	r2, #256	; 0x100
 800852a:	611a      	str	r2, [r3, #16]
 800852c:	4b1d      	ldr	r3, [pc, #116]	; (80085a4 <LCD_Init+0x3e54>)
 800852e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008532:	615a      	str	r2, [r3, #20]
 8008534:	4b1a      	ldr	r3, [pc, #104]	; (80085a0 <LCD_Init+0x3e50>)
 8008536:	2201      	movs	r2, #1
 8008538:	60da      	str	r2, [r3, #12]
 800853a:	4b1a      	ldr	r3, [pc, #104]	; (80085a4 <LCD_Init+0x3e54>)
 800853c:	2280      	movs	r2, #128	; 0x80
 800853e:	615a      	str	r2, [r3, #20]
 8008540:	4b18      	ldr	r3, [pc, #96]	; (80085a4 <LCD_Init+0x3e54>)
 8008542:	2280      	movs	r2, #128	; 0x80
 8008544:	611a      	str	r2, [r3, #16]
 8008546:	4b17      	ldr	r3, [pc, #92]	; (80085a4 <LCD_Init+0x3e54>)
 8008548:	f44f 7200 	mov.w	r2, #512	; 0x200
 800854c:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(0xBA);
 800854e:	20ba      	movs	r0, #186	; 0xba
 8008550:	f7fa fdd6 	bl	8003100 <LCD_WR_REG>
		LCD_WR_DATA(0X01);	//GPIO[1:0]=01,控制LCD方向
 8008554:	4b13      	ldr	r3, [pc, #76]	; (80085a4 <LCD_Init+0x3e54>)
 8008556:	f44f 7280 	mov.w	r2, #256	; 0x100
 800855a:	611a      	str	r2, [r3, #16]
 800855c:	4b11      	ldr	r3, [pc, #68]	; (80085a4 <LCD_Init+0x3e54>)
 800855e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008562:	615a      	str	r2, [r3, #20]
 8008564:	4b0e      	ldr	r3, [pc, #56]	; (80085a0 <LCD_Init+0x3e50>)
 8008566:	2201      	movs	r2, #1
 8008568:	60da      	str	r2, [r3, #12]
 800856a:	4b0e      	ldr	r3, [pc, #56]	; (80085a4 <LCD_Init+0x3e54>)
 800856c:	2280      	movs	r2, #128	; 0x80
 800856e:	615a      	str	r2, [r3, #20]
 8008570:	4b0c      	ldr	r3, [pc, #48]	; (80085a4 <LCD_Init+0x3e54>)
 8008572:	2280      	movs	r2, #128	; 0x80
 8008574:	611a      	str	r2, [r3, #16]
 8008576:	4b0b      	ldr	r3, [pc, #44]	; (80085a4 <LCD_Init+0x3e54>)
 8008578:	f44f 7200 	mov.w	r2, #512	; 0x200
 800857c:	611a      	str	r2, [r3, #16]

		LCD_SSD_BackLightSet(100);	//背光设置为最亮
 800857e:	2064      	movs	r0, #100	; 0x64
 8008580:	f7fb ff36 	bl	80043f0 <LCD_SSD_BackLightSet>
	}
	LCD_Display_Dir(0);		 	//默认为竖屏
 8008584:	2000      	movs	r0, #0
 8008586:	f7fb ffd7 	bl	8004538 <LCD_Display_Dir>
	LCD_LED = 1;					//点亮背光
 800858a:	4b07      	ldr	r3, [pc, #28]	; (80085a8 <LCD_Init+0x3e58>)
 800858c:	2201      	movs	r2, #1
 800858e:	601a      	str	r2, [r3, #0]
	LCD_Clear(WHITE);
 8008590:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8008594:	f000 f80a 	bl	80085ac <LCD_Clear>
}
 8008598:	bf00      	nop
 800859a:	3718      	adds	r7, #24
 800859c:	46bd      	mov	sp, r7
 800859e:	bd80      	pop	{r7, pc}
 80085a0:	40010c00 	.word	0x40010c00
 80085a4:	40011000 	.word	0x40011000
 80085a8:	422201a8 	.word	0x422201a8

080085ac <LCD_Clear>:

// Clear the screen with specific color
void LCD_Clear(uint16_t color) {
 80085ac:	b580      	push	{r7, lr}
 80085ae:	b084      	sub	sp, #16
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	4603      	mov	r3, r0
 80085b4:	80fb      	strh	r3, [r7, #6]
	uint32_t index = 0;
 80085b6:	2300      	movs	r3, #0
 80085b8:	60fb      	str	r3, [r7, #12]
	uint32_t totalpoint = lcddev.width;
 80085ba:	4b2a      	ldr	r3, [pc, #168]	; (8008664 <LCD_Clear+0xb8>)
 80085bc:	881b      	ldrh	r3, [r3, #0]
 80085be:	60bb      	str	r3, [r7, #8]
	totalpoint *= lcddev.height; 			//得到总点数
 80085c0:	4b28      	ldr	r3, [pc, #160]	; (8008664 <LCD_Clear+0xb8>)
 80085c2:	885b      	ldrh	r3, [r3, #2]
 80085c4:	461a      	mov	r2, r3
 80085c6:	68bb      	ldr	r3, [r7, #8]
 80085c8:	fb02 f303 	mul.w	r3, r2, r3
 80085cc:	60bb      	str	r3, [r7, #8]
	if ((lcddev.id == 0X6804) && (lcddev.dir == 1)) 			//6804横屏的时候特殊处理
 80085ce:	4b25      	ldr	r3, [pc, #148]	; (8008664 <LCD_Clear+0xb8>)
 80085d0:	889b      	ldrh	r3, [r3, #4]
 80085d2:	f646 0204 	movw	r2, #26628	; 0x6804
 80085d6:	4293      	cmp	r3, r2
 80085d8:	d11a      	bne.n	8008610 <LCD_Clear+0x64>
 80085da:	4b22      	ldr	r3, [pc, #136]	; (8008664 <LCD_Clear+0xb8>)
 80085dc:	799b      	ldrb	r3, [r3, #6]
 80085de:	2b01      	cmp	r3, #1
 80085e0:	d116      	bne.n	8008610 <LCD_Clear+0x64>
			{
		lcddev.dir = 0;
 80085e2:	4b20      	ldr	r3, [pc, #128]	; (8008664 <LCD_Clear+0xb8>)
 80085e4:	2200      	movs	r2, #0
 80085e6:	719a      	strb	r2, [r3, #6]
		lcddev.setxcmd = 0X2A;
 80085e8:	4b1e      	ldr	r3, [pc, #120]	; (8008664 <LCD_Clear+0xb8>)
 80085ea:	222a      	movs	r2, #42	; 0x2a
 80085ec:	815a      	strh	r2, [r3, #10]
		lcddev.setycmd = 0X2B;
 80085ee:	4b1d      	ldr	r3, [pc, #116]	; (8008664 <LCD_Clear+0xb8>)
 80085f0:	222b      	movs	r2, #43	; 0x2b
 80085f2:	819a      	strh	r2, [r3, #12]
		LCD_SetCursor(0x00, 0x0000);		//设置光标位置
 80085f4:	2100      	movs	r1, #0
 80085f6:	2000      	movs	r0, #0
 80085f8:	f7fa fe54 	bl	80032a4 <LCD_SetCursor>
		lcddev.dir = 1;
 80085fc:	4b19      	ldr	r3, [pc, #100]	; (8008664 <LCD_Clear+0xb8>)
 80085fe:	2201      	movs	r2, #1
 8008600:	719a      	strb	r2, [r3, #6]
		lcddev.setxcmd = 0X2B;
 8008602:	4b18      	ldr	r3, [pc, #96]	; (8008664 <LCD_Clear+0xb8>)
 8008604:	222b      	movs	r2, #43	; 0x2b
 8008606:	815a      	strh	r2, [r3, #10]
		lcddev.setycmd = 0X2A;
 8008608:	4b16      	ldr	r3, [pc, #88]	; (8008664 <LCD_Clear+0xb8>)
 800860a:	222a      	movs	r2, #42	; 0x2a
 800860c:	819a      	strh	r2, [r3, #12]
 800860e:	e003      	b.n	8008618 <LCD_Clear+0x6c>
	} else
		LCD_SetCursor(0x00, 0x0000);	//设置光标位置
 8008610:	2100      	movs	r1, #0
 8008612:	2000      	movs	r0, #0
 8008614:	f7fa fe46 	bl	80032a4 <LCD_SetCursor>
	LCD_WriteRAM_Prepare();     		//开始写入GRAM	  	  
 8008618:	f7fa fe38 	bl	800328c <LCD_WriteRAM_Prepare>
	for (index = 0; index < totalpoint; index++)
 800861c:	2300      	movs	r3, #0
 800861e:	60fb      	str	r3, [r7, #12]
 8008620:	e017      	b.n	8008652 <LCD_Clear+0xa6>
		LCD_WR_DATA(color);
 8008622:	4b11      	ldr	r3, [pc, #68]	; (8008668 <LCD_Clear+0xbc>)
 8008624:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008628:	611a      	str	r2, [r3, #16]
 800862a:	4b0f      	ldr	r3, [pc, #60]	; (8008668 <LCD_Clear+0xbc>)
 800862c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008630:	615a      	str	r2, [r3, #20]
 8008632:	4a0e      	ldr	r2, [pc, #56]	; (800866c <LCD_Clear+0xc0>)
 8008634:	88fb      	ldrh	r3, [r7, #6]
 8008636:	60d3      	str	r3, [r2, #12]
 8008638:	4b0b      	ldr	r3, [pc, #44]	; (8008668 <LCD_Clear+0xbc>)
 800863a:	2280      	movs	r2, #128	; 0x80
 800863c:	615a      	str	r2, [r3, #20]
 800863e:	4b0a      	ldr	r3, [pc, #40]	; (8008668 <LCD_Clear+0xbc>)
 8008640:	2280      	movs	r2, #128	; 0x80
 8008642:	611a      	str	r2, [r3, #16]
 8008644:	4b08      	ldr	r3, [pc, #32]	; (8008668 <LCD_Clear+0xbc>)
 8008646:	f44f 7200 	mov.w	r2, #512	; 0x200
 800864a:	611a      	str	r2, [r3, #16]
	for (index = 0; index < totalpoint; index++)
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	3301      	adds	r3, #1
 8008650:	60fb      	str	r3, [r7, #12]
 8008652:	68fa      	ldr	r2, [r7, #12]
 8008654:	68bb      	ldr	r3, [r7, #8]
 8008656:	429a      	cmp	r2, r3
 8008658:	d3e3      	bcc.n	8008622 <LCD_Clear+0x76>
}
 800865a:	bf00      	nop
 800865c:	3710      	adds	r7, #16
 800865e:	46bd      	mov	sp, r7
 8008660:	bd80      	pop	{r7, pc}
 8008662:	bf00      	nop
 8008664:	200000b4 	.word	0x200000b4
 8008668:	40011000 	.word	0x40011000
 800866c:	40010c00 	.word	0x40010c00

08008670 <LCD_Fill>:
// Fill the area with color
// :(xend-xsta+1)*(yend-ysta+1)
void LCD_Fill(uint16_t sx, uint16_t sy, uint16_t ex, uint16_t ey,
		uint16_t color) {
 8008670:	b590      	push	{r4, r7, lr}
 8008672:	b087      	sub	sp, #28
 8008674:	af02      	add	r7, sp, #8
 8008676:	4604      	mov	r4, r0
 8008678:	4608      	mov	r0, r1
 800867a:	4611      	mov	r1, r2
 800867c:	461a      	mov	r2, r3
 800867e:	4623      	mov	r3, r4
 8008680:	80fb      	strh	r3, [r7, #6]
 8008682:	4603      	mov	r3, r0
 8008684:	80bb      	strh	r3, [r7, #4]
 8008686:	460b      	mov	r3, r1
 8008688:	807b      	strh	r3, [r7, #2]
 800868a:	4613      	mov	r3, r2
 800868c:	803b      	strh	r3, [r7, #0]
	uint16_t i, j;
	uint16_t xlen = 0;
 800868e:	2300      	movs	r3, #0
 8008690:	817b      	strh	r3, [r7, #10]
	uint16_t temp;
	if ((lcddev.id == 0X6804) && (lcddev.dir == 1))	//6804横屏的时候特殊处理
 8008692:	4b3a      	ldr	r3, [pc, #232]	; (800877c <LCD_Fill+0x10c>)
 8008694:	889b      	ldrh	r3, [r3, #4]
 8008696:	f646 0204 	movw	r2, #26628	; 0x6804
 800869a:	4293      	cmp	r3, r2
 800869c:	d133      	bne.n	8008706 <LCD_Fill+0x96>
 800869e:	4b37      	ldr	r3, [pc, #220]	; (800877c <LCD_Fill+0x10c>)
 80086a0:	799b      	ldrb	r3, [r3, #6]
 80086a2:	2b01      	cmp	r3, #1
 80086a4:	d12f      	bne.n	8008706 <LCD_Fill+0x96>
			{
		temp = sx;
 80086a6:	88fb      	ldrh	r3, [r7, #6]
 80086a8:	813b      	strh	r3, [r7, #8]
		sx = sy;
 80086aa:	88bb      	ldrh	r3, [r7, #4]
 80086ac:	80fb      	strh	r3, [r7, #6]
		sy = lcddev.width - ex - 1;
 80086ae:	4b33      	ldr	r3, [pc, #204]	; (800877c <LCD_Fill+0x10c>)
 80086b0:	881a      	ldrh	r2, [r3, #0]
 80086b2:	887b      	ldrh	r3, [r7, #2]
 80086b4:	1ad3      	subs	r3, r2, r3
 80086b6:	b29b      	uxth	r3, r3
 80086b8:	3b01      	subs	r3, #1
 80086ba:	80bb      	strh	r3, [r7, #4]
		ex = ey;
 80086bc:	883b      	ldrh	r3, [r7, #0]
 80086be:	807b      	strh	r3, [r7, #2]
		ey = lcddev.width - temp - 1;
 80086c0:	4b2e      	ldr	r3, [pc, #184]	; (800877c <LCD_Fill+0x10c>)
 80086c2:	881a      	ldrh	r2, [r3, #0]
 80086c4:	893b      	ldrh	r3, [r7, #8]
 80086c6:	1ad3      	subs	r3, r2, r3
 80086c8:	b29b      	uxth	r3, r3
 80086ca:	3b01      	subs	r3, #1
 80086cc:	803b      	strh	r3, [r7, #0]
		lcddev.dir = 0;
 80086ce:	4b2b      	ldr	r3, [pc, #172]	; (800877c <LCD_Fill+0x10c>)
 80086d0:	2200      	movs	r2, #0
 80086d2:	719a      	strb	r2, [r3, #6]
		lcddev.setxcmd = 0X2A;
 80086d4:	4b29      	ldr	r3, [pc, #164]	; (800877c <LCD_Fill+0x10c>)
 80086d6:	222a      	movs	r2, #42	; 0x2a
 80086d8:	815a      	strh	r2, [r3, #10]
		lcddev.setycmd = 0X2B;
 80086da:	4b28      	ldr	r3, [pc, #160]	; (800877c <LCD_Fill+0x10c>)
 80086dc:	222b      	movs	r2, #43	; 0x2b
 80086de:	819a      	strh	r2, [r3, #12]
		LCD_Fill(sx, sy, ex, ey, color);
 80086e0:	883c      	ldrh	r4, [r7, #0]
 80086e2:	887a      	ldrh	r2, [r7, #2]
 80086e4:	88b9      	ldrh	r1, [r7, #4]
 80086e6:	88f8      	ldrh	r0, [r7, #6]
 80086e8:	8c3b      	ldrh	r3, [r7, #32]
 80086ea:	9300      	str	r3, [sp, #0]
 80086ec:	4623      	mov	r3, r4
 80086ee:	f7ff ffbf 	bl	8008670 <LCD_Fill>
		lcddev.dir = 1;
 80086f2:	4b22      	ldr	r3, [pc, #136]	; (800877c <LCD_Fill+0x10c>)
 80086f4:	2201      	movs	r2, #1
 80086f6:	719a      	strb	r2, [r3, #6]
		lcddev.setxcmd = 0X2B;
 80086f8:	4b20      	ldr	r3, [pc, #128]	; (800877c <LCD_Fill+0x10c>)
 80086fa:	222b      	movs	r2, #43	; 0x2b
 80086fc:	815a      	strh	r2, [r3, #10]
		lcddev.setycmd = 0X2A;
 80086fe:	4b1f      	ldr	r3, [pc, #124]	; (800877c <LCD_Fill+0x10c>)
 8008700:	222a      	movs	r2, #42	; 0x2a
 8008702:	819a      	strh	r2, [r3, #12]
 8008704:	e036      	b.n	8008774 <LCD_Fill+0x104>
	} else {
		xlen = ex - sx + 1;
 8008706:	887a      	ldrh	r2, [r7, #2]
 8008708:	88fb      	ldrh	r3, [r7, #6]
 800870a:	1ad3      	subs	r3, r2, r3
 800870c:	b29b      	uxth	r3, r3
 800870e:	3301      	adds	r3, #1
 8008710:	817b      	strh	r3, [r7, #10]
		for (i = sy; i <= ey; i++) {
 8008712:	88bb      	ldrh	r3, [r7, #4]
 8008714:	81fb      	strh	r3, [r7, #14]
 8008716:	e029      	b.n	800876c <LCD_Fill+0xfc>
			LCD_SetCursor(sx, i);      				//设置光标位置
 8008718:	89fa      	ldrh	r2, [r7, #14]
 800871a:	88fb      	ldrh	r3, [r7, #6]
 800871c:	4611      	mov	r1, r2
 800871e:	4618      	mov	r0, r3
 8008720:	f7fa fdc0 	bl	80032a4 <LCD_SetCursor>
			LCD_WriteRAM_Prepare();     			//开始写入GRAM	  
 8008724:	f7fa fdb2 	bl	800328c <LCD_WriteRAM_Prepare>
			for (j = 0; j < xlen; j++)
 8008728:	2300      	movs	r3, #0
 800872a:	81bb      	strh	r3, [r7, #12]
 800872c:	e017      	b.n	800875e <LCD_Fill+0xee>
				LCD_WR_DATA(color);	//设置光标位置
 800872e:	4b14      	ldr	r3, [pc, #80]	; (8008780 <LCD_Fill+0x110>)
 8008730:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008734:	611a      	str	r2, [r3, #16]
 8008736:	4b12      	ldr	r3, [pc, #72]	; (8008780 <LCD_Fill+0x110>)
 8008738:	f44f 7200 	mov.w	r2, #512	; 0x200
 800873c:	615a      	str	r2, [r3, #20]
 800873e:	4a11      	ldr	r2, [pc, #68]	; (8008784 <LCD_Fill+0x114>)
 8008740:	8c3b      	ldrh	r3, [r7, #32]
 8008742:	60d3      	str	r3, [r2, #12]
 8008744:	4b0e      	ldr	r3, [pc, #56]	; (8008780 <LCD_Fill+0x110>)
 8008746:	2280      	movs	r2, #128	; 0x80
 8008748:	615a      	str	r2, [r3, #20]
 800874a:	4b0d      	ldr	r3, [pc, #52]	; (8008780 <LCD_Fill+0x110>)
 800874c:	2280      	movs	r2, #128	; 0x80
 800874e:	611a      	str	r2, [r3, #16]
 8008750:	4b0b      	ldr	r3, [pc, #44]	; (8008780 <LCD_Fill+0x110>)
 8008752:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008756:	611a      	str	r2, [r3, #16]
			for (j = 0; j < xlen; j++)
 8008758:	89bb      	ldrh	r3, [r7, #12]
 800875a:	3301      	adds	r3, #1
 800875c:	81bb      	strh	r3, [r7, #12]
 800875e:	89ba      	ldrh	r2, [r7, #12]
 8008760:	897b      	ldrh	r3, [r7, #10]
 8008762:	429a      	cmp	r2, r3
 8008764:	d3e3      	bcc.n	800872e <LCD_Fill+0xbe>
		for (i = sy; i <= ey; i++) {
 8008766:	89fb      	ldrh	r3, [r7, #14]
 8008768:	3301      	adds	r3, #1
 800876a:	81fb      	strh	r3, [r7, #14]
 800876c:	89fa      	ldrh	r2, [r7, #14]
 800876e:	883b      	ldrh	r3, [r7, #0]
 8008770:	429a      	cmp	r2, r3
 8008772:	d9d1      	bls.n	8008718 <LCD_Fill+0xa8>
		}
	}
}
 8008774:	bf00      	nop
 8008776:	3714      	adds	r7, #20
 8008778:	46bd      	mov	sp, r7
 800877a:	bd90      	pop	{r4, r7, pc}
 800877c:	200000b4 	.word	0x200000b4
 8008780:	40011000 	.word	0x40011000
 8008784:	40010c00 	.word	0x40010c00

08008788 <LCD_DrawLine>:
	}
}
// Draw a line
//x1,y1: coordinate of starting point
//x2,y2: coordinate of terminal point
void LCD_DrawLine(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
 8008788:	b590      	push	{r4, r7, lr}
 800878a:	b08d      	sub	sp, #52	; 0x34
 800878c:	af00      	add	r7, sp, #0
 800878e:	4604      	mov	r4, r0
 8008790:	4608      	mov	r0, r1
 8008792:	4611      	mov	r1, r2
 8008794:	461a      	mov	r2, r3
 8008796:	4623      	mov	r3, r4
 8008798:	80fb      	strh	r3, [r7, #6]
 800879a:	4603      	mov	r3, r0
 800879c:	80bb      	strh	r3, [r7, #4]
 800879e:	460b      	mov	r3, r1
 80087a0:	807b      	strh	r3, [r7, #2]
 80087a2:	4613      	mov	r3, r2
 80087a4:	803b      	strh	r3, [r7, #0]
	uint16_t t;
	int xerr = 0, yerr = 0, delta_x, delta_y, distance;
 80087a6:	2300      	movs	r3, #0
 80087a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80087aa:	2300      	movs	r3, #0
 80087ac:	627b      	str	r3, [r7, #36]	; 0x24
	int incx, incy, uRow, uCol;
	delta_x = x2 - x1; //计算坐标增量
 80087ae:	887a      	ldrh	r2, [r7, #2]
 80087b0:	88fb      	ldrh	r3, [r7, #6]
 80087b2:	1ad3      	subs	r3, r2, r3
 80087b4:	623b      	str	r3, [r7, #32]
	delta_y = y2 - y1;
 80087b6:	883a      	ldrh	r2, [r7, #0]
 80087b8:	88bb      	ldrh	r3, [r7, #4]
 80087ba:	1ad3      	subs	r3, r2, r3
 80087bc:	61fb      	str	r3, [r7, #28]
	uRow = x1;
 80087be:	88fb      	ldrh	r3, [r7, #6]
 80087c0:	60fb      	str	r3, [r7, #12]
	uCol = y1;
 80087c2:	88bb      	ldrh	r3, [r7, #4]
 80087c4:	60bb      	str	r3, [r7, #8]
	if (delta_x > 0)
 80087c6:	6a3b      	ldr	r3, [r7, #32]
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	dd02      	ble.n	80087d2 <LCD_DrawLine+0x4a>
		incx = 1; //设置单步方向
 80087cc:	2301      	movs	r3, #1
 80087ce:	617b      	str	r3, [r7, #20]
 80087d0:	e00b      	b.n	80087ea <LCD_DrawLine+0x62>
	else if (delta_x == 0)
 80087d2:	6a3b      	ldr	r3, [r7, #32]
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d102      	bne.n	80087de <LCD_DrawLine+0x56>
		incx = 0; //垂直线
 80087d8:	2300      	movs	r3, #0
 80087da:	617b      	str	r3, [r7, #20]
 80087dc:	e005      	b.n	80087ea <LCD_DrawLine+0x62>
	else {
		incx = -1;
 80087de:	f04f 33ff 	mov.w	r3, #4294967295
 80087e2:	617b      	str	r3, [r7, #20]
		delta_x = -delta_x;
 80087e4:	6a3b      	ldr	r3, [r7, #32]
 80087e6:	425b      	negs	r3, r3
 80087e8:	623b      	str	r3, [r7, #32]
	}
	if (delta_y > 0)
 80087ea:	69fb      	ldr	r3, [r7, #28]
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	dd02      	ble.n	80087f6 <LCD_DrawLine+0x6e>
		incy = 1;
 80087f0:	2301      	movs	r3, #1
 80087f2:	613b      	str	r3, [r7, #16]
 80087f4:	e00b      	b.n	800880e <LCD_DrawLine+0x86>
	else if (delta_y == 0)
 80087f6:	69fb      	ldr	r3, [r7, #28]
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d102      	bne.n	8008802 <LCD_DrawLine+0x7a>
		incy = 0; //水平线
 80087fc:	2300      	movs	r3, #0
 80087fe:	613b      	str	r3, [r7, #16]
 8008800:	e005      	b.n	800880e <LCD_DrawLine+0x86>
	else {
		incy = -1;
 8008802:	f04f 33ff 	mov.w	r3, #4294967295
 8008806:	613b      	str	r3, [r7, #16]
		delta_y = -delta_y;
 8008808:	69fb      	ldr	r3, [r7, #28]
 800880a:	425b      	negs	r3, r3
 800880c:	61fb      	str	r3, [r7, #28]
	}
	if (delta_x > delta_y)
 800880e:	6a3a      	ldr	r2, [r7, #32]
 8008810:	69fb      	ldr	r3, [r7, #28]
 8008812:	429a      	cmp	r2, r3
 8008814:	dd02      	ble.n	800881c <LCD_DrawLine+0x94>
		distance = delta_x; //选取基本增量坐标轴
 8008816:	6a3b      	ldr	r3, [r7, #32]
 8008818:	61bb      	str	r3, [r7, #24]
 800881a:	e001      	b.n	8008820 <LCD_DrawLine+0x98>
	else
		distance = delta_y;
 800881c:	69fb      	ldr	r3, [r7, #28]
 800881e:	61bb      	str	r3, [r7, #24]
	for (t = 0; t <= distance + 1; t++) //画线输出
 8008820:	2300      	movs	r3, #0
 8008822:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8008824:	e02a      	b.n	800887c <LCD_DrawLine+0xf4>
			{
		LCD_DrawPoint(uRow, uCol); //画点
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	b29b      	uxth	r3, r3
 800882a:	68ba      	ldr	r2, [r7, #8]
 800882c:	b292      	uxth	r2, r2
 800882e:	4611      	mov	r1, r2
 8008830:	4618      	mov	r0, r3
 8008832:	f7fb fb15 	bl	8003e60 <LCD_DrawPoint>
		xerr += delta_x;
 8008836:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008838:	6a3b      	ldr	r3, [r7, #32]
 800883a:	4413      	add	r3, r2
 800883c:	62bb      	str	r3, [r7, #40]	; 0x28
		yerr += delta_y;
 800883e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008840:	69fb      	ldr	r3, [r7, #28]
 8008842:	4413      	add	r3, r2
 8008844:	627b      	str	r3, [r7, #36]	; 0x24
		if (xerr > distance) {
 8008846:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008848:	69bb      	ldr	r3, [r7, #24]
 800884a:	429a      	cmp	r2, r3
 800884c:	dd07      	ble.n	800885e <LCD_DrawLine+0xd6>
			xerr -= distance;
 800884e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008850:	69bb      	ldr	r3, [r7, #24]
 8008852:	1ad3      	subs	r3, r2, r3
 8008854:	62bb      	str	r3, [r7, #40]	; 0x28
			uRow += incx;
 8008856:	68fa      	ldr	r2, [r7, #12]
 8008858:	697b      	ldr	r3, [r7, #20]
 800885a:	4413      	add	r3, r2
 800885c:	60fb      	str	r3, [r7, #12]
		}
		if (yerr > distance) {
 800885e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008860:	69bb      	ldr	r3, [r7, #24]
 8008862:	429a      	cmp	r2, r3
 8008864:	dd07      	ble.n	8008876 <LCD_DrawLine+0xee>
			yerr -= distance;
 8008866:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008868:	69bb      	ldr	r3, [r7, #24]
 800886a:	1ad3      	subs	r3, r2, r3
 800886c:	627b      	str	r3, [r7, #36]	; 0x24
			uCol += incy;
 800886e:	68ba      	ldr	r2, [r7, #8]
 8008870:	693b      	ldr	r3, [r7, #16]
 8008872:	4413      	add	r3, r2
 8008874:	60bb      	str	r3, [r7, #8]
	for (t = 0; t <= distance + 1; t++) //画线输出
 8008876:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008878:	3301      	adds	r3, #1
 800887a:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800887c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800887e:	69bb      	ldr	r3, [r7, #24]
 8008880:	3301      	adds	r3, #1
 8008882:	429a      	cmp	r2, r3
 8008884:	ddcf      	ble.n	8008826 <LCD_DrawLine+0x9e>
		}
	}
}
 8008886:	bf00      	nop
 8008888:	3734      	adds	r7, #52	; 0x34
 800888a:	46bd      	mov	sp, r7
 800888c:	bd90      	pop	{r4, r7, pc}
	...

08008890 <LCD_ShowChar>:
// num: char to be displayed
// size: font size 12/16/24
// mode: display characters on the displayed content and do not wipe away the displayed content(1)
//       display characters on the displayed content and wipe away the displayed content(0)
void LCD_ShowChar(uint16_t x, uint16_t y, uint8_t num, uint8_t size,
		uint8_t mode) {
 8008890:	b590      	push	{r4, r7, lr}
 8008892:	b085      	sub	sp, #20
 8008894:	af00      	add	r7, sp, #0
 8008896:	4604      	mov	r4, r0
 8008898:	4608      	mov	r0, r1
 800889a:	4611      	mov	r1, r2
 800889c:	461a      	mov	r2, r3
 800889e:	4623      	mov	r3, r4
 80088a0:	80fb      	strh	r3, [r7, #6]
 80088a2:	4603      	mov	r3, r0
 80088a4:	80bb      	strh	r3, [r7, #4]
 80088a6:	460b      	mov	r3, r1
 80088a8:	70fb      	strb	r3, [r7, #3]
 80088aa:	4613      	mov	r3, r2
 80088ac:	70bb      	strb	r3, [r7, #2]
	uint8_t temp, t1, t;
	uint16_t y0 = y;
 80088ae:	88bb      	ldrh	r3, [r7, #4]
 80088b0:	817b      	strh	r3, [r7, #10]
	uint8_t csize = (size / 8 + ((size % 8) ? 1 : 0)) * (size / 2);	//得到字体一个字符对应点阵集所占的字节数
 80088b2:	78bb      	ldrb	r3, [r7, #2]
 80088b4:	08db      	lsrs	r3, r3, #3
 80088b6:	b2db      	uxtb	r3, r3
 80088b8:	461a      	mov	r2, r3
 80088ba:	78bb      	ldrb	r3, [r7, #2]
 80088bc:	f003 0307 	and.w	r3, r3, #7
 80088c0:	b2db      	uxtb	r3, r3
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	bf14      	ite	ne
 80088c6:	2301      	movne	r3, #1
 80088c8:	2300      	moveq	r3, #0
 80088ca:	b2db      	uxtb	r3, r3
 80088cc:	4413      	add	r3, r2
 80088ce:	b2db      	uxtb	r3, r3
 80088d0:	78ba      	ldrb	r2, [r7, #2]
 80088d2:	0852      	lsrs	r2, r2, #1
 80088d4:	b2d2      	uxtb	r2, r2
 80088d6:	fb02 f303 	mul.w	r3, r2, r3
 80088da:	727b      	strb	r3, [r7, #9]
	num = num - ' ';		//得到偏移后的值（ASCII字库是从空格开始取模，所以-' '就是对应字符的字库）
 80088dc:	78fb      	ldrb	r3, [r7, #3]
 80088de:	3b20      	subs	r3, #32
 80088e0:	70fb      	strb	r3, [r7, #3]
	for (t = 0; t < csize; t++) {
 80088e2:	2300      	movs	r3, #0
 80088e4:	737b      	strb	r3, [r7, #13]
 80088e6:	e069      	b.n	80089bc <LCD_ShowChar+0x12c>
		if (size == 12)
 80088e8:	78bb      	ldrb	r3, [r7, #2]
 80088ea:	2b0c      	cmp	r3, #12
 80088ec:	d10b      	bne.n	8008906 <LCD_ShowChar+0x76>
			temp = asc2_1206[num][t]; 	 	//调用1206字体
 80088ee:	78fa      	ldrb	r2, [r7, #3]
 80088f0:	7b79      	ldrb	r1, [r7, #13]
 80088f2:	4838      	ldr	r0, [pc, #224]	; (80089d4 <LCD_ShowChar+0x144>)
 80088f4:	4613      	mov	r3, r2
 80088f6:	005b      	lsls	r3, r3, #1
 80088f8:	4413      	add	r3, r2
 80088fa:	009b      	lsls	r3, r3, #2
 80088fc:	4403      	add	r3, r0
 80088fe:	440b      	add	r3, r1
 8008900:	781b      	ldrb	r3, [r3, #0]
 8008902:	73fb      	strb	r3, [r7, #15]
 8008904:	e019      	b.n	800893a <LCD_ShowChar+0xaa>
		else if (size == 16)
 8008906:	78bb      	ldrb	r3, [r7, #2]
 8008908:	2b10      	cmp	r3, #16
 800890a:	d108      	bne.n	800891e <LCD_ShowChar+0x8e>
			temp = asc2_1608[num][t];	//调用1608字体
 800890c:	78fa      	ldrb	r2, [r7, #3]
 800890e:	7b7b      	ldrb	r3, [r7, #13]
 8008910:	4931      	ldr	r1, [pc, #196]	; (80089d8 <LCD_ShowChar+0x148>)
 8008912:	0112      	lsls	r2, r2, #4
 8008914:	440a      	add	r2, r1
 8008916:	4413      	add	r3, r2
 8008918:	781b      	ldrb	r3, [r3, #0]
 800891a:	73fb      	strb	r3, [r7, #15]
 800891c:	e00d      	b.n	800893a <LCD_ShowChar+0xaa>
		else if (size == 24)
 800891e:	78bb      	ldrb	r3, [r7, #2]
 8008920:	2b18      	cmp	r3, #24
 8008922:	d150      	bne.n	80089c6 <LCD_ShowChar+0x136>
			temp = asc2_2412[num][t];	//调用2412字体
 8008924:	78fa      	ldrb	r2, [r7, #3]
 8008926:	7b79      	ldrb	r1, [r7, #13]
 8008928:	482c      	ldr	r0, [pc, #176]	; (80089dc <LCD_ShowChar+0x14c>)
 800892a:	4613      	mov	r3, r2
 800892c:	00db      	lsls	r3, r3, #3
 800892e:	4413      	add	r3, r2
 8008930:	009b      	lsls	r3, r3, #2
 8008932:	4403      	add	r3, r0
 8008934:	440b      	add	r3, r1
 8008936:	781b      	ldrb	r3, [r3, #0]
 8008938:	73fb      	strb	r3, [r7, #15]
		else
			return;								//没有的字库
		for (t1 = 0; t1 < 8; t1++) {
 800893a:	2300      	movs	r3, #0
 800893c:	73bb      	strb	r3, [r7, #14]
 800893e:	e035      	b.n	80089ac <LCD_ShowChar+0x11c>
			if (temp & 0x80)
 8008940:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008944:	2b00      	cmp	r3, #0
 8008946:	da07      	bge.n	8008958 <LCD_ShowChar+0xc8>
				LCD_Fast_DrawPoint(x, y, POINT_COLOR);
 8008948:	4b25      	ldr	r3, [pc, #148]	; (80089e0 <LCD_ShowChar+0x150>)
 800894a:	881a      	ldrh	r2, [r3, #0]
 800894c:	88b9      	ldrh	r1, [r7, #4]
 800894e:	88fb      	ldrh	r3, [r7, #6]
 8008950:	4618      	mov	r0, r3
 8008952:	f7fb fab5 	bl	8003ec0 <LCD_Fast_DrawPoint>
 8008956:	e00a      	b.n	800896e <LCD_ShowChar+0xde>
			else if (mode == 0)
 8008958:	f897 3020 	ldrb.w	r3, [r7, #32]
 800895c:	2b00      	cmp	r3, #0
 800895e:	d106      	bne.n	800896e <LCD_ShowChar+0xde>
				LCD_Fast_DrawPoint(x, y, BACK_COLOR);
 8008960:	4b20      	ldr	r3, [pc, #128]	; (80089e4 <LCD_ShowChar+0x154>)
 8008962:	881a      	ldrh	r2, [r3, #0]
 8008964:	88b9      	ldrh	r1, [r7, #4]
 8008966:	88fb      	ldrh	r3, [r7, #6]
 8008968:	4618      	mov	r0, r3
 800896a:	f7fb faa9 	bl	8003ec0 <LCD_Fast_DrawPoint>
			temp <<= 1;
 800896e:	7bfb      	ldrb	r3, [r7, #15]
 8008970:	005b      	lsls	r3, r3, #1
 8008972:	73fb      	strb	r3, [r7, #15]
			y++;
 8008974:	88bb      	ldrh	r3, [r7, #4]
 8008976:	3301      	adds	r3, #1
 8008978:	80bb      	strh	r3, [r7, #4]
			if (y >= lcddev.height)
 800897a:	4b1b      	ldr	r3, [pc, #108]	; (80089e8 <LCD_ShowChar+0x158>)
 800897c:	885b      	ldrh	r3, [r3, #2]
 800897e:	88ba      	ldrh	r2, [r7, #4]
 8008980:	429a      	cmp	r2, r3
 8008982:	d222      	bcs.n	80089ca <LCD_ShowChar+0x13a>
				return;		//超区域了
			if ((y - y0) == size) {
 8008984:	88ba      	ldrh	r2, [r7, #4]
 8008986:	897b      	ldrh	r3, [r7, #10]
 8008988:	1ad2      	subs	r2, r2, r3
 800898a:	78bb      	ldrb	r3, [r7, #2]
 800898c:	429a      	cmp	r2, r3
 800898e:	d10a      	bne.n	80089a6 <LCD_ShowChar+0x116>
				y = y0;
 8008990:	897b      	ldrh	r3, [r7, #10]
 8008992:	80bb      	strh	r3, [r7, #4]
				x++;
 8008994:	88fb      	ldrh	r3, [r7, #6]
 8008996:	3301      	adds	r3, #1
 8008998:	80fb      	strh	r3, [r7, #6]
				if (x >= lcddev.width)
 800899a:	4b13      	ldr	r3, [pc, #76]	; (80089e8 <LCD_ShowChar+0x158>)
 800899c:	881b      	ldrh	r3, [r3, #0]
 800899e:	88fa      	ldrh	r2, [r7, #6]
 80089a0:	429a      	cmp	r2, r3
 80089a2:	d307      	bcc.n	80089b4 <LCD_ShowChar+0x124>
					return;	//超区域了
 80089a4:	e012      	b.n	80089cc <LCD_ShowChar+0x13c>
		for (t1 = 0; t1 < 8; t1++) {
 80089a6:	7bbb      	ldrb	r3, [r7, #14]
 80089a8:	3301      	adds	r3, #1
 80089aa:	73bb      	strb	r3, [r7, #14]
 80089ac:	7bbb      	ldrb	r3, [r7, #14]
 80089ae:	2b07      	cmp	r3, #7
 80089b0:	d9c6      	bls.n	8008940 <LCD_ShowChar+0xb0>
 80089b2:	e000      	b.n	80089b6 <LCD_ShowChar+0x126>
				break;
 80089b4:	bf00      	nop
	for (t = 0; t < csize; t++) {
 80089b6:	7b7b      	ldrb	r3, [r7, #13]
 80089b8:	3301      	adds	r3, #1
 80089ba:	737b      	strb	r3, [r7, #13]
 80089bc:	7b7a      	ldrb	r2, [r7, #13]
 80089be:	7a7b      	ldrb	r3, [r7, #9]
 80089c0:	429a      	cmp	r2, r3
 80089c2:	d391      	bcc.n	80088e8 <LCD_ShowChar+0x58>
 80089c4:	e002      	b.n	80089cc <LCD_ShowChar+0x13c>
			return;								//没有的字库
 80089c6:	bf00      	nop
 80089c8:	e000      	b.n	80089cc <LCD_ShowChar+0x13c>
				return;		//超区域了
 80089ca:	bf00      	nop
			}
		}
	}
}
 80089cc:	3714      	adds	r7, #20
 80089ce:	46bd      	mov	sp, r7
 80089d0:	bd90      	pop	{r4, r7, pc}
 80089d2:	bf00      	nop
 80089d4:	0800a480 	.word	0x0800a480
 80089d8:	0800a8f4 	.word	0x0800a8f4
 80089dc:	0800aee4 	.word	0x0800aee4
 80089e0:	200000a0 	.word	0x200000a0
 80089e4:	20000010 	.word	0x20000010
 80089e8:	200000b4 	.word	0x200000b4

080089ec <LCD_Pow>:
//m^n函数
//返回值:m^n次方.
uint32_t LCD_Pow(uint8_t m, uint8_t n) {
 80089ec:	b480      	push	{r7}
 80089ee:	b085      	sub	sp, #20
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	4603      	mov	r3, r0
 80089f4:	460a      	mov	r2, r1
 80089f6:	71fb      	strb	r3, [r7, #7]
 80089f8:	4613      	mov	r3, r2
 80089fa:	71bb      	strb	r3, [r7, #6]
	uint32_t result = 1;
 80089fc:	2301      	movs	r3, #1
 80089fe:	60fb      	str	r3, [r7, #12]
	while (n--)
 8008a00:	e004      	b.n	8008a0c <LCD_Pow+0x20>
		result *= m;
 8008a02:	79fa      	ldrb	r2, [r7, #7]
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	fb02 f303 	mul.w	r3, r2, r3
 8008a0a:	60fb      	str	r3, [r7, #12]
	while (n--)
 8008a0c:	79bb      	ldrb	r3, [r7, #6]
 8008a0e:	1e5a      	subs	r2, r3, #1
 8008a10:	71ba      	strb	r2, [r7, #6]
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d1f5      	bne.n	8008a02 <LCD_Pow+0x16>
	return result;
 8008a16:	68fb      	ldr	r3, [r7, #12]
}
 8008a18:	4618      	mov	r0, r3
 8008a1a:	3714      	adds	r7, #20
 8008a1c:	46bd      	mov	sp, r7
 8008a1e:	bc80      	pop	{r7}
 8008a20:	4770      	bx	lr
	...

08008a24 <LCD_ShowxNum>:
//mode:
//[7]:0 without leading zeros; 1 with leading zeros.
//[6:1]: reserve
//[0]: similar as it in LCD_ShowChar, 0 for wipe away and 1 for opposite
void LCD_ShowxNum(uint16_t x, uint16_t y, uint32_t num, uint8_t len,
		uint8_t size, uint8_t mode) {
 8008a24:	b590      	push	{r4, r7, lr}
 8008a26:	b089      	sub	sp, #36	; 0x24
 8008a28:	af02      	add	r7, sp, #8
 8008a2a:	60ba      	str	r2, [r7, #8]
 8008a2c:	461a      	mov	r2, r3
 8008a2e:	4603      	mov	r3, r0
 8008a30:	81fb      	strh	r3, [r7, #14]
 8008a32:	460b      	mov	r3, r1
 8008a34:	81bb      	strh	r3, [r7, #12]
 8008a36:	4613      	mov	r3, r2
 8008a38:	71fb      	strb	r3, [r7, #7]
	uint8_t t, temp;
	uint8_t enshow = 0;
 8008a3a:	2300      	movs	r3, #0
 8008a3c:	75bb      	strb	r3, [r7, #22]
	for (t = 0; t < len; t++) {
 8008a3e:	2300      	movs	r3, #0
 8008a40:	75fb      	strb	r3, [r7, #23]
 8008a42:	e07e      	b.n	8008b42 <LCD_ShowxNum+0x11e>
		temp = (num / LCD_Pow(10, len - t - 1)) % 10;
 8008a44:	79fa      	ldrb	r2, [r7, #7]
 8008a46:	7dfb      	ldrb	r3, [r7, #23]
 8008a48:	1ad3      	subs	r3, r2, r3
 8008a4a:	b2db      	uxtb	r3, r3
 8008a4c:	3b01      	subs	r3, #1
 8008a4e:	b2db      	uxtb	r3, r3
 8008a50:	4619      	mov	r1, r3
 8008a52:	200a      	movs	r0, #10
 8008a54:	f7ff ffca 	bl	80089ec <LCD_Pow>
 8008a58:	4602      	mov	r2, r0
 8008a5a:	68bb      	ldr	r3, [r7, #8]
 8008a5c:	fbb3 f1f2 	udiv	r1, r3, r2
 8008a60:	4b3c      	ldr	r3, [pc, #240]	; (8008b54 <LCD_ShowxNum+0x130>)
 8008a62:	fba3 2301 	umull	r2, r3, r3, r1
 8008a66:	08da      	lsrs	r2, r3, #3
 8008a68:	4613      	mov	r3, r2
 8008a6a:	009b      	lsls	r3, r3, #2
 8008a6c:	4413      	add	r3, r2
 8008a6e:	005b      	lsls	r3, r3, #1
 8008a70:	1aca      	subs	r2, r1, r3
 8008a72:	4613      	mov	r3, r2
 8008a74:	757b      	strb	r3, [r7, #21]
		if (enshow == 0 && t < (len - 1)) {
 8008a76:	7dbb      	ldrb	r3, [r7, #22]
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d143      	bne.n	8008b04 <LCD_ShowxNum+0xe0>
 8008a7c:	7dfa      	ldrb	r2, [r7, #23]
 8008a7e:	79fb      	ldrb	r3, [r7, #7]
 8008a80:	3b01      	subs	r3, #1
 8008a82:	429a      	cmp	r2, r3
 8008a84:	da3e      	bge.n	8008b04 <LCD_ShowxNum+0xe0>
			if (temp == 0) {
 8008a86:	7d7b      	ldrb	r3, [r7, #21]
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d139      	bne.n	8008b00 <LCD_ShowxNum+0xdc>
				if (mode & 0X80)
 8008a8c:	f997 302c 	ldrsb.w	r3, [r7, #44]	; 0x2c
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	da1a      	bge.n	8008aca <LCD_ShowxNum+0xa6>
					LCD_ShowChar(x + (size / 2) * t, y, '0', size, mode & 0X01);
 8008a94:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008a98:	085b      	lsrs	r3, r3, #1
 8008a9a:	b2db      	uxtb	r3, r3
 8008a9c:	b29b      	uxth	r3, r3
 8008a9e:	7dfa      	ldrb	r2, [r7, #23]
 8008aa0:	b292      	uxth	r2, r2
 8008aa2:	fb02 f303 	mul.w	r3, r2, r3
 8008aa6:	b29a      	uxth	r2, r3
 8008aa8:	89fb      	ldrh	r3, [r7, #14]
 8008aaa:	4413      	add	r3, r2
 8008aac:	b298      	uxth	r0, r3
 8008aae:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008ab2:	f003 0301 	and.w	r3, r3, #1
 8008ab6:	b2db      	uxtb	r3, r3
 8008ab8:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8008abc:	89b9      	ldrh	r1, [r7, #12]
 8008abe:	9300      	str	r3, [sp, #0]
 8008ac0:	4613      	mov	r3, r2
 8008ac2:	2230      	movs	r2, #48	; 0x30
 8008ac4:	f7ff fee4 	bl	8008890 <LCD_ShowChar>
				else
					LCD_ShowChar(x + (size / 2) * t, y, ' ', size, mode & 0X01);
				continue;
 8008ac8:	e038      	b.n	8008b3c <LCD_ShowxNum+0x118>
					LCD_ShowChar(x + (size / 2) * t, y, ' ', size, mode & 0X01);
 8008aca:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008ace:	085b      	lsrs	r3, r3, #1
 8008ad0:	b2db      	uxtb	r3, r3
 8008ad2:	b29b      	uxth	r3, r3
 8008ad4:	7dfa      	ldrb	r2, [r7, #23]
 8008ad6:	b292      	uxth	r2, r2
 8008ad8:	fb02 f303 	mul.w	r3, r2, r3
 8008adc:	b29a      	uxth	r2, r3
 8008ade:	89fb      	ldrh	r3, [r7, #14]
 8008ae0:	4413      	add	r3, r2
 8008ae2:	b298      	uxth	r0, r3
 8008ae4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008ae8:	f003 0301 	and.w	r3, r3, #1
 8008aec:	b2db      	uxtb	r3, r3
 8008aee:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8008af2:	89b9      	ldrh	r1, [r7, #12]
 8008af4:	9300      	str	r3, [sp, #0]
 8008af6:	4613      	mov	r3, r2
 8008af8:	2220      	movs	r2, #32
 8008afa:	f7ff fec9 	bl	8008890 <LCD_ShowChar>
				continue;
 8008afe:	e01d      	b.n	8008b3c <LCD_ShowxNum+0x118>
			} else
				enshow = 1;
 8008b00:	2301      	movs	r3, #1
 8008b02:	75bb      	strb	r3, [r7, #22]

		}
		LCD_ShowChar(x + (size / 2) * t, y, temp + '0', size, mode & 0X01);
 8008b04:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008b08:	085b      	lsrs	r3, r3, #1
 8008b0a:	b2db      	uxtb	r3, r3
 8008b0c:	b29b      	uxth	r3, r3
 8008b0e:	7dfa      	ldrb	r2, [r7, #23]
 8008b10:	b292      	uxth	r2, r2
 8008b12:	fb02 f303 	mul.w	r3, r2, r3
 8008b16:	b29a      	uxth	r2, r3
 8008b18:	89fb      	ldrh	r3, [r7, #14]
 8008b1a:	4413      	add	r3, r2
 8008b1c:	b298      	uxth	r0, r3
 8008b1e:	7d7b      	ldrb	r3, [r7, #21]
 8008b20:	3330      	adds	r3, #48	; 0x30
 8008b22:	b2da      	uxtb	r2, r3
 8008b24:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008b28:	f003 0301 	and.w	r3, r3, #1
 8008b2c:	b2db      	uxtb	r3, r3
 8008b2e:	f897 4028 	ldrb.w	r4, [r7, #40]	; 0x28
 8008b32:	89b9      	ldrh	r1, [r7, #12]
 8008b34:	9300      	str	r3, [sp, #0]
 8008b36:	4623      	mov	r3, r4
 8008b38:	f7ff feaa 	bl	8008890 <LCD_ShowChar>
	for (t = 0; t < len; t++) {
 8008b3c:	7dfb      	ldrb	r3, [r7, #23]
 8008b3e:	3301      	adds	r3, #1
 8008b40:	75fb      	strb	r3, [r7, #23]
 8008b42:	7dfa      	ldrb	r2, [r7, #23]
 8008b44:	79fb      	ldrb	r3, [r7, #7]
 8008b46:	429a      	cmp	r2, r3
 8008b48:	f4ff af7c 	bcc.w	8008a44 <LCD_ShowxNum+0x20>
	}
}
 8008b4c:	bf00      	nop
 8008b4e:	371c      	adds	r7, #28
 8008b50:	46bd      	mov	sp, r7
 8008b52:	bd90      	pop	{r4, r7, pc}
 8008b54:	cccccccd 	.word	0xcccccccd

08008b58 <LCD_ShowString>:
// x,y: starting coordinate
// width, height: display area size
// size: font size // x,y: starting coordinate
// *p: string
void LCD_ShowString(uint16_t x, uint16_t y, uint16_t width, uint16_t height,
		uint8_t size, uint8_t *p) {
 8008b58:	b590      	push	{r4, r7, lr}
 8008b5a:	b087      	sub	sp, #28
 8008b5c:	af02      	add	r7, sp, #8
 8008b5e:	4604      	mov	r4, r0
 8008b60:	4608      	mov	r0, r1
 8008b62:	4611      	mov	r1, r2
 8008b64:	461a      	mov	r2, r3
 8008b66:	4623      	mov	r3, r4
 8008b68:	80fb      	strh	r3, [r7, #6]
 8008b6a:	4603      	mov	r3, r0
 8008b6c:	80bb      	strh	r3, [r7, #4]
 8008b6e:	460b      	mov	r3, r1
 8008b70:	807b      	strh	r3, [r7, #2]
 8008b72:	4613      	mov	r3, r2
 8008b74:	803b      	strh	r3, [r7, #0]
	uint8_t x0 = x;
 8008b76:	88fb      	ldrh	r3, [r7, #6]
 8008b78:	73fb      	strb	r3, [r7, #15]
	width += x;
 8008b7a:	887a      	ldrh	r2, [r7, #2]
 8008b7c:	88fb      	ldrh	r3, [r7, #6]
 8008b7e:	4413      	add	r3, r2
 8008b80:	807b      	strh	r3, [r7, #2]
	height += y;
 8008b82:	883a      	ldrh	r2, [r7, #0]
 8008b84:	88bb      	ldrh	r3, [r7, #4]
 8008b86:	4413      	add	r3, r2
 8008b88:	803b      	strh	r3, [r7, #0]
	while ((*p <= '~') && (*p >= ' '))	//判断是不是非法字符!
 8008b8a:	e025      	b.n	8008bd8 <LCD_ShowString+0x80>
	{
		if (x >= width) {
 8008b8c:	88fa      	ldrh	r2, [r7, #6]
 8008b8e:	887b      	ldrh	r3, [r7, #2]
 8008b90:	429a      	cmp	r2, r3
 8008b92:	d307      	bcc.n	8008ba4 <LCD_ShowString+0x4c>
			x = x0;
 8008b94:	7bfb      	ldrb	r3, [r7, #15]
 8008b96:	80fb      	strh	r3, [r7, #6]
			y += size;
 8008b98:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008b9c:	b29a      	uxth	r2, r3
 8008b9e:	88bb      	ldrh	r3, [r7, #4]
 8008ba0:	4413      	add	r3, r2
 8008ba2:	80bb      	strh	r3, [r7, #4]
		}
		if (y >= height)
 8008ba4:	88ba      	ldrh	r2, [r7, #4]
 8008ba6:	883b      	ldrh	r3, [r7, #0]
 8008ba8:	429a      	cmp	r2, r3
 8008baa:	d21e      	bcs.n	8008bea <LCD_ShowString+0x92>
			break;	//退出
		LCD_ShowChar(x, y, *p, size, 0);
 8008bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bae:	781a      	ldrb	r2, [r3, #0]
 8008bb0:	f897 4020 	ldrb.w	r4, [r7, #32]
 8008bb4:	88b9      	ldrh	r1, [r7, #4]
 8008bb6:	88f8      	ldrh	r0, [r7, #6]
 8008bb8:	2300      	movs	r3, #0
 8008bba:	9300      	str	r3, [sp, #0]
 8008bbc:	4623      	mov	r3, r4
 8008bbe:	f7ff fe67 	bl	8008890 <LCD_ShowChar>
		x += size / 2;
 8008bc2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008bc6:	085b      	lsrs	r3, r3, #1
 8008bc8:	b2db      	uxtb	r3, r3
 8008bca:	b29a      	uxth	r2, r3
 8008bcc:	88fb      	ldrh	r3, [r7, #6]
 8008bce:	4413      	add	r3, r2
 8008bd0:	80fb      	strh	r3, [r7, #6]
		p++;
 8008bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bd4:	3301      	adds	r3, #1
 8008bd6:	627b      	str	r3, [r7, #36]	; 0x24
	while ((*p <= '~') && (*p >= ' '))	//判断是不是非法字符!
 8008bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bda:	781b      	ldrb	r3, [r3, #0]
 8008bdc:	2b7e      	cmp	r3, #126	; 0x7e
 8008bde:	d805      	bhi.n	8008bec <LCD_ShowString+0x94>
 8008be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008be2:	781b      	ldrb	r3, [r3, #0]
 8008be4:	2b1f      	cmp	r3, #31
 8008be6:	d8d1      	bhi.n	8008b8c <LCD_ShowString+0x34>
	}
}
 8008be8:	e000      	b.n	8008bec <LCD_ShowString+0x94>
			break;	//退出
 8008bea:	bf00      	nop
}
 8008bec:	bf00      	nop
 8008bee:	3714      	adds	r7, #20
 8008bf0:	46bd      	mov	sp, r7
 8008bf2:	bd90      	pop	{r4, r7, pc}

08008bf4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8008bf4:	b580      	push	{r7, lr}
 8008bf6:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8008bf8:	f7f7 ff04 	bl	8000a04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8008bfc:	f000 f8e2 	bl	8008dc4 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  LCD_Init();
 8008c00:	f7fb fda6 	bl	8004750 <LCD_Init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8008c04:	f000 f992 	bl	8008f2c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8008c08:	f000 f966 	bl	8008ed8 <MX_USART1_UART_Init>
  MX_RTC_Init();
 8008c0c:	f000 f93a 	bl	8008e84 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  all_init();
 8008c10:	f000 fa36 	bl	8009080 <all_init>
  draw_all_through_struct();
 8008c14:	f000 fa14 	bl	8009040 <draw_all_through_struct>
  HAL_Delay(500);
 8008c18:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008c1c:	f7f7 ff54 	bl	8000ac8 <HAL_Delay>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  while (1){
		  if(interface.life == 0 || interface.boss_life == 0){break;}
 8008c20:	4b5c      	ldr	r3, [pc, #368]	; (8008d94 <main+0x1a0>)
 8008c22:	68db      	ldr	r3, [r3, #12]
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	f000 8097 	beq.w	8008d58 <main+0x164>
 8008c2a:	4b5a      	ldr	r3, [pc, #360]	; (8008d94 <main+0x1a0>)
 8008c2c:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	f000 8091 	beq.w	8008d58 <main+0x164>

		  if(interface.score >= 40 && interface.come_boss == 1){
 8008c36:	4b57      	ldr	r3, [pc, #348]	; (8008d94 <main+0x1a0>)
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	2b27      	cmp	r3, #39	; 0x27
 8008c3c:	dd16      	ble.n	8008c6c <main+0x78>
 8008c3e:	4b55      	ldr	r3, [pc, #340]	; (8008d94 <main+0x1a0>)
 8008c40:	f8d3 3cfc 	ldr.w	r3, [r3, #3324]	; 0xcfc
 8008c44:	2b01      	cmp	r3, #1
 8008c46:	d111      	bne.n	8008c6c <main+0x78>
		  	interface.boss[0] = 127;
 8008c48:	4b52      	ldr	r3, [pc, #328]	; (8008d94 <main+0x1a0>)
 8008c4a:	227f      	movs	r2, #127	; 0x7f
 8008c4c:	f8c3 233c 	str.w	r2, [r3, #828]	; 0x33c
		  	interface.boss[1] = 85;
 8008c50:	4b50      	ldr	r3, [pc, #320]	; (8008d94 <main+0x1a0>)
 8008c52:	2255      	movs	r2, #85	; 0x55
 8008c54:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
		  	interface.come_boss = 0;
 8008c58:	4b4e      	ldr	r3, [pc, #312]	; (8008d94 <main+0x1a0>)
 8008c5a:	2200      	movs	r2, #0
 8008c5c:	f8c3 2cfc 	str.w	r2, [r3, #3324]	; 0xcfc

		  	clear_all_enemy_plane(interface.my_plane,	interface.enemy_planes, interface.my_buttles, interface.enemy_buttles);
 8008c60:	4b4d      	ldr	r3, [pc, #308]	; (8008d98 <main+0x1a4>)
 8008c62:	4a4e      	ldr	r2, [pc, #312]	; (8008d9c <main+0x1a8>)
 8008c64:	494e      	ldr	r1, [pc, #312]	; (8008da0 <main+0x1ac>)
 8008c66:	484f      	ldr	r0, [pc, #316]	; (8008da4 <main+0x1b0>)
 8008c68:	f001 f92c 	bl	8009ec4 <clear_all_enemy_plane>
		  }
		  if(interface.score % 10 == 0 && interface.score < 40){
 8008c6c:	4b49      	ldr	r3, [pc, #292]	; (8008d94 <main+0x1a0>)
 8008c6e:	6819      	ldr	r1, [r3, #0]
 8008c70:	4b4d      	ldr	r3, [pc, #308]	; (8008da8 <main+0x1b4>)
 8008c72:	fb83 2301 	smull	r2, r3, r3, r1
 8008c76:	109a      	asrs	r2, r3, #2
 8008c78:	17cb      	asrs	r3, r1, #31
 8008c7a:	1ad2      	subs	r2, r2, r3
 8008c7c:	4613      	mov	r3, r2
 8008c7e:	009b      	lsls	r3, r3, #2
 8008c80:	4413      	add	r3, r2
 8008c82:	005b      	lsls	r3, r3, #1
 8008c84:	1aca      	subs	r2, r1, r3
 8008c86:	2a00      	cmp	r2, #0
 8008c88:	d10f      	bne.n	8008caa <main+0xb6>
 8008c8a:	4b42      	ldr	r3, [pc, #264]	; (8008d94 <main+0x1a0>)
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	2b27      	cmp	r3, #39	; 0x27
 8008c90:	dc0b      	bgt.n	8008caa <main+0xb6>
		  	interface.level = interface.score/10 + 1;
 8008c92:	4b40      	ldr	r3, [pc, #256]	; (8008d94 <main+0x1a0>)
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	4a44      	ldr	r2, [pc, #272]	; (8008da8 <main+0x1b4>)
 8008c98:	fb82 1203 	smull	r1, r2, r2, r3
 8008c9c:	1092      	asrs	r2, r2, #2
 8008c9e:	17db      	asrs	r3, r3, #31
 8008ca0:	1ad3      	subs	r3, r2, r3
 8008ca2:	3301      	adds	r3, #1
 8008ca4:	4a3b      	ldr	r2, [pc, #236]	; (8008d94 <main+0x1a0>)
 8008ca6:	f8c2 3338 	str.w	r3, [r2, #824]	; 0x338

		  }

		  switch_my_act(interface.my_plane,interface.my_buttles);
 8008caa:	493c      	ldr	r1, [pc, #240]	; (8008d9c <main+0x1a8>)
 8008cac:	483d      	ldr	r0, [pc, #244]	; (8008da4 <main+0x1b0>)
 8008cae:	f000 fbc7 	bl	8009440 <switch_my_act>
		  update_my_buttles(interface.my_buttles);
 8008cb2:	483a      	ldr	r0, [pc, #232]	; (8008d9c <main+0x1a8>)
 8008cb4:	f000 fc82 	bl	80095bc <update_my_buttles>

		  if(interface.boss[0] == 0){
 8008cb8:	4b36      	ldr	r3, [pc, #216]	; (8008d94 <main+0x1a0>)
 8008cba:	f8d3 333c 	ldr.w	r3, [r3, #828]	; 0x33c
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d12d      	bne.n	8008d1e <main+0x12a>
		  	update_enemy_planes(interface.enemy_planes, interface.level);
 8008cc2:	4b34      	ldr	r3, [pc, #208]	; (8008d94 <main+0x1a0>)
 8008cc4:	f8d3 3338 	ldr.w	r3, [r3, #824]	; 0x338
 8008cc8:	4619      	mov	r1, r3
 8008cca:	4835      	ldr	r0, [pc, #212]	; (8008da0 <main+0x1ac>)
 8008ccc:	f000 fd3e 	bl	800974c <update_enemy_planes>
		  	update_enemy_buttles(interface.enemy_buttles, interface.level);
 8008cd0:	4b30      	ldr	r3, [pc, #192]	; (8008d94 <main+0x1a0>)
 8008cd2:	f8d3 3338 	ldr.w	r3, [r3, #824]	; 0x338
 8008cd6:	4619      	mov	r1, r3
 8008cd8:	482f      	ldr	r0, [pc, #188]	; (8008d98 <main+0x1a4>)
 8008cda:	f000 fcd1 	bl	8009680 <update_enemy_buttles>

		  	generate_enemy_planes(interface.level,interface.enemy_planes);
 8008cde:	4b2d      	ldr	r3, [pc, #180]	; (8008d94 <main+0x1a0>)
 8008ce0:	f8d3 3338 	ldr.w	r3, [r3, #824]	; 0x338
 8008ce4:	492e      	ldr	r1, [pc, #184]	; (8008da0 <main+0x1ac>)
 8008ce6:	4618      	mov	r0, r3
 8008ce8:	f000 fb2c 	bl	8009344 <generate_enemy_planes>
		  	generate_enemy_buttles(interface.level, interface.enemy_planes, interface.enemy_buttles);
 8008cec:	4b29      	ldr	r3, [pc, #164]	; (8008d94 <main+0x1a0>)
 8008cee:	f8d3 3338 	ldr.w	r3, [r3, #824]	; 0x338
 8008cf2:	4a29      	ldr	r2, [pc, #164]	; (8008d98 <main+0x1a4>)
 8008cf4:	492a      	ldr	r1, [pc, #168]	; (8008da0 <main+0x1ac>)
 8008cf6:	4618      	mov	r0, r3
 8008cf8:	f001 f83a 	bl	8009d70 <generate_enemy_buttles>

		  	check_my_plane_to_enemy_plane_collide(&(interface.score),&(interface.life),	interface.my_plane,interface.enemy_planes);
 8008cfc:	4b28      	ldr	r3, [pc, #160]	; (8008da0 <main+0x1ac>)
 8008cfe:	4a29      	ldr	r2, [pc, #164]	; (8008da4 <main+0x1b0>)
 8008d00:	492a      	ldr	r1, [pc, #168]	; (8008dac <main+0x1b8>)
 8008d02:	4824      	ldr	r0, [pc, #144]	; (8008d94 <main+0x1a0>)
 8008d04:	f000 fd86 	bl	8009814 <check_my_plane_to_enemy_plane_collide>
		  	check_my_plane_to_enemy_buttles_collide(&(interface.life),	interface.enemy_buttles, interface.my_plane);
 8008d08:	4a26      	ldr	r2, [pc, #152]	; (8008da4 <main+0x1b0>)
 8008d0a:	4923      	ldr	r1, [pc, #140]	; (8008d98 <main+0x1a4>)
 8008d0c:	4827      	ldr	r0, [pc, #156]	; (8008dac <main+0x1b8>)
 8008d0e:	f000 ff97 	bl	8009c40 <check_my_plane_to_enemy_buttles_collide>
		  	check_my_buttles_to_enemy_plane_collide(&(interface.score),	interface.my_buttles, interface.enemy_planes);
 8008d12:	4a23      	ldr	r2, [pc, #140]	; (8008da0 <main+0x1ac>)
 8008d14:	4921      	ldr	r1, [pc, #132]	; (8008d9c <main+0x1a8>)
 8008d16:	481f      	ldr	r0, [pc, #124]	; (8008d94 <main+0x1a0>)
 8008d18:	f000 fe44 	bl	80099a4 <check_my_buttles_to_enemy_plane_collide>
 8008d1c:	e016      	b.n	8008d4c <main+0x158>

		  }
		  else{
		  	update_enemy_buttles(interface.enemy_buttles, 1);
 8008d1e:	2101      	movs	r1, #1
 8008d20:	481d      	ldr	r0, [pc, #116]	; (8008d98 <main+0x1a4>)
 8008d22:	f000 fcad 	bl	8009680 <update_enemy_buttles>
		  	move_boss(interface.boss, &(interface.pace));
 8008d26:	4922      	ldr	r1, [pc, #136]	; (8008db0 <main+0x1bc>)
 8008d28:	4822      	ldr	r0, [pc, #136]	; (8008db4 <main+0x1c0>)
 8008d2a:	f001 f93b 	bl	8009fa4 <move_boss>
		  	generate_boss_buttles(interface.boss, interface.enemy_buttles);
 8008d2e:	491a      	ldr	r1, [pc, #104]	; (8008d98 <main+0x1a4>)
 8008d30:	4820      	ldr	r0, [pc, #128]	; (8008db4 <main+0x1c0>)
 8008d32:	f001 f875 	bl	8009e20 <generate_boss_buttles>
		  	check_my_plane_to_enemy_buttles_collide(&(interface.life),	interface.enemy_buttles, interface.my_plane);
 8008d36:	4a1b      	ldr	r2, [pc, #108]	; (8008da4 <main+0x1b0>)
 8008d38:	4917      	ldr	r1, [pc, #92]	; (8008d98 <main+0x1a4>)
 8008d3a:	481c      	ldr	r0, [pc, #112]	; (8008dac <main+0x1b8>)
 8008d3c:	f000 ff80 	bl	8009c40 <check_my_plane_to_enemy_buttles_collide>
		  	check_my_buttles_to_boss_collide(&(interface.score), &(interface.boss_life),	interface.my_buttles, interface.boss);
 8008d40:	4b1c      	ldr	r3, [pc, #112]	; (8008db4 <main+0x1c0>)
 8008d42:	4a16      	ldr	r2, [pc, #88]	; (8008d9c <main+0x1a8>)
 8008d44:	491c      	ldr	r1, [pc, #112]	; (8008db8 <main+0x1c4>)
 8008d46:	4813      	ldr	r0, [pc, #76]	; (8008d94 <main+0x1a0>)
 8008d48:	f000 fee6 	bl	8009b18 <check_my_buttles_to_boss_collide>
		  }


		  draw_all_through_struct();
 8008d4c:	f000 f978 	bl	8009040 <draw_all_through_struct>
		  HAL_Delay(20);
 8008d50:	2014      	movs	r0, #20
 8008d52:	f7f7 feb9 	bl	8000ac8 <HAL_Delay>
		  if(interface.life == 0 || interface.boss_life == 0){break;}
 8008d56:	e763      	b.n	8008c20 <main+0x2c>

	  }

	  draw_end(&(interface.score),&(interface.score_2),&(interface.score_3));
 8008d58:	4a18      	ldr	r2, [pc, #96]	; (8008dbc <main+0x1c8>)
 8008d5a:	4919      	ldr	r1, [pc, #100]	; (8008dc0 <main+0x1cc>)
 8008d5c:	480d      	ldr	r0, [pc, #52]	; (8008d94 <main+0x1a0>)
 8008d5e:	f7f9 ffd3 	bl	8002d08 <draw_end>
	  KEY0_to_skip();
 8008d62:	f001 fa1b 	bl	800a19c <KEY0_to_skip>
	  LCD_Clear(GRAY);
 8008d66:	f248 4030 	movw	r0, #33840	; 0x8430
 8008d6a:	f7ff fc1f 	bl	80085ac <LCD_Clear>
	  //��ʼ�����ʼ��
	  draw_start_page();
 8008d6e:	f7f9 ff79 	bl	8002c64 <draw_start_page>
	  KEY0_to_skip();
 8008d72:	f001 fa13 	bl	800a19c <KEY0_to_skip>
	  LCD_Clear(GRAY);
 8008d76:	f248 4030 	movw	r0, #33840	; 0x8430
 8008d7a:	f7ff fc17 	bl	80085ac <LCD_Clear>

	  //����������ݳ�ʼ��
	  init_interface_info_second_time();
 8008d7e:	f000 fa1d 	bl	80091bc <init_interface_info_second_time>

	  //��������ʼ��
	  init_play_interface();
 8008d82:	f7f9 ff9d 	bl	8002cc0 <init_play_interface>

	  draw_all_through_struct();
 8008d86:	f000 f95b 	bl	8009040 <draw_all_through_struct>
	  HAL_Delay(500);
 8008d8a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008d8e:	f7f7 fe9b 	bl	8000ac8 <HAL_Delay>
  while (1)
 8008d92:	e745      	b.n	8008c20 <main+0x2c>
 8008d94:	200000c8 	.word	0x200000c8
 8008d98:	20000464 	.word	0x20000464
 8008d9c:	200000e0 	.word	0x200000e0
 8008da0:	20000414 	.word	0x20000414
 8008da4:	200000d8 	.word	0x200000d8
 8008da8:	66666667 	.word	0x66666667
 8008dac:	200000d4 	.word	0x200000d4
 8008db0:	20000410 	.word	0x20000410
 8008db4:	20000404 	.word	0x20000404
 8008db8:	2000040c 	.word	0x2000040c
 8008dbc:	200000d0 	.word	0x200000d0
 8008dc0:	200000cc 	.word	0x200000cc

08008dc4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8008dc4:	b580      	push	{r7, lr}
 8008dc6:	b096      	sub	sp, #88	; 0x58
 8008dc8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8008dca:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008dce:	2228      	movs	r2, #40	; 0x28
 8008dd0:	2100      	movs	r1, #0
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	f001 fa44 	bl	800a260 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8008dd8:	f107 031c 	add.w	r3, r7, #28
 8008ddc:	2200      	movs	r2, #0
 8008dde:	601a      	str	r2, [r3, #0]
 8008de0:	605a      	str	r2, [r3, #4]
 8008de2:	609a      	str	r2, [r3, #8]
 8008de4:	60da      	str	r2, [r3, #12]
 8008de6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8008de8:	1d3b      	adds	r3, r7, #4
 8008dea:	2200      	movs	r2, #0
 8008dec:	601a      	str	r2, [r3, #0]
 8008dee:	605a      	str	r2, [r3, #4]
 8008df0:	609a      	str	r2, [r3, #8]
 8008df2:	60da      	str	r2, [r3, #12]
 8008df4:	611a      	str	r2, [r3, #16]
 8008df6:	615a      	str	r2, [r3, #20]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8008df8:	2305      	movs	r3, #5
 8008dfa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8008dfc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008e00:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8008e02:	2300      	movs	r3, #0
 8008e04:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8008e06:	2301      	movs	r3, #1
 8008e08:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8008e0a:	2301      	movs	r3, #1
 8008e0c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8008e0e:	2302      	movs	r3, #2
 8008e10:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8008e12:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008e16:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8008e18:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8008e1c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008e1e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008e22:	4618      	mov	r0, r3
 8008e24:	f7f8 f8f0 	bl	8001008 <HAL_RCC_OscConfig>
 8008e28:	4603      	mov	r3, r0
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d001      	beq.n	8008e32 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8008e2e:	f000 fa37 	bl	80092a0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8008e32:	230f      	movs	r3, #15
 8008e34:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8008e36:	2302      	movs	r3, #2
 8008e38:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8008e3a:	2300      	movs	r3, #0
 8008e3c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8008e3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008e42:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8008e44:	2300      	movs	r3, #0
 8008e46:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8008e48:	f107 031c 	add.w	r3, r7, #28
 8008e4c:	2102      	movs	r1, #2
 8008e4e:	4618      	mov	r0, r3
 8008e50:	f7f8 fb5a 	bl	8001508 <HAL_RCC_ClockConfig>
 8008e54:	4603      	mov	r3, r0
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d001      	beq.n	8008e5e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8008e5a:	f000 fa21 	bl	80092a0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8008e5e:	2301      	movs	r3, #1
 8008e60:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8008e62:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008e66:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8008e68:	1d3b      	adds	r3, r7, #4
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	f7f8 fce8 	bl	8001840 <HAL_RCCEx_PeriphCLKConfig>
 8008e70:	4603      	mov	r3, r0
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d001      	beq.n	8008e7a <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8008e76:	f000 fa13 	bl	80092a0 <Error_Handler>
  }
}
 8008e7a:	bf00      	nop
 8008e7c:	3758      	adds	r7, #88	; 0x58
 8008e7e:	46bd      	mov	sp, r7
 8008e80:	bd80      	pop	{r7, pc}
	...

08008e84 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8008e84:	b580      	push	{r7, lr}
 8008e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 8008e88:	4b0f      	ldr	r3, [pc, #60]	; (8008ec8 <MX_RTC_Init+0x44>)
 8008e8a:	4a10      	ldr	r2, [pc, #64]	; (8008ecc <MX_RTC_Init+0x48>)
 8008e8c:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8008e8e:	4b0e      	ldr	r3, [pc, #56]	; (8008ec8 <MX_RTC_Init+0x44>)
 8008e90:	f04f 32ff 	mov.w	r2, #4294967295
 8008e94:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 8008e96:	4b0c      	ldr	r3, [pc, #48]	; (8008ec8 <MX_RTC_Init+0x44>)
 8008e98:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008e9c:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8008e9e:	480a      	ldr	r0, [pc, #40]	; (8008ec8 <MX_RTC_Init+0x44>)
 8008ea0:	f7f8 fe6c 	bl	8001b7c <HAL_RTC_Init>
 8008ea4:	4603      	mov	r3, r0
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d001      	beq.n	8008eae <MX_RTC_Init+0x2a>
  {
    Error_Handler();
 8008eaa:	f000 f9f9 	bl	80092a0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_SET);
 8008eae:	2201      	movs	r2, #1
 8008eb0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008eb4:	4806      	ldr	r0, [pc, #24]	; (8008ed0 <MX_RTC_Init+0x4c>)
 8008eb6:	f7f8 f88e 	bl	8000fd6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8008eba:	2201      	movs	r2, #1
 8008ebc:	2104      	movs	r1, #4
 8008ebe:	4805      	ldr	r0, [pc, #20]	; (8008ed4 <MX_RTC_Init+0x50>)
 8008ec0:	f7f8 f889 	bl	8000fd6 <HAL_GPIO_WritePin>
  /* USER CODE END RTC_Init 2 */

}
 8008ec4:	bf00      	nop
 8008ec6:	bd80      	pop	{r7, pc}
 8008ec8:	20000e08 	.word	0x20000e08
 8008ecc:	40002800 	.word	0x40002800
 8008ed0:	40010800 	.word	0x40010800
 8008ed4:	40011400 	.word	0x40011400

08008ed8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8008ed8:	b580      	push	{r7, lr}
 8008eda:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8008edc:	4b11      	ldr	r3, [pc, #68]	; (8008f24 <MX_USART1_UART_Init+0x4c>)
 8008ede:	4a12      	ldr	r2, [pc, #72]	; (8008f28 <MX_USART1_UART_Init+0x50>)
 8008ee0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8008ee2:	4b10      	ldr	r3, [pc, #64]	; (8008f24 <MX_USART1_UART_Init+0x4c>)
 8008ee4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8008ee8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8008eea:	4b0e      	ldr	r3, [pc, #56]	; (8008f24 <MX_USART1_UART_Init+0x4c>)
 8008eec:	2200      	movs	r2, #0
 8008eee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8008ef0:	4b0c      	ldr	r3, [pc, #48]	; (8008f24 <MX_USART1_UART_Init+0x4c>)
 8008ef2:	2200      	movs	r2, #0
 8008ef4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8008ef6:	4b0b      	ldr	r3, [pc, #44]	; (8008f24 <MX_USART1_UART_Init+0x4c>)
 8008ef8:	2200      	movs	r2, #0
 8008efa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8008efc:	4b09      	ldr	r3, [pc, #36]	; (8008f24 <MX_USART1_UART_Init+0x4c>)
 8008efe:	220c      	movs	r2, #12
 8008f00:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008f02:	4b08      	ldr	r3, [pc, #32]	; (8008f24 <MX_USART1_UART_Init+0x4c>)
 8008f04:	2200      	movs	r2, #0
 8008f06:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8008f08:	4b06      	ldr	r3, [pc, #24]	; (8008f24 <MX_USART1_UART_Init+0x4c>)
 8008f0a:	2200      	movs	r2, #0
 8008f0c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8008f0e:	4805      	ldr	r0, [pc, #20]	; (8008f24 <MX_USART1_UART_Init+0x4c>)
 8008f10:	f7f8 ff50 	bl	8001db4 <HAL_UART_Init>
 8008f14:	4603      	mov	r3, r0
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d001      	beq.n	8008f1e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8008f1a:	f000 f9c1 	bl	80092a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8008f1e:	bf00      	nop
 8008f20:	bd80      	pop	{r7, pc}
 8008f22:	bf00      	nop
 8008f24:	20000dc8 	.word	0x20000dc8
 8008f28:	40013800 	.word	0x40013800

08008f2c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8008f2c:	b580      	push	{r7, lr}
 8008f2e:	b088      	sub	sp, #32
 8008f30:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008f32:	f107 0310 	add.w	r3, r7, #16
 8008f36:	2200      	movs	r2, #0
 8008f38:	601a      	str	r2, [r3, #0]
 8008f3a:	605a      	str	r2, [r3, #4]
 8008f3c:	609a      	str	r2, [r3, #8]
 8008f3e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8008f40:	4b3a      	ldr	r3, [pc, #232]	; (800902c <MX_GPIO_Init+0x100>)
 8008f42:	699b      	ldr	r3, [r3, #24]
 8008f44:	4a39      	ldr	r2, [pc, #228]	; (800902c <MX_GPIO_Init+0x100>)
 8008f46:	f043 0310 	orr.w	r3, r3, #16
 8008f4a:	6193      	str	r3, [r2, #24]
 8008f4c:	4b37      	ldr	r3, [pc, #220]	; (800902c <MX_GPIO_Init+0x100>)
 8008f4e:	699b      	ldr	r3, [r3, #24]
 8008f50:	f003 0310 	and.w	r3, r3, #16
 8008f54:	60fb      	str	r3, [r7, #12]
 8008f56:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8008f58:	4b34      	ldr	r3, [pc, #208]	; (800902c <MX_GPIO_Init+0x100>)
 8008f5a:	699b      	ldr	r3, [r3, #24]
 8008f5c:	4a33      	ldr	r2, [pc, #204]	; (800902c <MX_GPIO_Init+0x100>)
 8008f5e:	f043 0320 	orr.w	r3, r3, #32
 8008f62:	6193      	str	r3, [r2, #24]
 8008f64:	4b31      	ldr	r3, [pc, #196]	; (800902c <MX_GPIO_Init+0x100>)
 8008f66:	699b      	ldr	r3, [r3, #24]
 8008f68:	f003 0320 	and.w	r3, r3, #32
 8008f6c:	60bb      	str	r3, [r7, #8]
 8008f6e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8008f70:	4b2e      	ldr	r3, [pc, #184]	; (800902c <MX_GPIO_Init+0x100>)
 8008f72:	699b      	ldr	r3, [r3, #24]
 8008f74:	4a2d      	ldr	r2, [pc, #180]	; (800902c <MX_GPIO_Init+0x100>)
 8008f76:	f043 0304 	orr.w	r3, r3, #4
 8008f7a:	6193      	str	r3, [r2, #24]
 8008f7c:	4b2b      	ldr	r3, [pc, #172]	; (800902c <MX_GPIO_Init+0x100>)
 8008f7e:	699b      	ldr	r3, [r3, #24]
 8008f80:	f003 0304 	and.w	r3, r3, #4
 8008f84:	607b      	str	r3, [r7, #4]
 8008f86:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_SET);
 8008f88:	2201      	movs	r2, #1
 8008f8a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008f8e:	4828      	ldr	r0, [pc, #160]	; (8009030 <MX_GPIO_Init+0x104>)
 8008f90:	f7f8 f821 	bl	8000fd6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8008f94:	2201      	movs	r2, #1
 8008f96:	2104      	movs	r1, #4
 8008f98:	4826      	ldr	r0, [pc, #152]	; (8009034 <MX_GPIO_Init+0x108>)
 8008f9a:	f7f8 f81c 	bl	8000fd6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : KEY_WK_Pin */
  GPIO_InitStruct.Pin = KEY_WK_Pin;
 8008f9e:	2301      	movs	r3, #1
 8008fa0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8008fa2:	4b25      	ldr	r3, [pc, #148]	; (8009038 <MX_GPIO_Init+0x10c>)
 8008fa4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8008fa6:	2302      	movs	r3, #2
 8008fa8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(KEY_WK_GPIO_Port, &GPIO_InitStruct);
 8008faa:	f107 0310 	add.w	r3, r7, #16
 8008fae:	4619      	mov	r1, r3
 8008fb0:	481f      	ldr	r0, [pc, #124]	; (8009030 <MX_GPIO_Init+0x104>)
 8008fb2:	f7f7 fe8f 	bl	8000cd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : KEY0_Pin */
  GPIO_InitStruct.Pin = KEY0_Pin;
 8008fb6:	2320      	movs	r3, #32
 8008fb8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8008fba:	4b1f      	ldr	r3, [pc, #124]	; (8009038 <MX_GPIO_Init+0x10c>)
 8008fbc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008fbe:	2301      	movs	r3, #1
 8008fc0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(KEY0_GPIO_Port, &GPIO_InitStruct);
 8008fc2:	f107 0310 	add.w	r3, r7, #16
 8008fc6:	4619      	mov	r1, r3
 8008fc8:	481c      	ldr	r0, [pc, #112]	; (800903c <MX_GPIO_Init+0x110>)
 8008fca:	f7f7 fe83 	bl	8000cd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED0_Pin */
  GPIO_InitStruct.Pin = LED0_Pin;
 8008fce:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008fd2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008fd4:	2301      	movs	r3, #1
 8008fd6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008fd8:	2300      	movs	r3, #0
 8008fda:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008fdc:	2302      	movs	r3, #2
 8008fde:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED0_GPIO_Port, &GPIO_InitStruct);
 8008fe0:	f107 0310 	add.w	r3, r7, #16
 8008fe4:	4619      	mov	r1, r3
 8008fe6:	4812      	ldr	r0, [pc, #72]	; (8009030 <MX_GPIO_Init+0x104>)
 8008fe8:	f7f7 fe74 	bl	8000cd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : KEY1_Pin */
  GPIO_InitStruct.Pin = KEY1_Pin;
 8008fec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008ff0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8008ff2:	4b11      	ldr	r3, [pc, #68]	; (8009038 <MX_GPIO_Init+0x10c>)
 8008ff4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008ff6:	2301      	movs	r3, #1
 8008ff8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(KEY1_GPIO_Port, &GPIO_InitStruct);
 8008ffa:	f107 0310 	add.w	r3, r7, #16
 8008ffe:	4619      	mov	r1, r3
 8009000:	480b      	ldr	r0, [pc, #44]	; (8009030 <MX_GPIO_Init+0x104>)
 8009002:	f7f7 fe67 	bl	8000cd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8009006:	2304      	movs	r3, #4
 8009008:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800900a:	2301      	movs	r3, #1
 800900c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800900e:	2300      	movs	r3, #0
 8009010:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009012:	2302      	movs	r3, #2
 8009014:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8009016:	f107 0310 	add.w	r3, r7, #16
 800901a:	4619      	mov	r1, r3
 800901c:	4805      	ldr	r0, [pc, #20]	; (8009034 <MX_GPIO_Init+0x108>)
 800901e:	f7f7 fe59 	bl	8000cd4 <HAL_GPIO_Init>

}
 8009022:	bf00      	nop
 8009024:	3720      	adds	r7, #32
 8009026:	46bd      	mov	sp, r7
 8009028:	bd80      	pop	{r7, pc}
 800902a:	bf00      	nop
 800902c:	40021000 	.word	0x40021000
 8009030:	40010800 	.word	0x40010800
 8009034:	40011400 	.word	0x40011400
 8009038:	10110000 	.word	0x10110000
 800903c:	40011000 	.word	0x40011000

08009040 <draw_all_through_struct>:

/* USER CODE BEGIN 4 */
void draw_all_through_struct(){
 8009040:	b580      	push	{r7, lr}
 8009042:	b084      	sub	sp, #16
 8009044:	af04      	add	r7, sp, #16
	draw_play_all(interface.score,interface.life, interface.my_plane,interface.my_buttles,	interface.boss,	interface.enemy_planes, interface.enemy_buttles);
 8009046:	4b08      	ldr	r3, [pc, #32]	; (8009068 <draw_all_through_struct+0x28>)
 8009048:	6818      	ldr	r0, [r3, #0]
 800904a:	4b07      	ldr	r3, [pc, #28]	; (8009068 <draw_all_through_struct+0x28>)
 800904c:	68d9      	ldr	r1, [r3, #12]
 800904e:	4b07      	ldr	r3, [pc, #28]	; (800906c <draw_all_through_struct+0x2c>)
 8009050:	9302      	str	r3, [sp, #8]
 8009052:	4b07      	ldr	r3, [pc, #28]	; (8009070 <draw_all_through_struct+0x30>)
 8009054:	9301      	str	r3, [sp, #4]
 8009056:	4b07      	ldr	r3, [pc, #28]	; (8009074 <draw_all_through_struct+0x34>)
 8009058:	9300      	str	r3, [sp, #0]
 800905a:	4b07      	ldr	r3, [pc, #28]	; (8009078 <draw_all_through_struct+0x38>)
 800905c:	4a07      	ldr	r2, [pc, #28]	; (800907c <draw_all_through_struct+0x3c>)
 800905e:	f7fa f821 	bl	80030a4 <draw_play_all>
}
 8009062:	bf00      	nop
 8009064:	46bd      	mov	sp, r7
 8009066:	bd80      	pop	{r7, pc}
 8009068:	200000c8 	.word	0x200000c8
 800906c:	20000464 	.word	0x20000464
 8009070:	20000414 	.word	0x20000414
 8009074:	20000404 	.word	0x20000404
 8009078:	200000e0 	.word	0x200000e0
 800907c:	200000d8 	.word	0x200000d8

08009080 <all_init>:


void all_init(void){
 8009080:	b580      	push	{r7, lr}
 8009082:	af00      	add	r7, sp, #0
 	LCD_Init();
 8009084:	f7fb fb64 	bl	8004750 <LCD_Init>
	BACK_COLOR=GRAY;
 8009088:	4b0c      	ldr	r3, [pc, #48]	; (80090bc <all_init+0x3c>)
 800908a:	f248 4230 	movw	r2, #33840	; 0x8430
 800908e:	801a      	strh	r2, [r3, #0]

	POINT_COLOR=BLACK;//设置字体为黑�????
 8009090:	4b0b      	ldr	r3, [pc, #44]	; (80090c0 <all_init+0x40>)
 8009092:	2200      	movs	r2, #0
 8009094:	801a      	strh	r2, [r3, #0]
	LCD_Clear(GRAY);
 8009096:	f248 4030 	movw	r0, #33840	; 0x8430
 800909a:	f7ff fa87 	bl	80085ac <LCD_Clear>

	//初始界面初始�????
	draw_start_page();
 800909e:	f7f9 fde1 	bl	8002c64 <draw_start_page>
	KEY0_to_skip();
 80090a2:	f001 f87b 	bl	800a19c <KEY0_to_skip>
	LCD_Clear(GRAY);
 80090a6:	f248 4030 	movw	r0, #33840	; 0x8430
 80090aa:	f7ff fa7f 	bl	80085ac <LCD_Clear>

	//游玩界面数据初始�????
	init_interface_info();
 80090ae:	f000 f809 	bl	80090c4 <init_interface_info>

	init_play_interface();
 80090b2:	f7f9 fe05 	bl	8002cc0 <init_play_interface>
}
 80090b6:	bf00      	nop
 80090b8:	bd80      	pop	{r7, pc}
 80090ba:	bf00      	nop
 80090bc:	20000010 	.word	0x20000010
 80090c0:	200000a0 	.word	0x200000a0

080090c4 <init_interface_info>:



void init_interface_info(void){
 80090c4:	b480      	push	{r7}
 80090c6:	b083      	sub	sp, #12
 80090c8:	af00      	add	r7, sp, #0
	int i=0;
 80090ca:	2300      	movs	r3, #0
 80090cc:	607b      	str	r3, [r7, #4]

	interface.score = 0;
 80090ce:	4b3a      	ldr	r3, [pc, #232]	; (80091b8 <init_interface_info+0xf4>)
 80090d0:	2200      	movs	r2, #0
 80090d2:	601a      	str	r2, [r3, #0]
	interface.score_2 = 0;
 80090d4:	4b38      	ldr	r3, [pc, #224]	; (80091b8 <init_interface_info+0xf4>)
 80090d6:	2200      	movs	r2, #0
 80090d8:	605a      	str	r2, [r3, #4]
	interface.score_3 = 0;
 80090da:	4b37      	ldr	r3, [pc, #220]	; (80091b8 <init_interface_info+0xf4>)
 80090dc:	2200      	movs	r2, #0
 80090de:	609a      	str	r2, [r3, #8]

	interface.life = 3;
 80090e0:	4b35      	ldr	r3, [pc, #212]	; (80091b8 <init_interface_info+0xf4>)
 80090e2:	2203      	movs	r2, #3
 80090e4:	60da      	str	r2, [r3, #12]

	interface.my_plane[0] = 120;	interface.my_plane[1] = 290;
 80090e6:	4b34      	ldr	r3, [pc, #208]	; (80091b8 <init_interface_info+0xf4>)
 80090e8:	2278      	movs	r2, #120	; 0x78
 80090ea:	611a      	str	r2, [r3, #16]
 80090ec:	4b32      	ldr	r3, [pc, #200]	; (80091b8 <init_interface_info+0xf4>)
 80090ee:	f44f 7291 	mov.w	r2, #290	; 0x122
 80090f2:	615a      	str	r2, [r3, #20]

	for(i=0; i<my_buttle_max; i++){
 80090f4:	2300      	movs	r3, #0
 80090f6:	607b      	str	r3, [r7, #4]
 80090f8:	e00e      	b.n	8009118 <init_interface_info+0x54>
		interface.my_buttles[i][0] = 0;
 80090fa:	4a2f      	ldr	r2, [pc, #188]	; (80091b8 <init_interface_info+0xf4>)
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	3303      	adds	r3, #3
 8009100:	2100      	movs	r1, #0
 8009102:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
		interface.my_buttles[i][1] = 0;
 8009106:	4a2c      	ldr	r2, [pc, #176]	; (80091b8 <init_interface_info+0xf4>)
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	00db      	lsls	r3, r3, #3
 800910c:	4413      	add	r3, r2
 800910e:	2200      	movs	r2, #0
 8009110:	61da      	str	r2, [r3, #28]
	for(i=0; i<my_buttle_max; i++){
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	3301      	adds	r3, #1
 8009116:	607b      	str	r3, [r7, #4]
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	2b63      	cmp	r3, #99	; 0x63
 800911c:	dded      	ble.n	80090fa <init_interface_info+0x36>
	}

	interface.level = 0;
 800911e:	4b26      	ldr	r3, [pc, #152]	; (80091b8 <init_interface_info+0xf4>)
 8009120:	2200      	movs	r2, #0
 8009122:	f8c3 2338 	str.w	r2, [r3, #824]	; 0x338
	interface.boss[0] = 0;	 interface.boss[1] = 0;
 8009126:	4b24      	ldr	r3, [pc, #144]	; (80091b8 <init_interface_info+0xf4>)
 8009128:	2200      	movs	r2, #0
 800912a:	f8c3 233c 	str.w	r2, [r3, #828]	; 0x33c
 800912e:	4b22      	ldr	r3, [pc, #136]	; (80091b8 <init_interface_info+0xf4>)
 8009130:	2200      	movs	r2, #0
 8009132:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
	interface.boss_life = 100;
 8009136:	4b20      	ldr	r3, [pc, #128]	; (80091b8 <init_interface_info+0xf4>)
 8009138:	2264      	movs	r2, #100	; 0x64
 800913a:	f8c3 2344 	str.w	r2, [r3, #836]	; 0x344
	interface.come_boss = 1;
 800913e:	4b1e      	ldr	r3, [pc, #120]	; (80091b8 <init_interface_info+0xf4>)
 8009140:	2201      	movs	r2, #1
 8009142:	f8c3 2cfc 	str.w	r2, [r3, #3324]	; 0xcfc
	interface.pace = 2;
 8009146:	4b1c      	ldr	r3, [pc, #112]	; (80091b8 <init_interface_info+0xf4>)
 8009148:	2202      	movs	r2, #2
 800914a:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348


	for(i=0; i<enemy_plane_max; i++){
 800914e:	2300      	movs	r3, #0
 8009150:	607b      	str	r3, [r7, #4]
 8009152:	e010      	b.n	8009176 <init_interface_info+0xb2>
		interface.enemy_planes[i][0] = 0;
 8009154:	4a18      	ldr	r2, [pc, #96]	; (80091b8 <init_interface_info+0xf4>)
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	3369      	adds	r3, #105	; 0x69
 800915a:	00db      	lsls	r3, r3, #3
 800915c:	4413      	add	r3, r2
 800915e:	2200      	movs	r2, #0
 8009160:	605a      	str	r2, [r3, #4]
		interface.enemy_planes[i][1] = 0;
 8009162:	4a15      	ldr	r2, [pc, #84]	; (80091b8 <init_interface_info+0xf4>)
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	00db      	lsls	r3, r3, #3
 8009168:	4413      	add	r3, r2
 800916a:	2200      	movs	r2, #0
 800916c:	f8c3 2350 	str.w	r2, [r3, #848]	; 0x350
	for(i=0; i<enemy_plane_max; i++){
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	3301      	adds	r3, #1
 8009174:	607b      	str	r3, [r7, #4]
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	2b09      	cmp	r3, #9
 800917a:	ddeb      	ble.n	8009154 <init_interface_info+0x90>
	}

	for(i=0; i<enemy_buttle_max; i++){
 800917c:	2300      	movs	r3, #0
 800917e:	607b      	str	r3, [r7, #4]
 8009180:	e010      	b.n	80091a4 <init_interface_info+0xe0>
		interface.enemy_buttles[i][0] = 0;
 8009182:	4a0d      	ldr	r2, [pc, #52]	; (80091b8 <init_interface_info+0xf4>)
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	3373      	adds	r3, #115	; 0x73
 8009188:	00db      	lsls	r3, r3, #3
 800918a:	4413      	add	r3, r2
 800918c:	2200      	movs	r2, #0
 800918e:	605a      	str	r2, [r3, #4]
		interface.enemy_buttles[i][1] = 0;
 8009190:	4a09      	ldr	r2, [pc, #36]	; (80091b8 <init_interface_info+0xf4>)
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	00db      	lsls	r3, r3, #3
 8009196:	4413      	add	r3, r2
 8009198:	2200      	movs	r2, #0
 800919a:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
	for(i=0; i<enemy_buttle_max; i++){
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	3301      	adds	r3, #1
 80091a2:	607b      	str	r3, [r7, #4]
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80091aa:	dbea      	blt.n	8009182 <init_interface_info+0xbe>
	}
}
 80091ac:	bf00      	nop
 80091ae:	370c      	adds	r7, #12
 80091b0:	46bd      	mov	sp, r7
 80091b2:	bc80      	pop	{r7}
 80091b4:	4770      	bx	lr
 80091b6:	bf00      	nop
 80091b8:	200000c8 	.word	0x200000c8

080091bc <init_interface_info_second_time>:

void init_interface_info_second_time(void){
 80091bc:	b480      	push	{r7}
 80091be:	b083      	sub	sp, #12
 80091c0:	af00      	add	r7, sp, #0
	int i=0;
 80091c2:	2300      	movs	r3, #0
 80091c4:	607b      	str	r3, [r7, #4]

	interface.life = 3;
 80091c6:	4b35      	ldr	r3, [pc, #212]	; (800929c <init_interface_info_second_time+0xe0>)
 80091c8:	2203      	movs	r2, #3
 80091ca:	60da      	str	r2, [r3, #12]

	interface.my_plane[0] = 120;	interface.my_plane[1] = 290;
 80091cc:	4b33      	ldr	r3, [pc, #204]	; (800929c <init_interface_info_second_time+0xe0>)
 80091ce:	2278      	movs	r2, #120	; 0x78
 80091d0:	611a      	str	r2, [r3, #16]
 80091d2:	4b32      	ldr	r3, [pc, #200]	; (800929c <init_interface_info_second_time+0xe0>)
 80091d4:	f44f 7291 	mov.w	r2, #290	; 0x122
 80091d8:	615a      	str	r2, [r3, #20]

	for(i=0; i<my_buttle_max; i++){
 80091da:	2300      	movs	r3, #0
 80091dc:	607b      	str	r3, [r7, #4]
 80091de:	e00e      	b.n	80091fe <init_interface_info_second_time+0x42>
		interface.my_buttles[i][0] = 0;
 80091e0:	4a2e      	ldr	r2, [pc, #184]	; (800929c <init_interface_info_second_time+0xe0>)
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	3303      	adds	r3, #3
 80091e6:	2100      	movs	r1, #0
 80091e8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
		interface.my_buttles[i][1] = 0;
 80091ec:	4a2b      	ldr	r2, [pc, #172]	; (800929c <init_interface_info_second_time+0xe0>)
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	00db      	lsls	r3, r3, #3
 80091f2:	4413      	add	r3, r2
 80091f4:	2200      	movs	r2, #0
 80091f6:	61da      	str	r2, [r3, #28]
	for(i=0; i<my_buttle_max; i++){
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	3301      	adds	r3, #1
 80091fc:	607b      	str	r3, [r7, #4]
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	2b63      	cmp	r3, #99	; 0x63
 8009202:	dded      	ble.n	80091e0 <init_interface_info_second_time+0x24>
	}

	interface.level = 1;
 8009204:	4b25      	ldr	r3, [pc, #148]	; (800929c <init_interface_info_second_time+0xe0>)
 8009206:	2201      	movs	r2, #1
 8009208:	f8c3 2338 	str.w	r2, [r3, #824]	; 0x338
	interface.boss[0] = 0;
 800920c:	4b23      	ldr	r3, [pc, #140]	; (800929c <init_interface_info_second_time+0xe0>)
 800920e:	2200      	movs	r2, #0
 8009210:	f8c3 233c 	str.w	r2, [r3, #828]	; 0x33c
	interface.boss[1] = 0;
 8009214:	4b21      	ldr	r3, [pc, #132]	; (800929c <init_interface_info_second_time+0xe0>)
 8009216:	2200      	movs	r2, #0
 8009218:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
	interface.boss_life = 100;
 800921c:	4b1f      	ldr	r3, [pc, #124]	; (800929c <init_interface_info_second_time+0xe0>)
 800921e:	2264      	movs	r2, #100	; 0x64
 8009220:	f8c3 2344 	str.w	r2, [r3, #836]	; 0x344
	interface.pace = 2;
 8009224:	4b1d      	ldr	r3, [pc, #116]	; (800929c <init_interface_info_second_time+0xe0>)
 8009226:	2202      	movs	r2, #2
 8009228:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
	interface.come_boss = 1;
 800922c:	4b1b      	ldr	r3, [pc, #108]	; (800929c <init_interface_info_second_time+0xe0>)
 800922e:	2201      	movs	r2, #1
 8009230:	f8c3 2cfc 	str.w	r2, [r3, #3324]	; 0xcfc

	for(i=0; i<enemy_plane_max; i++){
 8009234:	2300      	movs	r3, #0
 8009236:	607b      	str	r3, [r7, #4]
 8009238:	e010      	b.n	800925c <init_interface_info_second_time+0xa0>
		interface.enemy_planes[i][0] = 0;
 800923a:	4a18      	ldr	r2, [pc, #96]	; (800929c <init_interface_info_second_time+0xe0>)
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	3369      	adds	r3, #105	; 0x69
 8009240:	00db      	lsls	r3, r3, #3
 8009242:	4413      	add	r3, r2
 8009244:	2200      	movs	r2, #0
 8009246:	605a      	str	r2, [r3, #4]
		interface.enemy_planes[i][1] = 0;
 8009248:	4a14      	ldr	r2, [pc, #80]	; (800929c <init_interface_info_second_time+0xe0>)
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	00db      	lsls	r3, r3, #3
 800924e:	4413      	add	r3, r2
 8009250:	2200      	movs	r2, #0
 8009252:	f8c3 2350 	str.w	r2, [r3, #848]	; 0x350
	for(i=0; i<enemy_plane_max; i++){
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	3301      	adds	r3, #1
 800925a:	607b      	str	r3, [r7, #4]
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	2b09      	cmp	r3, #9
 8009260:	ddeb      	ble.n	800923a <init_interface_info_second_time+0x7e>
	}

	for(i=0; i<enemy_buttle_max; i++){
 8009262:	2300      	movs	r3, #0
 8009264:	607b      	str	r3, [r7, #4]
 8009266:	e010      	b.n	800928a <init_interface_info_second_time+0xce>
		interface.enemy_buttles[i][0] = 0;
 8009268:	4a0c      	ldr	r2, [pc, #48]	; (800929c <init_interface_info_second_time+0xe0>)
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	3373      	adds	r3, #115	; 0x73
 800926e:	00db      	lsls	r3, r3, #3
 8009270:	4413      	add	r3, r2
 8009272:	2200      	movs	r2, #0
 8009274:	605a      	str	r2, [r3, #4]
		interface.enemy_buttles[i][1] = 0;
 8009276:	4a09      	ldr	r2, [pc, #36]	; (800929c <init_interface_info_second_time+0xe0>)
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	00db      	lsls	r3, r3, #3
 800927c:	4413      	add	r3, r2
 800927e:	2200      	movs	r2, #0
 8009280:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
	for(i=0; i<enemy_buttle_max; i++){
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	3301      	adds	r3, #1
 8009288:	607b      	str	r3, [r7, #4]
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8009290:	dbea      	blt.n	8009268 <init_interface_info_second_time+0xac>
	}
}
 8009292:	bf00      	nop
 8009294:	370c      	adds	r7, #12
 8009296:	46bd      	mov	sp, r7
 8009298:	bc80      	pop	{r7}
 800929a:	4770      	bx	lr
 800929c:	200000c8 	.word	0x200000c8

080092a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80092a0:	b480      	push	{r7}
 80092a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80092a4:	bf00      	nop
 80092a6:	46bd      	mov	sp, r7
 80092a8:	bc80      	pop	{r7}
 80092aa:	4770      	bx	lr

080092ac <check_overlap>:
int right_limit = 238;
int up_limit = 42;
int down_limit = 318;

// 防止敌方飞机生成重叠
int check_overlap(int x, int y, int bound, int enemy_planes[10][2]){
 80092ac:	b480      	push	{r7}
 80092ae:	b087      	sub	sp, #28
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	60f8      	str	r0, [r7, #12]
 80092b4:	60b9      	str	r1, [r7, #8]
 80092b6:	607a      	str	r2, [r7, #4]
 80092b8:	603b      	str	r3, [r7, #0]
	int i = 0;
 80092ba:	2300      	movs	r3, #0
 80092bc:	617b      	str	r3, [r7, #20]
	for(i = 0; i < bound*3; i++){
 80092be:	2300      	movs	r3, #0
 80092c0:	617b      	str	r3, [r7, #20]
 80092c2:	e031      	b.n	8009328 <check_overlap+0x7c>
		if(enemy_planes[i][0] != 0 && (abs(enemy_planes[i][0]-x) <= 30 && abs(enemy_planes[i][1]-y) <= 30)){
 80092c4:	697b      	ldr	r3, [r7, #20]
 80092c6:	00db      	lsls	r3, r3, #3
 80092c8:	683a      	ldr	r2, [r7, #0]
 80092ca:	4413      	add	r3, r2
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d027      	beq.n	8009322 <check_overlap+0x76>
 80092d2:	697b      	ldr	r3, [r7, #20]
 80092d4:	00db      	lsls	r3, r3, #3
 80092d6:	683a      	ldr	r2, [r7, #0]
 80092d8:	4413      	add	r3, r2
 80092da:	681a      	ldr	r2, [r3, #0]
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	1ad3      	subs	r3, r2, r3
 80092e0:	f113 0f1e 	cmn.w	r3, #30
 80092e4:	db1d      	blt.n	8009322 <check_overlap+0x76>
 80092e6:	697b      	ldr	r3, [r7, #20]
 80092e8:	00db      	lsls	r3, r3, #3
 80092ea:	683a      	ldr	r2, [r7, #0]
 80092ec:	4413      	add	r3, r2
 80092ee:	681a      	ldr	r2, [r3, #0]
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	1ad3      	subs	r3, r2, r3
 80092f4:	2b1e      	cmp	r3, #30
 80092f6:	dc14      	bgt.n	8009322 <check_overlap+0x76>
 80092f8:	697b      	ldr	r3, [r7, #20]
 80092fa:	00db      	lsls	r3, r3, #3
 80092fc:	683a      	ldr	r2, [r7, #0]
 80092fe:	4413      	add	r3, r2
 8009300:	685a      	ldr	r2, [r3, #4]
 8009302:	68bb      	ldr	r3, [r7, #8]
 8009304:	1ad3      	subs	r3, r2, r3
 8009306:	f113 0f1e 	cmn.w	r3, #30
 800930a:	db0a      	blt.n	8009322 <check_overlap+0x76>
 800930c:	697b      	ldr	r3, [r7, #20]
 800930e:	00db      	lsls	r3, r3, #3
 8009310:	683a      	ldr	r2, [r7, #0]
 8009312:	4413      	add	r3, r2
 8009314:	685a      	ldr	r2, [r3, #4]
 8009316:	68bb      	ldr	r3, [r7, #8]
 8009318:	1ad3      	subs	r3, r2, r3
 800931a:	2b1e      	cmp	r3, #30
 800931c:	dc01      	bgt.n	8009322 <check_overlap+0x76>

			return 1;
 800931e:	2301      	movs	r3, #1
 8009320:	e00a      	b.n	8009338 <check_overlap+0x8c>
	for(i = 0; i < bound*3; i++){
 8009322:	697b      	ldr	r3, [r7, #20]
 8009324:	3301      	adds	r3, #1
 8009326:	617b      	str	r3, [r7, #20]
 8009328:	687a      	ldr	r2, [r7, #4]
 800932a:	4613      	mov	r3, r2
 800932c:	005b      	lsls	r3, r3, #1
 800932e:	4413      	add	r3, r2
 8009330:	697a      	ldr	r2, [r7, #20]
 8009332:	429a      	cmp	r2, r3
 8009334:	dbc6      	blt.n	80092c4 <check_overlap+0x18>
		}
	}
	return 0;
 8009336:	2300      	movs	r3, #0
}
 8009338:	4618      	mov	r0, r3
 800933a:	371c      	adds	r7, #28
 800933c:	46bd      	mov	sp, r7
 800933e:	bc80      	pop	{r7}
 8009340:	4770      	bx	lr
	...

08009344 <generate_enemy_planes>:

//敌人数 <= 关卡 * 3,
//一次只生成一个飞机
//生成飞机概率 => 对应关卡
void generate_enemy_planes(int level, int enemy_planes[10][2]){
 8009344:	b580      	push	{r7, lr}
 8009346:	b086      	sub	sp, #24
 8009348:	af00      	add	r7, sp, #0
 800934a:	6078      	str	r0, [r7, #4]
 800934c:	6039      	str	r1, [r7, #0]
	int i = 0;
 800934e:	2300      	movs	r3, #0
 8009350:	617b      	str	r3, [r7, #20]


	for(i=0; i<10; i++){
 8009352:	2300      	movs	r3, #0
 8009354:	617b      	str	r3, [r7, #20]
 8009356:	e065      	b.n	8009424 <generate_enemy_planes+0xe0>
		if(enemy_planes[i][0] == 0){
 8009358:	697b      	ldr	r3, [r7, #20]
 800935a:	00db      	lsls	r3, r3, #3
 800935c:	683a      	ldr	r2, [r7, #0]
 800935e:	4413      	add	r3, r2
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	2b00      	cmp	r3, #0
 8009364:	d15b      	bne.n	800941e <generate_enemy_planes+0xda>
			if(i < level*3){
 8009366:	687a      	ldr	r2, [r7, #4]
 8009368:	4613      	mov	r3, r2
 800936a:	005b      	lsls	r3, r3, #1
 800936c:	4413      	add	r3, r2
 800936e:	697a      	ldr	r2, [r7, #20]
 8009370:	429a      	cmp	r2, r3
 8009372:	da5b      	bge.n	800942c <generate_enemy_planes+0xe8>
				if(rand()%100 < level + 3){
 8009374:	f000 ff7c 	bl	800a270 <rand>
 8009378:	4602      	mov	r2, r0
 800937a:	4b2f      	ldr	r3, [pc, #188]	; (8009438 <generate_enemy_planes+0xf4>)
 800937c:	fb83 1302 	smull	r1, r3, r3, r2
 8009380:	1159      	asrs	r1, r3, #5
 8009382:	17d3      	asrs	r3, r2, #31
 8009384:	1acb      	subs	r3, r1, r3
 8009386:	2164      	movs	r1, #100	; 0x64
 8009388:	fb01 f303 	mul.w	r3, r1, r3
 800938c:	1ad3      	subs	r3, r2, r3
 800938e:	687a      	ldr	r2, [r7, #4]
 8009390:	3203      	adds	r2, #3
 8009392:	4293      	cmp	r3, r2
 8009394:	da4a      	bge.n	800942c <generate_enemy_planes+0xe8>
					int x = rand()%210 + 14;
 8009396:	f000 ff6b 	bl	800a270 <rand>
 800939a:	4603      	mov	r3, r0
 800939c:	4a27      	ldr	r2, [pc, #156]	; (800943c <generate_enemy_planes+0xf8>)
 800939e:	fb82 1203 	smull	r1, r2, r2, r3
 80093a2:	441a      	add	r2, r3
 80093a4:	11d1      	asrs	r1, r2, #7
 80093a6:	17da      	asrs	r2, r3, #31
 80093a8:	1a8a      	subs	r2, r1, r2
 80093aa:	21d2      	movs	r1, #210	; 0xd2
 80093ac:	fb01 f202 	mul.w	r2, r1, r2
 80093b0:	1a9a      	subs	r2, r3, r2
 80093b2:	f102 030e 	add.w	r3, r2, #14
 80093b6:	613b      	str	r3, [r7, #16]
					int y = 61;
 80093b8:	233d      	movs	r3, #61	; 0x3d
 80093ba:	60bb      	str	r3, [r7, #8]
					int count = 0;
 80093bc:	2300      	movs	r3, #0
 80093be:	60fb      	str	r3, [r7, #12]
					while(check_overlap(x, y, level+1, enemy_planes) == 1 && count < 5){
 80093c0:	e013      	b.n	80093ea <generate_enemy_planes+0xa6>
						x = rand()%210 + 14;
 80093c2:	f000 ff55 	bl	800a270 <rand>
 80093c6:	4603      	mov	r3, r0
 80093c8:	4a1c      	ldr	r2, [pc, #112]	; (800943c <generate_enemy_planes+0xf8>)
 80093ca:	fb82 1203 	smull	r1, r2, r2, r3
 80093ce:	441a      	add	r2, r3
 80093d0:	11d1      	asrs	r1, r2, #7
 80093d2:	17da      	asrs	r2, r3, #31
 80093d4:	1a8a      	subs	r2, r1, r2
 80093d6:	21d2      	movs	r1, #210	; 0xd2
 80093d8:	fb01 f202 	mul.w	r2, r1, r2
 80093dc:	1a9a      	subs	r2, r3, r2
 80093de:	f102 030e 	add.w	r3, r2, #14
 80093e2:	613b      	str	r3, [r7, #16]
						count++;
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	3301      	adds	r3, #1
 80093e8:	60fb      	str	r3, [r7, #12]
					while(check_overlap(x, y, level+1, enemy_planes) == 1 && count < 5){
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	1c5a      	adds	r2, r3, #1
 80093ee:	683b      	ldr	r3, [r7, #0]
 80093f0:	68b9      	ldr	r1, [r7, #8]
 80093f2:	6938      	ldr	r0, [r7, #16]
 80093f4:	f7ff ff5a 	bl	80092ac <check_overlap>
 80093f8:	4603      	mov	r3, r0
 80093fa:	2b01      	cmp	r3, #1
 80093fc:	d102      	bne.n	8009404 <generate_enemy_planes+0xc0>
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	2b04      	cmp	r3, #4
 8009402:	ddde      	ble.n	80093c2 <generate_enemy_planes+0x7e>
					}
					enemy_planes[i][0] = x;
 8009404:	697b      	ldr	r3, [r7, #20]
 8009406:	00db      	lsls	r3, r3, #3
 8009408:	683a      	ldr	r2, [r7, #0]
 800940a:	4413      	add	r3, r2
 800940c:	693a      	ldr	r2, [r7, #16]
 800940e:	601a      	str	r2, [r3, #0]
					enemy_planes[i][1] = y;
 8009410:	697b      	ldr	r3, [r7, #20]
 8009412:	00db      	lsls	r3, r3, #3
 8009414:	683a      	ldr	r2, [r7, #0]
 8009416:	4413      	add	r3, r2
 8009418:	68ba      	ldr	r2, [r7, #8]
 800941a:	605a      	str	r2, [r3, #4]
				}
			}
			break;
 800941c:	e006      	b.n	800942c <generate_enemy_planes+0xe8>
	for(i=0; i<10; i++){
 800941e:	697b      	ldr	r3, [r7, #20]
 8009420:	3301      	adds	r3, #1
 8009422:	617b      	str	r3, [r7, #20]
 8009424:	697b      	ldr	r3, [r7, #20]
 8009426:	2b09      	cmp	r3, #9
 8009428:	dd96      	ble.n	8009358 <generate_enemy_planes+0x14>
		}
	}
}
 800942a:	e000      	b.n	800942e <generate_enemy_planes+0xea>
			break;
 800942c:	bf00      	nop
}
 800942e:	bf00      	nop
 8009430:	3718      	adds	r7, #24
 8009432:	46bd      	mov	sp, r7
 8009434:	bd80      	pop	{r7, pc}
 8009436:	bf00      	nop
 8009438:	51eb851f 	.word	0x51eb851f
 800943c:	9c09c09d 	.word	0x9c09c09d

08009440 <switch_my_act>:



void switch_my_act(int my_plane[2],int my_buttles[100][2]){
 8009440:	b590      	push	{r4, r7, lr}
 8009442:	b087      	sub	sp, #28
 8009444:	af02      	add	r7, sp, #8
 8009446:	6078      	str	r0, [r7, #4]
 8009448:	6039      	str	r1, [r7, #0]
	int i=0;
 800944a:	2300      	movs	r3, #0
 800944c:	60fb      	str	r3, [r7, #12]
	
	if(HAL_GPIO_ReadPin(KEY1_GPIO_Port, KEY1_Pin) == GPIO_PIN_RESET){
 800944e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009452:	4855      	ldr	r0, [pc, #340]	; (80095a8 <switch_my_act+0x168>)
 8009454:	f7f7 fda8 	bl	8000fa8 <HAL_GPIO_ReadPin>
 8009458:	4603      	mov	r3, r0
 800945a:	2b00      	cmp	r3, #0
 800945c:	d129      	bne.n	80094b2 <switch_my_act+0x72>
		LCD_Fill(my_plane[0]-14,my_plane[1]-14,	my_plane[0]+14,my_plane[1]+14,BACK_COLOR);
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	b29b      	uxth	r3, r3
 8009464:	3b0e      	subs	r3, #14
 8009466:	b298      	uxth	r0, r3
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	3304      	adds	r3, #4
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	b29b      	uxth	r3, r3
 8009470:	3b0e      	subs	r3, #14
 8009472:	b299      	uxth	r1, r3
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	b29b      	uxth	r3, r3
 800947a:	330e      	adds	r3, #14
 800947c:	b29a      	uxth	r2, r3
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	3304      	adds	r3, #4
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	b29b      	uxth	r3, r3
 8009486:	330e      	adds	r3, #14
 8009488:	b29c      	uxth	r4, r3
 800948a:	4b48      	ldr	r3, [pc, #288]	; (80095ac <switch_my_act+0x16c>)
 800948c:	881b      	ldrh	r3, [r3, #0]
 800948e:	9300      	str	r3, [sp, #0]
 8009490:	4623      	mov	r3, r4
 8009492:	f7ff f8ed 	bl	8008670 <LCD_Fill>
		if(my_plane[0]-3 > left_limit + 14){
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	1eda      	subs	r2, r3, #3
 800949c:	4b44      	ldr	r3, [pc, #272]	; (80095b0 <switch_my_act+0x170>)
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	330e      	adds	r3, #14
 80094a2:	429a      	cmp	r2, r3
 80094a4:	dd7b      	ble.n	800959e <switch_my_act+0x15e>
			my_plane[0] = my_plane[0]-3;
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	1eda      	subs	r2, r3, #3
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	601a      	str	r2, [r3, #0]
				my_buttles[i][1] = my_plane[1]-15;
				break;
			}
		}
	}
}
 80094b0:	e075      	b.n	800959e <switch_my_act+0x15e>
	}else if(HAL_GPIO_ReadPin(KEY0_GPIO_Port, KEY0_Pin) == GPIO_PIN_RESET){
 80094b2:	2120      	movs	r1, #32
 80094b4:	483f      	ldr	r0, [pc, #252]	; (80095b4 <switch_my_act+0x174>)
 80094b6:	f7f7 fd77 	bl	8000fa8 <HAL_GPIO_ReadPin>
 80094ba:	4603      	mov	r3, r0
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d129      	bne.n	8009514 <switch_my_act+0xd4>
		LCD_Fill(my_plane[0]-14,my_plane[1]-14,	my_plane[0]+14,my_plane[1]+14,BACK_COLOR);
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	b29b      	uxth	r3, r3
 80094c6:	3b0e      	subs	r3, #14
 80094c8:	b298      	uxth	r0, r3
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	3304      	adds	r3, #4
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	b29b      	uxth	r3, r3
 80094d2:	3b0e      	subs	r3, #14
 80094d4:	b299      	uxth	r1, r3
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	b29b      	uxth	r3, r3
 80094dc:	330e      	adds	r3, #14
 80094de:	b29a      	uxth	r2, r3
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	3304      	adds	r3, #4
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	b29b      	uxth	r3, r3
 80094e8:	330e      	adds	r3, #14
 80094ea:	b29c      	uxth	r4, r3
 80094ec:	4b2f      	ldr	r3, [pc, #188]	; (80095ac <switch_my_act+0x16c>)
 80094ee:	881b      	ldrh	r3, [r3, #0]
 80094f0:	9300      	str	r3, [sp, #0]
 80094f2:	4623      	mov	r3, r4
 80094f4:	f7ff f8bc 	bl	8008670 <LCD_Fill>
		if(my_plane[0]+3 < right_limit -14){
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	1cda      	adds	r2, r3, #3
 80094fe:	4b2e      	ldr	r3, [pc, #184]	; (80095b8 <switch_my_act+0x178>)
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	3b0e      	subs	r3, #14
 8009504:	429a      	cmp	r2, r3
 8009506:	da4a      	bge.n	800959e <switch_my_act+0x15e>
			my_plane[0] = my_plane[0]+3;
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	1cda      	adds	r2, r3, #3
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	601a      	str	r2, [r3, #0]
}
 8009512:	e044      	b.n	800959e <switch_my_act+0x15e>
	}else if(HAL_GPIO_ReadPin(KEY_WK_GPIO_Port, KEY_WK_Pin) == GPIO_PIN_SET){
 8009514:	2101      	movs	r1, #1
 8009516:	4824      	ldr	r0, [pc, #144]	; (80095a8 <switch_my_act+0x168>)
 8009518:	f7f7 fd46 	bl	8000fa8 <HAL_GPIO_ReadPin>
 800951c:	4603      	mov	r3, r0
 800951e:	2b01      	cmp	r3, #1
 8009520:	d13d      	bne.n	800959e <switch_my_act+0x15e>
		LCD_Fill(my_plane[0]-14,my_plane[1]-14,	my_plane[0]+14,my_plane[1]+14,BACK_COLOR);
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	b29b      	uxth	r3, r3
 8009528:	3b0e      	subs	r3, #14
 800952a:	b298      	uxth	r0, r3
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	3304      	adds	r3, #4
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	b29b      	uxth	r3, r3
 8009534:	3b0e      	subs	r3, #14
 8009536:	b299      	uxth	r1, r3
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	b29b      	uxth	r3, r3
 800953e:	330e      	adds	r3, #14
 8009540:	b29a      	uxth	r2, r3
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	3304      	adds	r3, #4
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	b29b      	uxth	r3, r3
 800954a:	330e      	adds	r3, #14
 800954c:	b29c      	uxth	r4, r3
 800954e:	4b17      	ldr	r3, [pc, #92]	; (80095ac <switch_my_act+0x16c>)
 8009550:	881b      	ldrh	r3, [r3, #0]
 8009552:	9300      	str	r3, [sp, #0]
 8009554:	4623      	mov	r3, r4
 8009556:	f7ff f88b 	bl	8008670 <LCD_Fill>
		for(i=0; i<100; i++){
 800955a:	2300      	movs	r3, #0
 800955c:	60fb      	str	r3, [r7, #12]
 800955e:	e01b      	b.n	8009598 <switch_my_act+0x158>
			if(my_buttles[i][0] == 0){
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	00db      	lsls	r3, r3, #3
 8009564:	683a      	ldr	r2, [r7, #0]
 8009566:	4413      	add	r3, r2
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	2b00      	cmp	r3, #0
 800956c:	d111      	bne.n	8009592 <switch_my_act+0x152>
				my_buttles[i][0] = my_plane[0];
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	00db      	lsls	r3, r3, #3
 8009572:	683a      	ldr	r2, [r7, #0]
 8009574:	4413      	add	r3, r2
 8009576:	687a      	ldr	r2, [r7, #4]
 8009578:	6812      	ldr	r2, [r2, #0]
 800957a:	601a      	str	r2, [r3, #0]
				my_buttles[i][1] = my_plane[1]-15;
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	3304      	adds	r3, #4
 8009580:	681a      	ldr	r2, [r3, #0]
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	00db      	lsls	r3, r3, #3
 8009586:	6839      	ldr	r1, [r7, #0]
 8009588:	440b      	add	r3, r1
 800958a:	3a0f      	subs	r2, #15
 800958c:	605a      	str	r2, [r3, #4]
				break;
 800958e:	bf00      	nop
}
 8009590:	e005      	b.n	800959e <switch_my_act+0x15e>
		for(i=0; i<100; i++){
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	3301      	adds	r3, #1
 8009596:	60fb      	str	r3, [r7, #12]
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	2b63      	cmp	r3, #99	; 0x63
 800959c:	dde0      	ble.n	8009560 <switch_my_act+0x120>
}
 800959e:	bf00      	nop
 80095a0:	3714      	adds	r7, #20
 80095a2:	46bd      	mov	sp, r7
 80095a4:	bd90      	pop	{r4, r7, pc}
 80095a6:	bf00      	nop
 80095a8:	40010800 	.word	0x40010800
 80095ac:	20000010 	.word	0x20000010
 80095b0:	20000014 	.word	0x20000014
 80095b4:	40011000 	.word	0x40011000
 80095b8:	20000018 	.word	0x20000018

080095bc <update_my_buttles>:

	

void update_my_buttles(int my_buttles[100][2]){
 80095bc:	b590      	push	{r4, r7, lr}
 80095be:	b087      	sub	sp, #28
 80095c0:	af02      	add	r7, sp, #8
 80095c2:	6078      	str	r0, [r7, #4]
	int i=0;
 80095c4:	2300      	movs	r3, #0
 80095c6:	60fb      	str	r3, [r7, #12]
	
	for(i=0; i<100; i++){
 80095c8:	2300      	movs	r3, #0
 80095ca:	60fb      	str	r3, [r7, #12]
 80095cc:	e04e      	b.n	800966c <update_my_buttles+0xb0>
		if(my_buttles[i][0] != 0){
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	00db      	lsls	r3, r3, #3
 80095d2:	687a      	ldr	r2, [r7, #4]
 80095d4:	4413      	add	r3, r2
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d044      	beq.n	8009666 <update_my_buttles+0xaa>
			//���֮ǰ����
			LCD_Fill(my_buttles[i][0]-1,my_buttles[i][1]-1,	my_buttles[i][0]+1,my_buttles[i][1]+1,BACK_COLOR);
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	00db      	lsls	r3, r3, #3
 80095e0:	687a      	ldr	r2, [r7, #4]
 80095e2:	4413      	add	r3, r2
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	b29b      	uxth	r3, r3
 80095e8:	3b01      	subs	r3, #1
 80095ea:	b298      	uxth	r0, r3
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	00db      	lsls	r3, r3, #3
 80095f0:	687a      	ldr	r2, [r7, #4]
 80095f2:	4413      	add	r3, r2
 80095f4:	685b      	ldr	r3, [r3, #4]
 80095f6:	b29b      	uxth	r3, r3
 80095f8:	3b01      	subs	r3, #1
 80095fa:	b299      	uxth	r1, r3
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	00db      	lsls	r3, r3, #3
 8009600:	687a      	ldr	r2, [r7, #4]
 8009602:	4413      	add	r3, r2
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	b29b      	uxth	r3, r3
 8009608:	3301      	adds	r3, #1
 800960a:	b29c      	uxth	r4, r3
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	00db      	lsls	r3, r3, #3
 8009610:	687a      	ldr	r2, [r7, #4]
 8009612:	4413      	add	r3, r2
 8009614:	685b      	ldr	r3, [r3, #4]
 8009616:	b29b      	uxth	r3, r3
 8009618:	3301      	adds	r3, #1
 800961a:	b29a      	uxth	r2, r3
 800961c:	4b17      	ldr	r3, [pc, #92]	; (800967c <update_my_buttles+0xc0>)
 800961e:	881b      	ldrh	r3, [r3, #0]
 8009620:	9300      	str	r3, [sp, #0]
 8009622:	4613      	mov	r3, r2
 8009624:	4622      	mov	r2, r4
 8009626:	f7ff f823 	bl	8008670 <LCD_Fill>
			
			my_buttles[i][1] = my_buttles[i][1] - 3;
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	00db      	lsls	r3, r3, #3
 800962e:	687a      	ldr	r2, [r7, #4]
 8009630:	4413      	add	r3, r2
 8009632:	685a      	ldr	r2, [r3, #4]
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	00db      	lsls	r3, r3, #3
 8009638:	6879      	ldr	r1, [r7, #4]
 800963a:	440b      	add	r3, r1
 800963c:	3a03      	subs	r2, #3
 800963e:	605a      	str	r2, [r3, #4]
			
			//������߽�ʱ����
			if(my_buttles[i][1] < 42){				
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	00db      	lsls	r3, r3, #3
 8009644:	687a      	ldr	r2, [r7, #4]
 8009646:	4413      	add	r3, r2
 8009648:	685b      	ldr	r3, [r3, #4]
 800964a:	2b29      	cmp	r3, #41	; 0x29
 800964c:	dc0b      	bgt.n	8009666 <update_my_buttles+0xaa>
				my_buttles[i][0] = 0;
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	00db      	lsls	r3, r3, #3
 8009652:	687a      	ldr	r2, [r7, #4]
 8009654:	4413      	add	r3, r2
 8009656:	2200      	movs	r2, #0
 8009658:	601a      	str	r2, [r3, #0]
				my_buttles[i][1] = 0;
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	00db      	lsls	r3, r3, #3
 800965e:	687a      	ldr	r2, [r7, #4]
 8009660:	4413      	add	r3, r2
 8009662:	2200      	movs	r2, #0
 8009664:	605a      	str	r2, [r3, #4]
	for(i=0; i<100; i++){
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	3301      	adds	r3, #1
 800966a:	60fb      	str	r3, [r7, #12]
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	2b63      	cmp	r3, #99	; 0x63
 8009670:	ddad      	ble.n	80095ce <update_my_buttles+0x12>
			}
		}
	}
	
}
 8009672:	bf00      	nop
 8009674:	3714      	adds	r7, #20
 8009676:	46bd      	mov	sp, r7
 8009678:	bd90      	pop	{r4, r7, pc}
 800967a:	bf00      	nop
 800967c:	20000010 	.word	0x20000010

08009680 <update_enemy_buttles>:


void update_enemy_buttles(int enemy_buttles[300][2], int level){
 8009680:	b590      	push	{r4, r7, lr}
 8009682:	b087      	sub	sp, #28
 8009684:	af02      	add	r7, sp, #8
 8009686:	6078      	str	r0, [r7, #4]
 8009688:	6039      	str	r1, [r7, #0]
	int i=0;
 800968a:	2300      	movs	r3, #0
 800968c:	60fb      	str	r3, [r7, #12]
	
	for(i=0; i<300; i++){
 800968e:	2300      	movs	r3, #0
 8009690:	60fb      	str	r3, [r7, #12]
 8009692:	e051      	b.n	8009738 <update_enemy_buttles+0xb8>
		if(enemy_buttles[i][0] != 0){
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	00db      	lsls	r3, r3, #3
 8009698:	687a      	ldr	r2, [r7, #4]
 800969a:	4413      	add	r3, r2
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d047      	beq.n	8009732 <update_enemy_buttles+0xb2>
			//���֮ǰ����
			LCD_Fill(enemy_buttles[i][0]-1,enemy_buttles[i][1]-1,	enemy_buttles[i][0]+1,enemy_buttles[i][1]+1,BACK_COLOR);
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	00db      	lsls	r3, r3, #3
 80096a6:	687a      	ldr	r2, [r7, #4]
 80096a8:	4413      	add	r3, r2
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	b29b      	uxth	r3, r3
 80096ae:	3b01      	subs	r3, #1
 80096b0:	b298      	uxth	r0, r3
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	00db      	lsls	r3, r3, #3
 80096b6:	687a      	ldr	r2, [r7, #4]
 80096b8:	4413      	add	r3, r2
 80096ba:	685b      	ldr	r3, [r3, #4]
 80096bc:	b29b      	uxth	r3, r3
 80096be:	3b01      	subs	r3, #1
 80096c0:	b299      	uxth	r1, r3
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	00db      	lsls	r3, r3, #3
 80096c6:	687a      	ldr	r2, [r7, #4]
 80096c8:	4413      	add	r3, r2
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	b29b      	uxth	r3, r3
 80096ce:	3301      	adds	r3, #1
 80096d0:	b29c      	uxth	r4, r3
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	00db      	lsls	r3, r3, #3
 80096d6:	687a      	ldr	r2, [r7, #4]
 80096d8:	4413      	add	r3, r2
 80096da:	685b      	ldr	r3, [r3, #4]
 80096dc:	b29b      	uxth	r3, r3
 80096de:	3301      	adds	r3, #1
 80096e0:	b29a      	uxth	r2, r3
 80096e2:	4b19      	ldr	r3, [pc, #100]	; (8009748 <update_enemy_buttles+0xc8>)
 80096e4:	881b      	ldrh	r3, [r3, #0]
 80096e6:	9300      	str	r3, [sp, #0]
 80096e8:	4613      	mov	r3, r2
 80096ea:	4622      	mov	r2, r4
 80096ec:	f7fe ffc0 	bl	8008670 <LCD_Fill>
			
			enemy_buttles[i][1] = enemy_buttles[i][1] + level + 1;
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	00db      	lsls	r3, r3, #3
 80096f4:	687a      	ldr	r2, [r7, #4]
 80096f6:	4413      	add	r3, r2
 80096f8:	685a      	ldr	r2, [r3, #4]
 80096fa:	683b      	ldr	r3, [r7, #0]
 80096fc:	441a      	add	r2, r3
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	00db      	lsls	r3, r3, #3
 8009702:	6879      	ldr	r1, [r7, #4]
 8009704:	440b      	add	r3, r1
 8009706:	3201      	adds	r2, #1
 8009708:	605a      	str	r2, [r3, #4]
			
			//������߽�ʱ����
			if(enemy_buttles[i][1] > 318){				
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	00db      	lsls	r3, r3, #3
 800970e:	687a      	ldr	r2, [r7, #4]
 8009710:	4413      	add	r3, r2
 8009712:	685b      	ldr	r3, [r3, #4]
 8009714:	f5b3 7f9f 	cmp.w	r3, #318	; 0x13e
 8009718:	dd0b      	ble.n	8009732 <update_enemy_buttles+0xb2>
				enemy_buttles[i][0] = 0;
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	00db      	lsls	r3, r3, #3
 800971e:	687a      	ldr	r2, [r7, #4]
 8009720:	4413      	add	r3, r2
 8009722:	2200      	movs	r2, #0
 8009724:	601a      	str	r2, [r3, #0]
				enemy_buttles[i][1] = 0;
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	00db      	lsls	r3, r3, #3
 800972a:	687a      	ldr	r2, [r7, #4]
 800972c:	4413      	add	r3, r2
 800972e:	2200      	movs	r2, #0
 8009730:	605a      	str	r2, [r3, #4]
	for(i=0; i<300; i++){
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	3301      	adds	r3, #1
 8009736:	60fb      	str	r3, [r7, #12]
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800973e:	dba9      	blt.n	8009694 <update_enemy_buttles+0x14>
		
			}
		}
	}
}
 8009740:	bf00      	nop
 8009742:	3714      	adds	r7, #20
 8009744:	46bd      	mov	sp, r7
 8009746:	bd90      	pop	{r4, r7, pc}
 8009748:	20000010 	.word	0x20000010

0800974c <update_enemy_planes>:

void update_enemy_planes(int enemy_planes[10][2], int level){
 800974c:	b590      	push	{r4, r7, lr}
 800974e:	b087      	sub	sp, #28
 8009750:	af02      	add	r7, sp, #8
 8009752:	6078      	str	r0, [r7, #4]
 8009754:	6039      	str	r1, [r7, #0]
	int i=0;
 8009756:	2300      	movs	r3, #0
 8009758:	60fb      	str	r3, [r7, #12]
	
	for(i=0; i<10; i++){
 800975a:	2300      	movs	r3, #0
 800975c:	60fb      	str	r3, [r7, #12]
 800975e:	e050      	b.n	8009802 <update_enemy_planes+0xb6>
		if(enemy_planes[i][0] != 0){
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	00db      	lsls	r3, r3, #3
 8009764:	687a      	ldr	r2, [r7, #4]
 8009766:	4413      	add	r3, r2
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	2b00      	cmp	r3, #0
 800976c:	d046      	beq.n	80097fc <update_enemy_planes+0xb0>
			//���֮ǰ����
			LCD_Fill(enemy_planes[i][0]-14,enemy_planes[i][1]-14,	enemy_planes[i][0]+14,enemy_planes[i][1]+14,BACK_COLOR);
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	00db      	lsls	r3, r3, #3
 8009772:	687a      	ldr	r2, [r7, #4]
 8009774:	4413      	add	r3, r2
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	b29b      	uxth	r3, r3
 800977a:	3b0e      	subs	r3, #14
 800977c:	b298      	uxth	r0, r3
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	00db      	lsls	r3, r3, #3
 8009782:	687a      	ldr	r2, [r7, #4]
 8009784:	4413      	add	r3, r2
 8009786:	685b      	ldr	r3, [r3, #4]
 8009788:	b29b      	uxth	r3, r3
 800978a:	3b0e      	subs	r3, #14
 800978c:	b299      	uxth	r1, r3
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	00db      	lsls	r3, r3, #3
 8009792:	687a      	ldr	r2, [r7, #4]
 8009794:	4413      	add	r3, r2
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	b29b      	uxth	r3, r3
 800979a:	330e      	adds	r3, #14
 800979c:	b29c      	uxth	r4, r3
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	00db      	lsls	r3, r3, #3
 80097a2:	687a      	ldr	r2, [r7, #4]
 80097a4:	4413      	add	r3, r2
 80097a6:	685b      	ldr	r3, [r3, #4]
 80097a8:	b29b      	uxth	r3, r3
 80097aa:	330e      	adds	r3, #14
 80097ac:	b29a      	uxth	r2, r3
 80097ae:	4b18      	ldr	r3, [pc, #96]	; (8009810 <update_enemy_planes+0xc4>)
 80097b0:	881b      	ldrh	r3, [r3, #0]
 80097b2:	9300      	str	r3, [sp, #0]
 80097b4:	4613      	mov	r3, r2
 80097b6:	4622      	mov	r2, r4
 80097b8:	f7fe ff5a 	bl	8008670 <LCD_Fill>
			
			enemy_planes[i][1] = enemy_planes[i][1] + level;
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	00db      	lsls	r3, r3, #3
 80097c0:	687a      	ldr	r2, [r7, #4]
 80097c2:	4413      	add	r3, r2
 80097c4:	6859      	ldr	r1, [r3, #4]
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	00db      	lsls	r3, r3, #3
 80097ca:	687a      	ldr	r2, [r7, #4]
 80097cc:	4413      	add	r3, r2
 80097ce:	683a      	ldr	r2, [r7, #0]
 80097d0:	440a      	add	r2, r1
 80097d2:	605a      	str	r2, [r3, #4]
			//������߽�ʱ����
			if(enemy_planes[i][1] > 290){			
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	00db      	lsls	r3, r3, #3
 80097d8:	687a      	ldr	r2, [r7, #4]
 80097da:	4413      	add	r3, r2
 80097dc:	685b      	ldr	r3, [r3, #4]
 80097de:	f5b3 7f91 	cmp.w	r3, #290	; 0x122
 80097e2:	dd0b      	ble.n	80097fc <update_enemy_planes+0xb0>
				enemy_planes[i][0] = 0;
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	00db      	lsls	r3, r3, #3
 80097e8:	687a      	ldr	r2, [r7, #4]
 80097ea:	4413      	add	r3, r2
 80097ec:	2200      	movs	r2, #0
 80097ee:	601a      	str	r2, [r3, #0]
				enemy_planes[i][1] = 0;
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	00db      	lsls	r3, r3, #3
 80097f4:	687a      	ldr	r2, [r7, #4]
 80097f6:	4413      	add	r3, r2
 80097f8:	2200      	movs	r2, #0
 80097fa:	605a      	str	r2, [r3, #4]
	for(i=0; i<10; i++){
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	3301      	adds	r3, #1
 8009800:	60fb      	str	r3, [r7, #12]
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	2b09      	cmp	r3, #9
 8009806:	ddab      	ble.n	8009760 <update_enemy_planes+0x14>
			}
		}
	}
}
 8009808:	bf00      	nop
 800980a:	3714      	adds	r7, #20
 800980c:	46bd      	mov	sp, r7
 800980e:	bd90      	pop	{r4, r7, pc}
 8009810:	20000010 	.word	0x20000010

08009814 <check_my_plane_to_enemy_plane_collide>:


void check_my_plane_to_enemy_plane_collide(int *score,int *life, int my_plane[2], int enemy_planes[10][2]){
 8009814:	b590      	push	{r4, r7, lr}
 8009816:	b089      	sub	sp, #36	; 0x24
 8009818:	af02      	add	r7, sp, #8
 800981a:	60f8      	str	r0, [r7, #12]
 800981c:	60b9      	str	r1, [r7, #8]
 800981e:	607a      	str	r2, [r7, #4]
 8009820:	603b      	str	r3, [r7, #0]
	int i=0;
 8009822:	2300      	movs	r3, #0
 8009824:	617b      	str	r3, [r7, #20]
	int temp=0;
 8009826:	2300      	movs	r3, #0
 8009828:	613b      	str	r3, [r7, #16]
	
	for(i=0; i<10; i++){
 800982a:	2300      	movs	r3, #0
 800982c:	617b      	str	r3, [r7, #20]
 800982e:	e0ad      	b.n	800998c <check_my_plane_to_enemy_plane_collide+0x178>
		if(enemy_planes[i][0] != 0){
 8009830:	697b      	ldr	r3, [r7, #20]
 8009832:	00db      	lsls	r3, r3, #3
 8009834:	683a      	ldr	r2, [r7, #0]
 8009836:	4413      	add	r3, r2
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	2b00      	cmp	r3, #0
 800983c:	f000 80a3 	beq.w	8009986 <check_my_plane_to_enemy_plane_collide+0x172>
			//��ģ����ײ���
			if(abs(enemy_planes[i][0] - my_plane[0]) <= 28){
 8009840:	697b      	ldr	r3, [r7, #20]
 8009842:	00db      	lsls	r3, r3, #3
 8009844:	683a      	ldr	r2, [r7, #0]
 8009846:	4413      	add	r3, r2
 8009848:	681a      	ldr	r2, [r3, #0]
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	1ad3      	subs	r3, r2, r3
 8009850:	f113 0f1c 	cmn.w	r3, #28
 8009854:	f2c0 8097 	blt.w	8009986 <check_my_plane_to_enemy_plane_collide+0x172>
 8009858:	697b      	ldr	r3, [r7, #20]
 800985a:	00db      	lsls	r3, r3, #3
 800985c:	683a      	ldr	r2, [r7, #0]
 800985e:	4413      	add	r3, r2
 8009860:	681a      	ldr	r2, [r3, #0]
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	1ad3      	subs	r3, r2, r3
 8009868:	2b1c      	cmp	r3, #28
 800986a:	f300 808c 	bgt.w	8009986 <check_my_plane_to_enemy_plane_collide+0x172>
				if(abs(enemy_planes[i][1] - my_plane[1]) <= 28){
 800986e:	697b      	ldr	r3, [r7, #20]
 8009870:	00db      	lsls	r3, r3, #3
 8009872:	683a      	ldr	r2, [r7, #0]
 8009874:	4413      	add	r3, r2
 8009876:	685a      	ldr	r2, [r3, #4]
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	3304      	adds	r3, #4
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	1ad3      	subs	r3, r2, r3
 8009880:	f113 0f1c 	cmn.w	r3, #28
 8009884:	db7f      	blt.n	8009986 <check_my_plane_to_enemy_plane_collide+0x172>
 8009886:	697b      	ldr	r3, [r7, #20]
 8009888:	00db      	lsls	r3, r3, #3
 800988a:	683a      	ldr	r2, [r7, #0]
 800988c:	4413      	add	r3, r2
 800988e:	685a      	ldr	r2, [r3, #4]
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	3304      	adds	r3, #4
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	1ad3      	subs	r3, r2, r3
 8009898:	2b1c      	cmp	r3, #28
 800989a:	dc74      	bgt.n	8009986 <check_my_plane_to_enemy_plane_collide+0x172>
					LCD_Fill(my_plane[0]-14,my_plane[1]-14,	my_plane[0]+14,my_plane[1]+14,BACK_COLOR);
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	b29b      	uxth	r3, r3
 80098a2:	3b0e      	subs	r3, #14
 80098a4:	b298      	uxth	r0, r3
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	3304      	adds	r3, #4
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	b29b      	uxth	r3, r3
 80098ae:	3b0e      	subs	r3, #14
 80098b0:	b299      	uxth	r1, r3
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	b29b      	uxth	r3, r3
 80098b8:	330e      	adds	r3, #14
 80098ba:	b29a      	uxth	r2, r3
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	3304      	adds	r3, #4
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	b29b      	uxth	r3, r3
 80098c4:	330e      	adds	r3, #14
 80098c6:	b29c      	uxth	r4, r3
 80098c8:	4b34      	ldr	r3, [pc, #208]	; (800999c <check_my_plane_to_enemy_plane_collide+0x188>)
 80098ca:	881b      	ldrh	r3, [r3, #0]
 80098cc:	9300      	str	r3, [sp, #0]
 80098ce:	4623      	mov	r3, r4
 80098d0:	f7fe fece 	bl	8008670 <LCD_Fill>
					LCD_Fill(enemy_planes[i][0]-14,enemy_planes[i][1]-14,	enemy_planes[i][0]+14,enemy_planes[i][1]+14,BACK_COLOR);
 80098d4:	697b      	ldr	r3, [r7, #20]
 80098d6:	00db      	lsls	r3, r3, #3
 80098d8:	683a      	ldr	r2, [r7, #0]
 80098da:	4413      	add	r3, r2
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	b29b      	uxth	r3, r3
 80098e0:	3b0e      	subs	r3, #14
 80098e2:	b298      	uxth	r0, r3
 80098e4:	697b      	ldr	r3, [r7, #20]
 80098e6:	00db      	lsls	r3, r3, #3
 80098e8:	683a      	ldr	r2, [r7, #0]
 80098ea:	4413      	add	r3, r2
 80098ec:	685b      	ldr	r3, [r3, #4]
 80098ee:	b29b      	uxth	r3, r3
 80098f0:	3b0e      	subs	r3, #14
 80098f2:	b299      	uxth	r1, r3
 80098f4:	697b      	ldr	r3, [r7, #20]
 80098f6:	00db      	lsls	r3, r3, #3
 80098f8:	683a      	ldr	r2, [r7, #0]
 80098fa:	4413      	add	r3, r2
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	b29b      	uxth	r3, r3
 8009900:	330e      	adds	r3, #14
 8009902:	b29c      	uxth	r4, r3
 8009904:	697b      	ldr	r3, [r7, #20]
 8009906:	00db      	lsls	r3, r3, #3
 8009908:	683a      	ldr	r2, [r7, #0]
 800990a:	4413      	add	r3, r2
 800990c:	685b      	ldr	r3, [r3, #4]
 800990e:	b29b      	uxth	r3, r3
 8009910:	330e      	adds	r3, #14
 8009912:	b29a      	uxth	r2, r3
 8009914:	4b21      	ldr	r3, [pc, #132]	; (800999c <check_my_plane_to_enemy_plane_collide+0x188>)
 8009916:	881b      	ldrh	r3, [r3, #0]
 8009918:	9300      	str	r3, [sp, #0]
 800991a:	4613      	mov	r3, r2
 800991c:	4622      	mov	r2, r4
 800991e:	f7fe fea7 	bl	8008670 <LCD_Fill>
				
					my_plane[0] = 120;
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	2278      	movs	r2, #120	; 0x78
 8009926:	601a      	str	r2, [r3, #0]
					my_plane[1] = 290;
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	3304      	adds	r3, #4
 800992c:	f44f 7291 	mov.w	r2, #290	; 0x122
 8009930:	601a      	str	r2, [r3, #0]
					
					enemy_planes[i][0] = 0;
 8009932:	697b      	ldr	r3, [r7, #20]
 8009934:	00db      	lsls	r3, r3, #3
 8009936:	683a      	ldr	r2, [r7, #0]
 8009938:	4413      	add	r3, r2
 800993a:	2200      	movs	r2, #0
 800993c:	601a      	str	r2, [r3, #0]
					enemy_planes[i][1] = 0;
 800993e:	697b      	ldr	r3, [r7, #20]
 8009940:	00db      	lsls	r3, r3, #3
 8009942:	683a      	ldr	r2, [r7, #0]
 8009944:	4413      	add	r3, r2
 8009946:	2200      	movs	r2, #0
 8009948:	605a      	str	r2, [r3, #4]
					
					temp = (*score);
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	613b      	str	r3, [r7, #16]
					(*score) = temp+1;
 8009950:	693b      	ldr	r3, [r7, #16]
 8009952:	1c5a      	adds	r2, r3, #1
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	601a      	str	r2, [r3, #0]
					
					temp = (*life);
 8009958:	68bb      	ldr	r3, [r7, #8]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	613b      	str	r3, [r7, #16]
					(*life) = temp-1;
 800995e:	693b      	ldr	r3, [r7, #16]
 8009960:	1e5a      	subs	r2, r3, #1
 8009962:	68bb      	ldr	r3, [r7, #8]
 8009964:	601a      	str	r2, [r3, #0]
					
					HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_RESET);
 8009966:	2200      	movs	r2, #0
 8009968:	f44f 7180 	mov.w	r1, #256	; 0x100
 800996c:	480c      	ldr	r0, [pc, #48]	; (80099a0 <check_my_plane_to_enemy_plane_collide+0x18c>)
 800996e:	f7f7 fb32 	bl	8000fd6 <HAL_GPIO_WritePin>
					HAL_Delay(20);
 8009972:	2014      	movs	r0, #20
 8009974:	f7f7 f8a8 	bl	8000ac8 <HAL_Delay>
					HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_SET);
 8009978:	2201      	movs	r2, #1
 800997a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800997e:	4808      	ldr	r0, [pc, #32]	; (80099a0 <check_my_plane_to_enemy_plane_collide+0x18c>)
 8009980:	f7f7 fb29 	bl	8000fd6 <HAL_GPIO_WritePin>
					
					break;
 8009984:	e006      	b.n	8009994 <check_my_plane_to_enemy_plane_collide+0x180>
	for(i=0; i<10; i++){
 8009986:	697b      	ldr	r3, [r7, #20]
 8009988:	3301      	adds	r3, #1
 800998a:	617b      	str	r3, [r7, #20]
 800998c:	697b      	ldr	r3, [r7, #20]
 800998e:	2b09      	cmp	r3, #9
 8009990:	f77f af4e 	ble.w	8009830 <check_my_plane_to_enemy_plane_collide+0x1c>
				}
			}
		}
	}
}
 8009994:	bf00      	nop
 8009996:	371c      	adds	r7, #28
 8009998:	46bd      	mov	sp, r7
 800999a:	bd90      	pop	{r4, r7, pc}
 800999c:	20000010 	.word	0x20000010
 80099a0:	40010800 	.word	0x40010800

080099a4 <check_my_buttles_to_enemy_plane_collide>:


void check_my_buttles_to_enemy_plane_collide(int *score,	int my_buttles[100][2], int enemy_planes[10][2]){
 80099a4:	b590      	push	{r4, r7, lr}
 80099a6:	b08b      	sub	sp, #44	; 0x2c
 80099a8:	af02      	add	r7, sp, #8
 80099aa:	60f8      	str	r0, [r7, #12]
 80099ac:	60b9      	str	r1, [r7, #8]
 80099ae:	607a      	str	r2, [r7, #4]
	int i=0;
 80099b0:	2300      	movs	r3, #0
 80099b2:	61fb      	str	r3, [r7, #28]
	int j=0;
 80099b4:	2300      	movs	r3, #0
 80099b6:	61bb      	str	r3, [r7, #24]
	int temp=0;
 80099b8:	2300      	movs	r3, #0
 80099ba:	617b      	str	r3, [r7, #20]
	
	for(i=0; i<10; i++){
 80099bc:	2300      	movs	r3, #0
 80099be:	61fb      	str	r3, [r7, #28]
 80099c0:	e09e      	b.n	8009b00 <check_my_buttles_to_enemy_plane_collide+0x15c>
		if(enemy_planes[i][0] != 0){
 80099c2:	69fb      	ldr	r3, [r7, #28]
 80099c4:	00db      	lsls	r3, r3, #3
 80099c6:	687a      	ldr	r2, [r7, #4]
 80099c8:	4413      	add	r3, r2
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	f000 8094 	beq.w	8009afa <check_my_buttles_to_enemy_plane_collide+0x156>
			for(j=0; j<100; j++){
 80099d2:	2300      	movs	r3, #0
 80099d4:	61bb      	str	r3, [r7, #24]
 80099d6:	e08c      	b.n	8009af2 <check_my_buttles_to_enemy_plane_collide+0x14e>
				//��ײ���
				if(abs(my_buttles[j][0] - enemy_planes[i][0]) <= 15){
 80099d8:	69bb      	ldr	r3, [r7, #24]
 80099da:	00db      	lsls	r3, r3, #3
 80099dc:	68ba      	ldr	r2, [r7, #8]
 80099de:	4413      	add	r3, r2
 80099e0:	681a      	ldr	r2, [r3, #0]
 80099e2:	69fb      	ldr	r3, [r7, #28]
 80099e4:	00db      	lsls	r3, r3, #3
 80099e6:	6879      	ldr	r1, [r7, #4]
 80099e8:	440b      	add	r3, r1
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	1ad3      	subs	r3, r2, r3
 80099ee:	f113 0f0f 	cmn.w	r3, #15
 80099f2:	db7b      	blt.n	8009aec <check_my_buttles_to_enemy_plane_collide+0x148>
 80099f4:	69bb      	ldr	r3, [r7, #24]
 80099f6:	00db      	lsls	r3, r3, #3
 80099f8:	68ba      	ldr	r2, [r7, #8]
 80099fa:	4413      	add	r3, r2
 80099fc:	681a      	ldr	r2, [r3, #0]
 80099fe:	69fb      	ldr	r3, [r7, #28]
 8009a00:	00db      	lsls	r3, r3, #3
 8009a02:	6879      	ldr	r1, [r7, #4]
 8009a04:	440b      	add	r3, r1
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	1ad3      	subs	r3, r2, r3
 8009a0a:	2b0f      	cmp	r3, #15
 8009a0c:	dc6e      	bgt.n	8009aec <check_my_buttles_to_enemy_plane_collide+0x148>
					if(abs(my_buttles[j][1] - enemy_planes[i][1]) <= 15){
 8009a0e:	69bb      	ldr	r3, [r7, #24]
 8009a10:	00db      	lsls	r3, r3, #3
 8009a12:	68ba      	ldr	r2, [r7, #8]
 8009a14:	4413      	add	r3, r2
 8009a16:	685a      	ldr	r2, [r3, #4]
 8009a18:	69fb      	ldr	r3, [r7, #28]
 8009a1a:	00db      	lsls	r3, r3, #3
 8009a1c:	6879      	ldr	r1, [r7, #4]
 8009a1e:	440b      	add	r3, r1
 8009a20:	685b      	ldr	r3, [r3, #4]
 8009a22:	1ad3      	subs	r3, r2, r3
 8009a24:	f113 0f0f 	cmn.w	r3, #15
 8009a28:	db60      	blt.n	8009aec <check_my_buttles_to_enemy_plane_collide+0x148>
 8009a2a:	69bb      	ldr	r3, [r7, #24]
 8009a2c:	00db      	lsls	r3, r3, #3
 8009a2e:	68ba      	ldr	r2, [r7, #8]
 8009a30:	4413      	add	r3, r2
 8009a32:	685a      	ldr	r2, [r3, #4]
 8009a34:	69fb      	ldr	r3, [r7, #28]
 8009a36:	00db      	lsls	r3, r3, #3
 8009a38:	6879      	ldr	r1, [r7, #4]
 8009a3a:	440b      	add	r3, r1
 8009a3c:	685b      	ldr	r3, [r3, #4]
 8009a3e:	1ad3      	subs	r3, r2, r3
 8009a40:	2b0f      	cmp	r3, #15
 8009a42:	dc53      	bgt.n	8009aec <check_my_buttles_to_enemy_plane_collide+0x148>
						LCD_Fill(enemy_planes[i][0]-14,enemy_planes[i][1]-14,	enemy_planes[i][0]+14,enemy_planes[i][1]+14,BACK_COLOR);
 8009a44:	69fb      	ldr	r3, [r7, #28]
 8009a46:	00db      	lsls	r3, r3, #3
 8009a48:	687a      	ldr	r2, [r7, #4]
 8009a4a:	4413      	add	r3, r2
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	b29b      	uxth	r3, r3
 8009a50:	3b0e      	subs	r3, #14
 8009a52:	b298      	uxth	r0, r3
 8009a54:	69fb      	ldr	r3, [r7, #28]
 8009a56:	00db      	lsls	r3, r3, #3
 8009a58:	687a      	ldr	r2, [r7, #4]
 8009a5a:	4413      	add	r3, r2
 8009a5c:	685b      	ldr	r3, [r3, #4]
 8009a5e:	b29b      	uxth	r3, r3
 8009a60:	3b0e      	subs	r3, #14
 8009a62:	b299      	uxth	r1, r3
 8009a64:	69fb      	ldr	r3, [r7, #28]
 8009a66:	00db      	lsls	r3, r3, #3
 8009a68:	687a      	ldr	r2, [r7, #4]
 8009a6a:	4413      	add	r3, r2
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	b29b      	uxth	r3, r3
 8009a70:	330e      	adds	r3, #14
 8009a72:	b29c      	uxth	r4, r3
 8009a74:	69fb      	ldr	r3, [r7, #28]
 8009a76:	00db      	lsls	r3, r3, #3
 8009a78:	687a      	ldr	r2, [r7, #4]
 8009a7a:	4413      	add	r3, r2
 8009a7c:	685b      	ldr	r3, [r3, #4]
 8009a7e:	b29b      	uxth	r3, r3
 8009a80:	330e      	adds	r3, #14
 8009a82:	b29a      	uxth	r2, r3
 8009a84:	4b22      	ldr	r3, [pc, #136]	; (8009b10 <check_my_buttles_to_enemy_plane_collide+0x16c>)
 8009a86:	881b      	ldrh	r3, [r3, #0]
 8009a88:	9300      	str	r3, [sp, #0]
 8009a8a:	4613      	mov	r3, r2
 8009a8c:	4622      	mov	r2, r4
 8009a8e:	f7fe fdef 	bl	8008670 <LCD_Fill>

						my_buttles[j][0] = 0;
 8009a92:	69bb      	ldr	r3, [r7, #24]
 8009a94:	00db      	lsls	r3, r3, #3
 8009a96:	68ba      	ldr	r2, [r7, #8]
 8009a98:	4413      	add	r3, r2
 8009a9a:	2200      	movs	r2, #0
 8009a9c:	601a      	str	r2, [r3, #0]
						my_buttles[j][1] = 0;
 8009a9e:	69bb      	ldr	r3, [r7, #24]
 8009aa0:	00db      	lsls	r3, r3, #3
 8009aa2:	68ba      	ldr	r2, [r7, #8]
 8009aa4:	4413      	add	r3, r2
 8009aa6:	2200      	movs	r2, #0
 8009aa8:	605a      	str	r2, [r3, #4]
						
						enemy_planes[i][0] = 0;
 8009aaa:	69fb      	ldr	r3, [r7, #28]
 8009aac:	00db      	lsls	r3, r3, #3
 8009aae:	687a      	ldr	r2, [r7, #4]
 8009ab0:	4413      	add	r3, r2
 8009ab2:	2200      	movs	r2, #0
 8009ab4:	601a      	str	r2, [r3, #0]
						enemy_planes[i][1] = 0;
 8009ab6:	69fb      	ldr	r3, [r7, #28]
 8009ab8:	00db      	lsls	r3, r3, #3
 8009aba:	687a      	ldr	r2, [r7, #4]
 8009abc:	4413      	add	r3, r2
 8009abe:	2200      	movs	r2, #0
 8009ac0:	605a      	str	r2, [r3, #4]
						
						temp = (*score);
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	617b      	str	r3, [r7, #20]
						(*score) = temp+1;
 8009ac8:	697b      	ldr	r3, [r7, #20]
 8009aca:	1c5a      	adds	r2, r3, #1
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	601a      	str	r2, [r3, #0]
						
						HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8009ad0:	2200      	movs	r2, #0
 8009ad2:	2104      	movs	r1, #4
 8009ad4:	480f      	ldr	r0, [pc, #60]	; (8009b14 <check_my_buttles_to_enemy_plane_collide+0x170>)
 8009ad6:	f7f7 fa7e 	bl	8000fd6 <HAL_GPIO_WritePin>
						HAL_Delay(20);
 8009ada:	2014      	movs	r0, #20
 8009adc:	f7f6 fff4 	bl	8000ac8 <HAL_Delay>
						HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8009ae0:	2201      	movs	r2, #1
 8009ae2:	2104      	movs	r1, #4
 8009ae4:	480b      	ldr	r0, [pc, #44]	; (8009b14 <check_my_buttles_to_enemy_plane_collide+0x170>)
 8009ae6:	f7f7 fa76 	bl	8000fd6 <HAL_GPIO_WritePin>
					
						break;
 8009aea:	e006      	b.n	8009afa <check_my_buttles_to_enemy_plane_collide+0x156>
			for(j=0; j<100; j++){
 8009aec:	69bb      	ldr	r3, [r7, #24]
 8009aee:	3301      	adds	r3, #1
 8009af0:	61bb      	str	r3, [r7, #24]
 8009af2:	69bb      	ldr	r3, [r7, #24]
 8009af4:	2b63      	cmp	r3, #99	; 0x63
 8009af6:	f77f af6f 	ble.w	80099d8 <check_my_buttles_to_enemy_plane_collide+0x34>
	for(i=0; i<10; i++){
 8009afa:	69fb      	ldr	r3, [r7, #28]
 8009afc:	3301      	adds	r3, #1
 8009afe:	61fb      	str	r3, [r7, #28]
 8009b00:	69fb      	ldr	r3, [r7, #28]
 8009b02:	2b09      	cmp	r3, #9
 8009b04:	f77f af5d 	ble.w	80099c2 <check_my_buttles_to_enemy_plane_collide+0x1e>
					}
				}
			}
		}
	}
}
 8009b08:	bf00      	nop
 8009b0a:	3724      	adds	r7, #36	; 0x24
 8009b0c:	46bd      	mov	sp, r7
 8009b0e:	bd90      	pop	{r4, r7, pc}
 8009b10:	20000010 	.word	0x20000010
 8009b14:	40011400 	.word	0x40011400

08009b18 <check_my_buttles_to_boss_collide>:

void check_my_buttles_to_boss_collide(int *score, int *boss_life,	int my_buttles[100][2], int boss[2]){
 8009b18:	b590      	push	{r4, r7, lr}
 8009b1a:	b089      	sub	sp, #36	; 0x24
 8009b1c:	af02      	add	r7, sp, #8
 8009b1e:	60f8      	str	r0, [r7, #12]
 8009b20:	60b9      	str	r1, [r7, #8]
 8009b22:	607a      	str	r2, [r7, #4]
 8009b24:	603b      	str	r3, [r7, #0]
	int i = 0;
 8009b26:	2300      	movs	r3, #0
 8009b28:	617b      	str	r3, [r7, #20]
	int temp = 0;
 8009b2a:	2300      	movs	r3, #0
 8009b2c:	613b      	str	r3, [r7, #16]
	for(i=0; i<100; i++){
 8009b2e:	2300      	movs	r3, #0
 8009b30:	617b      	str	r3, [r7, #20]
 8009b32:	e079      	b.n	8009c28 <check_my_buttles_to_boss_collide+0x110>
				//��ײ���
		if(my_buttles[i][0] != 0){
 8009b34:	697b      	ldr	r3, [r7, #20]
 8009b36:	00db      	lsls	r3, r3, #3
 8009b38:	687a      	ldr	r2, [r7, #4]
 8009b3a:	4413      	add	r3, r2
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d06f      	beq.n	8009c22 <check_my_buttles_to_boss_collide+0x10a>
			if(abs(my_buttles[i][0] - boss[0]) <= 41){
 8009b42:	697b      	ldr	r3, [r7, #20]
 8009b44:	00db      	lsls	r3, r3, #3
 8009b46:	687a      	ldr	r2, [r7, #4]
 8009b48:	4413      	add	r3, r2
 8009b4a:	681a      	ldr	r2, [r3, #0]
 8009b4c:	683b      	ldr	r3, [r7, #0]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	1ad3      	subs	r3, r2, r3
 8009b52:	f113 0f29 	cmn.w	r3, #41	; 0x29
 8009b56:	db64      	blt.n	8009c22 <check_my_buttles_to_boss_collide+0x10a>
 8009b58:	697b      	ldr	r3, [r7, #20]
 8009b5a:	00db      	lsls	r3, r3, #3
 8009b5c:	687a      	ldr	r2, [r7, #4]
 8009b5e:	4413      	add	r3, r2
 8009b60:	681a      	ldr	r2, [r3, #0]
 8009b62:	683b      	ldr	r3, [r7, #0]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	1ad3      	subs	r3, r2, r3
 8009b68:	2b29      	cmp	r3, #41	; 0x29
 8009b6a:	dc5a      	bgt.n	8009c22 <check_my_buttles_to_boss_collide+0x10a>
					if(abs(my_buttles[i][1] - boss[1]) <= 41){
 8009b6c:	697b      	ldr	r3, [r7, #20]
 8009b6e:	00db      	lsls	r3, r3, #3
 8009b70:	687a      	ldr	r2, [r7, #4]
 8009b72:	4413      	add	r3, r2
 8009b74:	685a      	ldr	r2, [r3, #4]
 8009b76:	683b      	ldr	r3, [r7, #0]
 8009b78:	3304      	adds	r3, #4
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	1ad3      	subs	r3, r2, r3
 8009b7e:	f113 0f29 	cmn.w	r3, #41	; 0x29
 8009b82:	db4e      	blt.n	8009c22 <check_my_buttles_to_boss_collide+0x10a>
 8009b84:	697b      	ldr	r3, [r7, #20]
 8009b86:	00db      	lsls	r3, r3, #3
 8009b88:	687a      	ldr	r2, [r7, #4]
 8009b8a:	4413      	add	r3, r2
 8009b8c:	685a      	ldr	r2, [r3, #4]
 8009b8e:	683b      	ldr	r3, [r7, #0]
 8009b90:	3304      	adds	r3, #4
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	1ad3      	subs	r3, r2, r3
 8009b96:	2b29      	cmp	r3, #41	; 0x29
 8009b98:	dc43      	bgt.n	8009c22 <check_my_buttles_to_boss_collide+0x10a>
						LCD_Fill(boss[0]-40, boss[1] - 40, boss[0] + 40, boss[1] + 40,BACK_COLOR);
 8009b9a:	683b      	ldr	r3, [r7, #0]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	b29b      	uxth	r3, r3
 8009ba0:	3b28      	subs	r3, #40	; 0x28
 8009ba2:	b298      	uxth	r0, r3
 8009ba4:	683b      	ldr	r3, [r7, #0]
 8009ba6:	3304      	adds	r3, #4
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	b29b      	uxth	r3, r3
 8009bac:	3b28      	subs	r3, #40	; 0x28
 8009bae:	b299      	uxth	r1, r3
 8009bb0:	683b      	ldr	r3, [r7, #0]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	b29b      	uxth	r3, r3
 8009bb6:	3328      	adds	r3, #40	; 0x28
 8009bb8:	b29a      	uxth	r2, r3
 8009bba:	683b      	ldr	r3, [r7, #0]
 8009bbc:	3304      	adds	r3, #4
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	b29b      	uxth	r3, r3
 8009bc2:	3328      	adds	r3, #40	; 0x28
 8009bc4:	b29c      	uxth	r4, r3
 8009bc6:	4b1c      	ldr	r3, [pc, #112]	; (8009c38 <check_my_buttles_to_boss_collide+0x120>)
 8009bc8:	881b      	ldrh	r3, [r3, #0]
 8009bca:	9300      	str	r3, [sp, #0]
 8009bcc:	4623      	mov	r3, r4
 8009bce:	f7fe fd4f 	bl	8008670 <LCD_Fill>
					
						my_buttles[i][0] = 0;
 8009bd2:	697b      	ldr	r3, [r7, #20]
 8009bd4:	00db      	lsls	r3, r3, #3
 8009bd6:	687a      	ldr	r2, [r7, #4]
 8009bd8:	4413      	add	r3, r2
 8009bda:	2200      	movs	r2, #0
 8009bdc:	601a      	str	r2, [r3, #0]
						my_buttles[i][1] = 0;
 8009bde:	697b      	ldr	r3, [r7, #20]
 8009be0:	00db      	lsls	r3, r3, #3
 8009be2:	687a      	ldr	r2, [r7, #4]
 8009be4:	4413      	add	r3, r2
 8009be6:	2200      	movs	r2, #0
 8009be8:	605a      	str	r2, [r3, #4]
						
						temp = (*score);
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	613b      	str	r3, [r7, #16]
						(*score) = temp+1;
 8009bf0:	693b      	ldr	r3, [r7, #16]
 8009bf2:	1c5a      	adds	r2, r3, #1
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	601a      	str	r2, [r3, #0]
						
						temp = (*boss_life);
 8009bf8:	68bb      	ldr	r3, [r7, #8]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	613b      	str	r3, [r7, #16]
						(*boss_life) = temp-1;
 8009bfe:	693b      	ldr	r3, [r7, #16]
 8009c00:	1e5a      	subs	r2, r3, #1
 8009c02:	68bb      	ldr	r3, [r7, #8]
 8009c04:	601a      	str	r2, [r3, #0]
						
						HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8009c06:	2200      	movs	r2, #0
 8009c08:	2104      	movs	r1, #4
 8009c0a:	480c      	ldr	r0, [pc, #48]	; (8009c3c <check_my_buttles_to_boss_collide+0x124>)
 8009c0c:	f7f7 f9e3 	bl	8000fd6 <HAL_GPIO_WritePin>
						HAL_Delay(20);
 8009c10:	2014      	movs	r0, #20
 8009c12:	f7f6 ff59 	bl	8000ac8 <HAL_Delay>
						HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8009c16:	2201      	movs	r2, #1
 8009c18:	2104      	movs	r1, #4
 8009c1a:	4808      	ldr	r0, [pc, #32]	; (8009c3c <check_my_buttles_to_boss_collide+0x124>)
 8009c1c:	f7f7 f9db 	bl	8000fd6 <HAL_GPIO_WritePin>
			
						break;
 8009c20:	e005      	b.n	8009c2e <check_my_buttles_to_boss_collide+0x116>
	for(i=0; i<100; i++){
 8009c22:	697b      	ldr	r3, [r7, #20]
 8009c24:	3301      	adds	r3, #1
 8009c26:	617b      	str	r3, [r7, #20]
 8009c28:	697b      	ldr	r3, [r7, #20]
 8009c2a:	2b63      	cmp	r3, #99	; 0x63
 8009c2c:	dd82      	ble.n	8009b34 <check_my_buttles_to_boss_collide+0x1c>
					}
				}
		}
	}
}
 8009c2e:	bf00      	nop
 8009c30:	371c      	adds	r7, #28
 8009c32:	46bd      	mov	sp, r7
 8009c34:	bd90      	pop	{r4, r7, pc}
 8009c36:	bf00      	nop
 8009c38:	20000010 	.word	0x20000010
 8009c3c:	40011400 	.word	0x40011400

08009c40 <check_my_plane_to_enemy_buttles_collide>:


void check_my_plane_to_enemy_buttles_collide(int *life,	int enemy_buttles[300][2], int my_plane[2]){
 8009c40:	b590      	push	{r4, r7, lr}
 8009c42:	b089      	sub	sp, #36	; 0x24
 8009c44:	af02      	add	r7, sp, #8
 8009c46:	60f8      	str	r0, [r7, #12]
 8009c48:	60b9      	str	r1, [r7, #8]
 8009c4a:	607a      	str	r2, [r7, #4]
	int temp = 0;
 8009c4c:	2300      	movs	r3, #0
 8009c4e:	613b      	str	r3, [r7, #16]
	int i = 0;
 8009c50:	2300      	movs	r3, #0
 8009c52:	617b      	str	r3, [r7, #20]
	for(i=0; i<300; i++){
 8009c54:	2300      	movs	r3, #0
 8009c56:	617b      	str	r3, [r7, #20]
 8009c58:	e07c      	b.n	8009d54 <check_my_plane_to_enemy_buttles_collide+0x114>
		if(enemy_buttles[i][0] != 0){
 8009c5a:	697b      	ldr	r3, [r7, #20]
 8009c5c:	00db      	lsls	r3, r3, #3
 8009c5e:	68ba      	ldr	r2, [r7, #8]
 8009c60:	4413      	add	r3, r2
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d072      	beq.n	8009d4e <check_my_plane_to_enemy_buttles_collide+0x10e>
			if(abs(enemy_buttles[i][0] - my_plane[0]) <= 15){
 8009c68:	697b      	ldr	r3, [r7, #20]
 8009c6a:	00db      	lsls	r3, r3, #3
 8009c6c:	68ba      	ldr	r2, [r7, #8]
 8009c6e:	4413      	add	r3, r2
 8009c70:	681a      	ldr	r2, [r3, #0]
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	1ad3      	subs	r3, r2, r3
 8009c78:	f113 0f0f 	cmn.w	r3, #15
 8009c7c:	db67      	blt.n	8009d4e <check_my_plane_to_enemy_buttles_collide+0x10e>
 8009c7e:	697b      	ldr	r3, [r7, #20]
 8009c80:	00db      	lsls	r3, r3, #3
 8009c82:	68ba      	ldr	r2, [r7, #8]
 8009c84:	4413      	add	r3, r2
 8009c86:	681a      	ldr	r2, [r3, #0]
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	1ad3      	subs	r3, r2, r3
 8009c8e:	2b0f      	cmp	r3, #15
 8009c90:	dc5d      	bgt.n	8009d4e <check_my_plane_to_enemy_buttles_collide+0x10e>
					if(abs(enemy_buttles[i][1] - my_plane[1]) <= 15){
 8009c92:	697b      	ldr	r3, [r7, #20]
 8009c94:	00db      	lsls	r3, r3, #3
 8009c96:	68ba      	ldr	r2, [r7, #8]
 8009c98:	4413      	add	r3, r2
 8009c9a:	685a      	ldr	r2, [r3, #4]
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	3304      	adds	r3, #4
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	1ad3      	subs	r3, r2, r3
 8009ca4:	f113 0f0f 	cmn.w	r3, #15
 8009ca8:	db51      	blt.n	8009d4e <check_my_plane_to_enemy_buttles_collide+0x10e>
 8009caa:	697b      	ldr	r3, [r7, #20]
 8009cac:	00db      	lsls	r3, r3, #3
 8009cae:	68ba      	ldr	r2, [r7, #8]
 8009cb0:	4413      	add	r3, r2
 8009cb2:	685a      	ldr	r2, [r3, #4]
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	3304      	adds	r3, #4
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	1ad3      	subs	r3, r2, r3
 8009cbc:	2b0f      	cmp	r3, #15
 8009cbe:	dc46      	bgt.n	8009d4e <check_my_plane_to_enemy_buttles_collide+0x10e>
					  LCD_Fill(my_plane[0]-14,my_plane[1]-14,	my_plane[0]+14,my_plane[1]+14,BACK_COLOR);
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	b29b      	uxth	r3, r3
 8009cc6:	3b0e      	subs	r3, #14
 8009cc8:	b298      	uxth	r0, r3
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	3304      	adds	r3, #4
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	b29b      	uxth	r3, r3
 8009cd2:	3b0e      	subs	r3, #14
 8009cd4:	b299      	uxth	r1, r3
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	b29b      	uxth	r3, r3
 8009cdc:	330e      	adds	r3, #14
 8009cde:	b29a      	uxth	r2, r3
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	3304      	adds	r3, #4
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	b29b      	uxth	r3, r3
 8009ce8:	330e      	adds	r3, #14
 8009cea:	b29c      	uxth	r4, r3
 8009cec:	4b1e      	ldr	r3, [pc, #120]	; (8009d68 <check_my_plane_to_enemy_buttles_collide+0x128>)
 8009cee:	881b      	ldrh	r3, [r3, #0]
 8009cf0:	9300      	str	r3, [sp, #0]
 8009cf2:	4623      	mov	r3, r4
 8009cf4:	f7fe fcbc 	bl	8008670 <LCD_Fill>

					  my_plane[0] = 120;
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	2278      	movs	r2, #120	; 0x78
 8009cfc:	601a      	str	r2, [r3, #0]
					  my_plane[1] = 290;
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	3304      	adds	r3, #4
 8009d02:	f44f 7291 	mov.w	r2, #290	; 0x122
 8009d06:	601a      	str	r2, [r3, #0]
						
					  enemy_buttles[i][0] = 0;
 8009d08:	697b      	ldr	r3, [r7, #20]
 8009d0a:	00db      	lsls	r3, r3, #3
 8009d0c:	68ba      	ldr	r2, [r7, #8]
 8009d0e:	4413      	add	r3, r2
 8009d10:	2200      	movs	r2, #0
 8009d12:	601a      	str	r2, [r3, #0]
					  enemy_buttles[i][1] = 0;
 8009d14:	697b      	ldr	r3, [r7, #20]
 8009d16:	00db      	lsls	r3, r3, #3
 8009d18:	68ba      	ldr	r2, [r7, #8]
 8009d1a:	4413      	add	r3, r2
 8009d1c:	2200      	movs	r2, #0
 8009d1e:	605a      	str	r2, [r3, #4]
						
						temp = (*life);
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	613b      	str	r3, [r7, #16]
					 (*life) = temp-1;
 8009d26:	693b      	ldr	r3, [r7, #16]
 8009d28:	1e5a      	subs	r2, r3, #1
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	601a      	str	r2, [r3, #0]
						
					 HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_RESET);
 8009d2e:	2200      	movs	r2, #0
 8009d30:	f44f 7180 	mov.w	r1, #256	; 0x100
 8009d34:	480d      	ldr	r0, [pc, #52]	; (8009d6c <check_my_plane_to_enemy_buttles_collide+0x12c>)
 8009d36:	f7f7 f94e 	bl	8000fd6 <HAL_GPIO_WritePin>
					 HAL_Delay(20);
 8009d3a:	2014      	movs	r0, #20
 8009d3c:	f7f6 fec4 	bl	8000ac8 <HAL_Delay>
					 HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_SET);
 8009d40:	2201      	movs	r2, #1
 8009d42:	f44f 7180 	mov.w	r1, #256	; 0x100
 8009d46:	4809      	ldr	r0, [pc, #36]	; (8009d6c <check_my_plane_to_enemy_buttles_collide+0x12c>)
 8009d48:	f7f7 f945 	bl	8000fd6 <HAL_GPIO_WritePin>
					
					  break;
 8009d4c:	e007      	b.n	8009d5e <check_my_plane_to_enemy_buttles_collide+0x11e>
	for(i=0; i<300; i++){
 8009d4e:	697b      	ldr	r3, [r7, #20]
 8009d50:	3301      	adds	r3, #1
 8009d52:	617b      	str	r3, [r7, #20]
 8009d54:	697b      	ldr	r3, [r7, #20]
 8009d56:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8009d5a:	f6ff af7e 	blt.w	8009c5a <check_my_plane_to_enemy_buttles_collide+0x1a>
					}
		}
	}
 }
}
 8009d5e:	bf00      	nop
 8009d60:	371c      	adds	r7, #28
 8009d62:	46bd      	mov	sp, r7
 8009d64:	bd90      	pop	{r4, r7, pc}
 8009d66:	bf00      	nop
 8009d68:	20000010 	.word	0x20000010
 8009d6c:	40010800 	.word	0x40010800

08009d70 <generate_enemy_buttles>:

void generate_enemy_buttles(int level, int enemy_plane[10][2],  int enemy_buttles[300][2]){
 8009d70:	b580      	push	{r7, lr}
 8009d72:	b086      	sub	sp, #24
 8009d74:	af00      	add	r7, sp, #0
 8009d76:	60f8      	str	r0, [r7, #12]
 8009d78:	60b9      	str	r1, [r7, #8]
 8009d7a:	607a      	str	r2, [r7, #4]
	int i = 0;
 8009d7c:	2300      	movs	r3, #0
 8009d7e:	617b      	str	r3, [r7, #20]
	int j = 0;
 8009d80:	2300      	movs	r3, #0
 8009d82:	613b      	str	r3, [r7, #16]
	for(i=0; i<10; i++){
 8009d84:	2300      	movs	r3, #0
 8009d86:	617b      	str	r3, [r7, #20]
 8009d88:	e040      	b.n	8009e0c <generate_enemy_buttles+0x9c>
		
		if(enemy_plane[i][0] != 0 && rand()%200 < level){
 8009d8a:	697b      	ldr	r3, [r7, #20]
 8009d8c:	00db      	lsls	r3, r3, #3
 8009d8e:	68ba      	ldr	r2, [r7, #8]
 8009d90:	4413      	add	r3, r2
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d036      	beq.n	8009e06 <generate_enemy_buttles+0x96>
 8009d98:	f000 fa6a 	bl	800a270 <rand>
 8009d9c:	4602      	mov	r2, r0
 8009d9e:	4b1f      	ldr	r3, [pc, #124]	; (8009e1c <generate_enemy_buttles+0xac>)
 8009da0:	fb83 1302 	smull	r1, r3, r3, r2
 8009da4:	1199      	asrs	r1, r3, #6
 8009da6:	17d3      	asrs	r3, r2, #31
 8009da8:	1acb      	subs	r3, r1, r3
 8009daa:	21c8      	movs	r1, #200	; 0xc8
 8009dac:	fb01 f303 	mul.w	r3, r1, r3
 8009db0:	1ad3      	subs	r3, r2, r3
 8009db2:	68fa      	ldr	r2, [r7, #12]
 8009db4:	429a      	cmp	r2, r3
 8009db6:	dd26      	ble.n	8009e06 <generate_enemy_buttles+0x96>
			for(j=0; j<300; j++){
 8009db8:	2300      	movs	r3, #0
 8009dba:	613b      	str	r3, [r7, #16]
 8009dbc:	e01f      	b.n	8009dfe <generate_enemy_buttles+0x8e>
				if(enemy_buttles[j][0] == 0){
 8009dbe:	693b      	ldr	r3, [r7, #16]
 8009dc0:	00db      	lsls	r3, r3, #3
 8009dc2:	687a      	ldr	r2, [r7, #4]
 8009dc4:	4413      	add	r3, r2
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d115      	bne.n	8009df8 <generate_enemy_buttles+0x88>
					enemy_buttles[j][0] = enemy_plane[i][0];
 8009dcc:	697b      	ldr	r3, [r7, #20]
 8009dce:	00db      	lsls	r3, r3, #3
 8009dd0:	68ba      	ldr	r2, [r7, #8]
 8009dd2:	441a      	add	r2, r3
 8009dd4:	693b      	ldr	r3, [r7, #16]
 8009dd6:	00db      	lsls	r3, r3, #3
 8009dd8:	6879      	ldr	r1, [r7, #4]
 8009dda:	440b      	add	r3, r1
 8009ddc:	6812      	ldr	r2, [r2, #0]
 8009dde:	601a      	str	r2, [r3, #0]
					enemy_buttles[j][1] = enemy_plane[i][1] + 15;
 8009de0:	697b      	ldr	r3, [r7, #20]
 8009de2:	00db      	lsls	r3, r3, #3
 8009de4:	68ba      	ldr	r2, [r7, #8]
 8009de6:	4413      	add	r3, r2
 8009de8:	685a      	ldr	r2, [r3, #4]
 8009dea:	693b      	ldr	r3, [r7, #16]
 8009dec:	00db      	lsls	r3, r3, #3
 8009dee:	6879      	ldr	r1, [r7, #4]
 8009df0:	440b      	add	r3, r1
 8009df2:	320f      	adds	r2, #15
 8009df4:	605a      	str	r2, [r3, #4]
					break;
 8009df6:	e006      	b.n	8009e06 <generate_enemy_buttles+0x96>
			for(j=0; j<300; j++){
 8009df8:	693b      	ldr	r3, [r7, #16]
 8009dfa:	3301      	adds	r3, #1
 8009dfc:	613b      	str	r3, [r7, #16]
 8009dfe:	693b      	ldr	r3, [r7, #16]
 8009e00:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8009e04:	dbdb      	blt.n	8009dbe <generate_enemy_buttles+0x4e>
	for(i=0; i<10; i++){
 8009e06:	697b      	ldr	r3, [r7, #20]
 8009e08:	3301      	adds	r3, #1
 8009e0a:	617b      	str	r3, [r7, #20]
 8009e0c:	697b      	ldr	r3, [r7, #20]
 8009e0e:	2b09      	cmp	r3, #9
 8009e10:	ddbb      	ble.n	8009d8a <generate_enemy_buttles+0x1a>
				}
			}	
		}
	}
}
 8009e12:	bf00      	nop
 8009e14:	3718      	adds	r7, #24
 8009e16:	46bd      	mov	sp, r7
 8009e18:	bd80      	pop	{r7, pc}
 8009e1a:	bf00      	nop
 8009e1c:	51eb851f 	.word	0x51eb851f

08009e20 <generate_boss_buttles>:

void generate_boss_buttles(int boss[2],  int enemy_buttles[300][2]){
 8009e20:	b580      	push	{r7, lr}
 8009e22:	b084      	sub	sp, #16
 8009e24:	af00      	add	r7, sp, #0
 8009e26:	6078      	str	r0, [r7, #4]
 8009e28:	6039      	str	r1, [r7, #0]
	int i = 0;
 8009e2a:	2300      	movs	r3, #0
 8009e2c:	60fb      	str	r3, [r7, #12]
	int j = 0;
 8009e2e:	2300      	movs	r3, #0
 8009e30:	60bb      	str	r3, [r7, #8]
	for(i=0; i<11; i++){
 8009e32:	2300      	movs	r3, #0
 8009e34:	60fb      	str	r3, [r7, #12]
 8009e36:	e03c      	b.n	8009eb2 <generate_boss_buttles+0x92>
		
		if(rand()%200 < 3){
 8009e38:	f000 fa1a 	bl	800a270 <rand>
 8009e3c:	4602      	mov	r2, r0
 8009e3e:	4b20      	ldr	r3, [pc, #128]	; (8009ec0 <generate_boss_buttles+0xa0>)
 8009e40:	fb83 1302 	smull	r1, r3, r3, r2
 8009e44:	1199      	asrs	r1, r3, #6
 8009e46:	17d3      	asrs	r3, r2, #31
 8009e48:	1acb      	subs	r3, r1, r3
 8009e4a:	21c8      	movs	r1, #200	; 0xc8
 8009e4c:	fb01 f303 	mul.w	r3, r1, r3
 8009e50:	1ad3      	subs	r3, r2, r3
 8009e52:	2b02      	cmp	r3, #2
 8009e54:	dc2a      	bgt.n	8009eac <generate_boss_buttles+0x8c>
			for(j=0; j<300; j++){
 8009e56:	2300      	movs	r3, #0
 8009e58:	60bb      	str	r3, [r7, #8]
 8009e5a:	e023      	b.n	8009ea4 <generate_boss_buttles+0x84>
				if(enemy_buttles[j][0] == 0){
 8009e5c:	68bb      	ldr	r3, [r7, #8]
 8009e5e:	00db      	lsls	r3, r3, #3
 8009e60:	683a      	ldr	r2, [r7, #0]
 8009e62:	4413      	add	r3, r2
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d119      	bne.n	8009e9e <generate_boss_buttles+0x7e>
					enemy_buttles[j][0] = boss[0] - 30 + i * 6;
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	f1a3 011e 	sub.w	r1, r3, #30
 8009e72:	68fa      	ldr	r2, [r7, #12]
 8009e74:	4613      	mov	r3, r2
 8009e76:	005b      	lsls	r3, r3, #1
 8009e78:	4413      	add	r3, r2
 8009e7a:	005b      	lsls	r3, r3, #1
 8009e7c:	4618      	mov	r0, r3
 8009e7e:	68bb      	ldr	r3, [r7, #8]
 8009e80:	00db      	lsls	r3, r3, #3
 8009e82:	683a      	ldr	r2, [r7, #0]
 8009e84:	4413      	add	r3, r2
 8009e86:	180a      	adds	r2, r1, r0
 8009e88:	601a      	str	r2, [r3, #0]
					enemy_buttles[j][1] = boss[1] + 15;
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	3304      	adds	r3, #4
 8009e8e:	681a      	ldr	r2, [r3, #0]
 8009e90:	68bb      	ldr	r3, [r7, #8]
 8009e92:	00db      	lsls	r3, r3, #3
 8009e94:	6839      	ldr	r1, [r7, #0]
 8009e96:	440b      	add	r3, r1
 8009e98:	320f      	adds	r2, #15
 8009e9a:	605a      	str	r2, [r3, #4]
					break;
 8009e9c:	e006      	b.n	8009eac <generate_boss_buttles+0x8c>
			for(j=0; j<300; j++){
 8009e9e:	68bb      	ldr	r3, [r7, #8]
 8009ea0:	3301      	adds	r3, #1
 8009ea2:	60bb      	str	r3, [r7, #8]
 8009ea4:	68bb      	ldr	r3, [r7, #8]
 8009ea6:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8009eaa:	dbd7      	blt.n	8009e5c <generate_boss_buttles+0x3c>
	for(i=0; i<11; i++){
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	3301      	adds	r3, #1
 8009eb0:	60fb      	str	r3, [r7, #12]
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	2b0a      	cmp	r3, #10
 8009eb6:	ddbf      	ble.n	8009e38 <generate_boss_buttles+0x18>
				}
			}	
		}
	}
}
 8009eb8:	bf00      	nop
 8009eba:	3710      	adds	r7, #16
 8009ebc:	46bd      	mov	sp, r7
 8009ebe:	bd80      	pop	{r7, pc}
 8009ec0:	51eb851f 	.word	0x51eb851f

08009ec4 <clear_all_enemy_plane>:

void clear_all_enemy_plane(int my_plane[2],	int enemy_plane[10][2], int my_buttles[100][2], int enemy_buttles[300][2]){
 8009ec4:	b580      	push	{r7, lr}
 8009ec6:	b088      	sub	sp, #32
 8009ec8:	af02      	add	r7, sp, #8
 8009eca:	60f8      	str	r0, [r7, #12]
 8009ecc:	60b9      	str	r1, [r7, #8]
 8009ece:	607a      	str	r2, [r7, #4]
 8009ed0:	603b      	str	r3, [r7, #0]
	int i=0;
 8009ed2:	2300      	movs	r3, #0
 8009ed4:	617b      	str	r3, [r7, #20]
	
	for(i=0; i<10; i++){
 8009ed6:	2300      	movs	r3, #0
 8009ed8:	617b      	str	r3, [r7, #20]
 8009eda:	e00e      	b.n	8009efa <clear_all_enemy_plane+0x36>
		enemy_plane[i][0] = 0;
 8009edc:	697b      	ldr	r3, [r7, #20]
 8009ede:	00db      	lsls	r3, r3, #3
 8009ee0:	68ba      	ldr	r2, [r7, #8]
 8009ee2:	4413      	add	r3, r2
 8009ee4:	2200      	movs	r2, #0
 8009ee6:	601a      	str	r2, [r3, #0]
		enemy_plane[i][1] = 0;
 8009ee8:	697b      	ldr	r3, [r7, #20]
 8009eea:	00db      	lsls	r3, r3, #3
 8009eec:	68ba      	ldr	r2, [r7, #8]
 8009eee:	4413      	add	r3, r2
 8009ef0:	2200      	movs	r2, #0
 8009ef2:	605a      	str	r2, [r3, #4]
	for(i=0; i<10; i++){
 8009ef4:	697b      	ldr	r3, [r7, #20]
 8009ef6:	3301      	adds	r3, #1
 8009ef8:	617b      	str	r3, [r7, #20]
 8009efa:	697b      	ldr	r3, [r7, #20]
 8009efc:	2b09      	cmp	r3, #9
 8009efe:	dded      	ble.n	8009edc <clear_all_enemy_plane+0x18>
	}
	
	for(i=0; i<100; i++){
 8009f00:	2300      	movs	r3, #0
 8009f02:	617b      	str	r3, [r7, #20]
 8009f04:	e015      	b.n	8009f32 <clear_all_enemy_plane+0x6e>
		if(my_buttles[i][0] != 0){
 8009f06:	697b      	ldr	r3, [r7, #20]
 8009f08:	00db      	lsls	r3, r3, #3
 8009f0a:	687a      	ldr	r2, [r7, #4]
 8009f0c:	4413      	add	r3, r2
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d00b      	beq.n	8009f2c <clear_all_enemy_plane+0x68>
			my_buttles[i][0] = 0;
 8009f14:	697b      	ldr	r3, [r7, #20]
 8009f16:	00db      	lsls	r3, r3, #3
 8009f18:	687a      	ldr	r2, [r7, #4]
 8009f1a:	4413      	add	r3, r2
 8009f1c:	2200      	movs	r2, #0
 8009f1e:	601a      	str	r2, [r3, #0]
			my_buttles[i][1] = 0;
 8009f20:	697b      	ldr	r3, [r7, #20]
 8009f22:	00db      	lsls	r3, r3, #3
 8009f24:	687a      	ldr	r2, [r7, #4]
 8009f26:	4413      	add	r3, r2
 8009f28:	2200      	movs	r2, #0
 8009f2a:	605a      	str	r2, [r3, #4]
	for(i=0; i<100; i++){
 8009f2c:	697b      	ldr	r3, [r7, #20]
 8009f2e:	3301      	adds	r3, #1
 8009f30:	617b      	str	r3, [r7, #20]
 8009f32:	697b      	ldr	r3, [r7, #20]
 8009f34:	2b63      	cmp	r3, #99	; 0x63
 8009f36:	dde6      	ble.n	8009f06 <clear_all_enemy_plane+0x42>
		}
	}
	
	for(i=0; i<300; i++){
 8009f38:	2300      	movs	r3, #0
 8009f3a:	617b      	str	r3, [r7, #20]
 8009f3c:	e015      	b.n	8009f6a <clear_all_enemy_plane+0xa6>
		if(enemy_buttles[i][0] != 0){
 8009f3e:	697b      	ldr	r3, [r7, #20]
 8009f40:	00db      	lsls	r3, r3, #3
 8009f42:	683a      	ldr	r2, [r7, #0]
 8009f44:	4413      	add	r3, r2
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d00b      	beq.n	8009f64 <clear_all_enemy_plane+0xa0>
			enemy_buttles[i][0] = 0;
 8009f4c:	697b      	ldr	r3, [r7, #20]
 8009f4e:	00db      	lsls	r3, r3, #3
 8009f50:	683a      	ldr	r2, [r7, #0]
 8009f52:	4413      	add	r3, r2
 8009f54:	2200      	movs	r2, #0
 8009f56:	601a      	str	r2, [r3, #0]
			enemy_buttles[i][1] = 0;
 8009f58:	697b      	ldr	r3, [r7, #20]
 8009f5a:	00db      	lsls	r3, r3, #3
 8009f5c:	683a      	ldr	r2, [r7, #0]
 8009f5e:	4413      	add	r3, r2
 8009f60:	2200      	movs	r2, #0
 8009f62:	605a      	str	r2, [r3, #4]
	for(i=0; i<300; i++){
 8009f64:	697b      	ldr	r3, [r7, #20]
 8009f66:	3301      	adds	r3, #1
 8009f68:	617b      	str	r3, [r7, #20]
 8009f6a:	697b      	ldr	r3, [r7, #20]
 8009f6c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8009f70:	dbe5      	blt.n	8009f3e <clear_all_enemy_plane+0x7a>
		}
	}
	
	LCD_Fill(1,41,239,318,BACK_COLOR);
 8009f72:	4b0b      	ldr	r3, [pc, #44]	; (8009fa0 <clear_all_enemy_plane+0xdc>)
 8009f74:	881b      	ldrh	r3, [r3, #0]
 8009f76:	9300      	str	r3, [sp, #0]
 8009f78:	f44f 739f 	mov.w	r3, #318	; 0x13e
 8009f7c:	22ef      	movs	r2, #239	; 0xef
 8009f7e:	2129      	movs	r1, #41	; 0x29
 8009f80:	2001      	movs	r0, #1
 8009f82:	f7fe fb75 	bl	8008670 <LCD_Fill>
	draw_my_plane(my_plane[0],my_plane[1]);
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	681a      	ldr	r2, [r3, #0]
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	3304      	adds	r3, #4
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	4619      	mov	r1, r3
 8009f92:	4610      	mov	r0, r2
 8009f94:	f7f8 f83e 	bl	8002014 <draw_my_plane>
}
 8009f98:	bf00      	nop
 8009f9a:	3718      	adds	r7, #24
 8009f9c:	46bd      	mov	sp, r7
 8009f9e:	bd80      	pop	{r7, pc}
 8009fa0:	20000010 	.word	0x20000010

08009fa4 <move_boss>:

void move_boss(int boss[2], int *pace){
 8009fa4:	b590      	push	{r4, r7, lr}
 8009fa6:	b087      	sub	sp, #28
 8009fa8:	af02      	add	r7, sp, #8
 8009faa:	6078      	str	r0, [r7, #4]
 8009fac:	6039      	str	r1, [r7, #0]

		int temp = 0;
 8009fae:	2300      	movs	r3, #0
 8009fb0:	60fb      	str	r3, [r7, #12]
	    LCD_Fill(boss[0]-40, boss[1] - 40, boss[0] + 40, boss[1] + 40,BACK_COLOR);
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	b29b      	uxth	r3, r3
 8009fb8:	3b28      	subs	r3, #40	; 0x28
 8009fba:	b298      	uxth	r0, r3
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	3304      	adds	r3, #4
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	b29b      	uxth	r3, r3
 8009fc4:	3b28      	subs	r3, #40	; 0x28
 8009fc6:	b299      	uxth	r1, r3
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	b29b      	uxth	r3, r3
 8009fce:	3328      	adds	r3, #40	; 0x28
 8009fd0:	b29a      	uxth	r2, r3
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	3304      	adds	r3, #4
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	b29b      	uxth	r3, r3
 8009fda:	3328      	adds	r3, #40	; 0x28
 8009fdc:	b29c      	uxth	r4, r3
 8009fde:	4b10      	ldr	r3, [pc, #64]	; (800a020 <move_boss+0x7c>)
 8009fe0:	881b      	ldrh	r3, [r3, #0]
 8009fe2:	9300      	str	r3, [sp, #0]
 8009fe4:	4623      	mov	r3, r4
 8009fe6:	f7fe fb43 	bl	8008670 <LCD_Fill>

	    boss[0] = boss[0] + (*pace);
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	681a      	ldr	r2, [r3, #0]
 8009fee:	683b      	ldr	r3, [r7, #0]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	441a      	add	r2, r3
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	601a      	str	r2, [r3, #0]

		if(boss[0] < 43 || boss[0] > 197){
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	2b2a      	cmp	r3, #42	; 0x2a
 8009ffe:	dd03      	ble.n	800a008 <move_boss+0x64>
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	2bc5      	cmp	r3, #197	; 0xc5
 800a006:	dd06      	ble.n	800a016 <move_boss+0x72>
			temp = (*pace);
 800a008:	683b      	ldr	r3, [r7, #0]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	60fb      	str	r3, [r7, #12]
			(*pace) = -temp;
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	425a      	negs	r2, r3
 800a012:	683b      	ldr	r3, [r7, #0]
 800a014:	601a      	str	r2, [r3, #0]
		}

}
 800a016:	bf00      	nop
 800a018:	3714      	adds	r7, #20
 800a01a:	46bd      	mov	sp, r7
 800a01c:	bd90      	pop	{r4, r7, pc}
 800a01e:	bf00      	nop
 800a020:	20000010 	.word	0x20000010

0800a024 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800a024:	b480      	push	{r7}
 800a026:	b085      	sub	sp, #20
 800a028:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800a02a:	4b15      	ldr	r3, [pc, #84]	; (800a080 <HAL_MspInit+0x5c>)
 800a02c:	699b      	ldr	r3, [r3, #24]
 800a02e:	4a14      	ldr	r2, [pc, #80]	; (800a080 <HAL_MspInit+0x5c>)
 800a030:	f043 0301 	orr.w	r3, r3, #1
 800a034:	6193      	str	r3, [r2, #24]
 800a036:	4b12      	ldr	r3, [pc, #72]	; (800a080 <HAL_MspInit+0x5c>)
 800a038:	699b      	ldr	r3, [r3, #24]
 800a03a:	f003 0301 	and.w	r3, r3, #1
 800a03e:	60bb      	str	r3, [r7, #8]
 800a040:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800a042:	4b0f      	ldr	r3, [pc, #60]	; (800a080 <HAL_MspInit+0x5c>)
 800a044:	69db      	ldr	r3, [r3, #28]
 800a046:	4a0e      	ldr	r2, [pc, #56]	; (800a080 <HAL_MspInit+0x5c>)
 800a048:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a04c:	61d3      	str	r3, [r2, #28]
 800a04e:	4b0c      	ldr	r3, [pc, #48]	; (800a080 <HAL_MspInit+0x5c>)
 800a050:	69db      	ldr	r3, [r3, #28]
 800a052:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a056:	607b      	str	r3, [r7, #4]
 800a058:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800a05a:	4b0a      	ldr	r3, [pc, #40]	; (800a084 <HAL_MspInit+0x60>)
 800a05c:	685b      	ldr	r3, [r3, #4]
 800a05e:	60fb      	str	r3, [r7, #12]
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800a066:	60fb      	str	r3, [r7, #12]
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800a06e:	60fb      	str	r3, [r7, #12]
 800a070:	4a04      	ldr	r2, [pc, #16]	; (800a084 <HAL_MspInit+0x60>)
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800a076:	bf00      	nop
 800a078:	3714      	adds	r7, #20
 800a07a:	46bd      	mov	sp, r7
 800a07c:	bc80      	pop	{r7}
 800a07e:	4770      	bx	lr
 800a080:	40021000 	.word	0x40021000
 800a084:	40010000 	.word	0x40010000

0800a088 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800a088:	b480      	push	{r7}
 800a08a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800a08c:	bf00      	nop
 800a08e:	46bd      	mov	sp, r7
 800a090:	bc80      	pop	{r7}
 800a092:	4770      	bx	lr

0800a094 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800a094:	b480      	push	{r7}
 800a096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800a098:	e7fe      	b.n	800a098 <HardFault_Handler+0x4>

0800a09a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800a09a:	b480      	push	{r7}
 800a09c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800a09e:	e7fe      	b.n	800a09e <MemManage_Handler+0x4>

0800a0a0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800a0a0:	b480      	push	{r7}
 800a0a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800a0a4:	e7fe      	b.n	800a0a4 <BusFault_Handler+0x4>

0800a0a6 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800a0a6:	b480      	push	{r7}
 800a0a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800a0aa:	e7fe      	b.n	800a0aa <UsageFault_Handler+0x4>

0800a0ac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800a0ac:	b480      	push	{r7}
 800a0ae:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800a0b0:	bf00      	nop
 800a0b2:	46bd      	mov	sp, r7
 800a0b4:	bc80      	pop	{r7}
 800a0b6:	4770      	bx	lr

0800a0b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800a0b8:	b480      	push	{r7}
 800a0ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800a0bc:	bf00      	nop
 800a0be:	46bd      	mov	sp, r7
 800a0c0:	bc80      	pop	{r7}
 800a0c2:	4770      	bx	lr

0800a0c4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800a0c4:	b480      	push	{r7}
 800a0c6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800a0c8:	bf00      	nop
 800a0ca:	46bd      	mov	sp, r7
 800a0cc:	bc80      	pop	{r7}
 800a0ce:	4770      	bx	lr

0800a0d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800a0d0:	b580      	push	{r7, lr}
 800a0d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800a0d4:	f7f6 fcdc 	bl	8000a90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800a0d8:	bf00      	nop
 800a0da:	bd80      	pop	{r7, pc}

0800a0dc <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800a0dc:	b580      	push	{r7, lr}
 800a0de:	b084      	sub	sp, #16
 800a0e0:	af00      	add	r7, sp, #0
 800a0e2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800a0e4:	4b11      	ldr	r3, [pc, #68]	; (800a12c <_sbrk+0x50>)
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d102      	bne.n	800a0f2 <_sbrk+0x16>
		heap_end = &end;
 800a0ec:	4b0f      	ldr	r3, [pc, #60]	; (800a12c <_sbrk+0x50>)
 800a0ee:	4a10      	ldr	r2, [pc, #64]	; (800a130 <_sbrk+0x54>)
 800a0f0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800a0f2:	4b0e      	ldr	r3, [pc, #56]	; (800a12c <_sbrk+0x50>)
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800a0f8:	4b0c      	ldr	r3, [pc, #48]	; (800a12c <_sbrk+0x50>)
 800a0fa:	681a      	ldr	r2, [r3, #0]
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	4413      	add	r3, r2
 800a100:	466a      	mov	r2, sp
 800a102:	4293      	cmp	r3, r2
 800a104:	d907      	bls.n	800a116 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800a106:	f000 f881 	bl	800a20c <__errno>
 800a10a:	4602      	mov	r2, r0
 800a10c:	230c      	movs	r3, #12
 800a10e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800a110:	f04f 33ff 	mov.w	r3, #4294967295
 800a114:	e006      	b.n	800a124 <_sbrk+0x48>
	}

	heap_end += incr;
 800a116:	4b05      	ldr	r3, [pc, #20]	; (800a12c <_sbrk+0x50>)
 800a118:	681a      	ldr	r2, [r3, #0]
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	4413      	add	r3, r2
 800a11e:	4a03      	ldr	r2, [pc, #12]	; (800a12c <_sbrk+0x50>)
 800a120:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800a122:	68fb      	ldr	r3, [r7, #12]
}
 800a124:	4618      	mov	r0, r3
 800a126:	3710      	adds	r7, #16
 800a128:	46bd      	mov	sp, r7
 800a12a:	bd80      	pop	{r7, pc}
 800a12c:	200000a4 	.word	0x200000a4
 800a130:	20000e20 	.word	0x20000e20

0800a134 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800a134:	b480      	push	{r7}
 800a136:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800a138:	4b15      	ldr	r3, [pc, #84]	; (800a190 <SystemInit+0x5c>)
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	4a14      	ldr	r2, [pc, #80]	; (800a190 <SystemInit+0x5c>)
 800a13e:	f043 0301 	orr.w	r3, r3, #1
 800a142:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800a144:	4b12      	ldr	r3, [pc, #72]	; (800a190 <SystemInit+0x5c>)
 800a146:	685a      	ldr	r2, [r3, #4]
 800a148:	4911      	ldr	r1, [pc, #68]	; (800a190 <SystemInit+0x5c>)
 800a14a:	4b12      	ldr	r3, [pc, #72]	; (800a194 <SystemInit+0x60>)
 800a14c:	4013      	ands	r3, r2
 800a14e:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800a150:	4b0f      	ldr	r3, [pc, #60]	; (800a190 <SystemInit+0x5c>)
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	4a0e      	ldr	r2, [pc, #56]	; (800a190 <SystemInit+0x5c>)
 800a156:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800a15a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a15e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800a160:	4b0b      	ldr	r3, [pc, #44]	; (800a190 <SystemInit+0x5c>)
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	4a0a      	ldr	r2, [pc, #40]	; (800a190 <SystemInit+0x5c>)
 800a166:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a16a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800a16c:	4b08      	ldr	r3, [pc, #32]	; (800a190 <SystemInit+0x5c>)
 800a16e:	685b      	ldr	r3, [r3, #4]
 800a170:	4a07      	ldr	r2, [pc, #28]	; (800a190 <SystemInit+0x5c>)
 800a172:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800a176:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 800a178:	4b05      	ldr	r3, [pc, #20]	; (800a190 <SystemInit+0x5c>)
 800a17a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800a17e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800a180:	4b05      	ldr	r3, [pc, #20]	; (800a198 <SystemInit+0x64>)
 800a182:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800a186:	609a      	str	r2, [r3, #8]
#endif 
}
 800a188:	bf00      	nop
 800a18a:	46bd      	mov	sp, r7
 800a18c:	bc80      	pop	{r7}
 800a18e:	4770      	bx	lr
 800a190:	40021000 	.word	0x40021000
 800a194:	f8ff0000 	.word	0xf8ff0000
 800a198:	e000ed00 	.word	0xe000ed00

0800a19c <KEY0_to_skip>:
#include "util.h"

#define KEY0_Pin GPIO_PIN_5
#define KEY0_GPIO_Port GPIOC

void KEY0_to_skip(void){
 800a19c:	b580      	push	{r7, lr}
 800a19e:	af00      	add	r7, sp, #0
	while(1){
			if(HAL_GPIO_ReadPin(KEY0_GPIO_Port, KEY0_Pin) == GPIO_PIN_RESET){break;}
 800a1a0:	2120      	movs	r1, #32
 800a1a2:	4806      	ldr	r0, [pc, #24]	; (800a1bc <KEY0_to_skip+0x20>)
 800a1a4:	f7f6 ff00 	bl	8000fa8 <HAL_GPIO_ReadPin>
 800a1a8:	4603      	mov	r3, r0
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d003      	beq.n	800a1b6 <KEY0_to_skip+0x1a>
			else{HAL_Delay(10);}
 800a1ae:	200a      	movs	r0, #10
 800a1b0:	f7f6 fc8a 	bl	8000ac8 <HAL_Delay>
			if(HAL_GPIO_ReadPin(KEY0_GPIO_Port, KEY0_Pin) == GPIO_PIN_RESET){break;}
 800a1b4:	e7f4      	b.n	800a1a0 <KEY0_to_skip+0x4>
 800a1b6:	bf00      	nop
		}
}
 800a1b8:	bf00      	nop
 800a1ba:	bd80      	pop	{r7, pc}
 800a1bc:	40011000 	.word	0x40011000

0800a1c0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800a1c0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800a1c2:	e003      	b.n	800a1cc <LoopCopyDataInit>

0800a1c4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800a1c4:	4b0b      	ldr	r3, [pc, #44]	; (800a1f4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800a1c6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800a1c8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800a1ca:	3104      	adds	r1, #4

0800a1cc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800a1cc:	480a      	ldr	r0, [pc, #40]	; (800a1f8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800a1ce:	4b0b      	ldr	r3, [pc, #44]	; (800a1fc <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800a1d0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800a1d2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800a1d4:	d3f6      	bcc.n	800a1c4 <CopyDataInit>
  ldr r2, =_sbss
 800a1d6:	4a0a      	ldr	r2, [pc, #40]	; (800a200 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800a1d8:	e002      	b.n	800a1e0 <LoopFillZerobss>

0800a1da <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800a1da:	2300      	movs	r3, #0
  str r3, [r2], #4
 800a1dc:	f842 3b04 	str.w	r3, [r2], #4

0800a1e0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800a1e0:	4b08      	ldr	r3, [pc, #32]	; (800a204 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800a1e2:	429a      	cmp	r2, r3
  bcc FillZerobss
 800a1e4:	d3f9      	bcc.n	800a1da <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800a1e6:	f7ff ffa5 	bl	800a134 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800a1ea:	f000 f815 	bl	800a218 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800a1ee:	f7fe fd01 	bl	8008bf4 <main>
  bx lr
 800a1f2:	4770      	bx	lr
  ldr r3, =_sidata
 800a1f4:	0800bc60 	.word	0x0800bc60
  ldr r0, =_sdata
 800a1f8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800a1fc:	20000084 	.word	0x20000084
  ldr r2, =_sbss
 800a200:	20000084 	.word	0x20000084
  ldr r3, = _ebss
 800a204:	20000e20 	.word	0x20000e20

0800a208 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800a208:	e7fe      	b.n	800a208 <ADC1_2_IRQHandler>
	...

0800a20c <__errno>:
 800a20c:	4b01      	ldr	r3, [pc, #4]	; (800a214 <__errno+0x8>)
 800a20e:	6818      	ldr	r0, [r3, #0]
 800a210:	4770      	bx	lr
 800a212:	bf00      	nop
 800a214:	20000020 	.word	0x20000020

0800a218 <__libc_init_array>:
 800a218:	b570      	push	{r4, r5, r6, lr}
 800a21a:	2500      	movs	r5, #0
 800a21c:	4e0c      	ldr	r6, [pc, #48]	; (800a250 <__libc_init_array+0x38>)
 800a21e:	4c0d      	ldr	r4, [pc, #52]	; (800a254 <__libc_init_array+0x3c>)
 800a220:	1ba4      	subs	r4, r4, r6
 800a222:	10a4      	asrs	r4, r4, #2
 800a224:	42a5      	cmp	r5, r4
 800a226:	d109      	bne.n	800a23c <__libc_init_array+0x24>
 800a228:	f000 f8ca 	bl	800a3c0 <_init>
 800a22c:	2500      	movs	r5, #0
 800a22e:	4e0a      	ldr	r6, [pc, #40]	; (800a258 <__libc_init_array+0x40>)
 800a230:	4c0a      	ldr	r4, [pc, #40]	; (800a25c <__libc_init_array+0x44>)
 800a232:	1ba4      	subs	r4, r4, r6
 800a234:	10a4      	asrs	r4, r4, #2
 800a236:	42a5      	cmp	r5, r4
 800a238:	d105      	bne.n	800a246 <__libc_init_array+0x2e>
 800a23a:	bd70      	pop	{r4, r5, r6, pc}
 800a23c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a240:	4798      	blx	r3
 800a242:	3501      	adds	r5, #1
 800a244:	e7ee      	b.n	800a224 <__libc_init_array+0xc>
 800a246:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a24a:	4798      	blx	r3
 800a24c:	3501      	adds	r5, #1
 800a24e:	e7f2      	b.n	800a236 <__libc_init_array+0x1e>
 800a250:	0800bc58 	.word	0x0800bc58
 800a254:	0800bc58 	.word	0x0800bc58
 800a258:	0800bc58 	.word	0x0800bc58
 800a25c:	0800bc5c 	.word	0x0800bc5c

0800a260 <memset>:
 800a260:	4603      	mov	r3, r0
 800a262:	4402      	add	r2, r0
 800a264:	4293      	cmp	r3, r2
 800a266:	d100      	bne.n	800a26a <memset+0xa>
 800a268:	4770      	bx	lr
 800a26a:	f803 1b01 	strb.w	r1, [r3], #1
 800a26e:	e7f9      	b.n	800a264 <memset+0x4>

0800a270 <rand>:
 800a270:	b538      	push	{r3, r4, r5, lr}
 800a272:	4b13      	ldr	r3, [pc, #76]	; (800a2c0 <rand+0x50>)
 800a274:	681c      	ldr	r4, [r3, #0]
 800a276:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a278:	b97b      	cbnz	r3, 800a29a <rand+0x2a>
 800a27a:	2018      	movs	r0, #24
 800a27c:	f000 f82c 	bl	800a2d8 <malloc>
 800a280:	4a10      	ldr	r2, [pc, #64]	; (800a2c4 <rand+0x54>)
 800a282:	4b11      	ldr	r3, [pc, #68]	; (800a2c8 <rand+0x58>)
 800a284:	63a0      	str	r0, [r4, #56]	; 0x38
 800a286:	e9c0 2300 	strd	r2, r3, [r0]
 800a28a:	4b10      	ldr	r3, [pc, #64]	; (800a2cc <rand+0x5c>)
 800a28c:	2201      	movs	r2, #1
 800a28e:	6083      	str	r3, [r0, #8]
 800a290:	230b      	movs	r3, #11
 800a292:	8183      	strh	r3, [r0, #12]
 800a294:	2300      	movs	r3, #0
 800a296:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800a29a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800a29c:	480c      	ldr	r0, [pc, #48]	; (800a2d0 <rand+0x60>)
 800a29e:	690a      	ldr	r2, [r1, #16]
 800a2a0:	694b      	ldr	r3, [r1, #20]
 800a2a2:	4350      	muls	r0, r2
 800a2a4:	4c0b      	ldr	r4, [pc, #44]	; (800a2d4 <rand+0x64>)
 800a2a6:	fb04 0003 	mla	r0, r4, r3, r0
 800a2aa:	fba2 2304 	umull	r2, r3, r2, r4
 800a2ae:	4403      	add	r3, r0
 800a2b0:	1c54      	adds	r4, r2, #1
 800a2b2:	f143 0500 	adc.w	r5, r3, #0
 800a2b6:	e9c1 4504 	strd	r4, r5, [r1, #16]
 800a2ba:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 800a2be:	bd38      	pop	{r3, r4, r5, pc}
 800a2c0:	20000020 	.word	0x20000020
 800a2c4:	abcd330e 	.word	0xabcd330e
 800a2c8:	e66d1234 	.word	0xe66d1234
 800a2cc:	0005deec 	.word	0x0005deec
 800a2d0:	5851f42d 	.word	0x5851f42d
 800a2d4:	4c957f2d 	.word	0x4c957f2d

0800a2d8 <malloc>:
 800a2d8:	4b02      	ldr	r3, [pc, #8]	; (800a2e4 <malloc+0xc>)
 800a2da:	4601      	mov	r1, r0
 800a2dc:	6818      	ldr	r0, [r3, #0]
 800a2de:	f000 b803 	b.w	800a2e8 <_malloc_r>
 800a2e2:	bf00      	nop
 800a2e4:	20000020 	.word	0x20000020

0800a2e8 <_malloc_r>:
 800a2e8:	b570      	push	{r4, r5, r6, lr}
 800a2ea:	1ccd      	adds	r5, r1, #3
 800a2ec:	f025 0503 	bic.w	r5, r5, #3
 800a2f0:	3508      	adds	r5, #8
 800a2f2:	2d0c      	cmp	r5, #12
 800a2f4:	bf38      	it	cc
 800a2f6:	250c      	movcc	r5, #12
 800a2f8:	2d00      	cmp	r5, #0
 800a2fa:	4606      	mov	r6, r0
 800a2fc:	db01      	blt.n	800a302 <_malloc_r+0x1a>
 800a2fe:	42a9      	cmp	r1, r5
 800a300:	d903      	bls.n	800a30a <_malloc_r+0x22>
 800a302:	230c      	movs	r3, #12
 800a304:	6033      	str	r3, [r6, #0]
 800a306:	2000      	movs	r0, #0
 800a308:	bd70      	pop	{r4, r5, r6, pc}
 800a30a:	f000 f857 	bl	800a3bc <__malloc_lock>
 800a30e:	4a21      	ldr	r2, [pc, #132]	; (800a394 <_malloc_r+0xac>)
 800a310:	6814      	ldr	r4, [r2, #0]
 800a312:	4621      	mov	r1, r4
 800a314:	b991      	cbnz	r1, 800a33c <_malloc_r+0x54>
 800a316:	4c20      	ldr	r4, [pc, #128]	; (800a398 <_malloc_r+0xb0>)
 800a318:	6823      	ldr	r3, [r4, #0]
 800a31a:	b91b      	cbnz	r3, 800a324 <_malloc_r+0x3c>
 800a31c:	4630      	mov	r0, r6
 800a31e:	f000 f83d 	bl	800a39c <_sbrk_r>
 800a322:	6020      	str	r0, [r4, #0]
 800a324:	4629      	mov	r1, r5
 800a326:	4630      	mov	r0, r6
 800a328:	f000 f838 	bl	800a39c <_sbrk_r>
 800a32c:	1c43      	adds	r3, r0, #1
 800a32e:	d124      	bne.n	800a37a <_malloc_r+0x92>
 800a330:	230c      	movs	r3, #12
 800a332:	4630      	mov	r0, r6
 800a334:	6033      	str	r3, [r6, #0]
 800a336:	f000 f842 	bl	800a3be <__malloc_unlock>
 800a33a:	e7e4      	b.n	800a306 <_malloc_r+0x1e>
 800a33c:	680b      	ldr	r3, [r1, #0]
 800a33e:	1b5b      	subs	r3, r3, r5
 800a340:	d418      	bmi.n	800a374 <_malloc_r+0x8c>
 800a342:	2b0b      	cmp	r3, #11
 800a344:	d90f      	bls.n	800a366 <_malloc_r+0x7e>
 800a346:	600b      	str	r3, [r1, #0]
 800a348:	18cc      	adds	r4, r1, r3
 800a34a:	50cd      	str	r5, [r1, r3]
 800a34c:	4630      	mov	r0, r6
 800a34e:	f000 f836 	bl	800a3be <__malloc_unlock>
 800a352:	f104 000b 	add.w	r0, r4, #11
 800a356:	1d23      	adds	r3, r4, #4
 800a358:	f020 0007 	bic.w	r0, r0, #7
 800a35c:	1ac3      	subs	r3, r0, r3
 800a35e:	d0d3      	beq.n	800a308 <_malloc_r+0x20>
 800a360:	425a      	negs	r2, r3
 800a362:	50e2      	str	r2, [r4, r3]
 800a364:	e7d0      	b.n	800a308 <_malloc_r+0x20>
 800a366:	684b      	ldr	r3, [r1, #4]
 800a368:	428c      	cmp	r4, r1
 800a36a:	bf16      	itet	ne
 800a36c:	6063      	strne	r3, [r4, #4]
 800a36e:	6013      	streq	r3, [r2, #0]
 800a370:	460c      	movne	r4, r1
 800a372:	e7eb      	b.n	800a34c <_malloc_r+0x64>
 800a374:	460c      	mov	r4, r1
 800a376:	6849      	ldr	r1, [r1, #4]
 800a378:	e7cc      	b.n	800a314 <_malloc_r+0x2c>
 800a37a:	1cc4      	adds	r4, r0, #3
 800a37c:	f024 0403 	bic.w	r4, r4, #3
 800a380:	42a0      	cmp	r0, r4
 800a382:	d005      	beq.n	800a390 <_malloc_r+0xa8>
 800a384:	1a21      	subs	r1, r4, r0
 800a386:	4630      	mov	r0, r6
 800a388:	f000 f808 	bl	800a39c <_sbrk_r>
 800a38c:	3001      	adds	r0, #1
 800a38e:	d0cf      	beq.n	800a330 <_malloc_r+0x48>
 800a390:	6025      	str	r5, [r4, #0]
 800a392:	e7db      	b.n	800a34c <_malloc_r+0x64>
 800a394:	200000a8 	.word	0x200000a8
 800a398:	200000ac 	.word	0x200000ac

0800a39c <_sbrk_r>:
 800a39c:	b538      	push	{r3, r4, r5, lr}
 800a39e:	2300      	movs	r3, #0
 800a3a0:	4c05      	ldr	r4, [pc, #20]	; (800a3b8 <_sbrk_r+0x1c>)
 800a3a2:	4605      	mov	r5, r0
 800a3a4:	4608      	mov	r0, r1
 800a3a6:	6023      	str	r3, [r4, #0]
 800a3a8:	f7ff fe98 	bl	800a0dc <_sbrk>
 800a3ac:	1c43      	adds	r3, r0, #1
 800a3ae:	d102      	bne.n	800a3b6 <_sbrk_r+0x1a>
 800a3b0:	6823      	ldr	r3, [r4, #0]
 800a3b2:	b103      	cbz	r3, 800a3b6 <_sbrk_r+0x1a>
 800a3b4:	602b      	str	r3, [r5, #0]
 800a3b6:	bd38      	pop	{r3, r4, r5, pc}
 800a3b8:	20000e1c 	.word	0x20000e1c

0800a3bc <__malloc_lock>:
 800a3bc:	4770      	bx	lr

0800a3be <__malloc_unlock>:
 800a3be:	4770      	bx	lr

0800a3c0 <_init>:
 800a3c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3c2:	bf00      	nop
 800a3c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a3c6:	bc08      	pop	{r3}
 800a3c8:	469e      	mov	lr, r3
 800a3ca:	4770      	bx	lr

0800a3cc <_fini>:
 800a3cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3ce:	bf00      	nop
 800a3d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a3d2:	bc08      	pop	{r3}
 800a3d4:	469e      	mov	lr, r3
 800a3d6:	4770      	bx	lr
